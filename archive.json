{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2022-03-31T01:34:34.570964+00:00",
  "repo": "httpwg/http2-spec",
  "labels": [
    {
      "name": "design",
      "description": null,
      "color": "207de5"
    },
    {
      "name": "editorial",
      "description": null,
      "color": "009800"
    },
    {
      "name": "editor-ready",
      "description": null,
      "color": "009800"
    },
    {
      "name": "frame layout",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "streams",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "header compression",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "upgrade",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "server push",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "flow control",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "prioritisation",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "frame semantics",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "HTTP mapping",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "security",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "transport mapping",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "liaison",
      "description": null,
      "color": "5319e7"
    },
    {
      "name": "non-blocking",
      "description": null,
      "color": "dddddd"
    },
    {
      "name": "alt-svc",
      "description": null,
      "color": "fbca04"
    },
    {
      "name": "has-proposal",
      "description": null,
      "color": "c7def8"
    },
    {
      "name": "revisit-upon-change",
      "description": null,
      "color": "d4c5f9"
    },
    {
      "name": "writeup",
      "description": null,
      "color": "eb6420"
    },
    {
      "name": "RFC-editor",
      "description": null,
      "color": "eb6420"
    },
    {
      "name": "auth48",
      "description": null,
      "color": "b6d7a8"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "MDU6SXNzdWUxMDcyMTgxOA==",
      "title": "Upgrade Mechanism",
      "url": "https://github.com/httpwg/http2-spec/issues/1",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "upgrade"
      ],
      "body": "This is a tracking ticket for issues related to the mechanism for upgrading from HTTP/1.x.\n\nAs per our charter, this is:\n\nA negotiation mechanism that is capable of not only choosing between HTTP/1.x and HTTP/2.x, but also for bindings of HTTP URLs to other transports (for example).\n",
      "createdAt": "2013-02-07T02:38:29Z",
      "updatedAt": "2014-03-05T16:52:17Z",
      "closedAt": "2014-03-05T16:52:17Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Current plan:\n1. HTTPS URLs\n   - use NPN (or its replacement); uses OPAQUE TOKEN to negotiate\n   - then send magic + SETTINGS\n2. HTTP URLs\n   a. existing connection / new connection without context\n       - Upgrade Dance; uses OPAQUE TOKEN to negotiate\n       - then send magic + SETTINGS\n   \n   b. new connection with context (e.g., because you used DNS hint, header hint, prior knowledge)\n   - NO upgrade dance\n   - first send magic + SETTINGS\n",
          "createdAt": "2013-02-27T05:44:21Z",
          "updatedAt": "2013-02-27T05:44:21Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussions seem to have converged; closing this tracking issue (although more specific issues may still be open).\n",
          "createdAt": "2014-03-05T16:52:17Z",
          "updatedAt": "2014-03-05T16:52:17Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "MDU6SXNzdWUxMDcyMTkwNA==",
      "title": "Header Compression",
      "url": "https://github.com/httpwg/http2-spec/issues/2",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "This is a tracking ticket for issues related to HTTP/2.0 header compression.\n\nSee also:\n\n\u200bhttp://trac.tools.ietf.org/wg/httpbis/trac/wiki/HTTP2Compression\n",
      "createdAt": "2013-02-07T02:42:47Z",
      "updatedAt": "2013-07-03T23:50:41Z",
      "closedAt": "2013-07-03T23:50:41Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; agreed to adopt Roberto and Herve's draft as basis of header compression for implementation draft 1. Will adopt as WG draft and change syntax of ACK.\n",
          "createdAt": "2013-06-13T21:04:01Z",
          "updatedAt": "2013-06-13T21:04:01Z"
        },
        {
          "author": "brianraymor",
          "authorAssociation": "NONE",
          "body": "Need to clarify that Section 5 Parameter Negotiation in http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-00 is NOT targeted for -04.\n",
          "createdAt": "2013-06-26T20:33:13Z",
          "updatedAt": "2013-06-26T20:33:13Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closing, as we've adopted as a WG draft. Brian, if you need to, please open an issue in its repository.\n",
          "createdAt": "2013-07-03T23:50:41Z",
          "updatedAt": "2013-07-03T23:50:41Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "MDU6SXNzdWUxMDcyMTkxMA==",
      "title": "Server Push",
      "url": "https://github.com/httpwg/http2-spec/issues/3",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "This is a tracking ticket for issues related to Server Push. From our charter:\n\nAs part of the HTTP/2.0 work, the following issues are explicitly called out for consideration [...] Server push (which may encompass pull or other techniques)\n",
      "createdAt": "2013-02-07T02:43:09Z",
      "updatedAt": "2014-03-03T13:54:12Z",
      "closedAt": "2013-05-29T12:20:38Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This item covers #36 (push promise), #24 (cacheability of push).\n",
          "createdAt": "2013-03-11T20:31:56Z",
          "updatedAt": "2013-03-11T20:31:56Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closing; tracking with tags for now.\n",
          "createdAt": "2013-05-29T12:20:38Z",
          "updatedAt": "2013-05-29T12:20:38Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWUxMDcyMTkyMA==",
      "title": "Outdated References",
      "url": "https://github.com/httpwg/http2-spec/issues/4",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "RFC1738: [PROPOSED STANDARD] obsoleted by RFC4248 RFC4266\n\nRFC4366: [PROPOSED STANDARD] obsoleted by RFC5246 RFC6066\n\ndraft-agl-tls-nextprotoneg-01: Alternate version available: 04\n",
      "createdAt": "2013-02-07T02:43:31Z",
      "updatedAt": "2013-02-21T23:22:15Z",
      "closedAt": "2013-02-21T23:22:15Z",
      "comments": []
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWUxMDcyMTkyNw==",
      "title": "Flow Control",
      "url": "https://github.com/httpwg/http2-spec/issues/5",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "SPDY has a flow control mechanism; we need to review this and consider whether we need flow control at all, whether this is the right approach, whether we should accommodate pluggable flow control, etc.\n\nGabriel et al have done a draft discussing initial considerations and proposing a framework for the discussion:\n\n\u200bhttp://tools.ietf.org/html/draft-montenegro-httpbis-http2-fc-principles\n",
      "createdAt": "2013-02-07T02:43:53Z",
      "updatedAt": "2013-02-25T23:34:30Z",
      "closedAt": "2013-02-18T01:48:07Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Flow Control principles incorporated.\n",
          "createdAt": "2013-02-18T01:48:07Z",
          "updatedAt": "2013-02-18T01:48:07Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "MDU6SXNzdWUxMDcyMTkzMw==",
      "title": "Frame Sizes",
      "url": "https://github.com/httpwg/http2-spec/issues/6",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready"
      ],
      "body": "Some implementers have expressed interest in defining a variety of payload frame sizes, e.g., to assist with doing sendfile().\n",
      "createdAt": "2013-02-07T02:44:07Z",
      "updatedAt": "2013-06-21T17:49:27Z",
      "closedAt": "2013-06-21T17:49:27Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We discussed this in Tokyo and concluded that 64K (16bit) would be provided.  Discussion on maximum size (and whether that is negotiated) continues on #28.  Can we consider this resolved, or would that be premature?\n",
          "createdAt": "2013-03-11T20:34:11Z",
          "updatedAt": "2013-03-11T20:34:11Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Yes. For the purposes of the 1st implementation draft, we decided on 16 bits.\n",
          "createdAt": "2013-03-18T06:15:37Z",
          "updatedAt": "2013-03-18T06:15:37Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed more at SF Interim; want 14 bits + 2 bits reserved (protocol error if non-zero).\n",
          "createdAt": "2013-06-13T20:24:39Z",
          "updatedAt": "2013-06-13T20:24:39Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "two reserved bits should be reserved at HTTP layer, not stream layer.\n",
          "createdAt": "2013-06-14T19:14:28Z",
          "updatedAt": "2013-06-14T19:14:28Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "MDU6SXNzdWUxMDcyMTk0MA==",
      "title": "Prioritisation",
      "url": "https://github.com/httpwg/http2-spec/issues/7",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "prioritisation"
      ],
      "body": "The prioritisation mechanism has been flagged for discussion; may not be immediate, as we need more deployment experience.\n",
      "createdAt": "2013-02-07T02:44:28Z",
      "updatedAt": "2013-06-14T17:10:04Z",
      "closedAt": "2013-06-14T17:10:04Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@grmocg and @willchan suggested that stream prioritization might change over time.\n\nExamples:\n1. Requests that were made for a browser tab that moves to or from the foreground.\n2. Requests for progressive images that could be de-prioritized once either headers or a low resolution layer was received.\n\nThere was some skepticism about the benefits of this.\n",
          "createdAt": "2013-02-22T00:23:53Z",
          "updatedAt": "2013-02-22T00:23:53Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "MDU6SXNzdWUxMDcyMTk0Nw==",
      "title": "SETTINGS persistence",
      "url": "https://github.com/httpwg/http2-spec/issues/8",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics",
        "security"
      ],
      "body": "From the SPDY draft:\n\n\"\"A SETTINGS frame [...]. When the server is the sender, the sender can request that configuration data be persisted by the client across SPDY sessions and returned to the server in future communications.\"\"\n\nThe concern here is that this provides another mechanism by which servers are able to track clients.\n\nSee also \u200bhttp://lists.w3.org/Archives/Public/ietf-http-wg/2012OctDec/0495.html\n",
      "createdAt": "2013-02-07T02:44:50Z",
      "updatedAt": "2013-06-18T17:58:15Z",
      "closedAt": "2013-06-18T17:58:15Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; general feeling is that settings persisitence is not the best way to achieve the goal (DoS mitigation). James to propose a new \"reconnect with last settings\" GOAWAY flag; Gabriel to look into ALPN settings communication (as well as Upgrade).\n",
          "createdAt": "2013-06-13T19:17:01Z",
          "updatedAt": "2013-06-13T19:17:01Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "... however, it WOULD be required for CWND setting (if we choose to re-add it).\n",
          "createdAt": "2013-06-14T18:57:07Z",
          "updatedAt": "2013-06-14T18:57:07Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Remove settings persistence.\n",
          "createdAt": "2013-06-14T20:33:50Z",
          "updatedAt": "2013-06-14T20:33:50Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "MDU6SXNzdWUxMDcyMTk1MQ==",
      "title": "Unused references",
      "url": "https://github.com/httpwg/http2-spec/issues/9",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The following references aren't used and should be removed:\n\nRFC2285, RFC4366, TLSNPN\n",
      "createdAt": "2013-02-07T02:45:10Z",
      "updatedAt": "2013-02-21T23:24:38Z",
      "closedAt": "2013-02-21T23:24:38Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Was in -00.\n",
          "createdAt": "2013-02-21T23:24:38Z",
          "updatedAt": "2013-02-21T23:24:38Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "MDU6SXNzdWUxMDcyMTk1NA==",
      "title": "decide what references are normative and which are not",
      "url": "https://github.com/httpwg/http2-spec/issues/10",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2013-02-07T02:45:21Z",
      "updatedAt": "2013-05-29T20:41:29Z",
      "closedAt": "2013-05-29T20:41:29Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Aside from [UDELCOMPRESSION], which is going to disappear when we get the delta encoding stuff in, the set of references look pretty normative.  \n\nWe do need to lose the RFC 2616 reference in favour of the httpbis drafts, but that might wait.\n",
          "createdAt": "2013-02-21T23:26:44Z",
          "updatedAt": "2013-02-21T23:26:44Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to close this one.  This is always going to be necessary, but what we have looks sane.  Some of the 1.1 references are marked normative when we don't really rely on them, but I see no harm in that as it stands.\n",
          "createdAt": "2013-05-29T20:41:29Z",
          "updatedAt": "2013-05-29T20:41:29Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "MDU6SXNzdWUxMTEwMDg2Nw==",
      "title": "Registry of opaque strings for negotiation",
      "url": "https://github.com/httpwg/http2-spec/issues/12",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "upgrade"
      ],
      "body": "Eliot Lear was given an AI in Tokyo to propose text for a registry of tokens that could be used to identify things to upgrade to, in places like the Upgrade \"dance\", NPN, DNS, etc.\n",
      "createdAt": "2013-02-18T01:41:25Z",
      "updatedAt": "2013-10-10T21:11:42Z",
      "closedAt": "2013-10-10T21:11:42Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Pinging @pigdog234 \n",
          "createdAt": "2013-02-21T07:24:35Z",
          "updatedAt": "2013-02-21T07:24:35Z"
        },
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "@mnot pong\n",
          "createdAt": "2013-02-21T09:21:12Z",
          "updatedAt": "2013-02-21T09:21:12Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Hamburg; this is really a tracking issue for the ALPN negotiation token registry.\n",
          "createdAt": "2013-08-05T09:58:53Z",
          "updatedAt": "2013-08-05T09:58:53Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The ALPN draft has a good registry in the latest (-02) version.  Closing this.\n",
          "createdAt": "2013-10-10T21:11:42Z",
          "updatedAt": "2013-10-10T21:11:42Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "MDU6SXNzdWUxMTEwMDkxMQ==",
      "title": "Frame Layout Changes",
      "url": "https://github.com/httpwg/http2-spec/issues/13",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "grmocg"
      ],
      "labels": [
        "design"
      ],
      "body": "As discussed in Tokyo:\n- uniform length / alignment\n- remove version\n- rearrange/resize - length 16 / type|opcode 8 / flags 8 / C 1 / sid 31 \n- push promise control frame\n- 32bit priority (1st reserved)\n",
      "createdAt": "2013-02-18T01:45:21Z",
      "updatedAt": "2013-03-04T21:40:43Z",
      "closedAt": "2013-03-04T21:40:43Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Look at https://github.com/http2/http2-spec/commit/0d0e0ed056a4578107cd5cc90484dd57cde089de\n\nI didn't do the push promise, I'll separate that issue out.\n",
          "createdAt": "2013-02-20T01:35:32Z",
          "updatedAt": "2013-02-20T01:35:32Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I can't really; there's too much going on there.\n\n@grmocg is everything from your proposal in? If so, will close.\n",
          "createdAt": "2013-02-20T23:38:22Z",
          "updatedAt": "2013-02-20T23:38:22Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes. please close.\n",
          "createdAt": "2013-03-04T21:35:55Z",
          "updatedAt": "2013-03-04T21:35:55Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "MDU6SXNzdWUxMTEwMDkyMA==",
      "title": "Mark settings persistence as \"at risk\"",
      "url": "https://github.com/httpwg/http2-spec/issues/14",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "editorial"
      ],
      "body": "As discussed in Tokyo.\n",
      "createdAt": "2013-02-18T01:46:11Z",
      "updatedAt": "2013-02-25T23:34:31Z",
      "closedAt": "2013-02-20T01:34:34Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Alexey already did this one: https://github.com/http2/http2-spec/commit/32cd04599687c5f015cc1cbcf0168f2cfc3d3d6f\n",
          "createdAt": "2013-02-20T01:34:34Z",
          "updatedAt": "2013-02-20T01:34:34Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "MDU6SXNzdWUxMTEwMDkzMw==",
      "title": "Settings sent first is mandatory",
      "url": "https://github.com/httpwg/http2-spec/issues/15",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "mnot"
      ],
      "labels": [
        "design"
      ],
      "body": "Say that the settings frame is mandatory to send first, as proposed in Tokyo.\n",
      "createdAt": "2013-02-18T01:47:08Z",
      "updatedAt": "2013-02-25T23:34:31Z",
      "closedAt": "2013-02-20T23:36:22Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is in with https://github.com/http2/http2-spec/commit/0d0e0ed056a4578107cd5cc90484dd57cde089de\n",
          "createdAt": "2013-02-20T01:33:41Z",
          "updatedAt": "2013-02-20T01:33:41Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "OK, trusting you I suppose. :)\n",
          "createdAt": "2013-02-20T23:36:22Z",
          "updatedAt": "2013-02-20T23:36:22Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "MDU6SXNzdWUxMTEwMDk1Mw==",
      "title": "Session Level Flow Control",
      "url": "https://github.com/httpwg/http2-spec/issues/16",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "We're waiting for a proposal from Will Chan WRT session-level flow control.\n",
      "createdAt": "2013-02-18T01:48:32Z",
      "updatedAt": "2013-02-25T23:34:31Z",
      "closedAt": "2013-02-20T23:27:18Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closing; we can open new issues if found.\n",
          "createdAt": "2013-02-20T23:27:18Z",
          "updatedAt": "2013-02-20T23:27:18Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWUxMTEwMDk2MA==",
      "title": "RST_STREAM / GOAWAY opaque data",
      "url": "https://github.com/httpwg/http2-spec/issues/17",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics"
      ],
      "body": "In Tokyo, there was discussion of whether it would be useful to allow opaque data in RST_STREAM and GOAWAY. Waiting for a full proposal.\n",
      "createdAt": "2013-02-18T01:49:25Z",
      "updatedAt": "2013-07-31T15:08:36Z",
      "closedAt": "2013-07-31T15:08:36Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe the default for these ought to be not to include opaque data, however, a frame specific flag could be used to indicate additional data. e.g. add an ADDITIONAL_DATA (0x2) flag. If the flag is not set, additional data is ignored or treated like a protocol error.\n",
          "createdAt": "2013-06-12T17:36:43Z",
          "updatedAt": "2013-06-12T17:36:43Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it'd be useful to allow opaque data. I'm not going to bother fighting for my bike shed color, but if I were to pick, I'd just use the length field. I don't think a flag really gains us anything, except more cases in our code that need to be specified as ignored/error.\n",
          "createdAt": "2013-06-12T18:06:42Z",
          "updatedAt": "2013-06-12T18:06:42Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; will put into implementation draft but mark AT RISK. Hasan to help with text. \n",
          "createdAt": "2013-06-13T17:53:04Z",
          "updatedAt": "2013-06-13T17:53:04Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "MDU6SXNzdWUxMTEwMDk2NQ==",
      "title": "Handling Expect/continue",
      "url": "https://github.com/httpwg/http2-spec/issues/18",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "mnot"
      ],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "We need to give advice on how proxies, etc. should handle Expect/continue interactions.\n",
      "createdAt": "2013-02-18T01:50:08Z",
      "updatedAt": "2013-11-25T17:21:40Z",
      "closedAt": "2013-11-25T17:21:40Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is marked for the first implementable draft.  @mnot do you still plan to submit a text proposal?\n",
          "createdAt": "2013-06-10T22:59:38Z",
          "updatedAt": "2013-06-10T22:59:38Z"
        },
        {
          "author": "michaelrsweet",
          "authorAssociation": "NONE",
          "body": "From my posts to the HTTP mailing list:\n\nThis is something that gets used extensively in printing to avoid sending gigabytes of print data to a printer that needs authentication for certain operations...  Perhaps something to add to section 8.1.1, e.g.:\n\nUse of Expect with 100 (Continue) response:\n\n```\nPOST /ipp/print HTTP/1.1            HEADERS\nHost; printer.example.org      ==>    - END_STREAM\nContent-Type: application/ipp         + END_HEADERS\nTransfer-Encoding: chunked              :method = post\nExpect: 100-continue                    :scheme = ipp\n                                        :host = printer.example.org\n                                        :path = /ipp/print\n                                        content-type = application/ipp\n                                        expect = 100-continue\n\nHTTP/1.1 100 Continue          ==>  HEADERS\n                                      - END_STREAM\n                                      + END_HEADERS\n                                        :status = 100\n\n{binary data from client}      ==>  DATA\n                                      + END_STREAM\n                                        {binary data}\n\nHTTP/1.1 200 OK                ==>  HEADERS\nContent-Type: application/ipp         - END_STREAM\nTransfer-Encoding: chunked            + END_HEADERS\n                                        :status = 200\n{binary data from server}               content-type = application/ipp\n\n                                    DATA\n                                      + END_STREAM\n                                        {binary data}\n```\n\nFailed response needing authentication:\n\n```\nPOST /ipp/print HTTP/1.1            HEADERS\nHost; printer.example.org      ==>    - END_STREAM\nContent-Type: application/ipp         + END_HEADERS\nTransfer-Encoding: chunked              :method = post\nExpect: 100-continue                    :scheme = ipp\n                                        :host = printer.example.org\n                                        :path = /ipp/print\n                                        content-type = application/ipp\n                                        expect = 100-continue\n\nHTTP/1.1 401 Unauthorized      ==>  HEADERS\nContent-Type: text/html               - END_STREAM\nContent-Length: 123                   + END_HEADERS\nWWW-Authenticate: Basic ...             :status = 401\n                                        www-authenticate = Basic ...\n{HTML error message from server}\n```\n\nThen we'd also need a clarification in section 8.1.3 to allow a single HEADERS response frame with :status = 100.\n",
          "createdAt": "2013-07-09T20:35:14Z",
          "updatedAt": "2013-07-09T20:35:14Z"
        },
        {
          "author": "michaelrsweet",
          "authorAssociation": "NONE",
          "body": "An alternative is to simply do away with it and have the server respond as soon as it wants with the 401 status - with flow control the client won't get too far ahead of the server, and with streams we don't have to deal with the expense of closing the connection and bringing a new one up (something that you need to do with HTTP/1.1 if Expect isn't supported by the server...)\n\nEither way we should say something about it to give guidance/recommendations on HTTP/1.1 solutions that are adding support for HTTP/2.0...\n",
          "createdAt": "2013-07-09T20:35:41Z",
          "updatedAt": "2013-07-09T20:35:41Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See pull request on #264; think that one will close this too.\n",
          "createdAt": "2013-11-25T05:55:05Z",
          "updatedAt": "2013-11-25T05:55:05Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "MDU6SXNzdWUxMTEwMTA0MA==",
      "title": "Clarify that max-streams is per-direction",
      "url": "https://github.com/httpwg/http2-spec/issues/19",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Current text:\n\n```\n    SETTINGS_MAX_CONCURRENT_STREAMS allows the sender to inform\n    the remote endpoint the maximum number of concurrent streams\n    which it will allow.  By default there is no limit.  For\n    implementors it is recommended that this value be no smaller\n    than 100.\n```\n\nIt's the same text as we've had in SPDY/2, and our SPDY/4 draft is the\nsame. This wording is technically correct, but it does not\nparticularly emphasize that the limit is directional. I can imagine\nfirst time readers misinterpreting it.\n",
      "createdAt": "2013-02-18T01:56:56Z",
      "updatedAt": "2013-02-25T23:34:31Z",
      "closedAt": "2013-02-19T23:10:46Z",
      "comments": []
    },
    {
      "number": 20,
      "id": "MDU6SXNzdWUxMTEwMTA0Ng==",
      "title": "Clarify how to turn push off (from either side)",
      "url": "https://github.com/httpwg/http2-spec/issues/20",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Set max stream limit to 0 for that endpoint.\n",
      "createdAt": "2013-02-18T01:57:42Z",
      "updatedAt": "2013-03-13T18:22:06Z",
      "closedAt": "2013-03-11T20:27:31Z",
      "comments": [
        {
          "author": "aamelnikov",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this was addressed in 3469dced2e467c5206fb5b3e705bf699c4d4fa5d\n",
          "createdAt": "2013-03-11T01:54:46Z",
          "updatedAt": "2013-03-11T01:54:46Z"
        },
        {
          "author": "aamelnikov",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed in git\n",
          "createdAt": "2013-03-13T18:22:06Z",
          "updatedAt": "2013-03-13T18:22:06Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "MDU6SXNzdWUxMTEwMTE1Ng==",
      "title": "Hop-by-Hop Headers",
      "url": "https://github.com/httpwg/http2-spec/issues/21",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "mnot"
      ],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "In http/1.x, trailers are negotiated for with hop-by-hop headers (and, therefore, semantics). Should this continue in HTTP/2.x?\n\nWithout TE: Trailers, we could effectively get rid of hop-by-hop headers in HTTP/2. E.g., the Connection header could be forced to be dropped, and not forced to be processed. All semantics of hop-by-hop headers are forced into the framing layer.\n",
      "createdAt": "2013-02-18T02:05:53Z",
      "updatedAt": "2014-02-03T18:05:21Z",
      "closedAt": "2014-02-03T18:05:21Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; mnot to dig in and ascertain whether there's an issue here.\n",
          "createdAt": "2013-06-14T17:40:06Z",
          "updatedAt": "2013-06-14T17:40:06Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Trailers are addressed in layering branch.  They are always allowed without TE but are optional.  Whether a receiver is required to pay attention to them is an open question. \n",
          "createdAt": "2013-07-03T08:33:59Z",
          "updatedAt": "2013-07-03T08:33:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that I added `TE` to the list of prohibited headers in the last edit.  I think that it is up to @mnot to simply check that we haven't missed something important here.  See fbf6a1032660523fe13ae413b5ccf4a853641ca4\n",
          "createdAt": "2013-08-09T16:02:47Z",
          "updatedAt": "2013-08-09T16:14:14Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Current text:\n\n```\nAn HTTP/2.0 request or response MUST NOT include any of the following header fields: \nConnection, Keep-Alive, Proxy-Connection, TE, Transfer-Encoding, and Upgrade. A \nrequest or response containing these header fields MUST be treated as malformed \n(Section 8.1.3.5).\n```\n\nReplacement text:\n\n```\nHTTP/2.0 does not use the Connection header field to indicate \"hop-by-hop\" header fields;\nin this protocol, connection-specific metadata is conveyed by other means. As such, a \nHTTP/2.0 message containing Connection MUST be treated as malformed (Section 8.1.3.5).\n\nThis means that an intermediary transforming a HTTP/1.x message to\nHTTP/2.0 will need to remove any header fields nominated by the Connection header field,\nalong with the Connection header field itself. Such intermediaries SHOULD also remove \nother connection-specific header fields, such as Keep-Alive, Proxy-Connection, TE, \nTransfer-Encoding and Upgrade, even if they are not nominated by Connection.\n```\n",
          "createdAt": "2013-12-13T04:27:14Z",
          "updatedAt": "2013-12-13T04:27:14Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Note that this doesn't allow a client to state that they will honour trailers, meaning that the ONLY option for trailers in HTTP/2 would be that they're completely optional. \n\nSee: \n  https://svn.tools.ietf.org/svn/wg/httpbis/draft-ietf-httpbis/latest/p1-messaging.html#chunked.trailer.part\n\nIf we're going to stay with that, we need to explicitly document the loss of capability.\n\nOther option would be to allow TE but **only** with the value \"trailers\". However, that'd need to be deleted as a hop-by-hop header. \n\nPersonally, I think I'm OK losing the capability. YMMV.\n",
          "createdAt": "2013-12-13T04:35:12Z",
          "updatedAt": "2013-12-13T04:35:12Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding TE:Trailers, I agree.\n\nHowever, I would like to understand the rationale for the SHOULD over MUST?  Does this just come down to an allowance for lazy intermediaries?  If so, why not use the \"MUST NOT ..., unless ...\" form?\n\n(You could have generated a pull request in the same amount of time, you know.)\n",
          "createdAt": "2013-12-13T18:21:19Z",
          "updatedAt": "2013-12-13T18:21:19Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Well, strictly if those headers are present but not in Connection, the message is non-conformant -- this is just asking intermediaries to do the friendly thing. \n\nUpon some reflection, I think we can special-case TE: trailers without requiring intermediaries to delete it; I think all bases are covered:\n- If it's a HTTP/1->HTTP/2 intermediary, the TE header is removed as per HTTP/1\n- If it's a HTTP/2->HTTP/1 intermediary, the proxy can safely forward TE: trailers and the right thing will happen (because trailers can always be serialised)\n- If it's a HTTP/2->HTTP/2 intermediary, same as above.\n\nSo, I'm going to do a pull request, with language to that effect.\n",
          "createdAt": "2014-01-31T03:17:14Z",
          "updatedAt": "2014-01-31T03:17:14Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "MDU6SXNzdWUxMTEwMTE4OA==",
      "title": "Indicating the end of a header block",
      "url": "https://github.com/httpwg/http2-spec/issues/22",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "HTTP/2 currently allows for multiple sets of headers. However, it was asserted in Tokyo that data on the same stream could race the header blocks, so seeing a data frame on a stream is not necessarily an indication that the headers are complete.\n",
      "createdAt": "2013-02-18T02:08:18Z",
      "updatedAt": "2013-07-31T14:48:37Z",
      "closedAt": "2013-07-31T14:48:37Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Ordering is guaranteed, so I'm not sure what the race would be.  We can guarantee that headers are sent before data.\n\nI originally thought that this issue was required simply because our maximum frame size is now too small for headers to fit into a single frame.  @grmocg noted that his solution for #2 would require a continuation bit, which could fit the bill here.\n\nThat doesn't account for the fact that multiple blocks of headers could be sent at any time.  We probably need to agree on what the semantics of that would be and what constraints we want to apply.  The draft says something about having multiple header blocks for push, which seems necessary.  It doesn't say anything about what HEADERS frames mean during or after the data frames are sent.\n",
          "createdAt": "2013-03-10T19:30:10Z",
          "updatedAt": "2013-03-10T19:30:10Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Yes, the race confused me too. @grmocg - any further thoughts?\n\nThe most straightforward thing to say would be that all header blocks before the first data block on a stream have the same semantics as the HTTP/1 header block; anything afterwards is considered a trailer.\n",
          "createdAt": "2013-03-18T21:27:02Z",
          "updatedAt": "2013-03-18T21:27:02Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are some issues when deploying over SCTP, but we're not doing that, so I'd be confused about that.\nI do know, however, that there are servers where some portion of the data is available before all of the data that would be necessary for the headers has been computed.\n\nAs an example, imagine that you're serving a javascript resource which varies depending on some of the parameters of the query, and you must do a lookup on some other server to determine what they mean, however you know that some of the data is _always_ the same, and thus would like to emit it blindly, before computing content-length, etc.\n\nI think the usecase is probably weak.\n",
          "createdAt": "2013-03-18T22:18:37Z",
          "updatedAt": "2013-03-18T22:18:37Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Sure, this is a problem in HTTP/1 too; right now, you have to buffer the body before you emit headers. I wouldn't characterise it as a weak use case, it's fairly common IME.\n\nI think we have two possible paths here - \n1. We can make the end of headers implicit (probably indicated by the first data block)\n2. We can make it explicit (e.g., with a flag; whether that's the absence of the continuation flag, or something else TBD)\n\nAn explicit indication will enable the use case you mention, as well as make it possible to late-bind the status (e.g., if an error is encountered while generating the body). However, it would require that 2->1 gateways buffer the entire response to make sure they see all of the headers; that's likely to be a showstopper.\n\nAnyway, we should take this discussion to the list.\n",
          "createdAt": "2013-03-18T23:01:22Z",
          "updatedAt": "2013-03-18T23:01:22Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps the easiest thing to do is to make it very clear that headers finish before data starts.  Then, we can debate the merits/problems of late headers.\n",
          "createdAt": "2013-03-19T03:46:41Z",
          "updatedAt": "2013-03-19T03:46:41Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See also #98 \n",
          "createdAt": "2013-05-20T02:30:33Z",
          "updatedAt": "2013-05-20T02:30:33Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the traditional solution (which Martin was advocating) as used in HTTP/1 is still reasonable. Send the headers first, then send the data. If that requires queuing, too bad.\nIf we find that we want/need trailers or some other kind of headers to deal with this kind of thing later, then we can deal with it then.\n\nThe best solution is then, probably:\nEndpoints MUST send HEADERS before DATA on any stream (this jives with recent discussion about having only HEADERS open up streams).\nProxies MUST NOT reorder HEADERS and DATA on a single stream when forwarding.\n",
          "createdAt": "2013-06-07T19:12:12Z",
          "updatedAt": "2013-06-07T19:12:12Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim. \n\nConsidering dropping Trailers as a features in HTTP/2.0; will ascertain support on mailing list.\n\nIf we decide to keep them, a fin flag on a header block that isn't the first is the start of trailers; any interspersed header frames have no semantics in HTTP/1.1.\n",
          "createdAt": "2013-06-14T18:07:48Z",
          "updatedAt": "2013-06-14T18:07:48Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Trailers are addressed in the layering branch rewrite of the http layer.\n",
          "createdAt": "2013-07-03T08:29:22Z",
          "updatedAt": "2013-07-03T08:29:22Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ordering requirements for headers and data are addressed in layering branch as well\n",
          "createdAt": "2013-07-03T08:30:55Z",
          "updatedAt": "2013-07-03T08:30:55Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "MDU6SXNzdWUxMTEwMTIyOQ==",
      "title": "Routing Data's relationship to headers",
      "url": "https://github.com/httpwg/http2-spec/issues/23",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "aamelnikov"
      ],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Right now, routing data (in particular, :scheme, :host and :path) appear as headers along with the rest. \n\nThis means that the recipient needs to parse through the header collection to find them -- potentially at the end.\n\nDifferent ways of addressing this have been proposed; e.g., requiring them to be at the top of the header block, or serialising them in different fields. \n",
      "createdAt": "2013-02-18T02:11:42Z",
      "updatedAt": "2013-10-10T21:14:00Z",
      "closedAt": "2013-10-10T21:14:00Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Alexey will provide proposed text.  This will probably include moving S6.2 (HTTP Header Fields and HTTP/2.0 Headers) out of security considerations to the relevant section (S4.2).\n",
          "createdAt": "2013-03-11T20:03:08Z",
          "updatedAt": "2013-03-11T20:03:08Z"
        },
        {
          "author": "aamelnikov",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Made the change change proposed above. If the WG wants a fixed order of \":\"-header fields, this should be another change.\n",
          "createdAt": "2013-03-15T19:37:13Z",
          "updatedAt": "2013-03-15T19:37:13Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "This request seems to be based on the \"stream\" compression of the headers, it is unclear how this might fit in with the new header compression scheme. I'd like to see that land before we place requirements on header ordering.\n",
          "createdAt": "2013-03-15T23:56:43Z",
          "updatedAt": "2013-03-15T23:56:43Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Hamburg; need more data - input from intermediary / proxy vendors as to how desirable this is; the relative expense of reading / transmitting compressed vs. uncompressed Host header; whether more headers than Host are necessary.\n\nRequiring that certain headers be available in certain ways from the compressor seems to increase complexity considerably, and likely isn't a good road, as it's a tradeoff of space (on the wire, in buffers, etc.), but not necessarily an assurance of saving time.\n",
          "createdAt": "2013-08-05T13:02:23Z",
          "updatedAt": "2013-08-05T13:02:23Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Revisited in Seattle; adding ordering the current compression scheme would increase complexity for marginal benefit. It is currently implementable.\n",
          "createdAt": "2013-10-10T21:14:00Z",
          "updatedAt": "2013-10-10T21:14:00Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "MDU6SXNzdWUxMTEzNTU5Mw==",
      "title": "Cacheability of Server Push",
      "url": "https://github.com/httpwg/http2-spec/issues/24",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "server push"
      ],
      "body": "Discussion raised the issue of what can and cannot be cached when resources are pushed.\n\nFrom an HTTP/1.1 caching perspective, a pushed resource could be considered analogous to responses where Content-Location != effective request URI.  We need to consider how these resources can be cached.\n\nThis also needs to carefully cover the effect on Vary header fields.  The current draft specified that request header fields for pushed resources are inherited from the request that triggered the push.  A cache would have to pull details from that original request.\n\nSince this opens Pandora's box, we might also consider cacheability of other resources when Content-Location and Cache-Control header fields are present.\n",
      "createdAt": "2013-02-18T23:32:21Z",
      "updatedAt": "2013-06-13T21:19:58Z",
      "closedAt": "2013-06-13T21:19:58Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in SF Interim; Martin's text is good enough for now.\n",
          "createdAt": "2013-06-13T21:19:58Z",
          "updatedAt": "2013-06-13T21:19:58Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "MDU6SXNzdWUxMTE0MTgxMg==",
      "title": "Magic",
      "url": "https://github.com/httpwg/http2-spec/issues/25",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "We need some magic that clearly indicates that HTTP/2 is being spoken on the wire. It should fast fail when sent to a reasonable set of HTTP/1.1 servers.\n",
      "createdAt": "2013-02-19T05:18:28Z",
      "updatedAt": "2013-06-03T06:40:41Z",
      "closedAt": "2013-05-20T03:22:39Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "In the draft, so closing (although we might tweak the string as time goes on).\n",
          "createdAt": "2013-05-20T03:22:39Z",
          "updatedAt": "2013-05-20T03:22:39Z"
        },
        {
          "author": "phluid61",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If the goal of the connection header magic string is to emulate a HTTP/1.x request in a way that is both as transparent as possible (can be parsed as HTTP/1.x) and unambiguously differentiated (could NOT be understood as HTTP/1.x), I understand the criteria to be:\n\nWhen interpreted as a HTTP/1.x request:\n- the HTTP-Version must be \"HTTP/2.0\";\n- the Request-URI must be \"*\", since this message is not resource-specific;\n- the Method should not coincide with any extant HTTP/1.x methods, since a poorly-implemented device might, for example, only inspect the minor part of the HTTP-Version and misinterpret the header as a HTTP/1.0 request;\n- the Method should be exactly three or four bytes in length, since there are known implementations in the wild that have this expectation.\n\nTo fit in a 24-byte structure, using the given pattern, we would have to use either a three-byte Method and a two-byte entity (before the final \"\\r\\n\\r\\n\"), or a four-byte Method and a one-byte entity. I think 3-2 is better, aesthetically.\n\nI also think it's better to avoid encoding a metasyntactic variable into the standard. \"FOO\" is universally used as a placeholder for user-supplied data, and it may be confusing for the spec to require implementers to send or expect the literal value \"FOO\". Additionally there is a legitimate chance that there are implementations in the wild that actually use \"FOO\" as a method, e.g. for developmental purposes.\n\nI propose \"CON\" and \"go\" as the Method and message entity parts.  I.e. `434f4e202a20485454502f322e300d0a0d0a676f0d0a0d0a` or `\"CON * HTTP/2.0\\r\\n\\r\\ngo\\r\\n\\r\\n\"`\n",
          "createdAt": "2013-06-03T05:30:04Z",
          "updatedAt": "2013-06-03T05:30:04Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Hmm. \"CON\" is a prefix of \"CONNECT\"; not saying that implementations will be matching prefixes, but I get a bit worried. \n\nOn-list I proposed \"STA\" and \"RT\".\n",
          "createdAt": "2013-06-03T06:14:33Z",
          "updatedAt": "2013-06-03T06:14:33Z"
        },
        {
          "author": "phluid61",
          "authorAssociation": "CONTRIBUTOR",
          "body": "STA works for me; I can't think of any reasons it might go wrong.\n\n(I would die happy if it were \"HELO\" and \".\")\n",
          "createdAt": "2013-06-03T06:40:41Z",
          "updatedAt": "2013-06-03T06:40:41Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "MDU6SXNzdWUxMTE2NTQxOQ==",
      "title": "TCP Exclusivity",
      "url": "https://github.com/httpwg/http2-spec/issues/26",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "transport mapping"
      ],
      "body": "While protocol portability is widely regarded as a good thing, the idea that HTTP/2.0 might use a different substrate than TCP is a dangerous one.  It is likely that many design choices will be made based on the assumption that the protocol runs atop TCP and not some other transport protocol.\n\nWe should decide if the HTTP/2.0 specification is written exclusively for TCP or whether we want to pay lip service to protocol agnosticism.  Note that exclusivity does not preclude the use of other protocols in a later specification, it just removes one axis of freedom in the design.\n",
      "createdAt": "2013-02-19T18:28:54Z",
      "updatedAt": "2014-01-23T09:05:22Z",
      "closedAt": "2014-01-23T09:05:22Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "The line we need to walk is to allow the use of other transport protocols (or application protocols that masquerade as one) that provide similar guarantees to TCP. \n\nThus, the profile that we identify what we're doing will exclusively and directly define the layering of HTTP/2.0 on TCP, and also upon TLS upon TCP. Other profiles might define other layerings of the semantics across other transport protocols, but we won't define them.\n\nThis is alluded to in the charter, and was discussed at length in the chartering process.\n\nSo, I see changes that need to happen in the specs to accommodate this approach, but I _think_ they're already covered by other issues; is there any reason to keep this issue open?\n",
          "createdAt": "2013-02-19T22:37:09Z",
          "updatedAt": "2013-02-19T22:37:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that I'd like a conclusion that says that it's OK not to pay lip service to transport portability, so that I can change statements like:\n\n\"HTTP/2.0 runs over a reliable substrate, such as TCP.\"\n\nto\n\n\"HTTP/2.0 runs over TCP.\"\n\nThat doesn't preclude a future effort to define the use of other transport protocols (even unreliable ones, for the truly mad).\n\nIn the same vein, I'd also like to eliminate the pretense that the framing layer is reusable for other protocols.  Other efforts that decide that the framing layer works for them can reuse it, but reusability shouldn't be our goal (and our problem).\n",
          "createdAt": "2013-02-20T17:40:09Z",
          "updatedAt": "2013-02-20T17:40:09Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Again, let's see how the negotiation text fits in (#1, #12) and sort out our nomenclature for the framing layer vs. the HTTP layer; then this should become clear.\n",
          "createdAt": "2013-02-20T22:22:17Z",
          "updatedAt": "2013-02-20T22:22:17Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Ted volunteering to produce a proposal. \n",
          "createdAt": "2013-06-14T19:12:52Z",
          "updatedAt": "2013-06-14T19:12:52Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; closed without action.\n",
          "createdAt": "2014-01-23T09:05:22Z",
          "updatedAt": "2014-01-23T09:05:22Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "MDU6SXNzdWUxMTE2NTUxMw==",
      "title": "Browser-specific Guidance",
      "url": "https://github.com/httpwg/http2-spec/issues/27",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "There is a lot of guidance in the draft that is specific to browsers.  This guidance needs to be made more generic, or removed, if appropriate.\n",
      "createdAt": "2013-02-19T18:31:14Z",
      "updatedAt": "2013-05-21T23:16:37Z",
      "closedAt": "2013-05-21T23:16:37Z",
      "comments": []
    },
    {
      "number": 28,
      "id": "MDU6SXNzdWUxMTE3MzgwMQ==",
      "title": "Discovering Maximum Frame Size",
      "url": "https://github.com/httpwg/http2-spec/issues/28",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "HTTP/2.0 requires that implementations support a minimum frame size of 8192 bytes.  The draft does not specify how an implementation is expected to learn that its peer has limited frame sizes other than by trial and error.  Using RST_STREAM causes the error to be discovered after the problem has been encountered.\n\nIt's also not possible to use RST_STREAM to reject a too-large frame that is not bound to a specific stream.\n\nThis could be indicated in the SETTINGS frame.\n",
      "createdAt": "2013-02-19T21:42:37Z",
      "updatedAt": "2013-06-17T17:14:29Z",
      "closedAt": "2013-06-13T20:26:06Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Can you bring this up on-list, please?\n",
          "createdAt": "2013-02-27T05:25:36Z",
          "updatedAt": "2013-02-27T05:25:36Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Since frame sizes have decreased to 64k maximum down from 16M, is it reasonable to drop this from the spec entirely and require implementations to handle full-sized frames?\n",
          "createdAt": "2013-02-28T06:21:01Z",
          "updatedAt": "2013-02-28T06:21:01Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "64k is a large amount for an embedded device (but then again it shouldn't be receiving that much data then, probably)?\n",
          "createdAt": "2013-03-04T21:30:02Z",
          "updatedAt": "2013-03-04T21:30:02Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; max frame size is fixed.\n",
          "createdAt": "2013-06-13T20:26:06Z",
          "updatedAt": "2013-06-13T20:26:06Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "MDU6SXNzdWUxMTE3NDE4NA==",
      "title": "Always Upgrade",
      "url": "https://github.com/httpwg/http2-spec/issues/29",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "We need to resolve whether an Upgrade is always necessary, or whether clients can start the HTTP/2.0 session immediately if they have prior knowledge about server capabilities.\n\nRequiring upgrade might be necessary if the set of intermediaries or servers that are involved are potentially homogenous.  For example, a phased upgrade of a load-balanced server farm might result in some servers being HTTP/2.0-capable and others not.\n",
      "createdAt": "2013-02-19T21:51:55Z",
      "updatedAt": "2013-02-27T19:05:50Z",
      "closedAt": "2013-02-27T19:05:50Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Based on list discussion, it appears that we will allow connections (HTTP and HTTPS) to go without Upgrade, but with the Magic. We'll need to give some implementation guidance, of course.\n",
          "createdAt": "2013-02-27T05:47:02Z",
          "updatedAt": "2013-02-27T05:47:02Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds like a resolution to me.\n",
          "createdAt": "2013-02-27T19:05:50Z",
          "updatedAt": "2013-02-27T19:05:50Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "MDU6SXNzdWUxMTE3NTIyNw==",
      "title": "Stream reuse",
      "url": "https://github.com/httpwg/http2-spec/issues/30",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Make it clear that streams and stream identifiers cannot be reused.\n",
      "createdAt": "2013-02-19T22:19:14Z",
      "updatedAt": "2013-02-25T23:34:31Z",
      "closedAt": "2013-02-21T23:06:54Z",
      "comments": []
    },
    {
      "number": 31,
      "id": "MDU6SXNzdWUxMTE3NTQxNw==",
      "title": "Discourage use of flow control",
      "url": "https://github.com/httpwg/http2-spec/issues/31",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Rather than specify a flow control algorithm, we should simply discourage its use.\n\nMark, I think that we resolved this one at the interim.  I'd just like to confirm with you before proceeding.\n",
      "createdAt": "2013-02-19T22:24:23Z",
      "updatedAt": "2013-03-04T23:37:55Z",
      "closedAt": "2013-03-04T23:37:55Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "We discussed giving advice about the use of flow control in a separate \"implementation advice\" document. From my notes:\n\n--------->8---------\n\n## Appropriate Use of Flow Control\n\nFlow control is defined to protect deployments (whether it's server, client or intermediary) that are operating under constraints. For example, a proxy must share memory between many connections. Generally, it addresses cases where the receiver cannot process input (for whatever reason), yet wants to be able to process other streams.\n\nA valid strategy is to turn flow control off if you don't need these properties.\n\n## Strategies for Flow Control\n1. In most cases, it's recommended to advertise an infinite window.\n2. If you must, you can protect resources (e.g., memory) in your implementation. However, if this is done without knowledge of BDP, this may lead to non-optimal use of bandwidth.\n3. When flow control is used with knowledge of BDP, it can both protect resources and assure utilisation of the connection is unimpeded. Note that this can be difficult to implement.\n\n-----8<-------\n\nSince we don't have a separate document yet, I'm OK with putting this in the spec for the time being; it might be helpful to mark it somehow (even just with a comment in source) that it's potentially splittable to a separate doc.\n\nFlipping to editorial.\n",
          "createdAt": "2013-02-19T22:53:33Z",
          "updatedAt": "2013-02-19T22:53:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We still don't know how to set an infinite window...\n",
          "createdAt": "2013-02-20T01:05:15Z",
          "updatedAt": "2013-02-20T01:05:15Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Problem solved.  https://github.com/http2/http2-spec/commit/d8013a3e1659696debc8773e9467b8ad829c49ee\n",
          "createdAt": "2013-03-04T23:37:55Z",
          "updatedAt": "2013-03-04T23:37:55Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "MDU6SXNzdWUxMTE3NzMyNw==",
      "title": "Define new IANA registries",
      "url": "https://github.com/httpwg/http2-spec/issues/33",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "For frame types, settings, and error codes.\n",
      "createdAt": "2013-02-19T23:19:20Z",
      "updatedAt": "2013-04-03T19:59:52Z",
      "closedAt": "2013-04-03T19:59:52Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There are separate namespaces for RST_STREAM and GOAWAY errors.  Both need registries.\n",
          "createdAt": "2013-02-19T23:40:51Z",
          "updatedAt": "2013-02-19T23:40:51Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "MDU6SXNzdWUxMTE3OTM3MA==",
      "title": "Cross protocol attacks",
      "url": "https://github.com/httpwg/http2-spec/issues/35",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "security",
        "upgrade"
      ],
      "body": "We need to re-consider the section on cross protocol attacks.  The statement that is made is no longer true.  The final answer will depend on the outcome of #1.\n\n[RFC 6455, section 10.3](http://tools.ietf.org/html/rfc6455#section-10.3) cites the following paper:\n\n   [TALKING]  Huang, L-S., Chen, E., Barth, A., Rescorla, E., and C.\n              Jackson, \"Talking to Yourself for Fun and Profit\", 2010,\n              http://w2spconf.com/2011/papers/websocket.pdf.\n\nThis attack ultimately lead to thewebsocketsprotocol adopting a masking scheme.  This needs to be considered.\n",
      "createdAt": "2013-02-20T00:22:54Z",
      "updatedAt": "2013-06-13T17:07:19Z",
      "closedAt": "2013-06-13T17:07:19Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in SF Interim; feeling is that intermediaries that are this broken should be fixed, not worked around (as it's a problem with their implementation whatever we do).\n\nSuggest bringing up in HTTPbis work if not there already, since this is more about 1.1 than 2.0.\n",
          "createdAt": "2013-06-13T17:07:19Z",
          "updatedAt": "2013-06-13T17:07:19Z"
        }
      ]
    },
    {
      "number": 36,
      "id": "MDU6SXNzdWUxMTE4MTI1Ng==",
      "title": "Push promise",
      "url": "https://github.com/httpwg/http2-spec/issues/36",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Need a write-up of push promise frame and its usage.\n\nI think that this is probably not contentious.  However, I'm not sure then how to cancel a push without waiting for it to start.  Because pushes currently use SYN_STREAM, it's possible to reject using RST_STREAM.  That is not possible with a mere promise.\n",
      "createdAt": "2013-02-20T01:38:07Z",
      "updatedAt": "2020-09-22T04:09:37Z",
      "closedAt": "2013-05-20T02:29:51Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Hasan had the AI on this; I prodded him on it yesterday, and he said that @grmocg had point on it.\n",
          "createdAt": "2013-02-20T01:56:00Z",
          "updatedAt": "2013-02-20T01:56:00Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We need to be clear that the push promise contains the cache key, not just the resource URL.  See http://tools.ietf.org/html/draft-ietf-httpbis-p6-cache-22\nThis is a bug with the current SPDY spec.\n",
          "createdAt": "2013-03-01T01:20:44Z",
          "updatedAt": "2013-03-01T01:20:44Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "So, we're basically re-inventing HTCP-over-SPDY? :)\n",
          "createdAt": "2013-03-01T01:25:43Z",
          "updatedAt": "2013-03-01T01:25:43Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes.  That's exactly what a push is.\n",
          "createdAt": "2013-03-01T16:51:51Z",
          "updatedAt": "2013-03-01T16:51:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Alexey has enough information to proceed on this one.\n",
          "createdAt": "2013-03-11T20:00:18Z",
          "updatedAt": "2013-03-11T20:00:18Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closing, as we have push_promise in the draft; remaining issues can be opened separately.\n",
          "createdAt": "2013-05-20T02:29:51Z",
          "updatedAt": "2013-05-20T02:29:51Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "MDU6SXNzdWUxMTIxMzE2Ng==",
      "title": "Define a common process and description for stream and session termination",
      "url": "https://github.com/httpwg/http2-spec/issues/37",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The StreamErrorHandler section is fairly widely used, but the session-level flow control changes for WINDOW_UPDATE revealed two issues:\n1. The error codes are not consistent between RST_STREAM and GOAWAY.\n2. There is no way to quickly and unambiguously say that a stream or session should be terminated.  The complete description is cumbersome, so it should only have to be written once.  This would be made easier if the error codes were unified.\n",
      "createdAt": "2013-02-20T20:10:42Z",
      "updatedAt": "2013-04-04T15:44:48Z",
      "closedAt": "2013-04-04T15:44:48Z",
      "comments": []
    },
    {
      "number": 38,
      "id": "MDU6SXNzdWUxMTIxNTgwOA==",
      "title": "SETTINGS_MAX_CONCURRENT_STREAMS ",
      "url": "https://github.com/httpwg/http2-spec/issues/38",
      "state": "CLOSED",
      "author": "brianraymor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "Accept Limit vs Initial Limit\n\nCurrently an endpoint advertises what it is capable of accepting:\n\u2022         When a client sends SETTINGS_MAX_CONCURRENT_STREAMS =123 it is saying that it will accept up to 123 concurrent pushed streams.\n\u2022         When a server sends SETTINGS_MAX_CONCURRENT_STREAMS =123 it is saying that it will accept up to 123 concurrent HTTP request streams.\n\nAre there scenarios for an endpoint to advertise what it is capable of issuing? For example, is it useful for a server to know that a client will issue at most 123 concurrent HTTP request streams?  Or is it useful for a client to know that a server will issue at most 123 concurrent push streams?  If the answer is \"no\", then we can avoid complicating the protocol.\n\nLimit Values\n\nThere is a race condition where the client can issue more streams to the server before the server can advertise its accept limit to the client.  Note that a race condition in the reverse path is not possible because a client must issue a SYN_STREAM before the server can push anything, which means it can definitely send the initial SETTINGS frame before emitting the first SYN_STREAM. (And in the future, it will be mandatory for the client to send the SETTINGS frame upon connection)  Furthermore, there is no clear rationale for the value of SETTINGS_MAX_CONCURRENT_STREAMS to \u201cbe no smaller than 100\u201d.  To offer clearer requirements, the following is suggested:\n\nA server MUST be able to handle at least 8 concurrent streams initiated by the client.  A server MUST NOT advertise a value less than 8.  A client MUST generate a session error if it receives a value less than 8 from the server.  The default value emitted by servers is 8.  The default value emitted by clients is 0.  It is recommended that servers pick a much larger value to allow parallelism.\n\nThis ensures that there is a minimum value so that we don\u2019t fall into a race hole but is large enough so that client is not bottlenecked on RTT for the initial requests.  A default client-side of 0 means the communication defaults to no-push.  That is, a smart client has to proactively advertise a non-zero value for the server to enable push.\n",
      "createdAt": "2013-02-20T21:18:44Z",
      "updatedAt": "2017-05-14T01:06:55Z",
      "closedAt": "2013-07-23T17:37:08Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Hey Brian,\n\nCould you please bring these up on the list? Otherwise they'll hide in the issues list.\n\nAlso, in the future, if things are separable as different issues, please make them so. E.g., here, I would have liked to see at least two issues; one for the minimum number of client-initiated streams, the other for defaulting to no-push.\n\nThanks!\n",
          "createdAt": "2013-02-20T23:23:36Z",
          "updatedAt": "2013-02-20T23:23:36Z"
        },
        {
          "author": "OsamaM",
          "authorAssociation": "NONE",
          "body": "Hey Mark,\n\nI talked to Brian.  Let's dedicate this issue #38 to \"minimum number of client-initiated streams\".  And I'll create a new issue for focusing on \"defaulting to no-push\".  And I'll bring both up to the mailing list.\n\nThanks,\n--Osama.\n",
          "createdAt": "2013-02-21T03:22:08Z",
          "updatedAt": "2013-02-21T03:22:08Z"
        },
        {
          "author": "brianraymor",
          "authorAssociation": "NONE",
          "body": "For \"minimum number of client-initiated streams\", there is no requirement at this time to support this scenario and complicate the protocol. Closing.\n",
          "createdAt": "2013-07-23T17:37:08Z",
          "updatedAt": "2013-07-23T17:37:08Z"
        },
        {
          "author": "deanhiller",
          "authorAssociation": "NONE",
          "body": "we are hitting this as a server is advertising max=1 AFTER we already sent 100 requests out the door.  I would love to see an initial value of 8 be required and at least allow the first 8 requests.  this was hitting an apple api",
          "createdAt": "2017-05-13T01:20:55Z",
          "updatedAt": "2017-05-13T01:20:55Z"
        },
        {
          "author": "deanhiller",
          "authorAssociation": "NONE",
          "body": "ie. we sent setting frame and immediately started sending as we do 80,000 rps btw and we get the server setting frame after that.  we do not like to wait the full handshake nor should we have to.",
          "createdAt": "2017-05-13T01:22:19Z",
          "updatedAt": "2017-05-13T01:22:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a server problem.  Any server that sets a limit of 1 is either missing the point of the protocol, or is under stress.  The server is - of course - entitled to set any limit that it wants, but it does have to gracefully handle the client exceeding its limit initially.\r\n\r\nNote that once we deploy TLS 1.3 the server settings can be sent to the client before the client starts sending.\r\n\r\nYou might find that TCP won't keep up with 80k requests/second anyway.  If you are sending that sort of rate, it might pay to talk to the server operator about what you can do.  There are plenty of good options availble.",
          "createdAt": "2017-05-14T01:06:55Z",
          "updatedAt": "2017-05-14T01:06:55Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "MDU6SXNzdWUxMTIyNjExMg==",
      "title": "Removing CREDENTIAL",
      "url": "https://github.com/httpwg/http2-spec/issues/39",
      "state": "CLOSED",
      "author": "brianraymor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready"
      ],
      "body": "In the Speed+Mobility draft, we removed CREDENTIAL because:\n\n   CREDENTIAL:  This is removed from HTTP Speed+Mobility because we\n      believe it is not compatible with options such as TLS SNI.  For\n      this proposal, a session MUST only target one origin as described\n      in [RFC6454].\n\nConcerns were also raised in \"CREDENTIAL really needed?\" (https://groups.google.com/forum/?fromgroups#!searchin/spdy-dev/credential/spdy-dev/WazzPBFbdpk/yayPrNTehYYJ). Based on the responses, it appears that CREDENTIAL was an experimental feature not used in SPDY/3, but intended to be replaced with a different design in the future; therefore, it could safely be deprecated or ignored.\n\nI propose that CREDENTIAL be removed from the HTTP/2.0 draft.\n",
      "createdAt": "2013-02-21T03:05:01Z",
      "updatedAt": "2020-09-22T04:09:37Z",
      "closedAt": "2013-02-21T22:12:16Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "No dissent on list; marking for incorporation.\n",
          "createdAt": "2013-02-21T09:52:07Z",
          "updatedAt": "2013-02-21T09:52:07Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "MDU6SXNzdWUxMTIyNjY2NA==",
      "title": "Defaulting to no-push via SETTINGS_MAX_CONCURRENT_STREAMS",
      "url": "https://github.com/httpwg/http2-spec/issues/40",
      "state": "CLOSED",
      "author": "OsamaM",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "server push"
      ],
      "body": "This is fork of issue #38 to focus on discussing \"defaulting to no-push.\"\n\nThe thinking is that client and server endpoints should have different minimum values and default values for SETTINGS_MAX_CONCURRENT_STREAMS.\n\nFrom issue #20 we understand that SETTINGS_MAX_CONCURRENT_STREAMS is directional and a client can advertise a value of 0 to prevent the server from issuing Push Streams.\n\nThe suggestion is that the default value should also be 0.  That is, the communication defaults to no-push.  If the client is sophisticated then it can advertise a non-zero value in its initial SETTINGS frame to allow the server to push.\n",
      "createdAt": "2013-02-21T03:36:08Z",
      "updatedAt": "2013-07-20T00:13:25Z",
      "closedAt": "2013-07-20T00:11:36Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "DIscussed in SF Interim; decided to wait until we have more implementation experience.\n",
          "createdAt": "2013-06-13T21:23:56Z",
          "updatedAt": "2013-06-13T21:23:56Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "With the changes to include HTTP2-Settings, the server never sends frames in ignorance of the clients settings.  Rather than deferring, can we close this @OsamaM  ?\n",
          "createdAt": "2013-06-26T00:07:43Z",
          "updatedAt": "2013-06-26T00:07:43Z"
        },
        {
          "author": "OsamaM",
          "authorAssociation": "NONE",
          "body": "Solved via \"HTTP2-Settings Header Field\" section.\n",
          "createdAt": "2013-07-20T00:13:25Z",
          "updatedAt": "2013-07-20T00:13:25Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "MDU6SXNzdWUxMTM4NjIwOQ==",
      "title": "Header Block field name length",
      "url": "https://github.com/httpwg/http2-spec/issues/41",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Currently, the header block allows 32 bits for the header field name. This seems excessive.\n",
      "createdAt": "2013-02-25T23:30:28Z",
      "updatedAt": "2013-08-05T12:48:10Z",
      "closedAt": "2013-08-05T12:48:10Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That's ok, they get compressed. I considered raising the same issue, but this should be addressed by #2.\n",
          "createdAt": "2013-02-25T23:45:32Z",
          "updatedAt": "2013-02-25T23:45:32Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Well, maybe; it depends on how the compression scheme works.\n",
          "createdAt": "2013-02-25T23:49:47Z",
          "updatedAt": "2013-02-25T23:49:47Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Not applicable with the new header compression scheme.\n",
          "createdAt": "2013-08-05T12:48:10Z",
          "updatedAt": "2013-08-05T12:48:10Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "MDU6SXNzdWUxMTM4NzIwNg==",
      "title": "Security Considerations: intermediary encapsulation attacks",
      "url": "https://github.com/httpwg/http2-spec/issues/42",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "security"
      ],
      "body": "An intermediary that naively converts HTTP/2.0 to HTTP/1.1 (or vice versa) might allow header values that open vulnerabilities. E.g., encoding a newline into a header value.\n",
      "createdAt": "2013-02-26T00:04:06Z",
      "updatedAt": "2013-08-27T21:25:58Z",
      "closedAt": "2013-08-27T21:25:58Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I might defer writing this one up until we understand what features the compression folks add.  That is, over and above mere encapsulation.  For instance, breaking Cookie into pieces might create additional problems.\n\nThat said, text is always welcome.\n",
          "createdAt": "2013-02-27T23:45:03Z",
          "updatedAt": "2013-02-27T23:45:03Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "MDU6SXNzdWUxMTM4NzQzNQ==",
      "title": "Remove SYN_REPLY",
      "url": "https://github.com/httpwg/http2-spec/issues/43",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready"
      ],
      "body": "Redundant, given HEADERS.\n\nSee:\n  http://www.w3.org/mid/CABkgnnU5he8x=v+UvV8Oe7mS-3FnMtLmjaz_xk+Ns84LzCpvwQ@mail.gmail.com\n",
      "createdAt": "2013-02-26T00:12:27Z",
      "updatedAt": "2013-04-12T00:13:12Z",
      "closedAt": "2013-04-12T00:13:12Z",
      "comments": [
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "SPDY devs discussed this and gave me the job of merging this into the SPDY/4 spec =/ For us, it's nicer to have sooner than later, so if you have no pref on editorial work, I'd appreciate prioritizing this ahead of other stuff.\n\nI'm also happy to do a first pass commit and have whichever editor takes this on do all the subsequent cleanup. \n",
          "createdAt": "2013-02-28T00:30:09Z",
          "updatedAt": "2013-02-28T00:30:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I was waiting until the discussion settled down.  Since it looks like it has, I was going to allocate some time tomorrow to clear it up.  If you want to go faster than that, be my guest.\n",
          "createdAt": "2013-02-28T01:30:48Z",
          "updatedAt": "2013-02-28T01:30:48Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm more than happy for you to do it. That schedule is fast enough for me :)\n\nOn Wed, Feb 27, 2013 at 5:30 PM, martinthomson notifications@github.comwrote:\n\n> I was waiting until the discussion settled down. Since it looks like it\n> has, I was going to allocate some time tomorrow to clear it up. If you want\n> to go faster than that, be my guest.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/43#issuecomment-14211487\n> .\n",
          "createdAt": "2013-02-28T01:31:39Z",
          "updatedAt": "2013-02-28T01:31:39Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Ready?\n",
          "createdAt": "2013-04-11T11:25:27Z",
          "updatedAt": "2013-04-11T11:25:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Done.\n",
          "createdAt": "2013-04-11T16:23:54Z",
          "updatedAt": "2013-04-11T16:23:54Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "MDU6SXNzdWUxMTM4ODY4NA==",
      "title": "Explicit SETTINGS flag for disabling flow control",
      "url": "https://github.com/httpwg/http2-spec/issues/44",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "flow control"
      ],
      "body": "",
      "createdAt": "2013-02-26T01:00:24Z",
      "updatedAt": "2013-06-13T21:53:57Z",
      "closedAt": "2013-06-13T21:53:57Z",
      "comments": [
        {
          "author": "aamelnikov",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Addressed by d8013a3e1659696debc8773e9467b8ad829c49ee, although Roberto had some comments on that commit that should be addressed.\n",
          "createdAt": "2013-03-11T02:17:53Z",
          "updatedAt": "2013-03-11T02:17:53Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Also https://github.com/http2/http2-spec/commit/023bb0bc4a91e7967287c74d448fed24c621bfe5\n",
          "createdAt": "2013-03-11T03:07:06Z",
          "updatedAt": "2013-03-11T03:07:06Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Can this be closed, or does it need more? @grmocg ?\n",
          "createdAt": "2013-04-11T11:25:02Z",
          "updatedAt": "2013-04-11T11:25:02Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "MDU6SXNzdWUxMTQ3ODUwNQ==",
      "title": "Remove 3.7.10.1 Compression contents",
      "url": "https://github.com/httpwg/http2-spec/issues/45",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Replace with \"Work in Progress\"\n",
      "createdAt": "2013-02-27T22:36:44Z",
      "updatedAt": "2013-02-28T00:47:15Z",
      "closedAt": "2013-02-28T00:47:15Z",
      "comments": []
    },
    {
      "number": 46,
      "id": "MDU6SXNzdWUxMTUyNzQ0Mw==",
      "title": "Content-Length: before or after gzip",
      "url": "https://github.com/httpwg/http2-spec/issues/46",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Content-Length is largely only needed as entity metadata in HTTP/2.0.  It does provide a limited function in learning the complete size of a resource prior to receiving an entire message.  (This is the behavior explicitly relied upon for POST, which is based on browser information only.  For example, node.js always sends chunked encoding unless explicitly overridden.)\n\nSince compression is applied by the framing layer, there's an ambiguity in the spec with respect to what value Content-Length is given.  If the data frames are compressed at the framing layer, the pre-compression size is possibly, but not certainly, the size that is reported in Content-Length.\n",
      "createdAt": "2013-03-01T01:01:33Z",
      "updatedAt": "2013-05-21T22:09:18Z",
      "closedAt": "2013-04-02T21:57:35Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "IIRC we removed compression of the data frames at the framing layer in SPDY.\n\nIf we haven't done that in HTTP/2 we should.\n",
          "createdAt": "2013-03-01T01:40:07Z",
          "updatedAt": "2013-03-01T01:40:07Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Data frame compression is an analogue of Transfer-Encoding: gzip.  This is a pretty important feature to retain.\n\nIt's optional, of course.  No point in re-compressing compressed data, but html/css/js all need compression.  It would complicate the media type stuff declaration for these types if the actual content was in a compressed format.\n",
          "createdAt": "2013-03-01T16:43:08Z",
          "updatedAt": "2013-03-01T16:43:08Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Maybe I'm misunderstanding. I know the SPDY spec requires receivers to accept gzip encoded data. At one point there was a flag in the data frames themselves to indicate that the content was gzip compressed by the framing layer. I thought we removed this in favor of having the application compress the data and requiring accepting deflate or gzip data.\n\nIMHO the proper thing to do here is to not have any compression at the framing layer, assert that all requests are made as if they sent Accept-Encoding: deflate, gzip, and that the Content-Length header be the aggregated length of the data frames.\n",
          "createdAt": "2013-03-03T01:23:56Z",
          "updatedAt": "2013-03-03T01:23:56Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Jeff-- you are correct.\nWe specified that a client MUST be able to handle an entity body which was compressed with gzip (because there were many clients where this was not the case).\nIn the very first version of SPDY we allowed for compression of the entity body at the protocol level, but after looking at the amount of CPU spent compressing things which were already compressed and the lack of gains, decided that it was easy to simply ensure that gzip could be used when the sender desired, and otherwise leave it to the application.\n\nOne of the implications of this is that content-length now describes exactly what it did before-- the length of the entity body (the sum of the payload of the data-frames in the stream should equal the content-length).\n",
          "createdAt": "2013-03-04T20:58:00Z",
          "updatedAt": "2013-03-04T21:08:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This doesn't change the fact that Transfer-Encoding: gzip has been replaced by a single bit.  Thus, SPDY _does_ compress at the protocol level.  The fact that it is possible to compress outside of this doesn't change that.  What you say is just an argument for having Content-Length refer to the post-compression representation (i.e., the pre-compression representation isn't available).  When I don't have a 1 year-old fighting me for the keyboard, I'll provide the other argument.\n",
          "createdAt": "2013-03-04T21:16:05Z",
          "updatedAt": "2013-03-04T21:16:05Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No-- the application which provided it to the protocol stack already did the compression.\nThe protocol simply carries the information that it was compressed by the application.\n\nProtocol compression (by which I mean that the protocol part of the stack does the compression, and not because of any explicit signal from the application-layer)  has been disconnected/effectively deprecated since SPDY/2.\n",
          "createdAt": "2013-03-04T21:34:27Z",
          "updatedAt": "2013-03-04T21:34:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "What is the Content-Type of a pre-compressed HTML document?  Most of metadata applies to the pre-compression artifact.  Through this, I infer that Content-Length should also.\n\nThis doesn't say anything about when or where compression actually takes place in actuality, just where it does logically.\n",
          "createdAt": "2013-03-04T21:50:06Z",
          "updatedAt": "2013-03-04T21:50:06Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since the SPDY/HTTP/2 layer neither changes the content-type nor the content length (and since it doesn't transform the entity-body) since the application supplies both and the entity body, I don't think we need to say anything about either?\n",
          "createdAt": "2013-03-04T21:56:05Z",
          "updatedAt": "2013-03-04T21:56:05Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe that saying something about what these mean is of the utmost importance.  These have a direct bearing on how data is interpreted.  Sure, the application could set Content-Length of 3 for a 5Mb representation.  We currently require that clients drop such requests.  The same could be said of Content-Type if an \"application/html\" representation turned out to not be HTML because it was compressed at some point.\n",
          "createdAt": "2013-03-04T23:07:20Z",
          "updatedAt": "2013-03-04T23:07:20Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm seeing the HTTP/2 framing+semantic layer as providing mainly session management, which is perhaps why I'm confused by what you're asking for? Or maybe we're violently agreeing?\n\nI know there will need to be other changes to hook up these fields to the previous definitions (http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-22#section-3.3.2\n and http://tools.ietf.org/html/draft-ietf-httpbis-p2-semantics-22#section-3.1.1.5 respectively), but, given that we're focused mostly on just changing how the bytes show up on the wire, and given that we don't do any compression, except of headers, I'm just confused?\n",
          "createdAt": "2013-03-04T23:21:37Z",
          "updatedAt": "2013-03-04T23:21:37Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "So looking at the d4397f77d62b6c3598e311d8ba4e5b373ce29821 version of the index.txt file -- I suggest:\n\n1) remove the COMPRESSED data flag (lines 869-870)\n2) replacing lines 901-906 with text else where (section 4.2.2?) stating that clients must accept gzip/deflate encoding\n3) remove lines 908-911\n4) remove section 5.5\n\nthus removing all ambiguity about content-length (it equals the sum of the lengths of the data frames).\n\nHappy to issue a pull request :)\n",
          "createdAt": "2013-03-07T10:33:25Z",
          "updatedAt": "2013-03-07T10:33:35Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "How then does a client learn whether an entity is compressed (or not)?  Transfer-Encoding is prohibited: http://http2.github.com/http2-spec/#rfc.section.4.2.1\n",
          "createdAt": "2013-03-07T17:36:02Z",
          "updatedAt": "2013-03-07T17:36:02Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "via the Content-Encoding header\n\nSo basically what SPDY has done is forced \"chunked\" Transfer-Encoding always and disallowed the rest.\n",
          "createdAt": "2013-03-07T17:40:54Z",
          "updatedAt": "2013-03-07T17:40:54Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "The major use case for Content-Length in HTTP/2 is allowing an intermediary that's changing it to HTTP/1 to generate the correct header without buffering the message. I think that @jpinner 's proposal does that; agreed?\n\n@martinthomson I think that you're asking how hop-by-hop compression (a la Transfer-Encoding in HTTP/1) happens in HTTP/2. In Orlando, we said we were getting rid of the compression flag, so it appears that this isn't possible in HTTP/2. If you (or anyone) is concerned about this, we should open a separate ticket.\n",
          "createdAt": "2013-03-18T06:19:54Z",
          "updatedAt": "2013-03-18T06:19:54Z"
        },
        {
          "author": "mcmanus",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mnot re content-length - the other use case is pure http2.. CL enables transfer progress meters (especially on downloads) which are useful ui elements.. so keeping the status quo of it reflecting transfer size is right imo.\n",
          "createdAt": "2013-03-18T11:51:34Z",
          "updatedAt": "2013-03-18T11:51:34Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yes-- content-length's meaning should be unchanged, and still reflect the\nentity-body size when optionally present.\n\nOn Mon, Mar 18, 2013 at 4:51 AM, mcmanus notifications@github.com wrote:\n\n> @mnot https://github.com/mnot re content-length - the other use case is\n> pure http2.. CL enables transfer progress meters (especially on downloads)\n> which are useful ui elements.. so keeping the status quo of it reflecting\n> transfer size is right imo.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/46#issuecomment-15050782\n> .\n",
          "createdAt": "2013-03-18T19:14:51Z",
          "updatedAt": "2013-03-18T19:14:51Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "MDU6SXNzdWUxMTUyNzU1Ng==",
      "title": "Trailers",
      "url": "https://github.com/httpwg/http2-spec/issues/47",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "editor-ready"
      ],
      "body": "Clearly, HEADERS can be used to support HTTP/1.1 trailers, or even mid-response additional headers.  Trailers do have their uses, but are poorly supported.  We need to say something about them, but what will that be?\n\nSince trailers are non-critical, we could remove support entirely.  Or we could allow arbitrary numbers of HEADERS frames with some rules about which ones can be ignored safely.  Or something in between.\n",
      "createdAt": "2013-03-01T01:05:21Z",
      "updatedAt": "2013-07-31T14:47:39Z",
      "closedAt": "2013-07-31T14:47:39Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think of this as being about the mapping of the protocol primitives to the HTTP semantics.\n\nAs an example use-case for sending metadata during the stream,  imagine providing a signed cryptographic hash of content via the HEADERS frame in a session speaking in the clear over port 80 periodically.\n\nThis may imply that we wish to have two different ways of providing metadata (perhaps signaled via a flag in the HEADERS frame?), one which is provided to the application layer, and another which exists to provide data to mechanisms below.\n\nBasically, I think we should define that the first HEADERS are equivalent to request headers, and say that the rest of any HEADERS sent on a stream should be ignored at the HTTP semantic layer (at least for now).\n",
          "createdAt": "2013-03-04T21:06:59Z",
          "updatedAt": "2013-03-04T21:06:59Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not convinced that an additional flag is necessary. The initial request/response headers ought to be limited to the initial Headers+Priorities frame and _possibly_ a single header continuation frame past last. All other headers frames ought to be passed on and made available to higher levels in the stack with only, perhaps, a few limited exceptions.\n",
          "createdAt": "2013-04-23T20:46:18Z",
          "updatedAt": "2013-04-23T20:46:18Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim.\n\nFor first implementation draft, only the first headers (pre-data) are mapped to HTTP headers; we'll discuss trailers after.\n",
          "createdAt": "2013-06-13T22:10:26Z",
          "updatedAt": "2013-06-13T22:10:26Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "MDU6SXNzdWUxMTU4ODU3NQ==",
      "title": "editorial note should be updated to point to github source & issues",
      "url": "https://github.com/httpwg/http2-spec/issues/48",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "reschke"
      ],
      "labels": [
        "editorial"
      ],
      "body": "(see subject)\n",
      "createdAt": "2013-03-03T08:30:26Z",
      "updatedAt": "2013-03-04T23:30:19Z",
      "closedAt": "2013-03-04T23:30:19Z",
      "comments": []
    },
    {
      "number": 49,
      "id": "MDU6SXNzdWUxMTc2MTA4Mw==",
      "title": "remove authentication related text",
      "url": "https://github.com/httpwg/http2-spec/issues/49",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See http://lists.w3.org/Archives/Public/ietf-http-wg/2013JanMar/1182.html:\n\nhttp://greenbytes.de/tech/webdav/draft-ietf-httpbis-http2-01.html#Authentication:\n\n\"There are four options for proxy authentication, Basic, Digest, NTLM \nand Negotiate (SPNEGO). The first two options were defined in RFC2617 \n[RFC2617], and are stateless. The second two options were developed by \nMicrosoft and specified in RFC4559 [RFC4559], and are stateful; \notherwise known as multi-round authentication, or connection \nauthentication.\"\n\nAs far as I can tell, RFC4559 does not actually define an NTLM auth \nscheme. If it did, we'd need to add it to \nhttp://greenbytes.de/tech/webdav/draft-ietf-httpbis-authscheme-registrations-latest.html.\n\n(And yes, I know that there's a NTLM scheme used in practice, I just \ndon't see it defined by RFC4559).\n\nLater on:\n\n\"Unfortunately, the stateful authentication mechanisms were implemented \nand defined in a such a way that directly violates RFC2617 - they do not \ninclude a \"realm\" as part of the request. This is problematic in \nHTTP/2.0 because it makes it impossible for a client to disambiguate two \nconcurrent server authentication challenges.\"\n\nIf these schemes need HTTP/2.0-specific fixes, these should be defined \nin a separate document, updating RFC4559. Optimally, we can get rid of \nthe whole section.\n",
      "createdAt": "2013-03-07T14:21:24Z",
      "updatedAt": "2013-03-26T17:19:05Z",
      "closedAt": "2013-03-26T17:19:05Z",
      "comments": []
    },
    {
      "number": 50,
      "id": "MDU6SXNzdWUxMTg5NjE2NQ==",
      "title": "Header continuation",
      "url": "https://github.com/httpwg/http2-spec/issues/50",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "design"
      ],
      "body": "@grmocg suggested that his header compression (#2) would include the ability to continue header blocks across frames.  We should track this as a separate issue.\n\nImportant consideration is the way that header blocks mutate session state (for header compression).  Interleaving of continued header frames will cause issues if we don't address this.\n\nWe should also consider whether this is a general facility or not.\n",
      "createdAt": "2013-03-11T20:25:54Z",
      "updatedAt": "2013-05-28T05:32:54Z",
      "closedAt": "2013-05-28T05:32:54Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe we should fix this by declaring that, if there is a continuation\nhappening, no new headers frame is allowed to be sent until the\ncontinuation is finished.\nIt just gets too difficult to deal with otherwise.\n\nOn Mon, Mar 11, 2013 at 1:26 PM, martinthomson notifications@github.comwrote:\n\n> @grmocg https://github.com/grmocg suggested that his header compression\n> (#2 https://github.com/http2/http2-spec/issues/2) would include the\n> ability to continue header blocks across frames. We should track this as a\n> separate issue.\n> \n> Important consideration is the way that header blocks mutate session state\n> (for header compression). Interleaving of continued header frames will\n> cause issues if we don't address this.\n> \n> We should also consider whether this is a general facility or not.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/50\n> .\n",
          "createdAt": "2013-03-11T21:00:06Z",
          "updatedAt": "2013-03-11T21:00:06Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "To clarify - you mean that no headers frame on a different stream can be sent?\n",
          "createdAt": "2013-03-18T06:14:16Z",
          "updatedAt": "2013-03-18T06:14:16Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yes.\n\nIt isn't the only possible solution, but it is relatively simple and it\nseems like it should  be a rare enough case...\n-=R\n\nOn Mon, Mar 18, 2013 at 2:14 AM, Mark Nottingham\nnotifications@github.comwrote:\n\n> To clarify - you mean that no headers frame on a different stream can be\n> sent?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/50#issuecomment-15040712\n> .\n",
          "createdAt": "2013-03-18T07:46:32Z",
          "updatedAt": "2013-03-18T07:46:32Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "MDU6SXNzdWUxMjA0NjcxMw==",
      "title": "Client advertising settings during Upgrade dance",
      "url": "https://github.com/httpwg/http2-spec/issues/51",
      "state": "CLOSED",
      "author": "OsamaM",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "upgrade"
      ],
      "body": "This issue is to track whether the client should advertise its settings (e.g. contents of SETTINGS frame) as part of the Upgrade GET (e.g. as HTTP/1.1 headers in the GET request).\n\nNormally, the first HTTP/2.0 frame the client emits is the SETTINGS frame.  This means the server will receive the client's settings before getting the  SYN_STREAM from the client.  However, in the Upgrade Dance the server receives the GET and has to respond with a 101 HTTP/1.1 response followed by the HTTP/2.0 SYN_REPLY.\n\nThe ugliness here is that the server will be in a situation where it has to send the SYN_REPLY (and possibly DATA frames and possibly start push streams) without knowing the client's settings.  This means the server may blow the client\u2019s flow control buffers, or emit a pushed stream even though the client is incapable of processing pushed streams, etc.\n\nIf we include the settings as part of the initial Upgrade GET then\n1) Server receives the pre-requisite initials settings and the initial GET request in a single package.  Makes life simpler.\n2) Brings us to parity with the SSL route where the server will have the cilent's SETTINGS before it starts working on the initial request.\n",
      "createdAt": "2013-03-15T01:12:42Z",
      "updatedAt": "2013-07-20T00:14:29Z",
      "closedAt": "2013-07-20T00:14:29Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; targetting 1st implementation draft. Gabriel to make proposal.\n",
          "createdAt": "2013-06-13T16:45:54Z",
          "updatedAt": "2013-06-13T16:45:54Z"
        },
        {
          "author": "OsamaM",
          "authorAssociation": "NONE",
          "body": "Addressed via \"HTTP2-Settings Header Field\" section.\n",
          "createdAt": "2013-07-20T00:14:29Z",
          "updatedAt": "2013-07-20T00:14:29Z"
        }
      ]
    },
    {
      "number": 52,
      "id": "MDU6SXNzdWUxMjE0NDk2NQ==",
      "title": "Characteristics of pre-Upgrade request",
      "url": "https://github.com/httpwg/http2-spec/issues/52",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "design",
        "editor-ready",
        "upgrade"
      ],
      "body": "The following attributes - which are normally attributed to HTTP/2.0 requests - are not available for the pre-Upgrade request in HTTP/1.1.  These require defaults:\n- Stream ID (default to 1)\n- Priority (default to 0.5/2^30)\n\nWe also need to determine the status of the stream, which probably needs to be half-closed from the server side.\n",
      "createdAt": "2013-03-18T17:43:30Z",
      "updatedAt": "2013-06-17T22:42:27Z",
      "closedAt": "2013-06-17T22:42:27Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; Martin to incorporate stream ID 1; priority 0.\n",
          "createdAt": "2013-06-13T16:48:58Z",
          "updatedAt": "2013-06-13T16:48:58Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "HTTP/1.1 request must be complete before client starts sending HTTP/2. This will block further requests on the connection until the upgrade is effective.\n",
          "createdAt": "2013-06-13T16:55:02Z",
          "updatedAt": "2013-06-13T16:55:02Z"
        }
      ]
    },
    {
      "number": 57,
      "id": "MDU6SXNzdWUxMjQ3MDY5MA==",
      "title": "Rejecting non-idempotent requests safely",
      "url": "https://github.com/httpwg/http2-spec/issues/57",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "editor-ready"
      ],
      "body": "The REFUSED_STREAM error code on RST_STREAM has an unexplained, yet potentially important property.  This error code is a clear signal to the receiver that the framing layer did not pass any frames to an upper layer for processing.\n\nThis allows a client to use this error code as a signal that the HTTP request it made can be safely retried, even if that request would not ordinarily permit that.  That is, a client (or intermediary ?) can safely retry an non-idempotent request.\n\nThis gets around the retry prohibition in http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-22#section-6.3.1\n\nThis needs to be better explained, perhaps with a new section in the HTTP usage section.\n\nSee thread starting at http://lists.w3.org/Archives/Public/ietf-http-wg/2013JanMar/1353.html\n",
      "createdAt": "2013-03-26T20:52:59Z",
      "updatedAt": "2013-08-05T07:37:29Z",
      "closedAt": "2013-08-05T07:37:29Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not sure that it's safe to always assume that automatic retry is safe for the REFUSED_STREAM case. There could be many reasons why the stream was refused and automatic retry could lead to abuse or could make the situation worse. Perhaps a separate status code (e.g. REFUSED_STREAM_RETRY_OK) would be better for this? That gives the server a slight bit more control over how things are handled.\n",
          "createdAt": "2013-04-23T20:40:22Z",
          "updatedAt": "2013-04-23T20:40:22Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "The assertion here is that automatically retrying a request is safe from an HTTP semantic point of view. It does not give any assertion that a stream will be accepted if it is retried. I'm not sure how useful a separate status code would be as it does not really provide the server any control. The server would always have to be prepared to handle abusive clients.\n",
          "createdAt": "2013-04-23T21:11:14Z",
          "updatedAt": "2013-04-23T21:11:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "James,\n\nThis is what I believe was the intent:\n\nThe distinction between REFUSED_STREAM and CANCEL is that REFUSED_STREAM\npermits retry, CANCEL might not.  If you are certain that a stream can be\nretried, send REFUSED_STREAM, otherwise send CANCEL.\n\nThat isn't effectively captured in the spec.  As long as this is OK from a\ndesign perspective, capturing that should be easy.\n\nOn 23 April 2013 14:11, Jeff Pinner notifications@github.com wrote:\n\n> The assertion here is that automatically retrying a request is safe from\n> an HTTP semantic point of view. It does not give any assertion that a\n> stream will be accepted if it is retried. I'm not sure how useful a\n> separate status code would be as it does not really provide the server any\n> control. The server would always have to be prepared to handle abusive\n> clients.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/57#issuecomment-16886727\n> .\n",
          "createdAt": "2013-04-23T22:34:43Z",
          "updatedAt": "2013-04-23T22:34:43Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can live with that kind of differentiation between CANCEL and REFUSED_STREAM. \n",
          "createdAt": "2013-04-23T23:16:40Z",
          "updatedAt": "2013-04-23T23:16:40Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is the design label correct for this? AIUI, there's no contention here, it just needs to be explained better than we did in SPDY. I believe this just needs editorial work.\n",
          "createdAt": "2013-04-24T00:11:13Z",
          "updatedAt": "2013-04-24T00:11:13Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oops, I gagged at re-reading my comment. I hate adding to procedural nonsense :P\n",
          "createdAt": "2013-04-24T00:12:01Z",
          "updatedAt": "2013-04-24T00:12:01Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; Martin to incorporate and James to review.\n",
          "createdAt": "2013-06-14T18:09:42Z",
          "updatedAt": "2013-06-14T18:09:42Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "In; @jasnell please review.\n",
          "createdAt": "2013-07-31T14:47:05Z",
          "updatedAt": "2013-07-31T14:47:05Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The current wording in the spec is sufficient on this I think... with the exception of the last paragraph regarding PING... the ability to send a PING doesn't really have anything to do with automatic request retry... I'd scrub that last paragraph.\n",
          "createdAt": "2013-07-31T15:10:18Z",
          "updatedAt": "2013-07-31T15:10:18Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "MDU6SXNzdWUxMjc4MTc2MQ==",
      "title": "A typo in 3.4.1.  Stream Creation",
      "url": "https://github.com/httpwg/http2-spec/issues/58",
      "state": "CLOSED",
      "author": "whitequark",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": ">   Streams are identified by a 31-bit numeric identifier.  Streams\n>   initiated by a client use **odd** numbered stream identifiers.  Streams\n>   initiated by the server use **odd** numbered stream identifiers.  A\n>   stream identifier of zero MUST NOT be used to create a new stream.\n",
      "createdAt": "2013-04-04T01:06:17Z",
      "updatedAt": "2013-04-04T15:57:25Z",
      "closedAt": "2013-04-04T15:57:25Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for catching this.\n",
          "createdAt": "2013-04-04T15:57:24Z",
          "updatedAt": "2013-04-04T15:57:24Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "MDU6SXNzdWUxMjkzNjIzNQ==",
      "title": "Update TLSNPN references to TLSALPN",
      "url": "https://github.com/httpwg/http2-spec/issues/59",
      "state": "CLOSED",
      "author": "brianraymor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editor-ready"
      ],
      "body": "http://www.ietf.org/mail-archive/web/tls/current/msg09470.html \n\nALPN is now a TLS work item. The TLSNPN references in the HTTP/2 draft should be updated to TLSALPN.\n\nhttps://datatracker.ietf.org/doc/draft-ietf-tls-applayerprotoneg\n",
      "createdAt": "2013-04-08T18:07:15Z",
      "updatedAt": "2013-05-21T22:35:00Z",
      "closedAt": "2013-05-21T22:35:00Z",
      "comments": []
    },
    {
      "number": 60,
      "id": "MDU6SXNzdWUxMzEwNDE4Nw==",
      "title": "Definition of \"message\"",
      "url": "https://github.com/httpwg/http2-spec/issues/60",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "... is currently:\n \"A complete sequence of frames.\"\n\nThat's a very odd definition; what does \"complete\" mean? Is this a concept at the framing layer, or a HTTP message?\n\nI think we should either make this align with the definition of a HTTP message, or delete.\n",
      "createdAt": "2013-04-12T05:49:08Z",
      "updatedAt": "2013-05-21T22:57:51Z",
      "closedAt": "2013-05-21T22:57:51Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Deleted in https://github.com/http2/http2-spec/commit/b9b1d622036a18b57b6a3ce204064119fa33989a\n",
          "createdAt": "2013-05-21T22:57:51Z",
          "updatedAt": "2013-05-21T22:57:51Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "MDU6SXNzdWUxMzEwNDI1NA==",
      "title": "Establishing a new stream upon exhaustion",
      "url": "https://github.com/httpwg/http2-spec/issues/61",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "streams"
      ],
      "body": "Currently, the draft says:\n\n\"An endpoint that is unable to create a new stream identifier can establish a new session for any new streams.\"\n\nWell, that's true for clients, but not for servers. Suggest refining to just be for clients, not endpoints (unless we want to come up with some complicated session resumption strategy; I'd rather not).\n",
      "createdAt": "2013-04-12T05:51:31Z",
      "updatedAt": "2013-05-29T21:44:57Z",
      "closedAt": "2013-05-29T21:44:57Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Would it really be too difficult to allow for reuse of stream id's? Yes, there are a number of potential gotchas, but if we know for certain that a previously used stream id is no longer being used actively, why not allow it to be reused and only require a new session if and only if there are no currently available unused stream ids. Reuse of id's would only be permitted once the full range of possible id's has been consumed.\n",
          "createdAt": "2013-04-23T20:26:52Z",
          "updatedAt": "2013-04-23T20:26:52Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd rather just keep it simple and avoid reuse (since that requires maintaining a used stream id data structure). How about just have the server begin a graceful shutdown (GOAWAY). The client can just re-establish a session. This works for all existing HTTP use cases (since they are all request/client driven, the server initiated streams is simply an optimization and not a functionality requirement for the HTTP use case), and might only become problematic in situations where the we have non-HTTP layerings on top of the session layer and _require_ server initiated streams. In that case, we could always define something in that non-HTTP application layering that says that when the server sends a GOAWAY, feel free to re-connect to subscribe to server initiated streams. Or we can bake it in the session layer by adding a new status code into GOAWAY.\n",
          "createdAt": "2013-04-24T05:03:00Z",
          "updatedAt": "2013-04-24T05:03:00Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "MDU6SXNzdWUxMzEwNDI3OA==",
      "title": "Timing of REFUSED_STREAM",
      "url": "https://github.com/httpwg/http2-spec/issues/62",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "streams"
      ],
      "body": "In Stream Creation, the draft currently says:\n\n\"Upon receipt of a frame, the recipient can terminate the corresponding stream by sending a stream error of type REFUSED_STREAM.\"\n\nIs this really just upon receipt of a frame? Can't it be any time?\n",
      "createdAt": "2013-04-12T05:53:05Z",
      "updatedAt": "2013-05-29T20:46:32Z",
      "closedAt": "2013-05-29T20:46:32Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This comment relates to #57.  REFUSED_STREAM is supposed to be used only when a stream isn't going to be \"processed\".  That would allow a client to automatically re-attempt a non-idempotent request, or a server to learn that a pushed resource wasn't actually accepted (even if it was all sent).\n\nThis needs to be clarified.\n",
          "createdAt": "2013-04-12T17:06:23Z",
          "updatedAt": "2013-04-12T17:06:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh yes, and it can be any time.  That said, we probably need to be careful: an implementation is unlikely to recall that stream 2460928 was reset while it was still generating stream 4, 6 and 8.  If it weren't for PUSH_PROMISE, I'd say that endpoints MUST NOT generate RST_STREAM unless they had received a frame for the corresponding stream.  PUSH_PROMISE complicates things considerably.\n",
          "createdAt": "2013-04-12T20:22:31Z",
          "updatedAt": "2013-04-12T20:22:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "James covered this in one of his edits.  Closing this one, but leaving #57 open to track the addition of text on REFUSED_STREAM and retries.\n",
          "createdAt": "2013-05-29T20:46:32Z",
          "updatedAt": "2013-05-29T20:46:32Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "MDU6SXNzdWUxMzEwNDQ2MQ==",
      "title": "The stream ID in GOAWAY",
      "url": "https://github.com/httpwg/http2-spec/issues/63",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "frame semantics"
      ],
      "body": "\"An endpoint that encounters a session error MUST first send a GOAWAY frame with the stream identifier of the last stream that it successfully received from its peer.\"\n\nWhat does that mean? Is it the stream ID of the last _frame_ received from its peer, regardless of who initiated the stream? Is it the last successfully initiated stream _by_ the peer?\n\nWe also use \"peer\" a fair amount without defining it...\n",
      "createdAt": "2013-04-12T06:01:58Z",
      "updatedAt": "2013-06-13T17:54:24Z",
      "closedAt": "2013-06-13T17:54:24Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "In GOAWAY:\n\n```\n        There is an inherent race condition between an endpoint starting new streams and the\n        remote sending a GOAWAY message.  To deal with this case, the GOAWAY contains the stream\n        identifier of the last stream which was processed on the sending endpoint in this\n        session.  If the receiver of the GOAWAY used streams that are newer than the indicated\n        stream identifier, they were not processed by the sender and the receiver may treat the\n        streams as though they had never been created at all (hence the receiver may want to\n        re-create the streams later on a new session).\n```\n\nI think this really needs to be (in both places) \"the last stream successfully initiated by the peer.\" \n\n\"Processed\" is misleading.\n",
          "createdAt": "2013-04-12T07:06:38Z",
          "updatedAt": "2013-04-12T07:06:38Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, agreed on all counts.  The definition of \"processed\" and even \"received\" needs to be a lot crisper.  And peer is used enough times to also have a crisp definition.\n\nThe intent is to use GOAWAY to indicate the last stream that has been received AND acted upon in its entirety.\n\nThe behaviour of GOAWAY under error conditions clearly needs to be different because the connection close follows immediately, whereas a GOAWAY under a graceful shutdown can be sent well ahead of the connection being closed, allowing streams to complete safely.\n",
          "createdAt": "2013-04-12T17:10:44Z",
          "updatedAt": "2013-04-12T17:10:44Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "A few comments:\n\n1) The intent has not been to indicate the the stream has been acting upon in its entirety -- the stream may still be open and data being transferred. Which of course leads to:\n\n2) Connection close only follows immediately for session errors, but this does not mean that the behavior of GOAWAY must be different. It is an indication that a stream has at least been acknowledge so may not necessarily be resent automatically unless idempotence is guaranteed.\n\nThe current use of the frame (at least on the server side) has been to indicate the highest numbered stream ID that will not be refused.\n\nSo for example if a client has initiated streams 1, 3, 5, and 7, with streams 1 and 5 being half-closed on the client side and 3 and 7 being open, the server on shutting down the connection would send a GOAWAY frame with stream ID 7, indicating that it will continue to accept frames for streams 3 and 7 but will refuse to accept streams 9 and higher.\n\nIn the session error case, the meaning of the frame does not have to change, even if connection close follows immediately. It indicates to the client that stream 9 may be resent automatically but streams 3 and 7 may not.\n",
          "createdAt": "2013-04-18T18:06:41Z",
          "updatedAt": "2013-04-18T18:06:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Take a look at the edits that I made in the above commit and let me know if that helps.  This captures, I hope, what @jpinner was trying to explain.\n",
          "createdAt": "2013-05-07T00:08:33Z",
          "updatedAt": "2013-05-07T00:08:33Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "MDU6SXNzdWUxMzE0MDU0OA==",
      "title": "SETTINGS_CURRENT_CWND",
      "url": "https://github.com/httpwg/http2-spec/issues/65",
      "state": "CLOSED",
      "author": "GabrielMontenegro",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "transport mapping"
      ],
      "body": "Must decide whether we'll keep it or drop it.\n",
      "createdAt": "2013-04-12T21:36:14Z",
      "updatedAt": "2013-06-16T17:17:42Z",
      "closedAt": "2013-06-16T17:17:42Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; decided to remove this setting. May add later if data and solid proposal gain consensus.\n",
          "createdAt": "2013-06-14T18:58:32Z",
          "updatedAt": "2013-06-14T18:58:32Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "MDU6SXNzdWUxMzE0MDY0Mw==",
      "title": "SETTINGS_CURRENT_CWND: keep it or drop it?",
      "url": "https://github.com/httpwg/http2-spec/issues/66",
      "state": "CLOSED",
      "author": "GabrielMontenegro",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Decide whether to keep this or drop it.\n",
      "createdAt": "2013-04-12T21:38:52Z",
      "updatedAt": "2013-04-12T23:38:54Z",
      "closedAt": "2013-04-12T23:38:54Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Duplicate of #65.\n",
          "createdAt": "2013-04-12T23:38:54Z",
          "updatedAt": "2013-04-12T23:38:54Z"
        }
      ]
    },
    {
      "number": 67,
      "id": "MDU6SXNzdWUxMzE0NTMyMw==",
      "title": "3.3.1 Frame Header - Reserved bit",
      "url": "https://github.com/httpwg/http2-spec/issues/67",
      "state": "CLOSED",
      "author": "brianraymor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "frame layout"
      ],
      "body": "3.3.1.  Frame Header\n\n   R: A reserved 1-bit field.  The semantics of this bit are not\n      defined.\n\nWhat is the purpose for this field?\n\nWhy not just have a 32-bit stream identifier?\n",
      "createdAt": "2013-04-13T00:41:21Z",
      "updatedAt": "2013-08-05T14:12:37Z",
      "closedAt": "2013-08-05T14:12:37Z",
      "comments": [
        {
          "author": "brianraymor",
          "authorAssociation": "NONE",
          "body": "Purpose is for experimentation with stream reprioritization.\n\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/0135.html\n",
          "createdAt": "2013-04-18T21:56:54Z",
          "updatedAt": "2013-04-18T21:56:54Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; happy to punt for now.\n",
          "createdAt": "2013-06-13T17:14:22Z",
          "updatedAt": "2013-06-13T17:14:22Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Also there to protect against some implementations having problems with signed vs. unsigned \n",
          "createdAt": "2013-07-31T14:53:10Z",
          "updatedAt": "2013-07-31T14:53:10Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Hamburg; are a variety of use cases, no need to remove (now).\n",
          "createdAt": "2013-08-05T14:12:37Z",
          "updatedAt": "2013-08-05T14:12:37Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "MDU6SXNzdWUxMzM2MjYwMg==",
      "title": "PING payload",
      "url": "https://github.com/httpwg/http2-spec/issues/68",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics"
      ],
      "body": "In the current draft, the PING frame requires the server to resend an arbitrarily large payload.\n\nPerhaps restrict the length of the PING frame to 0, allow any stream identifier in the header require the server to echo the identifier?\n\nI'm not sure what benefit being able to echo arbitrary contents provides.\n",
      "createdAt": "2013-04-18T18:13:27Z",
      "updatedAt": "2013-06-18T18:18:37Z",
      "closedAt": "2013-06-18T18:18:37Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Ever used ICMP ping?  Same reason.\n\nMaybe we need to explicitly allow an endpoint (not just the server) to\ntruncate a PONG if it finds it to be too large.\n\nOn 18 April 2013 11:13, Jeff Pinner notifications@github.com wrote:\n\n> In the current draft, the PING frame requires the server to resend an\n> arbitrarily large payload.\n> \n> Perhaps restrict the length of the PING frame to 0, allow any stream\n> identifier in the header require the server to echo the identifier?\n> \n> I'm not sure what benefit being able to echo arbitrary contents provides.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/68\n> .\n",
          "createdAt": "2013-04-18T22:00:21Z",
          "updatedAt": "2013-04-18T22:00:21Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "ping flood\n\nGuess we want more than just a liveness check from the PING mechanism now?\n",
          "createdAt": "2013-04-18T22:52:39Z",
          "updatedAt": "2013-04-18T22:52:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There's specific text in there to support the use of PING as a way to\nmeasure RTT.  That's not new.  It might not be useful, but it's certainly\nnot new.\n\nOn 18 April 2013 15:52, Jeff Pinner notifications@github.com wrote:\n\n> ping flood\n> \n> Guess we want more than just a liveness check from the PING mechanism now?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/68#issuecomment-16617492\n> .\n",
          "createdAt": "2013-04-18T22:54:23Z",
          "updatedAt": "2013-04-18T22:54:23Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "RTT can be measured without the arbitrary payload size.\n\nMy gut reaction is that allowing the server to truncate is equivalent or perhaps worse than not allowing a payload.\n\nNot trying to be difficult here -- just finally got around to trying to implement the framing layer.\n",
          "createdAt": "2013-04-18T22:59:31Z",
          "updatedAt": "2013-04-18T22:59:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "If you want to perform an RTT measurement without having to do lockstep\n(wait for response before sending next ping), then it helps to put a small\namount of context in the payload.  Otherwise, correlation of ping and pong\nhas to rely on ordering (ICMP doesn't have that feature, so they really\nneed payload echo).  In most genuine cases, truncation is easy to detect.\nI'm not sure what you would do if you detected truncation, but that's\nanother thing.\n\nThe only reason the payload is there is to replace a feature that was\nremoved when the header \"identifier\" was turned into a \"stream\nidentifier\".  Maybe this can go too.\n\nOn 18 April 2013 15:59, Jeff Pinner notifications@github.com wrote:\n\n> RTT can be measured without the arbitrary payload size.\n> \n> My gut reaction is that allowing the server to truncate is equivalent or\n> perhaps worse than not allowing a payload.\n> \n> Not trying to be difficult here -- just finally got around to trying to\n> implement the framing layer.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/68#issuecomment-16617876\n> .\n",
          "createdAt": "2013-04-18T23:09:51Z",
          "updatedAt": "2013-04-18T23:09:51Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Yep -- so maybe either allow \"stream identifier\" to be \"identifier\" or make the payload 4 bytes of \"identifier\" instead of an arbitrary packet.\n\nThe aesthetician in me like the uniformity of \"stream identifier\" being 0 for session based frames so I would prefer the latter :)\n",
          "createdAt": "2013-04-18T23:24:48Z",
          "updatedAt": "2013-04-18T23:24:48Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "It's not just a correlator that would be needed.  If I'm just doing timing,\nthe only thing that I care about is when the PING was sent, so I might like\nto include a timestamp in the payload, probably using whatever form my\nprogramming environment supports best.  That might be an NTP timestamp, a\ntime_t, an IEEE 754 double, a string, or anything.  Allowing a modest\npayload lets me do any of these things.  Anything more than a handful of\nbytes would be nuts, but I can imagine some people wanting 128bits.\n\nOn 18 April 2013 16:24, Jeff Pinner notifications@github.com wrote:\n\n> Yep -- so maybe either allow \"stream identifier\" to be \"identifier\" or\n> make the payload 4 bytes of \"identifier\" instead of an arbitrary packet.\n> \n> The aesthetician in me like the uniformity of \"stream identifier\" being 0\n> for session based frames so I would prefer the latter :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/68#issuecomment-16619376\n> .\n",
          "createdAt": "2013-04-19T00:09:08Z",
          "updatedAt": "2013-04-19T00:09:08Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Please summarise this on the mailing list and look for input there before finishing. Thanks,\n",
          "createdAt": "2013-04-19T02:45:04Z",
          "updatedAt": "2013-04-19T02:45:04Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See: https://github.com/http2/http2-spec/pull/91\n",
          "createdAt": "2013-05-10T23:26:09Z",
          "updatedAt": "2013-05-10T23:26:09Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "James' proposal from #91:\n\n```\nPING frames MAY contain no more than 8 bytes of additional frame data. Receivers of\na PING send a response PING frame with the PONG flag set and precisely the same \nsequence of frame data octets back to the sender as soon as possible.\n```\n",
          "createdAt": "2013-05-29T12:12:55Z",
          "updatedAt": "2013-05-29T12:12:55Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF interim; fix PING to 8 bytes.\n",
          "createdAt": "2013-06-13T18:01:57Z",
          "updatedAt": "2013-06-13T18:01:57Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Current text already says \"In addition to the frame header, PING frames MUST contain 8 additional octets of opaque data. A sender can utilize this payload in any manner it wishes but MUST include the octets even if they are unused. Receivers of a PING send a response PING frame with the PONG flag set and precisely the same sequence of octets back to the sender as soon as possible.\"\n\nWe can close this, right?\n",
          "createdAt": "2013-06-14T21:55:45Z",
          "updatedAt": "2013-06-14T21:55:45Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "What should a recipient do if it receives a PING with other than 8 bytes?\n",
          "createdAt": "2013-06-15T18:02:28Z",
          "updatedAt": "2013-06-15T18:02:28Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "session error\n",
          "createdAt": "2013-06-15T18:12:29Z",
          "updatedAt": "2013-06-15T18:12:29Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Yep - but it needs to be spec'd.\n",
          "createdAt": "2013-06-15T18:15:23Z",
          "updatedAt": "2013-06-15T18:15:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that we got it all.  Closing!\n",
          "createdAt": "2013-06-18T18:18:37Z",
          "updatedAt": "2013-06-18T18:18:37Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "MDU6SXNzdWUxMzYwMTc1Mw==",
      "title": "HTTP Requests and Responses on the Same Stream ID",
      "url": "https://github.com/httpwg/http2-spec/issues/69",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Editorial Issue: Reading through the current draft (-02), unless I missed it, it needs to be clarified that HTTP request and responses MUST be sent within the same stream unless we specifically want to allow responses to be sent in a different stream than the request.\n\nFor instance:\n\nRequest:\n  Stream-ID: 1\n  :method: get\n\nResponse:  (server uses the same stream)\n  Stream-ID: 1\n  :status: 200\n\nOR...\n\nRequest:\n  Stream-ID: 1\n  :method: get\n\nResponse: (server uses a different stream)\n  Stream-ID: 2\n  :status: 200\n\nCurrently, it appears that this is an unspoken assumption in the spec text that needs to be called out explicitly. Or, if it's already there, it needs to be made more visible.\n",
      "createdAt": "2013-04-24T18:15:05Z",
      "updatedAt": "2013-05-06T23:32:35Z",
      "closedAt": "2013-05-06T23:32:35Z",
      "comments": []
    },
    {
      "number": 70,
      "id": "MDU6SXNzdWUxMzYwNDAyOQ==",
      "title": "Special HTTP Header Ordering",
      "url": "https://github.com/httpwg/http2-spec/issues/70",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current draft (-02) specifies that special case : prefixed headers MUST appear first within the serialized header block of HEADERS and PUSH_PROMISE frames. However, given the three header encoding mechanisms currently being explored, it's not entirely clear if this requirement makes sense and is optimum. We will need to revisit this issue once we decide which header encoding mechanism we wish to adopt.\n",
      "createdAt": "2013-04-24T19:05:46Z",
      "updatedAt": "2013-05-08T02:23:52Z",
      "closedAt": "2013-05-08T02:23:52Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Duplicate of #23.\n",
          "createdAt": "2013-05-08T02:23:52Z",
          "updatedAt": "2013-05-08T02:23:52Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "MDU6SXNzdWUxMzYwNTU4OA==",
      "title": "Editorial: Definitions of streams and frames",
      "url": "https://github.com/httpwg/http2-spec/issues/72",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the current draft (-02), the definition of a stream is given as, \"A bi-directional flow of bytes across a virtual channel within the HTTP/2.0 session.\" ... although this is technically correct, I'm wondering if it wouldn't be better to relate this to frames... i.e. \"A bi-directional flow of frames across a virtual channel within the HTTP/2.0 session\" ... \n\nLikewise, the definition of a frame is given as, \"The smallest unit of communication, each containing a frame header.\"... this is a bit deficient, perhaps, \"The smallest unit of communication within an HTTP/2.0 session, consisting of a header identifying the frame type and a variable-length sequence of bytes.\"\n\nThe goal, of course, is just to make sure the relationships between these items are crystal clear.\n",
      "createdAt": "2013-04-24T19:42:02Z",
      "updatedAt": "2013-04-24T21:11:02Z",
      "closedAt": "2013-04-24T21:11:02Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I see that you've covered this in #71.  That's almost good to pull, we'll deal with this issue over there.\n",
          "createdAt": "2013-04-24T21:11:02Z",
          "updatedAt": "2013-04-24T21:11:02Z"
        }
      ]
    },
    {
      "number": 73,
      "id": "MDU6SXNzdWUxMzYxMzgzNw==",
      "title": "Unilateral Stream Creation",
      "url": "https://github.com/httpwg/http2-spec/issues/73",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "The current draft (-02) current states: \"Streams can be established and used unilaterally.\" \n\nIs this really the case? Can a server unilaterally decide to start sending unsolicited stream frames to a client without an associated PUSH_PROMISE or HTTP Request?\n",
      "createdAt": "2013-04-24T22:15:30Z",
      "updatedAt": "2013-08-05T07:29:25Z",
      "closedAt": "2013-08-05T07:29:25Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "At the framing layer, yes.  That said, the HTTP usage doesn't define any\nsemantics for this, so it's not legal for the protocol.\n\nOn 24 April 2013 15:15, James M Snell notifications@github.com wrote:\n\n> The current draft (-02) current states: \"Streams can be established and\n> used unilaterally.\"\n> \n> Is this really the case? Can a server unilaterally decide to start sending\n> unsolicited stream frames to a client without an associated PUSH_PROMISE or\n> HTTP Request?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/73\n> .\n",
          "createdAt": "2013-04-24T23:30:06Z",
          "updatedAt": "2013-04-24T23:30:06Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Then we need to clarify this in the spec... if we are defining the Framing layer and HTTP usage separately from one another, then we can say that while streams in general can be established and used unilaterally by the client or server, in sessions established specifically for HTTP/2.0 communication, servers MUST NOT establish new streams without an associated PUSH_PROMISE, and that PUSH_PROMISES may only be sent in client initiated streams. \n\nThis might be something we need clarification on list for, however.\n",
          "createdAt": "2013-04-24T23:54:20Z",
          "updatedAt": "2013-04-24T23:54:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Marking this as a design issue.  It seems that we've had some discussion regarding stream \"creation\" that are inconsistent with the model that I had assumed.  A fair number of folks seem to be under the impression that streams have to start with a particular type of message.  Until we've discussed the specific issue, I'm not confident that we agree on this.\n",
          "createdAt": "2013-05-29T20:49:20Z",
          "updatedAt": "2013-05-29T20:49:20Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; pending Layering TF proposal.\n",
          "createdAt": "2013-06-13T20:26:38Z",
          "updatedAt": "2013-06-13T20:26:38Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "MDU6SXNzdWUxMzYxNzUzNQ==",
      "title": "Editorial Issue: RST_STREAM on Closed Streams",
      "url": "https://github.com/httpwg/http2-spec/issues/74",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the current draft (-02), the \"Stream Half-Close\" section, we say that if an endpoint receives a frame from a half-closed peer, it MUST send a RST_STREAM. In the next section on \"Stream Close\", we say that if an endpoint receives a frame for a closed stream, it MAY send a RST_STREAM. \n\nIs the difference (MUST vs. MAY) intentional?\n",
      "createdAt": "2013-04-24T23:59:36Z",
      "updatedAt": "2013-05-06T23:32:35Z",
      "closedAt": "2013-05-06T23:32:35Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Those two sections need to be reconciled.  The Stream Close section\nprobably needs to mention that a stream is completely closed when it is\nhalf-closed in both directions.  Then, that last paragraph can disappear.\n\nOn 24 April 2013 16:59, James M Snell notifications@github.com wrote:\n\n> In the current draft (-02), the \"Stream Half-Close\" section, we say that\n> if an endpoint receives a frame from a half-closed peer, it MUST send a\n> RST_STREAM. In the next section on \"Stream Close\", we say that if an\n> endpoint receives a frame for a closed stream, it MAY send a RST_STREAM.\n> \n> Is the difference intentionally?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/74\n> .\n",
          "createdAt": "2013-04-25T00:16:52Z",
          "updatedAt": "2013-04-25T00:16:52Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That is mentioned in the first bullet point of that section.\n\nOne question that comes up is: what happens if an endpoint keeps on sending frames for a closed stream? The receiving endpoint could either a) choose to ignore those, b) send an RST_STREAM for every instance or c) terminate the session. I would say that in some cases, (c) is justified because the sending endpoint may be malfunctioning in some manner.\n",
          "createdAt": "2013-04-25T00:29:41Z",
          "updatedAt": "2013-04-25T00:29:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I thought that we had caught that case. We can't say to only send one, even\nthough that would be the ideal case, but we do encourage that. Sending\nmultiple is not ideal, but a choice that an implementation might make\nbecause a connection that is up is better than one that keeps on being\nrebuilt.\nOn Apr 24, 2013 5:29 PM, \"James M Snell\" notifications@github.com wrote:\n\n> That is mentioned in the first bullet point of that section.\n> \n> One question that comes up is: what happens if an endpoint keeps on\n> sending frames for a closed stream? The receiving endpoint could either a)\n> choose to ignore those, b) send an RST_STREAM for every instance or c)\n> terminate the session. I would say that in some cases, (c) is justified\n> because the sending endpoint may be malfunctioning in some manner.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/74#issuecomment-16981062\n> .\n",
          "createdAt": "2013-04-25T00:33:20Z",
          "updatedAt": "2013-04-25T00:33:20Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok yes, my apologies. I missed the paragraph in section 3.5.2 that deals with that case. The MAY vs. MUST confusion still needs to be cleared up, however.\n",
          "createdAt": "2013-04-25T15:46:19Z",
          "updatedAt": "2013-04-25T15:46:19Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "MDU6SXNzdWUxMzY0NzkxMg==",
      "title": "PUSH_PROMISE Stream Priority",
      "url": "https://github.com/httpwg/http2-spec/issues/75",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "server push"
      ],
      "body": "The current draft (-02) says, \"The endpoint establishing a new stream can assign a priority for the stream.\"\n\nHowever, the spec does not define how a stream established using PUSH_PROMISE can assign the priority for a stream, nor does the spec discuss whether the notion of stream priority applies to push streams.\n\nThe spec currently states that PUSH_PROMISE is followed later on by a HEADERS frame. \n\nIf priority applies to push streams, then we need to add that priority can be assigned by allowing the use of a HEADERS+PRIORITY frame. Otherwise, we need to clarify the spec text to say that push streams have no priority.\n",
      "createdAt": "2013-04-25T16:35:09Z",
      "updatedAt": "2013-08-05T12:33:39Z",
      "closedAt": "2013-08-05T12:33:39Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim.\n\nDefault for streams is 1/2 way through. If priority is not assigned through other means, pushed streams are assumed to inherit the priority of the associated request (minus one, priority-wise).\n",
          "createdAt": "2013-06-13T21:39:12Z",
          "updatedAt": "2013-06-13T21:39:12Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "MDU6SXNzdWUxMzY1MDA5MQ==",
      "title": "Editorial Issue: RST_STREAM, GOAWAY and FINAL flag",
      "url": "https://github.com/httpwg/http2-spec/issues/77",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current draft (-02) says, \"A RST_STREAM is the last frame that an endpoint can send on a stream.\" ... what is not explicitly stated anywhere in the draft is that the FINAL flag for the RST_STREAM frame MUST be set. Likewise with GOAWAY\n\nAlso, what happens if an endpoint sends a RST_STREAM with stream identifier #0 ? \n",
      "createdAt": "2013-04-25T17:09:18Z",
      "updatedAt": "2013-05-08T02:52:40Z",
      "closedAt": "2013-05-08T02:52:40Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Seems to be a side-effect of defining the FINAL flag as part of the common frame header. It is also misleading as the final flag places the stream into a half-closed state (Sec 3.4.3) but the RST_STREAM frame places the stream into the closed state (Sec 3.4.4).\n\nAlso IMHO, RST_STREAM w/ stream id 0 should be a session error.\n",
          "createdAt": "2013-04-25T17:55:27Z",
          "updatedAt": "2013-04-25T17:55:27Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Perhaps in the definitions of the RST_STREAM and GOAWAY frames we can say that the FINAL flag has no defined meaning and MUST be ignored. \n",
          "createdAt": "2013-04-25T17:59:57Z",
          "updatedAt": "2013-04-25T17:59:57Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And, fwiw, I agree with session error for RST_STREAM w/ stream id 0.\n",
          "createdAt": "2013-04-25T18:00:18Z",
          "updatedAt": "2013-04-25T18:00:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's run this one by the list.\n\nOn 25 April 2013 10:55, Jeff Pinner notifications@github.com wrote:\n\n> Seems to be a side-effect of defining the FINAL flag as part of the common\n> frame header. It is also misleading as the final flag places the stream\n> into a half-closed state (Sec 3.4.3) but the RST_STREAM frame places the\n> stream into the closed state (Sec 3.4.4).\n> \n> Also IMHO, RST_STREAM w/ stream id 0 should be a session error.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/77#issuecomment-17029027\n> .\n",
          "createdAt": "2013-04-25T19:56:58Z",
          "updatedAt": "2013-04-25T19:56:58Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Addressed by recent commits. #1527cea3b6\n",
          "createdAt": "2013-05-08T02:52:40Z",
          "updatedAt": "2013-05-08T02:52:40Z"
        }
      ]
    },
    {
      "number": 78,
      "id": "MDU6SXNzdWUxMzY1MjA4MQ==",
      "title": "Concurrent Streams Limits and Unidirectional Streams",
      "url": "https://github.com/httpwg/http2-spec/issues/78",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "In the current draft (-02), we state that:\n\nA. Any endpoint can initiate and half-close a fully unidirectional stream that does not require any action or acknowledgement from the receiving peer. Once half-closed, these remain in a constant half-closed state with the receiving peer having the option of sending frames for that stream at any time for the full duration of the session.\n\nB. An endpoint MUST NOT exceed the maximum concurrent streams limit set by it's peer and that half-closed streams in any direction count towards this limit.\n\nC. Unless I missed it somewhere, clients are not required to half-close PUSH_PROMISE streams.\n\nThe potential problem here is simple:\n\nIf a client sets a limit of 4 concurrent streams, and the server initiates 4 separate PUSH_PROMISE streams that the server half-closes but that are never half-closed by the client, the server not be able to initiate new push streams for the duration of the session. \n",
      "createdAt": "2013-04-25T17:39:44Z",
      "updatedAt": "2013-08-05T07:29:08Z",
      "closedAt": "2013-08-05T07:29:08Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "On the list...\n",
          "createdAt": "2013-04-25T19:22:24Z",
          "updatedAt": "2013-04-25T19:22:24Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See Thread: http://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/0380.html\n",
          "createdAt": "2013-05-06T17:21:19Z",
          "updatedAt": "2013-05-06T17:21:19Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "DIscussed at SF Interim; pending proposal from Layering TF.\n",
          "createdAt": "2013-06-13T20:27:05Z",
          "updatedAt": "2013-06-13T20:27:05Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This should be addressed by https://github.com/http2/http2-spec/commit/05df79d3f4c0d65a69dac53444b939693f113d7b\n\nPending approval of the changes included in the layering branch, this should be ok.\n",
          "createdAt": "2013-06-25T03:25:28Z",
          "updatedAt": "2013-06-25T03:25:28Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "MDU6SXNzdWUxMzY2NjAzMg==",
      "title": "Design Issue: Must Ignore rule for Unknown Frame Types",
      "url": "https://github.com/httpwg/http2-spec/issues/80",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the current draft (-02) we say, \"Implementations MUST ignore unsupported and unrecognized frame types.\" but we give no guidance that I can find about handling unknown frames that potentially modify session state. For example, suppose some extension comes up with a new frame type that includes a compressed header block. The receiving endpoint will have no way of interpreting the content, but if it ignores the frame entirely, it's stored session state can unknowingly fall out of sync with the sender.\n\nRecommendation: rather than a \"MUST IGNORE\" rule here, unknown and unrecognized frame types ought to be a Session Error because the receiver cannot determine whether and how those frames may have changed the session state on the sending side. It would not be safe for the receiver to continue attempting to communicate with the sender on that session.\n\nThis obviously has an impact on the extensibility of the framing layer. In short, a sender would not be able to use a new frame type unless it knows the receiver can interpret it. The only solution for that would be to have some kind of negotiation occur where the sender effectively ask the recipient if particular extensions are supported (as part of the session header perhaps?)\n",
      "createdAt": "2013-04-25T22:55:03Z",
      "updatedAt": "2014-05-23T00:26:32Z",
      "closedAt": "2013-05-08T02:55:40Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Related issue: MUST IGNORE and Possible Denial of Service Attack:\n\nIn the current draft (-02), we say that Unknown and unrecognized Frame types MUST be ignored by an endpoint. While this is ok in theory, this can be very dangerous in practice. Specifically, an attacking sender could choose to flood a recipient with a high number of junk frames that use a previously unused type code. Because of the MUST IGNORE rule, these would simply be discarded by the recipient but the damage will already have been done. Flow control actions could help mitigate the problem, but those are only partially effective.\n\nAlso, the order of processing here for error handling is not clear. \n\nLet's say an attacker sends a HEADERS frame to the server initiating a stream. The server sends an RST_STREAM REFUSED_STREAM fully closing the stream. The attacker continues to send JUNK frames for the same stream ID. There are two conditions happening here:\n1. The sender is sending frames for a closed stream, which ought to result in an RST_STREAM, but..\n2. The frame type is unknown and unrecognized by the server so MUST be ignored.\n\nWhich condition takes precedence and how do we mitigate the possible attack vector on this one.\n",
          "createdAt": "2013-04-26T17:54:09Z",
          "updatedAt": "2013-04-26T17:54:09Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Issue resolved with commit 1527cea3b6\n",
          "createdAt": "2013-05-08T02:55:40Z",
          "updatedAt": "2014-05-23T00:26:32Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "MDU6SXNzdWUxNDExNDI1NQ==",
      "title": "Editorial Issue: Apparent error in flow control description...",
      "url": "https://github.com/httpwg/http2-spec/issues/87",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Under the definition of the \"WINDOW_UPDATE\" frame, there is the following paragraph..\n\n```\nFlow control only applies to frames that are identified as being \nsubject to flow control. Of the frames defined in this document, \nthis includes only DATA frame. Receivers MUST either buffer \nor process all other frames, terminate the corresponding stream, \nor terminate the connection.  The stream or connection is \nterminated with a FLOW_CONTROL_ERROR code.\n```\n\nNote that there appears to be some context missing between the second and third sentences; and there appears to be no explanation as what causes the possible error conditions. \n",
      "createdAt": "2013-05-08T18:07:15Z",
      "updatedAt": "2013-05-21T22:54:44Z",
      "closedAt": "2013-05-21T22:54:44Z",
      "comments": []
    },
    {
      "number": 88,
      "id": "MDU6SXNzdWUxNDE2NzAyMw==",
      "title": "There are two ways to disable connection window flow control. This is redundant.",
      "url": "https://github.com/httpwg/http2-spec/issues/88",
      "state": "CLOSED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "SETTINGS_FLOW_CONTROL_OPTIONS and WINDOW_UPDATE for stream 0 with the END_FLOW_CONTROL flag.\n\nDiscussion: http://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/0709.html\n",
      "createdAt": "2013-05-09T21:28:31Z",
      "updatedAt": "2013-05-10T00:11:43Z",
      "closedAt": "2013-05-10T00:11:43Z",
      "comments": []
    },
    {
      "number": 94,
      "id": "MDU6SXNzdWUxNDIyMjkxOA==",
      "title": "Design: Are unknown frame types hop-by-hop or end-to-end?",
      "url": "https://github.com/httpwg/http2-spec/issues/94",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the current draft, endpoints are required to \"ignore\" unknown and unsupported frame types. What's not yet clear, however, is whether such frames are required to be forwarded on by intermediaries that do not support them. \n\nIn other words, A talks to C via reverse proxy B. A sends a stream that includes EXTENSION_FRAME_TYPE that is unknown to B. Is B...\n\nA) Required to drop the frame silently without forwarding it on to C\nB) Required to always forward the frame on to C\nC) Neither, B can do whatever it wants\n\nThere is an obvious impact here on the future deployment of new extension frame types. If the answer is A or C, we'll have to wait on infrastructure support to use new frame types, which would be unfortunate.\n",
      "createdAt": "2013-05-11T15:29:23Z",
      "updatedAt": "2013-05-11T16:17:35Z",
      "closedAt": "2013-05-11T16:17:35Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing this one, opened a separate issue with a more extensive treatment of the issue... https://github.com/http2/http2-spec/issues/95\n",
          "createdAt": "2013-05-11T16:17:33Z",
          "updatedAt": "2013-05-11T16:17:33Z"
        }
      ]
    },
    {
      "number": 95,
      "id": "MDU6SXNzdWUxNDIyMzQ4Mw==",
      "title": "Frame Type Extensibility",
      "url": "https://github.com/httpwg/http2-spec/issues/95",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics"
      ],
      "body": "There are a couple of issues relating to frame type extensibility:\n1. Are frames end-to-end or hop-by-hop? This is currently undefined. Control frames appear to always be hop-by-hop, Header bearing frames might or might not be hop-by-hop, Data frames appear to always be end-to-end. What about new extension frame types?\n2. Are new unsupported frame types subject to flow control? How can we differentiate new control frame types vs. data frame types?\n3. There is no prescribed mechanism for rolling out support for new standard frame types vs. private use frame types.\n\nRecommendation:\n\nOne approach we can take to dealing with this is to segment the 8-bit frame type namespace into two distinct categories and reserve a limited number of frame types from each for \"private use\". That is,\n\n0xxxxxxx => Control Frames\n1xxxxxxx => Data Frames\n\nControl Frames (0x00-7F) are always hop-by-hop and are not subject to flow control. Frame types 0x6B-7F would be reserved for \"private use\", meaning that these types could not be registered within the IANA registry. \n\nData Frames (0x80-FF) are always end-to-end and are subject to flow control. Frame types 0xEB-FF would be reserved for \"private use\". \n\nThe frame type of the existing DATA frame would change from 0x00 to 0x80, all other existing frame types would remain unchanged.\n\nThis approach gives us a clear way of dealing with extension frames, flow control, etc without introducing undue complexity.\n",
      "createdAt": "2013-05-11T16:13:11Z",
      "updatedAt": "2014-06-05T15:44:58Z",
      "closedAt": "2014-06-05T15:44:58Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "To be covered by the Layering TF.\n",
          "createdAt": "2013-06-13T18:52:30Z",
          "updatedAt": "2013-06-13T18:52:30Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We really need a text proposal that covers this issue.  I suspect that the issues that needs to address include:\n- Unsupported frames cannot alter the state of the stream or the connection.  That's non-negotiable.\n- We need to decide when and where unsupported frames can be sent.  That is, what stream states permit the use of unsupported frames, and whether they can be sent on stream 0.\n- We need to decide what intermediaries are permitted to do with unsupported frames.  Giving them just two choices might be best: either forward all unsupported frames, or don't forward any unsupported frames.  Selectively forwarding frames seems unlikely to be conducive to any sort of reliability.\n",
          "createdAt": "2013-08-27T21:49:08Z",
          "updatedAt": "2013-08-27T21:49:08Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; no decisions yet, but covered:\n- Having a pre-defined extension frame type makes sense; more flexible extension identifier (~4 bytes of org id). On non-stream0, act like HEADERS\n- Stream0 extension frames would be effectively hop-by-hop (act like SETTINGS, but no ack)\n- Roberto's proposal of using negotiation to determine requirements for proxies depends upon ALPN ClientHello issues.\n",
          "createdAt": "2013-10-11T17:36:09Z",
          "updatedAt": "2013-10-11T17:36:09Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated proposal: http://www.ietf.org/internet-drafts/draft-snell-httpbis-ext-frames-01.txt\n",
          "createdAt": "2013-11-11T20:30:54Z",
          "updatedAt": "2013-11-11T20:30:54Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Another proposal from about the same time as James'; including for completeness of the comments thread when it's reviewed:  http://www.ietf.org/internet-drafts/draft-bishop-http2-extension-frames-00.txt\n\nDiscussion on the mailing list showed there are some fundamental philosophical differences here, and they need to be resolved by the WG and not by us individually.\n\nWhat are the goals for extensions?  Are we trying to prevent protocol variants by making experimentation easy within HTTP/2.0, or prevent fragmentation by tightly regulating the creation of new extensions?  Or are we just trying to close the spec ASAP by leaving extensions out entirely and saying that adding extensions creates a new protocol that we (or someone) will tackle later?\n\nAll are good goals, and we have a draft each for the three directions once we pick one.\n",
          "createdAt": "2014-01-16T19:07:10Z",
          "updatedAt": "2014-01-16T19:07:10Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Zurich; we will do extensibility, maybe.  Need some more time to look at the proposals.\n",
          "createdAt": "2014-01-22T10:29:34Z",
          "updatedAt": "2014-01-22T10:29:34Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed (again) in Zurich; agreed to drop frame type extensibility completely (i.e., IANA registry), along with settings. Recipient of unknown frame types MUST conn error; recipient of unknown settings MUST conn error.\n",
          "createdAt": "2014-01-23T15:58:42Z",
          "updatedAt": "2014-01-23T16:06:14Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why?\n",
          "createdAt": "2014-01-23T16:01:58Z",
          "updatedAt": "2014-01-23T16:01:58Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "The WG discussed this extensively, and decided that ALPN identifiers were the primary mechanism for extensibility. Allowing extensions to change connection state was an issue of particular concern, and without those, the motivation for allowing extension frame types was much less. There was also a dearth of proposals for use cases.\n\nFeel free to bring up on-list, of course.\n",
          "createdAt": "2014-01-23T16:07:45Z",
          "updatedAt": "2014-01-23T16:07:45Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Reopening after further discussion on-list.\n",
          "createdAt": "2014-05-23T01:12:28Z",
          "updatedAt": "2014-05-23T01:12:28Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; will take Martin's proposal with some tweaks (e.g., addressing flow control).\n",
          "createdAt": "2014-06-05T15:44:55Z",
          "updatedAt": "2014-06-05T15:44:55Z"
        }
      ]
    },
    {
      "number": 99,
      "id": "MDU6SXNzdWUxNDU3NjI5OA==",
      "title": "Separate HEADERS+PRIORITY",
      "url": "https://github.com/httpwg/http2-spec/issues/99",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "With regards to the discussion over stream re-prioritization, I suggest:\n1. Drop the HEADERS+PRIORITY frame type.\n2. Create a new separate PRIORITY frame type whose payload is the Priority value, no frame-specific flags.\n\nThe PRIORITY frame becomes the only way to set/change the priority for a stream.\n\nIf it is necessary to allow an endpoint to establish the priority of stream prior to actually initiating the stream, we can allow sending a PRIORITY frame _before_ the initial HEADERS frame. Doing so would effectively reserve the stream id (in the same general manner PUSH_PROMISE does).\n\nThe advantages of this approach are:\n1. It eliminates any possible confusion and complexity about when to use HEADERS+PRIORITY vs. HEADERS\n2. It provides a single way of setting/change stream priority (as opposed to using HEADERS+PRIORITY plus a separate CHANGE-PRIORITY frame)\n",
      "createdAt": "2013-05-21T16:08:13Z",
      "updatedAt": "2013-06-25T03:26:30Z",
      "closedAt": "2013-06-25T03:26:30Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I made the same suggestion to a few folks.  It wasn't that popular.\n\nA number of things to consider:\n1. This adds 4 more bytes to the common case.  That was the primary reason for objections.\n2. You need to specify a default priority.\n3. It is necessary (not optional) to have it sent prior to sending out the headers.  A server typically processes requests as soon as seeing headers.  Sending priority afterwards would lead to suboptimal performance.\n\nPRIORITY would be a stream-related frame, sent on the stream that is being reprioritized.  This makes it very different from PUSH_PROMISE.  \n",
          "createdAt": "2013-05-21T22:07:56Z",
          "updatedAt": "2013-05-21T22:07:56Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "1. I don't see 4 bytes as being critical but noted.\n2. We already allow streams to be created using only a HEADERS frame, so a default priority is already assumed unless we specifically require HEADERS+PRIORITY to initiate streams (which we currently only do in the semantic layer, not the framing layer). \n3. Noted.\n",
          "createdAt": "2013-05-21T22:13:41Z",
          "updatedAt": "2013-05-21T22:13:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Correct, it's the semantic layer that requires the use of HEADERS+PRIORITY.  For HTTP my interpretation is that this is strong enough that we don't require a default priority.\n",
          "createdAt": "2013-05-21T22:17:41Z",
          "updatedAt": "2013-05-21T22:17:41Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "I would like to see this change.\n1. Don't agree that it adds 4 bytes in the common case. I could easily argue that by defaulting everything to the lowest priority it saves 4 bytes in the common case.\n2. Since most existing HTTP implementations do not specify a priority for requests HTTP/1.x<->HTTP/2 proxies etc. will already have to assign a default priority.\n3. Send it before with the same requirements that the stream identifier in the frame must be for an open stream or the \"next valid identifier\" as in the PUSH_PROMISE up to the max concurrent stream limit (2 open streams with a max concurrent limit of 10 for example would allow you to send PRIORITY frames for the next 8 unopened streams).\n",
          "createdAt": "2013-05-25T19:09:38Z",
          "updatedAt": "2013-05-25T19:09:38Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "From the wg list:\n1. Remove frame 0x08 HEADERS.\n2. Rename frame 0x01 from HEADERS+PRIORITY to HEADERS.\n3. Add flag 0x04 PRIORITY to the now-renamed HEADERS frame to indicate that the first 4 bytes of the frame contains a priority field.\n4. Indicate that HEADERS is the only frame that may create a stream in section 3.4.1 (Stream Creation).\n5. Add a new frame 0x02 PRIORITY that is 4 bytes long and must be sent only on open streams.\n6. Add text to section 3.4.2 (Stream Priority) that have to do with priority assignment during stream creation (with a HEADERS frame) and re-prioritization (with a PRIORITY frame).\n",
          "createdAt": "2013-05-28T14:57:12Z",
          "updatedAt": "2013-05-28T14:57:12Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; pending proposal from Layering TF.\n",
          "createdAt": "2013-06-13T20:27:37Z",
          "updatedAt": "2013-06-13T20:27:37Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@jasnell will propose text for this.  This is going to be completely opposite to the original issue header.  HEADERS will be the only frame.  HEADERS+PRIORITY will go away.  The new HEADERS frame will include a flag, which when set indicates that there is a four byte priority.  Priority can be changed on every HEADERS frame.  If the server includes PRIORITY then it is the priority that the server has decided to use - which is advisory only.\n",
          "createdAt": "2013-06-13T23:30:41Z",
          "updatedAt": "2013-06-13T23:30:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Done in #130.\n",
          "createdAt": "2013-06-25T03:26:30Z",
          "updatedAt": "2013-06-25T03:26:30Z"
        }
      ]
    },
    {
      "number": 100,
      "id": "MDU6SXNzdWUxNDU3Njc4OA==",
      "title": "Design: Data Frame GZIP Flag ",
      "url": "https://github.com/httpwg/http2-spec/issues/100",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the spec includes a requirement that all user-agents MUST support gzip.. specifically:\n\n```\nUser-agents MUST support gzip compression. Regardless of the Accept-Encoding sent by the user-agent, the server may always send content encoded with gzip or deflate encoding.\n```\n\nIf we're going to include this requirement, it makes more sense to do this at the framing layer rather than the HTTP semantic layer. We can do so easily by defining a GZIP flag on the DATA frame type. If set, the payload of the DATA frame is compressed. \n\nDoing so largely eliminates the need for the accept-/transfer-/content-encoding mechanisms at the http semantic layer.\n",
      "createdAt": "2013-05-21T16:20:10Z",
      "updatedAt": "2013-05-21T22:09:18Z",
      "closedAt": "2013-05-21T22:09:18Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This flag was removed in #46.\n\nNote that Transfer-Encoding is already invalid, it doesn't relate at all to content, just framing.\n",
          "createdAt": "2013-05-21T22:09:18Z",
          "updatedAt": "2013-05-21T22:09:18Z"
        }
      ]
    },
    {
      "number": 101,
      "id": "MDU6SXNzdWUxNDU5OTM1MA==",
      "title": "Paint the magic bikeshed a slightly different colour",
      "url": "https://github.com/httpwg/http2-spec/issues/101",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "upgrade"
      ],
      "body": "",
      "createdAt": "2013-05-22T00:49:19Z",
      "updatedAt": "2015-11-30T19:54:03Z",
      "closedAt": "2013-06-13T17:01:28Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "At this point, the following constraints have been suggested:\n1. As small as possible.\n2. A multiple of 4 octets.\n\nAnd the experimental data we have (what there is of it) suggests that we need to make this look like an unknown HTTP/1.1 method (or two).\n\nI'll shave a byte off what we have and place the burden of justification on those that want to repaint.\n",
          "createdAt": "2013-05-29T20:54:49Z",
          "updatedAt": "2013-05-29T20:54:49Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "The concern expressed is that \"FOO\" and \"BAR\" (or perhaps even \"BA\") isn't... seemly as the prelude to an IETF protocol.\n",
          "createdAt": "2013-05-29T23:30:20Z",
          "updatedAt": "2013-05-29T23:30:20Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "lol... sigh... anyone try whether or not a sequence of ascii numeric digits would work? \"123\" perhaps? \n",
          "createdAt": "2013-05-29T23:33:51Z",
          "updatedAt": "2013-05-29T23:33:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We're worried about decorum now?\n\nI remember this case where a certain crypto library represented its output in something like base32.  Unfortunately, the team was asked to remove vowels from the dictionary when an executive was handed a token containing a certain 4-letter word.\n\nSpeaking of which, I wonder if the owners of '4b.43.5546.static.theplanet.com' know what profanity they are propagating across the Internet in every IP packet they send and receive.\n",
          "createdAt": "2013-05-30T00:02:02Z",
          "updatedAt": "2013-05-30T00:02:02Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I'm not worried about decorum as such, more about being unoriginal :) Surely we can come up with something more original... I'd put my kids' names in there, but they're too long. Hmm, my cat's name is \"Thor.\"\n\nHow about STA and RT ?\n",
          "createdAt": "2013-05-30T00:17:30Z",
          "updatedAt": "2013-05-30T00:17:30Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in SF Interim; Martin to continue to lead the bikeshed committee. \n",
          "createdAt": "2013-06-13T16:59:33Z",
          "updatedAt": "2013-06-13T16:59:33Z"
        }
      ]
    },
    {
      "number": 102,
      "id": "MDU6SXNzdWUxNDgyMjAzNg==",
      "title": "Header frame effects on state",
      "url": "https://github.com/httpwg/http2-spec/issues/102",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "streams"
      ],
      "body": "The contents of header frames MUST be processed by the compression context, even when the stream has been reset. If this is unacceptable, the receiver MAY terminate the session with the appropriate error code indicating why.\n",
      "createdAt": "2013-05-28T05:32:27Z",
      "updatedAt": "2013-05-29T21:44:58Z",
      "closedAt": "2013-05-29T21:44:58Z",
      "comments": []
    },
    {
      "number": 103,
      "id": "MDU6SXNzdWUxNDg2MzY2Ng==",
      "title": "The FINAL Flag",
      "url": "https://github.com/httpwg/http2-spec/issues/103",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "frame semantics"
      ],
      "body": "Wording exists that says implementations MUST process this flag for all frames whose stream identifier field is not 0x0.\n\nCan we insert wording that states that the flag MUST be left unset (0) when sending frames who stream identifier is 0x0 (for example SETTINGS, GOAWAY, or PING)? Also SETTINGS has text to indicate that the FINAL flag should be ignored -- should this be added to PING and GOAWAY as well?\n\nWhat about RST_STREAM frames? Should we insert wording that the flag MUST be set?\n\nAnd finally what about WINDOW_UPDATE?\n",
      "createdAt": "2013-05-28T21:54:28Z",
      "updatedAt": "2013-08-05T07:29:43Z",
      "closedAt": "2013-08-05T07:29:43Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, we should say that FINAL MUST NOT be set for frames on stream 0.  The special text on SETTINGS can be removed.  No point in duplicating this sort of advice.\n\nI don't see a strong reason either way for RST_STREAM.  The stream is going to end up terminated either way.  Perhaps we can pick one.\n\nI can see how WINDOW_UPDATE (and even PRIORITY) could be a problem.  We should discuss that further (I'll raise another issue to track those two, because it's worth making the problem statement really clear).\n",
          "createdAt": "2013-05-29T21:44:23Z",
          "updatedAt": "2013-05-29T21:44:23Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Based upon Martin's slide deck and Jeff's paint, created a new TF for re-organising the draft.\n",
          "createdAt": "2013-06-13T18:51:46Z",
          "updatedAt": "2013-06-13T18:51:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This should be addressed by the state machine (and accompanying description) along with the changes in #130.  Once the layering branch is in, this should be good to close.\n",
          "createdAt": "2013-06-25T03:27:34Z",
          "updatedAt": "2013-06-25T03:27:34Z"
        }
      ]
    },
    {
      "number": 104,
      "id": "MDU6SXNzdWUxNDkxNTA3NQ==",
      "title": "FINAL and WINDOW_UPDATE",
      "url": "https://github.com/httpwg/http2-spec/issues/104",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "flow control"
      ],
      "body": "FINAL is currently defined as a promise not to send any more frames on the stream.\n\nThis doesn't work with flow control.\n\nA GET request will result in the client -> server stream direction being half-closed after sending just the headers.  However, the client is required to send WINDOW_UPDATE frames to enable the receipt of packets from the server.\n\nThe same problem applies to PRIORITY.  Re-prioritization might be desirable for a stream that you have half-closed.  (For instance, it might be good to down-prioritize a GET after completing the request.)\n\nThe obvious workaround just creates a stalemate.  A client can't just retain the stream in the open state until it sees the FINAL flag from a server.  That encourages the same solution on the server, which leads to neither peer closing the connection.\n\nIt seems like the most pragmatic solution to this is to permit the sending of certain types of frames on half-closed streams.\n",
      "createdAt": "2013-05-29T22:00:12Z",
      "updatedAt": "2013-07-31T14:49:46Z",
      "closedAt": "2013-07-31T14:49:46Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Flow control should only apply to DATA frames, so is this an issue?\n",
          "createdAt": "2013-06-07T18:59:03Z",
          "updatedAt": "2013-06-07T18:59:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes.  Imagine that you send a GET request for a large file.  You have an initial window size of 64K.  You send HEADERS+PRIORITY with a FINAL bit set.  The server sends you 64K of data, but then you can't send a WINDOW_UPDATE because you promised that you wouldn't send any more frames on that stream.  Deadlock.\n",
          "createdAt": "2013-06-07T19:09:07Z",
          "updatedAt": "2013-06-07T19:09:07Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Got it.\n\nFor me, the distinction is 'on' vs 'about', which we really haven't defined well, and absolutely should.\n\nPUSH_PROMISE, HEADERS, HEADERS+PRIORITY and DATA are all stream content (without them, we'd not be able to give the endpoint the data necessary to do HTTP processing on the request/response), whereas the rest of the frames are simply talking _about_ those streams.\n",
          "createdAt": "2013-06-07T19:21:14Z",
          "updatedAt": "2013-06-07T19:21:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That might be a useful distinction to make.  The obvious question is then whether we make that distinction generically accessible or not.  It's almost like that would create a new data/control distinction again (data, not DATA).\n",
          "createdAt": "2013-06-07T20:03:50Z",
          "updatedAt": "2013-06-07T20:03:50Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh, and I see your related email about ordering.  I think that if we were to make such a distinction, then ordering  - not just the FINAL bit - would apply to the set of \"data\" frames that you identified.  Actually \"data\" is wrong, maybe \"protocol semantic bearing\" would be more correct, if a little stuffy and pompous-sounding.\n",
          "createdAt": "2013-06-07T20:06:29Z",
          "updatedAt": "2013-06-07T20:06:29Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This gets back to the \"Tiers\" discussion I raised a while back. Flow control is part of the first tier while stream processing is second tier. I know that terminology sucks but the idea ought to be clear enough. We need to clearly define the tiers/layers then define the processing requirements around those... specifically, sending a RST_STREAM means that no more second tier frames are sent, but things that operate on the first tier are perfectly fine.\n",
          "createdAt": "2013-06-07T20:11:55Z",
          "updatedAt": "2013-06-07T20:11:55Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we can bound it better than that, but yea.\nI think we're all agreeing and seeking the appropriate terminology.\nOnce we've found that (or before), we definitely need to take it to the list.\n",
          "createdAt": "2013-06-07T20:32:30Z",
          "updatedAt": "2013-06-07T20:32:30Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; waiting for proposal from Layering TF.\n",
          "createdAt": "2013-06-13T21:54:39Z",
          "updatedAt": "2013-06-13T21:54:39Z"
        }
      ]
    },
    {
      "number": 107,
      "id": "MDU6SXNzdWUxNTA5MjU4Mg==",
      "title": "SETTINGS_UPLOAD_BANDWIDTH",
      "url": "https://github.com/httpwg/http2-spec/issues/107",
      "state": "CLOSED",
      "author": "brianraymor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "transport mapping"
      ],
      "body": "SETTINGS_UPLOAD_BANDWIDTH is not in broad use in SPDY. I cannot find a public design discussion outlining its intended use cases and benefits. This has also been raised on the list:\n\n```\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/0925.html\n```\n\nCan this setting be eliminated for HTTP/2? \n",
      "createdAt": "2013-06-03T22:17:51Z",
      "updatedAt": "2013-06-16T17:17:42Z",
      "closedAt": "2013-06-16T17:17:42Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; agreed to drop.\n",
          "createdAt": "2013-06-14T18:20:45Z",
          "updatedAt": "2013-06-14T18:20:45Z"
        }
      ]
    },
    {
      "number": 108,
      "id": "MDU6SXNzdWUxNTA5MjY0MA==",
      "title": "SETTINGS_DOWNLOAD_BANDWIDTH",
      "url": "https://github.com/httpwg/http2-spec/issues/108",
      "state": "CLOSED",
      "author": "brianraymor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "transport mapping"
      ],
      "body": "SETTINGS_DOWNLOAD_BANDWIDTH is not in broad use in SPDY. I cannot find a public design discussion outlining its intended use cases and benefits. This has also been raised on the list:\n\n```\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/0925.html\n```\n\nCan this setting be eliminated for HTTP/2?\n",
      "createdAt": "2013-06-03T22:18:51Z",
      "updatedAt": "2013-06-16T17:17:42Z",
      "closedAt": "2013-06-16T17:17:42Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; agreed to drop.\n",
          "createdAt": "2013-06-14T18:20:54Z",
          "updatedAt": "2013-06-14T18:20:54Z"
        }
      ]
    },
    {
      "number": 109,
      "id": "MDU6SXNzdWUxNTA5MjY5MA==",
      "title": "SETTINGS_ROUND_TRIP_TIME",
      "url": "https://github.com/httpwg/http2-spec/issues/109",
      "state": "CLOSED",
      "author": "brianraymor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "transport mapping"
      ],
      "body": "SETTINGS_ROUND_TRIP_TIME is not in broad use in SPDY. I cannot find a public design discussion outlining its intended use cases and benefits. This has also been raised on the list:\n\n```\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/0925.html\n```\n\nCan this setting be eliminated for HTTP/2?\n",
      "createdAt": "2013-06-03T22:19:43Z",
      "updatedAt": "2013-06-16T17:17:43Z",
      "closedAt": "2013-06-16T17:17:43Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; agreed to drop.\n",
          "createdAt": "2013-06-14T18:20:59Z",
          "updatedAt": "2013-06-14T18:20:59Z"
        }
      ]
    },
    {
      "number": 110,
      "id": "MDU6SXNzdWUxNTA5MjczMA==",
      "title": "SETTINGS_DOWNLOAD_RETRANS_RATE",
      "url": "https://github.com/httpwg/http2-spec/issues/110",
      "state": "CLOSED",
      "author": "brianraymor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "transport mapping"
      ],
      "body": "SETTINGS_DOWNLOAD_RETRANS_RATE is not in broad use in SPDY. I cannot find a public design discussion outlining its intended use cases and benefits. This has also been raised on the list:\n\n```\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/0925.html\n```\n\nCan this setting be eliminated for HTTP/2?\n",
      "createdAt": "2013-06-03T22:20:42Z",
      "updatedAt": "2013-06-16T17:17:43Z",
      "closedAt": "2013-06-16T17:17:43Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; agreed to drop.\n",
          "createdAt": "2013-06-14T18:21:06Z",
          "updatedAt": "2013-06-14T18:21:06Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "MDU6SXNzdWUxNTI4NjY0NA==",
      "title": "Number and frequency of PING, empty DATA frames, etc. should be limited.",
      "url": "https://github.com/httpwg/http2-spec/issues/112",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "security"
      ],
      "body": "Currently, the spec doesn't prohibit sending an infinite number of PING frames, or sending a large number of empty DATA frames, or other damaging behaviors.\n\nThese behaviors are all DoS attacks-- it is better to limit the use of these features so that the most common ways of abusing these frames result in the proper feedback for a client (goaway).\n\nAs an example, it would be reasonable to require that at most one empty data frame could be sent for a particular stream, else the server sends a GOAWAY.\nIt would be reasonable to require that PING frames coming more than 3X as often as data frames would, else the server sends a GOAWAY\n\nThe above are obviously not the only ways of dealing with this, nor do they cover all cases. While imperfect, these kinds of rules would at least handle the inadvertent DoS attack of a buggy client, and some intentional DoS attacks.\n",
      "createdAt": "2013-06-07T18:58:15Z",
      "updatedAt": "2013-10-10T21:35:46Z",
      "closedAt": "2013-10-10T21:35:46Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "From my point of view, dealing with this sort of misbehavior falls squarely in the innovation space, not the standardization space.  I would prefer if the entire extent of the text we provide only described the possibility of abuse in its various forms and advised that implementations take steps to punish miscreants.  How they identity a peer as a miscreant and the actions they take will be highly dependent on their own constraints.\n\nAs you have previously indicated, you will tolerate some bad behavior rather than risk triggering a reconnect, which - for your deployment - is considered more expensive than a few errant frames.  But I can imagine some environments being a lot stricter.  In other abuse cases, particularly things that look like DoS from a volume perspective, it might be considered sufficient to withhold WINDOW_UPDATE frames.\n\nWhat I do agree with is that we need to highlight the fact that receivers have no way to control or limit non-DATA frames and that they should be aware of the costs of processing the 8 bytes of the frame header.  Those costs cannot be entirely ignored, otherwise a bad peer might choose to exploit that oversight.\n",
          "createdAt": "2013-06-07T20:02:22Z",
          "updatedAt": "2013-06-07T20:02:22Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Forbidding empty data frames really doesn't address the problem at all, as all I would have to do to get around it is send a large number of data frames that include a single byte of payload... In fact, if you really wanted to DoS a server you wouldn't mess with empty data frames or pings at all.. instead you'd go with large numbers of HEADERS frames with a load of junk headers... this would eat up legitimate stream ids and force the endpoint to allocate decompression state before it realizes there is anything wrong... I'm not sure there's anything we can do about this at the spec level beyond documenting the way things ought to work and recommending that implementers take appropriate precautions. Then, as Martin says, we leave the creative solutions up to the innovative implementers. \n",
          "createdAt": "2013-06-07T20:08:41Z",
          "updatedAt": "2013-06-07T20:08:41Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't want to see an infinite stream of PINGs, etc., not because I'm worried about my server, but because I'm worried that enough poorly-acting clients (perhaps not even contacting \"me\") like that can cause the network to fail, causing outages that will eventually effect \"me\".\n\nWe know that certain behaviors (infinite keep-alives/synchronized keep-alives, etc) cause problems for these components of the overall system, at least today, and the failures from these are at least as bad as congestive collapse of the network would be for TCP-- they do cause network failures which can go on for hours.\n\nIf, as a result of HTTP/2's deployment and the ignorance or maliciousness of clients (more likely) or servers (less likeley), the cellular network melts down, that'd really suck.\n",
          "createdAt": "2013-06-07T20:31:12Z",
          "updatedAt": "2013-06-07T20:31:12Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The challenge is that simply requiring in the spec that PINGs be limited does not really do anything effectively to limit them... buggy servers typically aren't following the spec anyway ;-) ... The best approach here is for the endpoint to determine for itself how to handle bad behavior. \n",
          "createdAt": "2013-06-07T20:40:19Z",
          "updatedAt": "2013-06-07T20:40:19Z"
        },
        {
          "author": "mcmanus",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm pretty sure github isn't the right forum for discussing the merits of\nthe issue.\n\nOn Fri, Jun 7, 2013 at 4:40 PM, James M Snell notifications@github.comwrote:\n\n> The challenge is that simply requiring in the spec that PINGs be limited\n> does not really do anything effectively to limit them... buggy servers\n> typically aren't following the spec anyway ;-) ... The best approach here\n> is for the endpoint to determine for itself how to handle bad behavior.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/112#issuecomment-19131628\n> .\n",
          "createdAt": "2013-06-07T20:49:04Z",
          "updatedAt": "2013-06-07T20:49:04Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "GOAWAY: 420 Enhance Your Calm\n",
          "createdAt": "2013-10-10T21:23:01Z",
          "updatedAt": "2013-10-10T21:23:01Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "A number of aspects discussed in Seattle:\n- Specifying heuristics for avoiding DoS - no one but Roberto interested. Will not pursue.\n- Specifying a more specific \"don't DoS me\" GOAWAY code - broad interest. Jeff to write proposal. (NEW ISSUE)\n- Specifying security considerations for DoS - broad interest. Proposal TBD. (NEW ISSUE)\n- Removing PING once we have SETTINGS+ACK - broad interest, but not strong. Will and Hasan somewhat uncomfortable with it. May revisit later.\n",
          "createdAt": "2013-10-10T21:35:46Z",
          "updatedAt": "2013-10-10T21:35:46Z"
        }
      ]
    },
    {
      "number": 118,
      "id": "MDU6SXNzdWUxNTUxOTkwOA==",
      "title": "Rate limiting of control frames",
      "url": "https://github.com/httpwg/http2-spec/issues/118",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "frame semantics"
      ],
      "body": "Brought up by Hasan at SF Interim\n",
      "createdAt": "2013-06-13T18:03:12Z",
      "updatedAt": "2013-07-31T15:09:33Z",
      "closedAt": "2013-07-31T15:09:33Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Advisory text for Security Considerations; might add specific requirements. Needs implementation experience.\n",
          "createdAt": "2013-07-31T15:07:53Z",
          "updatedAt": "2013-07-31T15:07:53Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Dup of #112 \n",
          "createdAt": "2013-07-31T15:09:33Z",
          "updatedAt": "2013-07-31T15:09:33Z"
        }
      ]
    },
    {
      "number": 119,
      "id": "MDU6SXNzdWUxNTUyMjUxMQ==",
      "title": "Separate RST_STREAM for promised streams",
      "url": "https://github.com/httpwg/http2-spec/issues/119",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "At the SF interim, @jpinner suggested that rather than have RST_STREAM reset all associated streams, to have that behavior tied to a flag on the RST_STREAM message.  When the flag is set, all pushed resources associated with the original request are reset.\n\nThis removes the coupling between the reset of a stream and its associated streams.\n",
      "createdAt": "2013-06-13T18:46:40Z",
      "updatedAt": "2014-01-22T10:46:15Z",
      "closedAt": "2014-01-22T10:46:15Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@jpinner will propose text.  That will also include a flag for the PRIORITY frame.\n",
          "createdAt": "2013-06-13T23:26:39Z",
          "updatedAt": "2013-06-13T23:26:39Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Hamburg; not enough implementation experience.\n",
          "createdAt": "2013-08-05T12:15:43Z",
          "updatedAt": "2013-08-05T12:15:43Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Zurich; we are not going to add this, the complexity is not justified at the moment.\n",
          "createdAt": "2014-01-22T10:46:15Z",
          "updatedAt": "2014-01-22T10:46:15Z"
        }
      ]
    },
    {
      "number": 120,
      "id": "MDU6SXNzdWUxNTUzMDM3OA==",
      "title": "Signal the acceptance of SETTINGS",
      "url": "https://github.com/httpwg/http2-spec/issues/120",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "frame semantics",
        "header compression"
      ],
      "body": "In the header compression draft, it is possible to signal a SETTING for compression context size.  This require a mechanism for marking when that SETTING has been acted upon.\n\nThe first header compression draft proposes the use of HEADERS on stream 0.  Discussion in the SF interim led to a conclusion that an explicit ACK or reuse of SETTINGS was considered preferable, as was a more generally usable mechanism.  It need not be wholly generic, but should be possible to use for this purpose.\n",
      "createdAt": "2013-06-13T21:10:30Z",
      "updatedAt": "2013-10-11T21:17:37Z",
      "closedAt": "2013-10-11T21:17:37Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A possibility would be reuse the SETTINGS frame using a flag to specify that it is an ack. This flag could be either at the frame level or at the individual setting level. Each acked setting is included in the frame with its acknowledged value.\nQuestion: can the acknowledge value be lower than the requested value?\n",
          "createdAt": "2013-06-13T23:47:38Z",
          "updatedAt": "2013-06-13T23:47:38Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Deferring dynamic header compression until after the first implementation draft. \n\nIf / when we do this, the options are:\n1. In the header compression format itself\n2. overloading the SETTINGs frame\n3. a new frame type\n",
          "createdAt": "2013-06-14T20:43:50Z",
          "updatedAt": "2013-06-14T20:43:50Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Hamburg; need more implementation experience with eviction, and need test suites. Gave action to Herve to work on the latter.\n",
          "createdAt": "2013-08-05T12:47:24Z",
          "updatedAt": "2013-08-05T12:47:24Z"
        }
      ]
    },
    {
      "number": 123,
      "id": "MDU6SXNzdWUxNTU2Nzc5NA==",
      "title": "Reserve a bit for MSG_DONE",
      "url": "https://github.com/httpwg/http2-spec/issues/123",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "If we ever intend to allow a message-based protocol to share the connection, we should reserve a MSG_DONE bit in the flags portion of HEADERS and DATA.\n",
      "createdAt": "2013-06-14T16:57:21Z",
      "updatedAt": "2013-06-26T00:06:02Z",
      "closedAt": "2013-06-26T00:06:02Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "For extensibility.\n",
          "createdAt": "2013-06-14T20:36:45Z",
          "updatedAt": "2013-06-14T20:36:45Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The reservation has been done, but we still lack a definition of \"message\" that would support an actual \"END_MESSAGE\" flag.  That would require some extensive work.  I don't know if you want to open that issue separately.\n",
          "createdAt": "2013-06-26T00:06:02Z",
          "updatedAt": "2013-06-26T00:06:02Z"
        }
      ]
    },
    {
      "number": 129,
      "id": "MDU6SXNzdWUxNTU5ODE0NQ==",
      "title": "Header Frame CONTINUES bit wrong polarity",
      "url": "https://github.com/httpwg/http2-spec/issues/129",
      "state": "CLOSED",
      "author": "dwm1945",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Long term, I think that there will be less confusion if the same polarity is used for all flag bits which control continuation. In draft -03 the stream has a FINAL bit, value 0 to indicate more frames expected (continuation) and value 1 to indicate last frame of the stream.\n\nThe HEADER frame defines a CONTINUES flag bit with value 1 to indicate more frames are expected and 0 to indicate the last frame of the set of header frames.\n\nThis seems like it will introduce confusion to folks who need to analyze wire level bits, write code, etc. Better of all flags which represent similar concepts use the same value for the shared concept.\n\nI prefer value 1 to mean the end/final/last/complete concept, but consistency is the important issue.\n",
      "createdAt": "2013-06-15T23:03:55Z",
      "updatedAt": "2013-06-18T22:07:06Z",
      "closedAt": "2013-06-18T22:07:06Z",
      "comments": []
    },
    {
      "number": 133,
      "id": "MDU6SXNzdWUxNTY1Mzg1Nw==",
      "title": "GOAWAY status code or similar meaning \"don't use HTTP/2 when reconnecting\" would be good",
      "url": "https://github.com/httpwg/http2-spec/issues/133",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "Assuming that a server is dealing with a buggy client, it seems like a good idea to have a mechanism that tells the client to GOAWAY, and don't use this protocol when coming back.\n\nAs an example, if a server detects that the client is not responding correctly to flow control, the server could instruct it to not use HTTP/2 until the client is restarted (or similar).\n\nThis is likely not useful in the client->server direction.\n\nI think of this as similar to alternate-protocol, though it should not need a request to indicate that the protocol should not be reused.\n\nIt would be impractical to use this on the client->server direction for a number of reasons:\n1) The server would have to store millions or billions of entries\n2) There is no guarantee that a single server is dealing with the client, even if the client is connecting to one IP\n3) A single client should not be able to stop a server from serving HTTP/2 for others.\n",
      "createdAt": "2013-06-17T20:24:31Z",
      "updatedAt": "2013-08-07T09:45:40Z",
      "closedAt": "2013-08-05T12:11:07Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems reasonable, if COME_BACK is accepted.  Keeping in theme, maybe it can be called \"AND_DONT_COME_BACK\".\n",
          "createdAt": "2013-06-17T20:34:58Z",
          "updatedAt": "2013-06-17T20:34:58Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hmm.. I understand why this is being brought up, but this doesn't quite sit right with me. We already have PROTOCOL_ERROR to handle these kinds of situations. If the server determines that the client is not responding correctly, it sends a GOAWAY with PROTCOL_ERROR. Whether or how the client wishes to attempt to reconnect later really is not in the servers control. Even the COMEBACK code is pushing it a bit but still ultimately leaves the decision of whether and how to reconnect up to the client. We have protocol negotiation in place already, if the client violates the negotiated protocol, the server disconnects and moves on. If the client keeps on violating, then having a DONT_COMEBACK error code is not going to help matters much (especially since the client obviously isn't doing what it should anyway)\n",
          "createdAt": "2013-06-17T21:25:32Z",
          "updatedAt": "2013-06-17T21:25:32Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please move all substantive discussion to the mailing list.\n\nOn Mon Jun 17 2013 at 2:26:17 PM, James M Snell notifications@github.com\nwrote:\n\n> Hmm.. I understand why this is being brought up, but this doesn't quite\n> sit right with me. We already have PROTOCOL_ERROR to handle these kinds of\n> situations. If the server determines that the client is not responding\n> correctly, it sends a GOAWAY with PROTCOL_ERROR. Whether or how the client\n> wishes to attempt to reconnect later really is not in the servers control.\n> Even the COMEBACK code is pushing it a bit but still ultimately leaves the\n> decision of whether and how to reconnect up to the client. We have protocol\n> negotiation in place already, if the client violates the negotiated\n> protocol, the server disconnects and moves on. If the client keeps on\n> violating, then having a DONT_COMEBACK error code is not going to help\n> matters much (especially since the client obviously isn't doing what it\n> should anyway)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/133#issuecomment-19575992\n> .\n",
          "createdAt": "2013-06-17T21:27:43Z",
          "updatedAt": "2013-06-17T21:27:43Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Thanks, William. We really need to break this habit.\n",
          "createdAt": "2013-06-17T23:41:16Z",
          "updatedAt": "2013-06-17T23:41:16Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Hamburg; not enough implementer interest to specify now (when potential value is highest).\n",
          "createdAt": "2013-08-05T12:11:07Z",
          "updatedAt": "2013-08-05T12:11:07Z"
        }
      ]
    },
    {
      "number": 140,
      "id": "MDU6SXNzdWUxNTcyODUyNw==",
      "title": "Renaming FRAME_TOO_LARGE to FRAME_SIZE_ERROR",
      "url": "https://github.com/httpwg/http2-spec/issues/140",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Currently, we have the FRAME_TOO_LARGE error code... \n\nHowever, it's possible that a frame can be _under-sized_. For instance, a PING frame with less than 8-bytes of payload. We don't have a good symmetrical approach to handling both over, and undersized frames. One suggestion is to remove FRAME_TOO_LARGE entirely and just use PROTOCOL_ERROR but that loses value, I think. Having specific error codes is a good thing at times. Changing to FRAME_SIZE_ERROR allows us to deal easily with over and undersized frames symmetrically. \n",
      "createdAt": "2013-06-19T05:59:17Z",
      "updatedAt": "2013-07-03T08:25:13Z",
      "closedAt": "2013-07-03T08:25:13Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "So this entire section confuses me. The spec requires you to be able to buffer up to 64K of data (the size of the session window) so your implementation must be able to handle a frame that is 64K in size. So you should be able to handle control frames of that size.\n\nThis error code made much more sense when frames were 16 MB.\n",
          "createdAt": "2013-06-19T06:02:23Z",
          "updatedAt": "2013-06-19T06:02:23Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well.. we may eventually need to play around with the wording, but essentially it would be:\n1. If a Frame has fewer bytes than required... send a FRAME_SIZE_ERROR. Example: PING with less than 8-byte payload\n2. If a Frame has more bytes than allowed... send a FRAME_SIZE_ERROR. Example: PING with more than 8-byte payload. Another example: PRIORITY with 9 bytes... \n3. If a Frame carrying an HTTP message is larger than 16k, send a FRAME_SIZE_ERROR (this is specific to the HTTP Layer mapping)\n4. If a Frame is larger than the endpoint is currently able to handle (due to resource constraints, etc)... send a FRAME_SIZE_ERROR.\n",
          "createdAt": "2013-06-19T06:09:35Z",
          "updatedAt": "2013-06-19T06:09:35Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Ok with all but the last one, which IMHO should be an INTERNAL_ERROR if the frame is not malformed.\n",
          "createdAt": "2013-06-19T06:11:18Z",
          "updatedAt": "2013-06-19T06:11:18Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok.. 1, 2 and 3 are the critical ones anyway\n",
          "createdAt": "2013-06-19T06:21:20Z",
          "updatedAt": "2013-06-19T06:21:20Z"
        },
        {
          "author": "mcmanus",
          "authorAssociation": "CONTRIBUTOR",
          "body": "please discsuss this on the working group list!\n\nOn Wed, Jun 19, 2013 at 1:59 AM, James M Snell notifications@github.comwrote:\n\n> Currently, we have the FRAME_TOO_LARGE error code...\n> \n> However, it's possible that a frame can be _under-sized_. For instance, a\n> PING frame with less than 8-bytes of payload. We don't have a good\n> symmetrical approach to handling both over, and undersized frames. One\n> suggestion is to remove FRAME_TOO_LARGE entirely and just use\n> PROTOCOL_ERROR but that loses value, I think. Having specific error codes\n> is a good thing at times. Changing to FRAME_SIZE_ERROR allows us to deal\n> easily with over and undersized frames symmetrically.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/140\n> .\n",
          "createdAt": "2013-06-19T12:04:25Z",
          "updatedAt": "2013-06-19T12:04:25Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Based on discussion on list,  majority preference seems to be on using the less specific protocol_error code. Perhaps we ought to just get rid of this code completely. Either way,  closing this issue. \n",
          "createdAt": "2013-07-03T08:25:04Z",
          "updatedAt": "2013-07-03T08:25:04Z"
        }
      ]
    },
    {
      "number": 147,
      "id": "MDU6SXNzdWUxNTgxMDA5Mg==",
      "title": "Editorial Issue: Clarify that PUSH_PROMISE is hop-by-hop, not end-to-end",
      "url": "https://github.com/httpwg/http2-spec/issues/147",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "server push"
      ],
      "body": "One of the discussions at the Interim dealt with the fact that PUSH_PROMISE and pushed streams in general have to be considered hop-by-hop in order to properly address caching. The current language in the draft does not make this very clear, IMHO. Marking this as a todo.\n",
      "createdAt": "2013-06-20T16:34:16Z",
      "updatedAt": "2013-07-22T22:54:31Z",
      "closedAt": "2013-07-22T22:54:31Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on the discussion regarding PUSH_PROMISE and its dual nature, I don't think that it is strictly hop-by-hop in the classic sense.  We might need to use new words for this one.\n",
          "createdAt": "2013-06-21T00:23:17Z",
          "updatedAt": "2013-06-21T00:23:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed on layering branch.\n",
          "createdAt": "2013-06-26T00:04:35Z",
          "updatedAt": "2013-06-26T00:04:35Z"
        }
      ]
    },
    {
      "number": 152,
      "id": "MDU6SXNzdWUxNjEyMDIyMg==",
      "title": "Editorial: Conventions for representing frames in examples in the spec",
      "url": "https://github.com/httpwg/http2-spec/issues/152",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As we move forward, it's going to be helpful to adopt conventions for representing frames for clear examples in spec text, both within the http/2 document and any future extensions or modifications. In HTTP/1.1, we've always had the option of just writing up the ascii representation of the http request or response message; we don't really have that capability with HTTP/2 because of the binary framing model.\n\nThis does not effect any of the technical definition of the protocol, just how we represent frames in text.\n\nHere's one suggestion:\n\n```\n[FRAME_NAME]\n  [+-] [FLAG_NAME]...\n       [PAYLOAD]\n```\n\nBefore each FLAG_NAME is a + or - symbol, with + indicating that the flag is set, and - indicating that the flag is unset. As a shortcut, if a flag is not listed, it is assumed to be unset.\n\nPayload data is represented as hex.\n\nFrames that have header continuations are abstracted so that they are shown simply as individual frames... e.g. HEADERS and PUSH_PROMISE frames would not need to be listed multiple times to show the continuation...\n\nAn interrupted sequence of DATA frames (that is, multiple DATA frames sent without any interleaving frames) can be represented using \"DATA...\"\n\nFor example:\n\n```\nHEADERS\n    :method = POST\n    :host = example.org\n    :path = /foo\n    content-length: 4\n\nDATA...\n  + END_STREAM\n    1AE2...2B3C\n```\n\nIs equivalent to:\n\n```\nPOST /foo HTTP/1.1\nHost: example.org\nContent-Length: 4\n\n{binary data}\n```\n",
      "createdAt": "2013-06-27T23:31:42Z",
      "updatedAt": "2013-07-01T23:47:13Z",
      "closedAt": "2013-07-01T23:47:13Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is in your edit for the layering TF work.  Since this isn't really actionable (an email would be sufficient for this sort of stuff), I'm closing this off.\n",
          "createdAt": "2013-07-01T23:47:13Z",
          "updatedAt": "2013-07-01T23:47:13Z"
        }
      ]
    },
    {
      "number": 153,
      "id": "MDU6SXNzdWUxNjE2Nzk4Mw==",
      "title": "PUSH_PROMISE headers",
      "url": "https://github.com/httpwg/http2-spec/issues/153",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "server push"
      ],
      "body": "The current text describes PUSH_PROMISE as having a few request headers, plus some response headers, but it's quite vague.\n\nI think that if this is going to be properly workable across a wide range of uses with lots of different headers, PUSH_PROMISE needs to include two sets of headers: the ones that it overrides from the associated request (:path being foremost of those) and the ones that it provides as a \"preview\" of the response (e.g., ETag might allow caches to determine if they were interested in the rest of the response).\n",
      "createdAt": "2013-06-29T00:20:30Z",
      "updatedAt": "2013-08-05T14:05:30Z",
      "closedAt": "2013-08-05T14:05:30Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We've currently settled on request header only, which seems to be sufficient.  Changes for this are in the layering TF work.\n",
          "createdAt": "2013-07-01T23:47:00Z",
          "updatedAt": "2013-07-01T23:47:00Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Hamburg; ready to close. Ancient history.\n",
          "createdAt": "2013-08-05T14:05:30Z",
          "updatedAt": "2013-08-05T14:05:30Z"
        }
      ]
    },
    {
      "number": 154,
      "id": "MDU6SXNzdWUxNjE3MTIwMQ==",
      "title": "Sending a response before the request is complete",
      "url": "https://github.com/httpwg/http2-spec/issues/154",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Suggested add to the HTML mapping...\n\n```\nThe server MUST NOT begin sending the response header block \nuntil it receives all of the request headers from the \nclient; however, the server MAY begin sending the response \nimmediately after receiving the request headers without waiting\nfor the complete request payload or trailers to be received.\n```\n\nSince we added HEADER continuations, there is a risk that a server might begin its response to a request prematurely, without waiting for the complete set of headers to be received. Doing so could cause quite a few major issues including caching problems. \n\nWhile this is not something that we can strictly enforce as a MUST, it is something that servers _really ought_ to do. \n",
      "createdAt": "2013-06-29T05:34:13Z",
      "updatedAt": "2013-07-03T08:20:36Z",
      "closedAt": "2013-07-03T08:20:36Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "I'm not sure that this is really an issue:\n\n1) The header compression contexts for the sending and receiving directions are independent, so corrupting the compression context is not an issue.\n2) I'm not sure what the caching problems you are alluding to are, but what if the server wishes to send a 4xx or 5xx response? Why should the server have to wait until it receives the entire headers if it knows it is just going to discard them?\n",
          "createdAt": "2013-06-29T18:38:52Z",
          "updatedAt": "2013-06-29T18:38:52Z"
        }
      ]
    },
    {
      "number": 155,
      "id": "MDU6SXNzdWUxNjIzNDk0NQ==",
      "title": "Capping Header Compression Index Values",
      "url": "https://github.com/httpwg/http2-spec/issues/155",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When using Literal Representations with Incremental Indexing as defined by the current Header Compression draft, a long lived connection could potentially end up with rather large table index values... Specifically, every Literal-with-Incremental causes the table index to increment by one monotonically without limit. Index positions are represented using a variable length integer syntax that has no upper limit, as the index position increases, the number of bytes necessary to represent the index on the wire increases. The result is that as the number of Literal-with-Incremental operations increase, the efficiency of our compression will slowly but certainly decrease.\n\nThe solution, of course, is to favor substitution indexing as much as possible within long running connections.\n\nOne possible strategy is to use incremental indexing only until a fixed range of index positions have been used (1...n). After that range has been exhausted, use substitution indexing starting back from the initial position in the range... Where this strategy might become unworkable, however, is when items within that fixed range are evicted. It is currently not clear in the header compression draft whether a Literal-with-Substitution-Indexing is allowed to reuse an index position that has previously been evicted.\n",
      "createdAt": "2013-07-01T20:57:26Z",
      "updatedAt": "2013-07-03T08:19:18Z",
      "closedAt": "2013-07-03T08:19:18Z",
      "comments": []
    },
    {
      "number": 156,
      "id": "MDU6SXNzdWUxNjI0MTY5NQ==",
      "title": "Pushing HEAD",
      "url": "https://github.com/httpwg/http2-spec/issues/156",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "server push"
      ],
      "body": "James tried to introduce the ability to use server push for HEAD in #151.  I backed out those changes, but I do think that we do want to do this.  I just need a clear signal that we have consensus to add the feature.\n",
      "createdAt": "2013-07-01T23:50:06Z",
      "updatedAt": "2013-08-09T16:12:23Z",
      "closedAt": "2013-08-09T16:12:23Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Hamburg; we want to do this.\n",
          "createdAt": "2013-08-05T14:02:02Z",
          "updatedAt": "2013-08-05T14:02:02Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1\n",
          "createdAt": "2013-08-05T16:38:17Z",
          "updatedAt": "2013-08-05T16:38:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in f06f1cf5da0de94191e88ba552e084853eb6827d.\n",
          "createdAt": "2013-08-09T16:12:23Z",
          "updatedAt": "2013-08-09T16:12:23Z"
        }
      ]
    },
    {
      "number": 158,
      "id": "MDU6SXNzdWUxNjI1MDA4Nw==",
      "title": ":scheme and :host for push",
      "url": "https://github.com/httpwg/http2-spec/issues/158",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "server push"
      ],
      "body": "From spullara@gmail.com:\n\n> The header fields in PUSH_PROMISE MUST include the \":scheme\", \":host\"\n> and \":path\" header fields [...]\n\nSam suggests:\n\n> I suggest that you limit to same origin and remove the :schema [sic] and the :host.\n\nNote that this restriction is probably absent to allow for future enhancements, like those that relied on the (removed) CREDENTIALS frame.  A definition of future enhancements is, of course, perfectly capable of updating any RFC that defines a restrictive policy (i.e., this one) with a less restrictive policy, if needed.\n",
      "createdAt": "2013-07-02T06:33:34Z",
      "updatedAt": "2013-08-13T00:11:44Z",
      "closedAt": "2013-08-13T00:11:44Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Three aspects discussed in Berlin:\n1. What is a push promise allowed / required to contain?\n2. What methods can be pushed?\n3. What the cache will permit to be pushed, regarding origins?\n",
          "createdAt": "2013-07-31T15:19:02Z",
          "updatedAt": "2013-07-31T15:19:02Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My answers...\n1. PUSH_PROMISE ought to only contain Request Headers... specifically, the set of request headers assumed by the server. The follow on HEADERS frame ought to only contain Response Headers.\n2. Well, a pushed stream ought to always be an implied GET request in all cases except when the pushed streams are sent in response to a HEAD. It ought to be legal to send pushed streams along with any 2xx response. 3xx/4xx/5xx responses ought to never have associated push streams.\n3. Not sure about #3 yet.\n",
          "createdAt": "2013-07-31T17:03:50Z",
          "updatedAt": "2013-07-31T17:03:50Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Berlin and Hamburg;\n1. PUSH_PROMISE needs to contain a complete request.\n2. PUSHed methods need to be safe.\n3. PUSH security considerations are already discussed in 10.1; same-origin.\n",
          "createdAt": "2013-08-05T13:50:48Z",
          "updatedAt": "2013-08-05T13:50:48Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in fbf6a1032660523fe13ae413b5ccf4a853641ca4.\n",
          "createdAt": "2013-08-13T00:11:44Z",
          "updatedAt": "2013-08-13T00:11:44Z"
        }
      ]
    },
    {
      "number": 163,
      "id": "MDU6SXNzdWUxNjMwNTI5NA==",
      "title": "Clarify header compression eviction  and error handling",
      "url": "https://github.com/httpwg/http2-spec/issues/163",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per: http://lists.w3.org/Archives/Public/ietf-http-wg/2013JulSep/0120.html\n\nThe current eviction mechanism is under specified in a number of ways.  This needs to be spelled out clearly. \n1. When doing substitution indexing, if items need to be evicted,  those must be evicted first,  before doing the substitution, with the table keeping track of the item being replaced so that,  even if it is evicted the substitution occurs properly. \n2. If a substitution for an empty index position is received,  return a compression error\n3. When doing incremental indexing,  always evict first.  \n4. Header table is allowed to contain duplicate entries, but that's a stupid thing to do.  Senders shouldn't do it but recipients need to be prepared for it and not die if it does happen. \n",
      "createdAt": "2013-07-03T07:42:47Z",
      "updatedAt": "2013-07-03T15:58:33Z",
      "closedAt": "2013-07-03T15:58:33Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Opened against the wrong repo...\n",
          "createdAt": "2013-07-03T15:58:33Z",
          "updatedAt": "2013-07-03T15:58:33Z"
        }
      ]
    },
    {
      "number": 164,
      "id": "MDU6SXNzdWUxNjMzMTI4Ng==",
      "title": "HTTP Method Case",
      "url": "https://github.com/httpwg/http2-spec/issues/164",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "editorial"
      ],
      "body": "Currently, HTTP Methods in 1.1 are all uppercase. The preference for 2.0 so far appears to have those represented using all lowercase. The HTTP Mapping currently does not redefine the HTTP Method header to use lowercase values. Need to clarify whether or not HTTP methods in 2.0 are case sensitive or not.\n",
      "createdAt": "2013-07-03T17:43:14Z",
      "updatedAt": "2013-08-05T09:24:37Z",
      "closedAt": "2013-08-05T09:24:37Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Where is this preference?\n\nMy understanding is that the name of the method header is lowercase, i.e. \":method\"\nBut the value of the header is the normal HTTP/1.1 case-sensitive method defined in RFC-2616/Sec-5.1.1\n",
          "createdAt": "2013-07-03T18:11:16Z",
          "updatedAt": "2013-07-03T18:11:16Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Look at the header compression draft for an example.. the pre-filled request table shows \"get\" and not \"GET\". I've seen lower case used in a few other areas as well. It just needs to be clarified.\n",
          "createdAt": "2013-07-03T18:22:29Z",
          "updatedAt": "2013-07-03T18:22:29Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "We can't re-define the range of HTTP methods without changing the semantics of HTTP. So, I'm marking this as editorial (to correct/clarify as necessary).\n",
          "createdAt": "2013-07-03T23:45:45Z",
          "updatedAt": "2013-07-03T23:45:45Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't believe this to be necessary.  I've changed the examples to include uppercase methods, which seems to be adequate.\n",
          "createdAt": "2013-08-05T09:24:37Z",
          "updatedAt": "2013-08-05T09:24:37Z"
        }
      ]
    },
    {
      "number": 165,
      "id": "MDU6SXNzdWUxNjQ0MzUyMw==",
      "title": "Stream state machine problems",
      "url": "https://github.com/httpwg/http2-spec/issues/165",
      "state": "CLOSED",
      "author": "molnarg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Not all interactions are well defined.\n\nidle state:\n- What to do when receiving frame other than HEADER and PUSH_PROMISE?\n\nreserved (local) state:\n- What to do when receiving frame other than RST_STREAM?\n\nopen state:\n- 'The \"open\" state is where both peers can send frames.' - only DATA frames or is there anything else that is valid?\n",
      "createdAt": "2013-07-07T14:21:07Z",
      "updatedAt": "2013-08-05T06:59:22Z",
      "closedAt": "2013-08-05T06:59:22Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that this is just editorial.  We didn't say that \"stuff we don't mention as allowed is not and MUST be treated as a PROTOCOL_ERROR\".  That would cover the first two.  Regarding the open state: any frame is permitted, though each frame and application usage will differ, making some frame types illegal.\n",
          "createdAt": "2013-07-08T21:31:36Z",
          "updatedAt": "2013-07-08T21:31:36Z"
        },
        {
          "author": "molnarg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes I agree on it being editorial, just forgot to add the label. One of the states defines how to deal with unspecified incoming frames (reserved (remote)) and one of the states specify that unspecified output frames are forbidden (reserved (local)). This should be generalized to all states.\n",
          "createdAt": "2013-07-08T21:57:20Z",
          "updatedAt": "2013-07-08T21:57:20Z"
        },
        {
          "author": "molnarg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Related ticket: #175 \n",
          "createdAt": "2013-07-17T20:24:06Z",
          "updatedAt": "2013-07-17T20:24:06Z"
        }
      ]
    },
    {
      "number": 166,
      "id": "MDU6SXNzdWUxNjQ4NjgzOQ==",
      "title": "confusing :path",
      "url": "https://github.com/httpwg/http2-spec/issues/166",
      "state": "CLOSED",
      "author": "andreineculau",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "> :path, whose values specify [...] the request-target\n\nfrom ~~https://github.com/http2/http2-spec/blob/master/draft-ietf-httpbis-http2.xml#L1762-1763~~ https://github.com/http2/http2-spec/blob/e1041fbef0acd8035f2f4c8dcbf2d556b23632b9/draft-ietf-httpbis-http2.xml#L2261.\n\nThe request-target was previously, in HTTP/1.1, referred to as `Request-URI`, and RFC3986 refers to path as a syntax component. This would make the HTTP/2.0 header `:path` equal to `<path>?<query>`.\n\nIf the above reasoning is correct, then wouldn't it be confusing to refer to path - would that be the request-target itself, or the path section of the request-target URI ?\n\nMaybe a clearer alternative would be: `:target` ? or leave it as `:path` and add a `:query` header ?\n",
      "createdAt": "2013-07-08T18:40:29Z",
      "updatedAt": "2013-10-08T12:29:55Z",
      "closedAt": "2013-08-06T13:42:34Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a good comment, and we can certainly take editorial feedback on what it means to map these things from RFC 3986 (and 2616') concepts.\n\nAs the names go, that's a change that will affect people implementing this.  I'd recommend taking your concerns to ietf-http-wg@w3.org, which is the best (and only) place to discuss more substantial issues.\n",
          "createdAt": "2013-07-08T21:52:09Z",
          "updatedAt": "2013-07-08T21:52:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that the [section on requests](http://http2.github.io/http2-spec/#HttpRequest) needs to be updated completely.\n\nWe need to say the following things:\n- HTTP header semantics are unchanged.\n- HTTP headers are _encoded_ in lowercase.\n- The mechanism for identifying the target URI (effective request URI) is completely changed.  It no longer requires inference.\n- There are some headers that are prohibited, simply because they no longer make sense.\n",
          "createdAt": "2013-08-05T08:59:14Z",
          "updatedAt": "2013-08-05T08:59:39Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "HTTP header _field names_ are encoded in lowercase... values encoding is currently unchanged (until we get to the discussion of type codecs)\n",
          "createdAt": "2013-08-05T16:49:36Z",
          "updatedAt": "2013-08-05T16:49:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> HTTP header field names are encoded in lowercase... values encoding is currently unchanged (until we get to the discussion of type codecs)\n\nOf course, consider that omission just as a result of me being excessively tired.\n",
          "createdAt": "2013-08-06T12:08:33Z",
          "updatedAt": "2013-08-06T12:08:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Let me know if the edits I've made are confusing in any way.\n",
          "createdAt": "2013-08-06T13:42:32Z",
          "updatedAt": "2013-08-06T13:42:32Z"
        },
        {
          "author": "andreineculau",
          "authorAssociation": "NONE",
          "body": "FWIW, this issue targets the `:path` header, despite the later comments.\nThe header's section is completely left as is in your commit, as it still reads:\n\n> The :path header field includes the path and query parts of the target URI\n\nThus, this issue is still valid, and very much open IMO.\n",
          "createdAt": "2013-08-06T14:11:09Z",
          "updatedAt": "2013-08-06T14:16:15Z"
        }
      ]
    },
    {
      "number": 167,
      "id": "MDU6SXNzdWUxNjUyNzExNQ==",
      "title": "desinged to have be",
      "url": "https://github.com/httpwg/http2-spec/issues/167",
      "state": "CLOSED",
      "author": "mcmanus",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "section 1 \"The resulting protocol is designed to have be more friendly\"\n\ns/have //\n",
      "createdAt": "2013-07-09T14:20:43Z",
      "updatedAt": "2013-07-09T17:35:06Z",
      "closedAt": "2013-07-09T17:35:06Z",
      "comments": []
    },
    {
      "number": 168,
      "id": "MDU6SXNzdWUxNjUyODE1Ng==",
      "title": "3.5 \"after TLS Finished\"",
      "url": "https://github.com/httpwg/http2-spec/issues/168",
      "state": "CLOSED",
      "author": "mcmanus",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "3.5\n\" client sends the client connection\n   header immediately upon receipt of a 101 Switching Protocols response\n   (indicating a successful upgrade), or after receiving a TLS Finished\n   message from the server. \"\n\nas written that prohibits TLS optimizations like False Start from being used - I'm sure that's not the intention of the text.\n\nI suggest \"or as the first Application Data bytes of a TLS connection.\"\n",
      "createdAt": "2013-07-09T14:38:35Z",
      "updatedAt": "2013-07-09T17:35:06Z",
      "closedAt": "2013-07-09T17:35:06Z",
      "comments": []
    },
    {
      "number": 169,
      "id": "MDU6SXNzdWUxNjUzMDI0OQ==",
      "title": "Protocol is binary",
      "url": "https://github.com/httpwg/http2-spec/issues/169",
      "state": "CLOSED",
      "author": "josteink",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Following the tradition with internet-protocols, a revised HTTP protocol must remain true to its internet-roots and be ASCII-based.\n\nMaking the protocol use a binary format only reduces its usefulnes and adds no discenrable benefits which aren't already adressed by GZIP and similiar transport-encodings.\n\nBesides, making the format binary risks making it harder to introduce extensions in the future, at least compared to text-based formats. This makes the protocol needlessly short-lived and brittle.\n\nMaking any open internet-protocol binary should fundamentally be considered a design-mistake. This needs be adressed before a new HTTP 2.0 can be accepted.\n",
      "createdAt": "2013-07-09T15:15:18Z",
      "updatedAt": "2019-07-19T07:41:59Z",
      "closedAt": "2013-07-10T00:39:29Z",
      "comments": [
        {
          "author": "mcmanus",
          "authorAssociation": "CONTRIBUTOR",
          "body": "this isn't editorial in nature so please take discussion of it to the ietf\nworking group list. Its probably also worth consulting the archive as it\nhas been discussed in detail in the past.\n\nOn Tue, Jul 9, 2013 at 11:56 AM, Andrea Faulds notifications@github.comwrote:\n\n> It ought to support the classic, non-binary mode (like HTTP/1.1) _and_the \"SPDY\" binary mode.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/169#issuecomment-20684352\n> .\n",
          "createdAt": "2013-07-09T16:00:03Z",
          "updatedAt": "2013-07-09T16:00:03Z"
        },
        {
          "author": "stevearm",
          "authorAssociation": "NONE",
          "body": "Looking in the [mailing list archives](http://lists.w3.org/Archives/Public/ietf-http-wg/) I found one such [discussion](http://lists.w3.org/Archives/Public/ietf-http-wg/2013JanMar/0253.html)\n\nmcmanus if a different discussion is more representative, can you link it?\n",
          "createdAt": "2013-07-09T20:43:19Z",
          "updatedAt": "2013-07-09T20:43:19Z"
        },
        {
          "author": null,
          "authorAssociation": "NONE",
          "body": "I don't know, seems there's lots of precedent for [open](https://www.ietf.org/rfc/rfc2460.txt) [extensible](http://www.packetizer.com/rfc/rfc3687/) [binary](http://www.rfc-archive.org/getrfc.php?rfc=826) protocols on the Internet.\n",
          "createdAt": "2013-07-09T21:12:22Z",
          "updatedAt": "2013-07-09T21:12:22Z"
        },
        {
          "author": null,
          "authorAssociation": "NONE",
          "body": "Also, \"discenrable\" is actually spelled \"discernible\", which seems to strengthen the arguments for binary protocols.\n",
          "createdAt": "2013-07-09T23:22:37Z",
          "updatedAt": "2013-07-09T23:22:37Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "We've discussed the binary nature of the protocol many times, both as part of our chartering process and afterwards, and both on the mailing list and in meetings.\n\nThe overwhelming consensus so far is that a binary protocol is justified, both for efficiency on the wire as well as implementations, as well as to assure protocol correctness (the problems of HTTP/1's looseness are well-known).\n\nAs a result, I'm closing this issue. If you want to bring this up, it needs to be on-list, and backed with _technical arguments_ -- preferably real-world data -- that persuade the working group to collectively change its mind. \"Following [your] roots\" and argument by assertion are _not_ technical arguments.\n",
          "createdAt": "2013-07-10T00:39:29Z",
          "updatedAt": "2013-07-10T00:39:29Z"
        },
        {
          "author": "josteink",
          "authorAssociation": "NONE",
          "body": "> We've discussed the binary nature of the protocol many times\n\nI've looked around the internet and like @stevearm, I came up empty-handed, but one discussion. Got any links I can follow, as I'd love to take a deeper dive into this?\n\n> The overwhelming consensus so far is that a binary protocol is justified\n\nI've seen this truism claimed at several occasions, but not once have I seen any data to back it up.\n\nThe closest I've seen is comparisons between HTTP/1.1 and Google SPDY, which showed limited gains. But that's obviously not a comparing a plain-text HTTP2 to a binary HTTP2, so that can't be used as an argument for anything.\n\nNeedless to say, I would be interested in any links showing this overwhelming consensus and the data behind it.\n\n> If you want to bring this up, it needs to be on-list\n\nWhich is fine.\n\n> and backed with technical arguments -- preferably real-world data --\n\nIt seems odd to require real-world data as an argument _not_ to make a fundamental change to one of the core internet protocols, when no data has been provided to justify the immense cost associated with making this change.\n\nHas the IETF been completely hijacked by Google? Does nobody remember how the internet was built by little people, not big organizations? Is the IETF, like the W3C a lost cause stolen by big business?\n\nThat said, if anyone can lead me to the relevant discussions _on the list_, I can take and further my complaints there.\n",
          "createdAt": "2013-07-10T06:21:31Z",
          "updatedAt": "2013-07-10T06:21:53Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "It was discussed most recently on-list at the thread starting here:\n  http://www.w3.org/mid/CAAZO4q4vEiYhH5FaX2XCxXox9jkf4dLTy8coQZiE+CYHA-QzBg@mail.gmail.com\n\nMoreover, when the WG formed consensus to adopt SPDY as the basis of HTTP/2, we implicitly accepted that the protocol was binary in nature. \n\nWe can talk about changing that, of course, but that needs to take the form of on-list discussion, and to act, we need an actual proposal to look at. The best way to do that is to submit an Internet-Draft (which you're more than welcome to do), preferably one backed by implementation experience.\n\n> It seems odd to require real-world data\n\n\"Preferably\" does not mean \"required.\"\n\n> Has the IETF been completely hijacked by Google? Does nobody remember how the internet was built by little people, not big organizations? Is the IETF, like the W3C a lost cause stolen by big business?\n\nAsking rhetorical questions like this isn't productive, it's posturing. You're not likely to convince people this way, especially if you haven't actually put any work into showing an alternative.\n",
          "createdAt": "2013-07-10T07:17:57Z",
          "updatedAt": "2013-07-10T07:17:57Z"
        },
        {
          "author": "public",
          "authorAssociation": "NONE",
          "body": "@josteink Binary is really the least interesting thing about the current draft to complain about :)\n",
          "createdAt": "2013-07-10T07:22:38Z",
          "updatedAt": "2013-07-10T07:22:38Z"
        }
      ]
    },
    {
      "number": 170,
      "id": "MDU6SXNzdWUxNjUzMDg1Ng==",
      "title": "section 5.1 PROMISE after RST?",
      "url": "https://github.com/httpwg/http2-spec/issues/170",
      "state": "CLOSED",
      "author": "mcmanus",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "5.1 \"An endpoint might receive a PUSH_PROMISE frame after it sends\n      RST_STREAM.  PUSH_PROMISE causes a stream to become \"reserved\".\n      If promised streams are not desired, a RST_STREAM can be used to\n      close any of those streams.\"\n\nI'm pretty sure (but not certain) that the intention of that text is to say \"might receive a RST_STREAM after it sends PUSH_PROMISE\"\n",
      "createdAt": "2013-07-09T15:26:28Z",
      "updatedAt": "2013-07-09T17:47:38Z",
      "closedAt": "2013-07-09T17:47:38Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hmm.. that depends on what stream the RST_STREAM was sent for. For instance...\n\n```\nClient ===>       HEADERS (#1)    ===> Server\n       <===       HEADERS (#1)    <===\n       ===>     RST_STREAM (#1)   ===>\n       <===  PUSH_PROMISE (#1,#2) <===\n```\n\nSuppose that the Client sends the RST_STREAM for Stream 1 at the same time the Server sends it's PUSH_PROMISE frame on Stream 1, promising Stream 2.  The client is going to receive the PUSH_PROMISE after it sends RST_STREAM. This PUSH_PROMISE causes Stream 2 to become \"reserved\", which means the server can still push frames on it even tho Stream #1 has been closed. The Client will have to send a new RST_STREAM for every promised stream.\n\nThere is a proposed solution for this using the ASSOCIATED_ONLY flag on RST_STREAM. The client would send two RST_STREAMS, one for Stream 1 and another for all streams associated with Stream 1.\n",
          "createdAt": "2013-07-09T15:36:14Z",
          "updatedAt": "2013-07-09T15:36:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "James has it right.  The intent of the text is to highlight the case where you reset a request, but the server has - in the meantime - sent a few push promises.  The implication is that those streams will be reserved and will have to either complete or be reset.\n\nThe note about ASSOCIATED_ONLY is just a potential optimization that would allow for preemptive reset of promised streams, rather than what is currently required, which is a per-stream reset.\n",
          "createdAt": "2013-07-09T17:38:05Z",
          "updatedAt": "2013-07-09T17:38:05Z"
        }
      ]
    },
    {
      "number": 171,
      "id": "MDU6SXNzdWUxNjUzNDE1Mw==",
      "title": "Design: SYNC_ACK Frame Proposal",
      "url": "https://github.com/httpwg/http2-spec/issues/171",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "frame semantics"
      ],
      "body": "Just getting this documented at this point... this is not a priority at this point...\n\nThe notion of an ACK mechanism (or new frame type) for things like resizing the header compression table size, window update, etc was discussed at the face to face in San Francisco. Action on it was deferred until after the initial interop. This is an initial strawman proposal we can use to frame the discussion around....\n\nACK Frame:\n\nACK frames are always sent in groups... when an endpoint wants to make sure that the peer has successfully received a particular sequence of frames, it can begin that sequence with an initial ACK frame. This tells the peer to begin a streaming hash of subsequently received frames. The sending endpoint would then send a ACK frame with DONE flag set and a payload equal to the calculated value of the hash. Upon receiving the second ACK frame, the peer MUST respond with it's own ACK frame with the RESP and DONE flags set. This response frame SHOULD be sent to the peer with the highest priority (like PING/PONG). A Sending Peer MUST NOT send more than one open ACK\n\nSo...\n\n```\nACK   ==>\n  -DONE ==> Means (Hey, pay attention to the next parts... I wanna know that you get them correctly)\nFRAMES.... ==>\nACK   ==>\n  +DONE ==> Means (Ok, this is the hash of what you should have received, did you get it?)\n   MD5 HASH\n\n<==   ACK \n       +DONE\n       +RESP ==> Means (This is what I received)\n        MD5 HASH\n```\n\nACK would have an additional optional flag ERROR. When set, it tells the endpoint to treat a hash mismatch as a connection error.\n",
      "createdAt": "2013-07-09T16:27:08Z",
      "updatedAt": "2013-10-10T21:40:40Z",
      "closedAt": "2013-10-10T21:40:40Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm at a loss to understand why this is needed when we're going over an in-order, guaranteed-delivery transport.  The remote endpoint _will_ get whatever we send.\n\nThings like header table size, reducing max stream count, etc. are interesting largely because they introduce conditions where the remote will send traffic after you've sent the change but before they've received it.  In order to enforce the new settings, we need to know _when_ the endpoint received and applied the change.  I don't know that a hash furthers that goal.\n\nIf we're considering moving to an unreliable transport where some frames may get dropped, we need to do a lot more than just add a frame type.\n",
          "createdAt": "2013-07-09T22:29:12Z",
          "updatedAt": "2013-07-09T22:29:12Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Again, this is just a strawman right now... the need for an ACK frame was brought up at the face to face for acknowledging setting changes, etc. For my application case, what I really need is an end-to-end incremental hash that allows me to fail fast when something goes wrong. Whether or not this is the right way to go I don't know yet, but this is just one possible approach. I posted it here to get it documented so I can move on to other items in my list without this getting lost along the way. I don't want to get into a detailed design discussion on this right now, however, and this certainly is not the right forum for it\n",
          "createdAt": "2013-07-09T22:44:27Z",
          "updatedAt": "2013-07-09T22:44:27Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; strong feeling that this adds a lot of complexity for little benefit on a reliable, in-order transport. Future transports might need it, but that doesn't affect the spec we're shipping.\n",
          "createdAt": "2013-10-10T21:40:40Z",
          "updatedAt": "2013-10-10T21:40:40Z"
        }
      ]
    },
    {
      "number": 172,
      "id": "MDU6SXNzdWUxNjU5NDUwNA==",
      "title": "Set a baseline for TLS implementation",
      "url": "https://github.com/httpwg/http2-spec/issues/172",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "aamelnikov"
      ],
      "labels": [
        "design",
        "editor-ready",
        "transport mapping"
      ],
      "body": "We've discussed the need to upgrade the basic profile that is supported by HTTP/2.0 implementations.  Currently, this includes the Server Name Indication (SNI) extension, and ALPN implicitly excludes SSLv3 from consideration, but are there other improvements we want?\n",
      "createdAt": "2013-07-10T19:03:13Z",
      "updatedAt": "2014-01-24T14:46:07Z",
      "closedAt": "2014-01-24T14:46:07Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "SNI - required; client must send, server must remove HTTP/2 tokens from negotiation list if SNI not present\n\nMinimum version of SSL/TLS - TLSv1.1; if lower, server must remove HTTP/2 tokens from negotiation list. Editor's note will document that we intend to update that to a higher version as the draft matures.\n\nRC4 - prose recommendation that RC4 ought not be used.\n",
          "createdAt": "2013-08-05T10:29:31Z",
          "updatedAt": "2013-08-05T10:29:31Z"
        },
        {
          "author": "aamelnikov",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should be closed: git commits 3c3e6d5158c365f0ab7dd3da5db222e956f1358d and acda26446c90edcb8dd57a9e113e3a7581309c2b\n",
          "createdAt": "2013-08-06T08:59:55Z",
          "updatedAt": "2013-08-06T08:59:55Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed again in Zurich; for next implementation draft, TLS 1.2, no compression, offer ephemeral cypher suite(s).\n",
          "createdAt": "2014-01-24T09:00:17Z",
          "updatedAt": "2014-01-24T09:00:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Servers must be tolerant of false start, but then we are going to add a big warning about how false start might be bad and clients decide to do that at their own hazard.\n",
          "createdAt": "2014-01-24T09:06:19Z",
          "updatedAt": "2014-01-24T09:06:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Note regarding ephemeral cipher suites: we might want to say that clients can enforce a minimum level of strength for each of the suites, and maybe also make specific recommendations like >=128 for ECDHE (P256 and 25519 OK), >= 1536 for integer DHE.\n",
          "createdAt": "2014-01-24T09:48:42Z",
          "updatedAt": "2014-01-24T09:48:42Z"
        }
      ]
    },
    {
      "number": 173,
      "id": "MDU6SXNzdWUxNjc2NDc3Mw==",
      "title": "Note that magic doesn't use the version identifier string",
      "url": "https://github.com/httpwg/http2-spec/issues/173",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "We've had some confusion about this, for good reason:\n\nOn 15 July 2013 06:01, Amos Jeffries squid3@treenet.co.nz wrote:\n\n> I think this particular section 3.5 needs a second explicit note to the\n> effect that the opaque [magic] blob should be adjusted for the draft-specific\n> identifier.\n\nThis magic string MUST NOT be changed.\n",
      "createdAt": "2013-07-15T16:51:48Z",
      "updatedAt": "2013-08-05T06:59:22Z",
      "closedAt": "2013-08-05T06:59:22Z",
      "comments": []
    },
    {
      "number": 174,
      "id": "MDU6SXNzdWUxNjc4MjQ4MQ==",
      "title": "Make duplicate settings a PROTOCOL_ERROR",
      "url": "https://github.com/httpwg/http2-spec/issues/174",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "frame semantics"
      ],
      "body": "The draft currently prohibits duplicate settings, but also requires receivers of duplicate settings to ignore all but the first.\n\nPatrick suggests that we instead permit implementations to treat duplicates as a protocol error.\n",
      "createdAt": "2013-07-15T22:20:11Z",
      "updatedAt": "2013-08-05T06:59:22Z",
      "closedAt": "2013-08-05T06:59:22Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at Berlin; upon receipt want to either pick a predictable one, or ignore it, or generate a protocol error. MUST, not SHOULD.\n",
          "createdAt": "2013-07-31T15:05:31Z",
          "updatedAt": "2013-07-31T15:05:31Z"
        }
      ]
    },
    {
      "number": 175,
      "id": "MDU6SXNzdWUxNjg3Mjk0NA==",
      "title": "Stream state clarifications",
      "url": "https://github.com/httpwg/http2-spec/issues/175",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "From Shigeki Ohtsu:\n\nThe table is listed in\n\nhttp://html5.ohtsu.org/HTTP2_Stream_State.pdf\n\nIn writing this, I have the folowing five questions which are painted gray in\nthe table field.\n1. Receiving RST_STREAM in \"idle\"\n   Is it a stream error with PROTOCOL_ERROR or falled into \"closed\" state?\n2. Receivng PRIRORITY and WINDOW_UPDATE in \"half closed(local)\"\n   They are not necessary. So is it to be an error or ignored?\n3. Sending PRIORITY in \"half closed(remote)\"\n   No description about this case is in the draft. Is it prohibited?\n4. Receiving RST_STREAM in \"closed\"\n   The draft says that \" An endpoint that sends a RST_STREAM frame MUST ignore\n   frames that it receives on closed streams after it has sent a RST_STREAM frame.\"\n   Is this ignored always in the closed state or only in the case\n   after RST_STREAM sent?\n5. Receiving PUSH_PROMISE in \"closed\"\n   The draft says that 'An endpoint might receive a PUSH_PROMISE frame after\n   it sends RST_STREAM. PUSH_PROMISE causes a stream to become \"reserved\".'\n6. The same question as above.\n   Is PUSH_PROMISE always leads the associted stream to be reserved(remote)\n   in the closed state? Or is it limited in the case after RST_STREAM was sent?\n",
      "createdAt": "2013-07-17T16:00:11Z",
      "updatedAt": "2013-08-05T06:59:22Z",
      "closedAt": "2013-08-05T06:59:22Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "1. Has to be a PROTOCOL_ERROR -- otherwise i'll have to keep state around for all idle streams.\n2. You may have closed the stream but the peer doesn't know it until it receives your packet and may have sent PRIORITY and WINDOW_UPDATE frames. Can't be an error.\n3. MUST NOT as there is no reason to, but see above for why the peer must ignore.\n4. This only has to do with RST_STREAM because the peer may not know the stream is closed yet. If the peer closed the stream different logic might apply.\n   5&6. State is always reserved but but if you don't want that associated stream, RST_STREAM it. You have to track because the peer will think it used that it reserved that stream-id.\n",
          "createdAt": "2013-07-17T16:13:15Z",
          "updatedAt": "2013-07-17T16:13:15Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "5&6. State is always reserved but if you don't want that stream RST_STREAM it. You have to track because the peer will think that stream id is in use.\n",
          "createdAt": "2013-07-17T16:13:57Z",
          "updatedAt": "2013-07-17T16:13:57Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I knew that I could rely on @jpinner to come up with exactly the same responses that I did.  With the exception of 5&6, for which I've proposed a more severe response in #177.  That (and #176) can be discussed on-list.\n",
          "createdAt": "2013-07-17T16:26:18Z",
          "updatedAt": "2013-07-17T16:26:18Z"
        },
        {
          "author": "shigeki",
          "authorAssociation": "NONE",
          "body": "Following  comments, I've update the table in\nhttp://html5.ohtsu.org/HTTP2_Stream_State.pdf\nand submitted a new PR  of #179 which is related in receiving PUSH_PROMISE.\nThe old one was moved to \nhttp://html5.ohtsu.org/HTTP2_Stream_State_20130717.pdf\n",
          "createdAt": "2013-07-18T06:32:58Z",
          "updatedAt": "2013-07-18T06:32:58Z"
        }
      ]
    },
    {
      "number": 176,
      "id": "MDU6SXNzdWUxNjg3NDAyNg==",
      "title": "RST_STREAM for idle streams",
      "url": "https://github.com/httpwg/http2-spec/issues/176",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "As mentioned in #175, we need to decide if RST_STREAM on an idle stream is an error.\n\nI propose that this be a _connection_ error.\n",
      "createdAt": "2013-07-17T16:18:54Z",
      "updatedAt": "2013-08-05T06:59:22Z",
      "closedAt": "2013-08-05T06:59:22Z",
      "comments": []
    },
    {
      "number": 177,
      "id": "MDU6SXNzdWUxNjg3NDI4MQ==",
      "title": "PUSH_PROMISES at invalid times",
      "url": "https://github.com/httpwg/http2-spec/issues/177",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "design",
        "editor-ready",
        "server push"
      ],
      "body": "In #175, the question of what to do with a PUSH_PROMISE that arrives at the wrong time was raised.  If the PUSH_PROMISE is otherwise a valid frame, it should be treated as an error, but there is the question of what to do about the promised stream.\n\nI propose that we treat this as a _connection_ error.\n",
      "createdAt": "2013-07-17T16:23:57Z",
      "updatedAt": "2013-08-05T06:59:22Z",
      "closedAt": "2013-08-05T06:59:22Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Berlin; handle as a connection error.\n",
          "createdAt": "2013-07-31T15:13:07Z",
          "updatedAt": "2013-07-31T15:13:07Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Can you be more specific about what the stream states are in this situation?\n",
          "createdAt": "2013-07-31T15:47:11Z",
          "updatedAt": "2013-07-31T15:47:11Z"
        }
      ]
    },
    {
      "number": 180,
      "id": "MDU6SXNzdWUxNzExMjQ5Nw==",
      "title": "No push promise if maximum concurrent streams is zero",
      "url": "https://github.com/httpwg/http2-spec/issues/180",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "server push"
      ],
      "body": "Currently, we sort of suggest that setting the maximum concurrent streams to zero disables push, but it doesn't really state that you can't send a push promise.  This would be pointless, but it's still worth adding a specific prohibition.\n\nSuggested addition (in need of a bit of a rewording):\n\n>  Servers MUST NOT push or promise to push if a client advertises a\n> value of 0 for SETTINGS_MAX_CONCURRENT_STREAMS.\n",
      "createdAt": "2013-07-23T16:56:47Z",
      "updatedAt": "2013-08-13T00:10:29Z",
      "closedAt": "2013-08-13T00:10:29Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Now #223 \n",
          "createdAt": "2013-08-13T00:10:28Z",
          "updatedAt": "2013-08-13T00:10:28Z"
        }
      ]
    },
    {
      "number": 181,
      "id": "MDU6SXNzdWUxNzEyOTEzMw==",
      "title": "SETTINGS_FLOW_CONTROL_OPTIONS ",
      "url": "https://github.com/httpwg/http2-spec/issues/181",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "flow control"
      ],
      "body": "From Patrick McManus:\n\nI found this really confusing:\n\n>  SETTINGS_FLOW_CONTROL_OPTIONS (10):  indicates that streams directed\n>     to the sender will not be subject to flow control.  The least\n>    significant bit (0x1) of the value is set to indicate that new\n>    streams are not flow controlled.  All other bits are reserved.\n> \n>    This setting applies to all streams, including existing streams.\n> \n>    These bits cannot be cleared once set, see Section 6.9.4.\n1. does the value always need to be 1? The option as a whole is defined to indicate that \"streams .. will not be subject to flow control\" - so not setting the value would seem to be inconsistent. But if the value can only be 1, why define a value at all? Maybe the option definition is misleading and should be \"whether or not streams will be subject to flow control\"?\n2. \"This setting applies to all streams, including existing ones\".. but the \"value is set to indicate that new streams are not flow controlled\" (implying existing streams are not impacted).\n3. \"These bits cannot be..\".. bits is plural, but only 1 bit is defined.\n\nbarring better advice, for my -04 implementation I am going to test the low bit of the value, and if true apply the logic to all present and future sends directed to the sender of the option.\n",
      "createdAt": "2013-07-23T22:18:27Z",
      "updatedAt": "2013-08-07T15:56:22Z",
      "closedAt": "2013-08-07T09:35:45Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at Hamburg; collapse to one method of turning off flow control - using settings (all flags to go). Both kinds with one setting, together.\n",
          "createdAt": "2013-08-05T14:30:29Z",
          "updatedAt": "2013-08-05T14:30:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Also discussed, there was a desire to turn flow control errors into connection-level errors, rather than allowing them to be treated as stream-level errors.\n",
          "createdAt": "2013-08-05T14:31:33Z",
          "updatedAt": "2013-08-05T14:31:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Already closed elsewhere.\n",
          "createdAt": "2013-08-07T09:35:45Z",
          "updatedAt": "2013-08-07T09:35:45Z"
        },
        {
          "author": "akalin-chromium",
          "authorAssociation": "NONE",
          "body": "I'm confused, was this already added to the spec? If so, why is it closed?\n",
          "createdAt": "2013-08-07T15:56:22Z",
          "updatedAt": "2013-08-07T15:56:22Z"
        }
      ]
    },
    {
      "number": 182,
      "id": "MDU6SXNzdWUxNzEyOTU0NA==",
      "title": "Fix off by one in flow control example",
      "url": "https://github.com/httpwg/http2-spec/issues/182",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "flow control"
      ],
      "body": "From Patrick:\n\n> For example, if the client sends 64KB immediately on connection\n>    establishment,\n\nThe example uses an invalid computation because the default window is \"64KB - 1\"\n",
      "createdAt": "2013-07-23T22:28:05Z",
      "updatedAt": "2013-08-05T06:59:22Z",
      "closedAt": "2013-08-05T06:59:22Z",
      "comments": []
    },
    {
      "number": 183,
      "id": "MDU6SXNzdWUxNzMwODM5Nw==",
      "title": "Content of continuations",
      "url": "https://github.com/httpwg/http2-spec/issues/183",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "aamelnikov"
      ],
      "labels": [
        "design",
        "editor-ready",
        "frame layout"
      ],
      "body": "> HEADERS and PUSH PROMISE can have their header block fragmented among multiple contiguous frames. That's clear.\n> \n> For PP I'm a ltitle unusure how Promised-Stream-ID fits into those fragments. Is it present in all of them? the frame diagram seems to assert that it is present in every PP frame, but the definition of END_PUSH_PROMISE says \"the payload of all PUSH_PROMISE frames are concatenated and interpreted as a single block\". and the Promised-Stream-ID is definitely part of the definition of payload (which we have defined as everything after the first 8 bytes of frame header).\n> \n> The right thing is probably that it is present in all of them, but is not considered part of the payload for purposes of determining the header block. A clarification seems needed. If that's right, do we need a rule saying the Promised-Stream-ID must be the same across all the fragments?\n> \n> I think HEADERS has a similar problem with Priority.. it uses a \"payload\" definition of the headers block that would include priority (but shouldn't)...\n\nSo, what is the content of a continuation?\n",
      "createdAt": "2013-07-28T07:47:38Z",
      "updatedAt": "2013-08-12T22:42:24Z",
      "closedAt": "2013-08-12T22:42:24Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Comment at the meeting:\n\nIt's possible that an encoder could place only a small number of bytes in a frame and then use continuations.  This was identified as a pathological case that would be a good addition to a test suite.\n",
          "createdAt": "2013-08-05T07:47:11Z",
          "updatedAt": "2013-08-05T07:47:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There seemed to be a general desire to define a ...CONTINUED frame that doesn't have any of the decoration that the initial frame in the continued sequence has, like the PRIORITY bit, or the promised stream identifier.  Hasan might produce a proposal.\n",
          "createdAt": "2013-08-05T07:53:43Z",
          "updatedAt": "2013-08-05T07:53:43Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Note: Frames without END_HEADERS MUST NOT have END_STREAM.\n",
          "createdAt": "2013-08-05T14:07:55Z",
          "updatedAt": "2013-08-05T14:07:55Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Hamburg; agreed that we need:\n- a generic CONTINUATION frame\n- a continued flag\n\nand more, as above\n",
          "createdAt": "2013-08-05T14:10:05Z",
          "updatedAt": "2013-08-05T14:10:05Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 on the CONTINUATION frame...\n\n(see http://lists.w3.org/Archives/Public/ietf-http-wg/2013JulSep/0527.html)\n",
          "createdAt": "2013-08-05T16:32:43Z",
          "updatedAt": "2013-08-05T16:34:15Z"
        },
        {
          "author": "aamelnikov",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Will the following sequence of frames be legal on a stream: PUSH_PROMISE, HEADERS, CONTINUATION?\n\nIn the section:\n\n```\n  <section anchor=\"PushResources\" title=\"Server Push\">\n```\n\nI see:\n\n```\nThe server SHOULD send <xref target=\"PUSH_PROMISE\">PUSH_PROMISE</xref> frames prior to\nsending any HEADERS or DATA frames that reference the promised resources.  This avoids\na race where clients issue requests for resources prior to receiving any PUSH_PROMISE\nframes.\n```\n\nwhich made me think that at least the following sequence of frames is legal: PUSH_PROMISE followed by HEADERS. I am not sure this is very clear elsewhere in the document.\n",
          "createdAt": "2013-08-06T13:44:53Z",
          "updatedAt": "2013-08-06T13:44:53Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, this is a valid sequence.  I believe that the full sequence (as ABNF) is:\n\n```\nresponse = *(push-promise *continuation) headers *continuation *(data / ((headers / push-promise) *continuation)) [headers *continuation]\n```\n\nNote: the last frame of a response can now be a (continued) push promise, since that now has END_STREAM.  We need to fix that.  I'll follow up on-list and maybe raise another issue.\n",
          "createdAt": "2013-08-12T22:42:24Z",
          "updatedAt": "2013-08-12T22:42:24Z"
        }
      ]
    },
    {
      "number": 184,
      "id": "MDU6SXNzdWUxNzQ4OTI4Ng==",
      "title": "send server settings within TLS handshake",
      "url": "https://github.com/httpwg/http2-spec/issues/184",
      "state": "CLOSED",
      "author": "GabrielMontenegro",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "transport mapping",
        "upgrade"
      ],
      "body": "Need to decide if we want the server to send its settings within the TLS handshake so the client always starts with full knowledge of the server preferences. This would imply a request to the TLS WG to carry a blob and for the http/2 spec to use that blob accordingly.\n",
      "createdAt": "2013-08-01T03:39:40Z",
      "updatedAt": "2014-01-22T11:09:16Z",
      "closedAt": "2014-01-22T11:09:16Z",
      "comments": [
        {
          "author": "GabrielMontenegro",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Profiles based approach does not need anything further from the TLS WG, as it uses ALPN as-is. \nSee: http://tools.ietf.org/html/draft-montenegro-httpbis-http2-server-profiles/\n",
          "createdAt": "2013-09-12T00:27:32Z",
          "updatedAt": "2013-09-12T00:27:32Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; may be able to address the requirement by using the SETTINGS ACK + reset_streams to limit server resource usage instead. This ticket on hold until we have a chance to experiment with that.\n\nIf we do go this route (ALPN profiles), it needs to be a MUST client-side (could be implicit)\n",
          "createdAt": "2013-10-10T21:09:37Z",
          "updatedAt": "2013-10-10T21:09:37Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Zurich; there wasn't an overwhelming amount of support for this feature.\n",
          "createdAt": "2014-01-22T11:09:16Z",
          "updatedAt": "2014-01-22T11:09:16Z"
        }
      ]
    },
    {
      "number": 185,
      "id": "MDU6SXNzdWUxNzU0ODE5Ng==",
      "title": "Ensure TCP receive buffer is completely drained",
      "url": "https://github.com/httpwg/http2-spec/issues/185",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "flow control"
      ],
      "body": "From @grmocg.\n\nWhen using flow control, the receiver MUST read from the TCP receive buffer in a timely fashion.  Failure to do so could lead to a deadlock when critical frames, such as WINDOW_UPDATE, are not available to the HTTP layer.\n",
      "createdAt": "2013-08-02T07:41:45Z",
      "updatedAt": "2013-08-05T06:59:22Z",
      "closedAt": "2013-08-05T06:59:22Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "looks good.\n",
          "createdAt": "2013-08-02T12:44:03Z",
          "updatedAt": "2013-08-02T12:44:03Z"
        }
      ]
    },
    {
      "number": 186,
      "id": "MDU6SXNzdWUxNzU3NDkxNg==",
      "title": "Casing of \"HTTP/2.0\" string with ALPN",
      "url": "https://github.com/httpwg/http2-spec/issues/186",
      "state": "CLOSED",
      "author": "andrewrockwell",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "transport mapping"
      ],
      "body": "The HTTP/2.0 spec should updated to include \"http/2.0\" as the protocol negotiated by ALPN, as opposed to the currently stated \"HTTP/2.0\" - difference in casing.\n\nIn section 3.1 of HTTP/2.0 Draft 4 spec, it  is stated that the string \"HTTP/2.0\" will be used to identify the HTTP/2.0 protocol in the TLS ALPN protocol negotiation extension field. In section 6 of the ALPN Draft 1 spec, it is stated that the string \"http/2.0\" will be used to identify the HTTP/2.0 protocol, which is consistent with the representation of other protocols in the IANA registry.\n",
      "createdAt": "2013-08-02T18:40:02Z",
      "updatedAt": "2013-08-27T20:55:00Z",
      "closedAt": "2013-08-27T20:55:00Z",
      "comments": [
        {
          "author": "mcmanus",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1.\n\nwhile we are at it, alpn also says non IANA names should start with exp so we should probably go to exp-http2-id05 or something like that at the next for-implementation update.\n",
          "createdAt": "2013-08-02T22:46:19Z",
          "updatedAt": "2013-08-02T22:46:19Z"
        },
        {
          "author": "andrewrockwell",
          "authorAssociation": "NONE",
          "body": "Agreed!\n",
          "createdAt": "2013-08-02T23:43:24Z",
          "updatedAt": "2013-08-02T23:43:24Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Rather than fix HTTP/2.0, I have requested that the ALPN draft remove the 'http/2.0' registration.\n\nI have also requested the removal of the 'exp' prefix, in line with the recommendations of [RFC 6648](http://tools.ietf.org/html/rfc6648).\n",
          "createdAt": "2013-08-21T18:57:47Z",
          "updatedAt": "2013-08-21T18:57:47Z"
        }
      ]
    },
    {
      "number": 187,
      "id": "MDU6SXNzdWUxNzYyNTU1MA==",
      "title": "String Literal",
      "url": "https://github.com/httpwg/http2-spec/issues/187",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Literal strings can represent header names or header values. They are\nencoded in two parts:\n\n```\n The string length, defined as the number of bytes needed to store\n```\n\nits UTF-8 representation, is represented as an integer with a zero bits\nprefix. If the string length is strictly less than 128, it is\nrepresented as one byte.\n     The string value represented as a list of UTF-8 characters.\"\n\nBy \"list of UTF-8 characters\" I assume you mean \"octet sequence\nrepresenting the UTF-8 encoding of the string\"?\n\nA more general question: the proposal handles header field values as\ncharacter sequences, whereas in HTTP/1.1 they are really octet sequences\nwith an unknown character encoding scheme. That is, if you see octets >=\n0x80 you really can't tell in general what they mean.\n\nAt some point we'll have to decide how to handle this problem.\n",
      "createdAt": "2013-08-05T09:11:46Z",
      "updatedAt": "2013-10-10T21:41:22Z",
      "closedAt": "2013-10-10T21:41:22Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The typed codec proposal ought to address this partially. When translating from http/1 to http/2, if octets >= 0x80 are encountered and we're not sure what they represent, we can simply pass those header values as raw binary rather than as text... leaving it up to the other end to figure out. If we know, however, that the octets are UTF-8, we can pass the header value as text.\n",
          "createdAt": "2013-08-05T16:47:42Z",
          "updatedAt": "2013-08-05T16:47:42Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "In Seattle, we decided that header compression operates upon byte strings, so this isn't relevant any more.\n",
          "createdAt": "2013-10-10T21:41:22Z",
          "updatedAt": "2013-10-10T21:41:22Z"
        }
      ]
    },
    {
      "number": 188,
      "id": "MDU6SXNzdWUxNzYyNTc4Mg==",
      "title": "Initial headers",
      "url": "https://github.com/httpwg/http2-spec/issues/188",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "These need review, even without real-world data. In particular, we\nshouldn't have deprecated fields such as Keep-Alive or Content-MD5 here.\n",
      "createdAt": "2013-08-05T09:16:59Z",
      "updatedAt": "2013-08-29T18:49:55Z",
      "closedAt": "2013-08-29T18:49:55Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposal for things to drop...\n\nRequests: Keep-Alive, Proxy-Connection, Accept-Datetime, Content-MD5, Pragma, TE, Upgrade, Warning\nResponses: Content-MD5, P3P, Pragma, Trailer, Warning\n",
          "createdAt": "2013-08-05T14:38:09Z",
          "updatedAt": "2013-08-05T14:38:09Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "P3P is not defined by HTTP/1 so ought not to be included in the deprecated things...\n",
          "createdAt": "2013-08-05T16:28:53Z",
          "updatedAt": "2013-08-05T16:28:53Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What is the justification for dropping Content-MD5?\n",
          "createdAt": "2013-08-05T16:29:54Z",
          "updatedAt": "2013-08-05T16:29:54Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's dropped from HTTPbis.\n",
          "createdAt": "2013-08-05T16:46:07Z",
          "updatedAt": "2013-08-05T16:46:07Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This isn't just about deprecation, it's also about removing stuff that people don't or shouldn't use.\n",
          "createdAt": "2013-08-06T12:04:38Z",
          "updatedAt": "2013-08-06T12:04:38Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Again, P3P is _not_ defined by any of the HTTP specs. HTTP/2 shouldn't be saying anything about it. And I still haven't seen a justification for dropping Content-MD5. Is it in the \"people don't\" or \"people shouldn't\" category?\n\nFWIW, I've seen uses of Content-MD5 in private applications...\n",
          "createdAt": "2013-08-06T15:41:04Z",
          "updatedAt": "2013-08-06T15:41:04Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "P3P is in the registry (http://www.iana.org/assignments/message-headers/message-headers.xhtml)\n\nContent-MD5 essentially is deprecated because of both interop problems with Range requests and security issues.\n",
          "createdAt": "2013-08-06T20:56:17Z",
          "updatedAt": "2013-08-06T20:56:17Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I applied Martin's changes in HPACK (header compression spec): it was a quick way to make the list somewhat better. Nothing is set in stone yet, and in anyway, dropping a header from the initial header tables only has a small cost linked to transmitting its name upon first usage.\n\nWe will still need to have a thorough review with more real world data, and maybe a good analysis of the HTTP header registry.\n",
          "createdAt": "2013-08-09T15:10:25Z",
          "updatedAt": "2013-08-09T15:10:25Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Spring cleaning.  Feel free to open issues for specific additions or removals.\n",
          "createdAt": "2013-08-29T18:49:55Z",
          "updatedAt": "2013-08-29T18:49:55Z"
        }
      ]
    },
    {
      "number": 189,
      "id": "MDU6SXNzdWUxNzYyNTkxMQ==",
      "title": "Reference set definition",
      "url": "https://github.com/httpwg/http2-spec/issues/189",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Should define the reference set as a set of reference to the entries in the header table and not as a set of name/value pairs.\n\nWould remove some name shadowing risk at the implementation level.\n",
      "createdAt": "2013-08-05T09:20:14Z",
      "updatedAt": "2013-08-09T15:12:19Z",
      "closedAt": "2013-08-09T15:12:19Z",
      "comments": [
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1\nIt is more efficient in the implementation point of view. Also it avoids corner case for duplicate name/value pair entry in the header table.\n",
          "createdAt": "2013-08-05T13:00:30Z",
          "updatedAt": "2013-08-05T13:00:30Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is solved, as part of solving #214.\n",
          "createdAt": "2013-08-09T15:12:19Z",
          "updatedAt": "2013-08-09T15:12:19Z"
        }
      ]
    },
    {
      "number": 190,
      "id": "MDU6SXNzdWUxNzYyNTk1Ng==",
      "title": "Section 4.4 commands",
      "url": "https://github.com/httpwg/http2-spec/issues/190",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Rereading this without my preconception glasses on, I realized\nsomething.  The subsections of Section 4.4 don't clearly identify what\neach command actually does.  The reader is left to infer what each\ndoes.  The content of the fields is also hidden beneath details of\nwire encoding.\n\nThese sections should be very clear on the purpose of each.\n",
      "createdAt": "2013-08-05T09:21:21Z",
      "updatedAt": "2013-08-29T18:49:11Z",
      "closedAt": "2013-08-29T18:49:11Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that we sorted this out in https://github.com/http2/compression-spec/pull/25\n",
          "createdAt": "2013-08-27T21:56:12Z",
          "updatedAt": "2013-08-27T21:56:12Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Spring cleaning.\n",
          "createdAt": "2013-08-29T18:49:11Z",
          "updatedAt": "2013-08-29T18:49:11Z"
        }
      ]
    },
    {
      "number": 191,
      "id": "MDU6SXNzdWUxNzYyNTk3NA==",
      "title": "Overhead",
      "url": "https://github.com/httpwg/http2-spec/issues/191",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Explain why 32 bytes of overhead.\n",
      "createdAt": "2013-08-05T09:21:48Z",
      "updatedAt": "2013-08-09T15:10:53Z",
      "closedAt": "2013-08-09T15:10:53Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done in new draft.\n",
          "createdAt": "2013-08-09T15:10:53Z",
          "updatedAt": "2013-08-09T15:10:53Z"
        }
      ]
    },
    {
      "number": 192,
      "id": "MDU6SXNzdWUxNzYyNTk5Mg==",
      "title": "Eviction strategy",
      "url": "https://github.com/httpwg/http2-spec/issues/192",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The eviction strategy needs some more text.  I would like to know the\ncharacteristics of this choice and I think that the draft could use\nthis.  (This isn't critical for -00, or early implementations, but it\nwill affect later uptake of the spec.)\n\nAnd then there are the choices:\n1. The oldest entries are those that get evicted first.  I don't know\n   what the stats say, but this would make it hard to establish a\n   baseline set of fields that were unaffected by relatively volatile and\n   temporary stuff.  For example, most implementations are going to have\n   to re-push :method=GET and :method=POST regularly.  It would be good\n   to understand the trade-off here a little more.\n2. Probably more importantly, you really want the headers that you are\n   referencing  most often to be those with the lowest index numbers.\n   That means fewer bits on the wire to reference them.  If the headers\n   that are most at risk of deletion are also the ones with lowest\n   numbers, that doesn't seem conducive to effective use of bits.  I'm\n   going to suggest an inversion of ordering, depending on the above.\n\nBTW, I do like the linear arrangement, it's simple and it avoids the\nneed for updates based on reads from the table, which would suck.\n",
      "createdAt": "2013-08-05T09:22:13Z",
      "updatedAt": "2013-08-30T16:36:43Z",
      "closedAt": "2013-08-30T16:36:43Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is more a long term issue, and should not be part of the second implementation milestone.\n",
          "createdAt": "2013-08-09T15:03:01Z",
          "updatedAt": "2013-08-09T15:03:01Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that this is a duplicate of #233 (or vice versa).\n",
          "createdAt": "2013-08-27T21:57:30Z",
          "updatedAt": "2013-08-27T21:57:30Z"
        }
      ]
    },
    {
      "number": 193,
      "id": "MDU6SXNzdWUxNzYzNjEwNA==",
      "title": "push vs request payload",
      "url": "https://github.com/httpwg/http2-spec/issues/193",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "server push"
      ],
      "body": "If we allow push of all safe methods, we should consider cases where the method requires / allows a payload (PROPFIND, SEARCH, REPORT, ...).\n",
      "createdAt": "2013-08-05T14:02:16Z",
      "updatedAt": "2013-10-10T20:52:34Z",
      "closedAt": "2013-10-10T20:52:34Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What particularly does \"push of all safe methods\" mean?\n\nAre we referring to allowing push in response to all safe methods? Or are we saying that the PUSH_PROMISE can contain a :method = {some safe method} ?\n\nMy preference: A PUSH is _always_ an implied GET or HEAD, nothing else... and a PUSH can be sent in association with any 2xx response. That's the most reliable and simple approach.\n",
          "createdAt": "2013-08-05T16:37:20Z",
          "updatedAt": "2013-08-05T16:37:20Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, it's about allowing responses to methods != GET to be pushed.\n",
          "createdAt": "2013-08-05T16:47:41Z",
          "updatedAt": "2013-08-05T16:47:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We've already concluded (here at least) that safe methods are permitted.  I think that Julian's _question_ is valid, even if I might believe the answer to be \"no we don't want to support that feature\".  We really need to discuss this before actually reaching any sort of answer.\n",
          "createdAt": "2013-08-07T09:56:04Z",
          "updatedAt": "2013-08-07T09:56:04Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe the default should be to allow what HTTP/1.1 allows...\n",
          "createdAt": "2013-08-07T10:02:50Z",
          "updatedAt": "2013-08-07T10:02:50Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So far, there have been zero justifying use cases presented for allowing request payloads with PUSH_PROMISE..\n",
          "createdAt": "2013-08-07T15:20:04Z",
          "updatedAt": "2013-08-07T15:20:04Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I'm going to give up being the annoying guy asking people to move discussion to the mailing list since no one seems to listen anyway. I just wanted to point out that as discussed and agreed upon in the interim, we're interested in pushing stuff like redirects and cache validation responses (304s and the like), so we should not constrain to 2xx as @jasnell requested above.\n\n@reschke, can you explain what you mean the default should be to allow what HTTP/1.1 allows? HTTP/1.1 doesn't have push semantics, so I'm not sure what it means to follow HTTP/1.1 in this respect when we're deciding what to allow push to be used for.\n",
          "createdAt": "2013-08-07T15:32:56Z",
          "updatedAt": "2013-08-07T15:32:56Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On 2013-08-07 17:32, William Chan wrote:\n\n> I think I'm going to give up being the annoying guy asking people to\n> move discussion to the mailing list since no one seems to listen anyway.\n> I just wanted to point out that as discussed and agreed upon in the\n> interim, we're interested in pushing stuff like redirects and cache\n> validation responses (304s and the like), so we should not constrain to\n> 2xx as @jasnell https://github.com/jasnell requested above.\n> \n> @reschke https://github.com/reschke, can you explain what you mean the\n> default should be to allow what HTTP/1.1 allows? HTTP/1.1 doesn't have\n> push semantics, so I'm not sure what it means to follow HTTP/1.1 in this\n> respect when we're deciding what to allow push to be used for.\n> ...\n\nWhat I meant is that HTTP/1.1 allows safe methods with payload, so if we \ndecide that in HTTP/2.0 we want to allow PUSH for safe methods, we \nshouldn't rule out that they could have payloads.\n\nBest regards, Julian\n",
          "createdAt": "2013-08-07T21:21:05Z",
          "updatedAt": "2013-08-07T21:21:05Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Seattle: decided to reflect the current reality and say safe + cacheable + no request body.\n",
          "createdAt": "2013-10-10T20:40:04Z",
          "updatedAt": "2013-10-10T20:40:04Z"
        }
      ]
    },
    {
      "number": 194,
      "id": "MDU6SXNzdWUxNzY4MTc1Nw==",
      "title": "header field lowercasing",
      "url": "https://github.com/httpwg/http2-spec/issues/194",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "editorial"
      ],
      "body": "We currently say\n\n\"All header field names MUST be lowercased, and the definitions of all header field names defined by HTTP/1.1 are updated to be all lowercase.\"\n\nThis seems to be confused about 1.1, and also should be moved to the spec that defines the wire format for header fields.\n\nSuch as:\n\n\"Note that header field names are case-insensitive, thus their case may be lost in the process of compressing and serializing field values.\"\n\nThen, in the compression spec, REQUIRE to lower-case and also consider the case of non-ASCII characters; make this an error?\n",
      "createdAt": "2013-08-06T09:58:46Z",
      "updatedAt": "2013-08-06T13:34:37Z",
      "closedAt": "2013-08-06T13:34:37Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Conclusion is for the main spec to stipulate ASCII-only, case-insensitive comparison for header field names.  The compression spec might require some form of case-folding (and it will).\n",
          "createdAt": "2013-08-06T12:00:21Z",
          "updatedAt": "2013-08-06T12:00:21Z"
        }
      ]
    },
    {
      "number": 195,
      "id": "MDU6SXNzdWUxNzY4MTgxNA==",
      "title": "header field :path representation",
      "url": "https://github.com/httpwg/http2-spec/issues/195",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "In HTTP/1.1, that path can not be empty. In HTTP/2.0, it could be. If it is, what does it mean and how is it mapped back to 1.1?\n",
      "createdAt": "2013-08-06T09:59:59Z",
      "updatedAt": "2013-08-07T09:48:00Z",
      "closedAt": "2013-08-07T09:48:00Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that we have two choices: define that the empty string is an error (404 perhaps) or define it as being equivalent to '/'.\n",
          "createdAt": "2013-08-06T11:12:59Z",
          "updatedAt": "2013-08-06T11:12:59Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Keep it simple. Empty :path ought to result in a 400 Bad Request... Likewise with empty :method\n",
          "createdAt": "2013-08-06T15:46:23Z",
          "updatedAt": "2013-08-06T15:46:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The current text turns an empty (i.e., invalid) `:path` into a stream error.  Reopen if you feel unsatisfied.\n",
          "createdAt": "2013-08-07T09:48:00Z",
          "updatedAt": "2013-08-07T09:48:00Z"
        }
      ]
    },
    {
      "number": 196,
      "id": "MDU6SXNzdWUxNzY4MTg1NA==",
      "title": "missing :method header field",
      "url": "https://github.com/httpwg/http2-spec/issues/196",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "We should define whether this is an error (preferred) or whether there is an implied default (of GET?).\n",
      "createdAt": "2013-08-06T10:01:02Z",
      "updatedAt": "2013-08-07T09:46:51Z",
      "closedAt": "2013-08-07T09:46:51Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a failure at the HTTP mapping layer.  We already say that it's an error, but we need to determine what sort of error.  I can see arguments for connection error, stream error, or 4xx series HTTP error.\n",
          "createdAt": "2013-08-06T11:09:02Z",
          "updatedAt": "2013-08-06T11:09:02Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Keep it simple. Missing or empty :method ought to be 400 Bad Request.\n",
          "createdAt": "2013-08-06T15:47:08Z",
          "updatedAt": "2013-08-06T15:47:08Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We discussed this at the interim informally and the general consensus was that this would be a stream error (though @grmocg noted that he would probably exercise his discretion and turn it into a connection error).  Text for this is already in.  Reopen if you feel it to be inadequate.\n",
          "createdAt": "2013-08-07T09:46:50Z",
          "updatedAt": "2013-08-07T09:46:50Z"
        }
      ]
    },
    {
      "number": 197,
      "id": "MDU6SXNzdWUxNzY4NTE0OA==",
      "title": "GOAWAY vs logging",
      "url": "https://github.com/httpwg/http2-spec/issues/197",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "6.8:\n\n\"Endpoints MAY append opaque data to the payload of any GOAWAY frame. Additional debug data is intended for diagnostic purposes only and carries no semantic value. Debug data MUST NOT be persistently stored, since it could contain sensitive information.\"\n\nRead literally this means it can't be logged; do we really mean that? Do we expect this advice will be followed? Maybe this needs to be made clearer.\n",
      "createdAt": "2013-08-06T11:33:19Z",
      "updatedAt": "2014-01-23T09:53:27Z",
      "closedAt": "2014-01-23T09:53:27Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Clearer in what way?  The problem here is that the information potentially contains sensitive data (PII, etc...)  Is there something we can do with respect to 2119 language (i.e., not using MUST/NOT) that would make this clearer?\n",
          "createdAt": "2013-08-07T09:45:24Z",
          "updatedAt": "2013-08-07T09:45:24Z"
        }
      ]
    },
    {
      "number": 198,
      "id": "MDU6SXNzdWUxNzY4NTIxNQ==",
      "title": "Multiple Headers",
      "url": "https://github.com/httpwg/http2-spec/issues/198",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Define how multiple headers with the same name can be encoded. \n\nOriginally http2/compression-spec#3.\n",
      "createdAt": "2013-08-06T11:35:28Z",
      "updatedAt": "2013-08-29T18:49:07Z",
      "closedAt": "2013-08-29T18:49:07Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Solved for the same name, same value case.\n\nCovered by #215 for same name, but different values.\n",
          "createdAt": "2013-08-09T15:05:47Z",
          "updatedAt": "2013-08-09T15:05:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Spring cleaning.\n",
          "createdAt": "2013-08-29T18:49:07Z",
          "updatedAt": "2013-08-29T18:49:07Z"
        }
      ]
    },
    {
      "number": 199,
      "id": "MDU6SXNzdWUxNzY4NTMxNw==",
      "title": "Security Section",
      "url": "https://github.com/httpwg/http2-spec/issues/199",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Currently blank. Could add some information on what should not be done for header compression.\n\nWas http2/compression-spec#4.\n",
      "createdAt": "2013-08-06T11:38:42Z",
      "updatedAt": "2013-08-29T18:49:02Z",
      "closedAt": "2013-08-29T18:49:02Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added.\n",
          "createdAt": "2013-08-14T23:52:37Z",
          "updatedAt": "2013-08-14T23:52:37Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Spring cleaning.\n",
          "createdAt": "2013-08-29T18:49:02Z",
          "updatedAt": "2013-08-29T18:49:02Z"
        }
      ]
    },
    {
      "number": 200,
      "id": "MDU6SXNzdWUxNzY4NTM1NQ==",
      "title": "Entry Shadowing",
      "url": "https://github.com/httpwg/http2-spec/issues/200",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "When the working set and the header table become out of sync, the working set may shadow some entries in the header table. This only becomes a problem in some edge cases: a header occurring twice, or when dropping entries from the beginning of the header table.\n\nIt can be avoided with a careful implementation, but should be probably noted somewhere for implementers.\n\nWas http2/compression-spec#8.\n",
      "createdAt": "2013-08-06T11:39:58Z",
      "updatedAt": "2013-08-29T18:48:50Z",
      "closedAt": "2013-08-29T18:48:50Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed by solving #214.\n",
          "createdAt": "2013-08-09T15:06:36Z",
          "updatedAt": "2013-08-09T15:06:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Spring cleaning.\n",
          "createdAt": "2013-08-29T18:48:50Z",
          "updatedAt": "2013-08-29T18:48:50Z"
        }
      ]
    },
    {
      "number": 201,
      "id": "MDU6SXNzdWUxNzY4NTQwNQ==",
      "title": "example in first header set",
      "url": "https://github.com/httpwg/http2-spec/issues/201",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Currently mentions\n\nx-my-header\n\nPlease avoid the use of x-prefixed stuff. For instance, make it\n\nexample-header\n\n(was http2/compression-spec#12)\n",
      "createdAt": "2013-08-06T11:41:25Z",
      "updatedAt": "2013-09-06T09:20:06Z",
      "closedAt": "2013-09-06T09:20:06Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "See [RFC 6648](http://tools.ietf.org/html/rfc6648).\n",
          "createdAt": "2013-08-07T09:59:34Z",
          "updatedAt": "2013-08-07T09:59:34Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done.\n",
          "createdAt": "2013-09-06T09:20:06Z",
          "updatedAt": "2013-09-06T09:20:06Z"
        }
      ]
    },
    {
      "number": 202,
      "id": "MDU6SXNzdWUxNzY4NTQ0MA==",
      "title": "reason phrase",
      "url": "https://github.com/httpwg/http2-spec/issues/202",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "8.1.2.:\n\n\"The response status line has been reduced to a single \":status\" header field whose value specifies only the numeric response status code. The status text component of the HTTP/1.1 response has been dropped entirely.\"\n\nDropping the reason-phrase might break a few edge cases; is this worth it?\n\nMaybe add a separate optional \":reason-phrase\" header field?\n",
      "createdAt": "2013-08-06T11:42:24Z",
      "updatedAt": "2018-02-04T22:45:21Z",
      "closedAt": "2013-10-10T21:43:34Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; no interest in carrying the reason phrase.\n",
          "createdAt": "2013-10-10T21:43:34Z",
          "updatedAt": "2013-10-10T21:43:34Z"
        },
        {
          "author": "thurt",
          "authorAssociation": "NONE",
          "body": "i'm curious what was the logical reason for dropping the reason phrase? \r\n\r\ni was using the reason phrase as a title for messages presented to a user in the web browser client. i think most users are accustomed to such phrases, \"Bad Request\", \"Not Found\", etc. Now I will just have to write a mapping from status codes to my own reason phrases in the client.",
          "createdAt": "2018-02-04T17:37:16Z",
          "updatedAt": "2018-02-04T17:44:38Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "The reason phrase -- even in HTTP/1.1 -- isn't guaranteed to be carried end-to-end; implementations can (and do) ignore it and substitute their own values (e.g., 200 is always \"OK\", no matter what happens on the wire).\r\n\r\nGiven that, and overhead in carrying the extra bytes, it made sense to drop it from the wire.",
          "createdAt": "2018-02-04T22:45:21Z",
          "updatedAt": "2018-02-04T22:45:21Z"
        }
      ]
    },
    {
      "number": 203,
      "id": "MDU6SXNzdWUxNzY4NTQ1NA==",
      "title": "Header Table Intro",
      "url": "https://github.com/httpwg/http2-spec/issues/203",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "\"Generally, the header table will not contain duplicate header (name, value) entries. However, implementations MUST be prepared to accept duplicates without signaling an error. If duplicates are added to the table, they MUST be treated as distinct entries with their own index positions.\"\n\nIt would be good to have an example here; maybe something involving Cache-Control?\n\n(moved from http2/compression-spec#13)\n",
      "createdAt": "2013-08-06T11:42:50Z",
      "updatedAt": "2013-08-29T18:48:47Z",
      "closedAt": "2013-08-29T18:48:47Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've removed this blurb.\nIt was confusing and didn't really have anything to do with the mechanism for encoding such things.\n",
          "createdAt": "2013-08-14T23:51:59Z",
          "updatedAt": "2013-08-14T23:51:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Spring cleaning.\n",
          "createdAt": "2013-08-29T18:48:47Z",
          "updatedAt": "2013-08-29T18:48:47Z"
        }
      ]
    },
    {
      "number": 204,
      "id": "MDU6SXNzdWUxNzY4NTUyOQ==",
      "title": "Mention of DEFLATE",
      "url": "https://github.com/httpwg/http2-spec/issues/204",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "4.2.1:\n\n\"Integers are used to represent name indexes, pair indexes or string lengths. The integer representation keeps byte-alignment as much as possible as this allows various processing optimizations as well as efficient use of DEFLATE. For that purpose, an integer representation always finishes at the end of a byte.\"\n\nI find the mention of DEFLATE very distracting, as what we do here has nothing to do with DEFLATE at all. Right?\n\nMoved from http2/compression-spec#14.\n",
      "createdAt": "2013-08-06T11:44:50Z",
      "updatedAt": "2013-08-29T18:48:43Z",
      "closedAt": "2013-08-29T18:48:43Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Removed from the draft.\n",
          "createdAt": "2013-08-09T15:11:32Z",
          "updatedAt": "2013-08-09T15:11:32Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Spring cleaning.\n",
          "createdAt": "2013-08-29T18:48:43Z",
          "updatedAt": "2013-08-29T18:48:43Z"
        }
      ]
    },
    {
      "number": 205,
      "id": "MDU6SXNzdWUxNzY4NTYzOQ==",
      "title": "can we have all HTTP2 related drafts in a single GIT repo please?",
      "url": "https://github.com/httpwg/http2-spec/issues/205",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2013-08-06T11:48:01Z",
      "updatedAt": "2013-08-06T12:55:48Z",
      "closedAt": "2013-08-06T12:55:48Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "invalid\n",
          "createdAt": "2013-08-06T12:55:48Z",
          "updatedAt": "2013-08-06T12:55:48Z"
        }
      ]
    },
    {
      "number": 206,
      "id": "MDU6SXNzdWUxNzY4NTc5Nw==",
      "title": "Allow for receipt of WINDOW_UPDATE after close",
      "url": "https://github.com/httpwg/http2-spec/issues/206",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Turns out that there are cases where this can happen, and we don't expressly allow it.\n",
      "createdAt": "2013-08-06T11:52:26Z",
      "updatedAt": "2013-08-09T20:27:31Z",
      "closedAt": "2013-08-06T11:53:29Z",
      "comments": []
    },
    {
      "number": 207,
      "id": "MDU6SXNzdWUxNzY4NjE1Mw==",
      "title": "numerical constants for settings",
      "url": "https://github.com/httpwg/http2-spec/issues/207",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready"
      ],
      "body": "6.5.2\n\nWe currently have 4/7/10. I was told that this is for consistency with certain legacy specs.\n\nWe either should renumber these, or add a line explaining why this is the case.\n\nThought: are we really consistent with that other spec? That is, do the 3 settings we define really mean exactly the same??\n",
      "createdAt": "2013-08-06T12:01:37Z",
      "updatedAt": "2014-01-23T16:56:28Z",
      "closedAt": "2014-01-23T16:56:28Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "As was explained, for the moment, this set of numbers makes it easier for implementations that do both SPDY and HTTP/2.0 to share more code.  We will probably revisit this and consider a renumbering event.\n",
          "createdAt": "2013-08-12T18:39:37Z",
          "updatedAt": "2013-08-12T18:39:37Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "DIscussed in Zurich; issue should include error codes as well.\n\nWill renumber before the next implementation draft; account for possible losses (end_flow_control).\n",
          "createdAt": "2014-01-23T10:43:48Z",
          "updatedAt": "2014-01-23T10:43:48Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed as collateral in https://github.com/http2/http2-spec/commit/3aea7de0e81d4d0db220eab3483b2702cb2057ee\n",
          "createdAt": "2014-01-23T16:56:23Z",
          "updatedAt": "2014-01-23T16:56:23Z"
        }
      ]
    },
    {
      "number": 208,
      "id": "MDU6SXNzdWUxNzY4NjIyNQ==",
      "title": "4.1 frame type vs frame",
      "url": "https://github.com/httpwg/http2-spec/issues/208",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "\"Type:\n    The 8-bit type of the frame. The frame type determines how the remainder of the frame header and payload are interpreted. Implementations MUST ignore unsupported and unrecognized frame types.\"\n\nMaybe s/unrecognized frame types/frames of unsupported or unrecognized types/?\n\n(It's the frame that is ignored, right?)\n",
      "createdAt": "2013-08-06T12:03:32Z",
      "updatedAt": "2013-08-07T09:41:05Z",
      "closedAt": "2013-08-07T09:41:05Z",
      "comments": []
    },
    {
      "number": 209,
      "id": "MDU6SXNzdWUxNzY4NjY2MQ==",
      "title": "interspersing HEADERS",
      "url": "https://github.com/httpwg/http2-spec/issues/209",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "editorial"
      ],
      "body": "\"An HTTP request or response each consist of:\n\n```\none contiguous sequence of HEADERS frames;\nzero or more DATA frames; and\noptionally, a contiguous sequence of HEADERS frames\n```\n\nThe last frame in the sequence bears an END_STREAM flag.\n\nOther frames, including HEADERS, MAY be interspersed with these frames, but those frames do not carry HTTP semantics.\"\n\nThe \"other frames, including HEADERS\" is kind of confusing given the fact that HEADERS _is_ in the list above that statement.\n",
      "createdAt": "2013-08-06T12:15:18Z",
      "updatedAt": "2013-08-12T18:46:42Z",
      "closedAt": "2013-08-12T18:46:42Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in f06f1cf5da0de94191e88ba552e084853eb6827d, tweaked for continuations in b217dc09b4f65f100122205d8da1b120e387d44c.\n",
          "createdAt": "2013-08-12T18:46:42Z",
          "updatedAt": "2013-08-12T18:46:42Z"
        }
      ]
    },
    {
      "number": 210,
      "id": "MDU6SXNzdWUxNzY4Njc3Mw==",
      "title": "interspersing PRIORITY",
      "url": "https://github.com/httpwg/http2-spec/issues/210",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"6.3 PRIORITY\n\nThe PRIORITY frame (type=0x2) specifies the sender-advised priority of a stream. It can be sent at any time for an existing stream. This enables reprioritisation of existing streams.\"\n\nCan it be sent between HEADERS frames?\n",
      "createdAt": "2013-08-06T12:17:49Z",
      "updatedAt": "2013-08-07T09:27:23Z",
      "closedAt": "2013-08-07T09:27:23Z",
      "comments": [
        {
          "author": "mcmanus",
          "authorAssociation": "CONTRIBUTOR",
          "body": "it can't be sent between frames with the continuation bit (be they headers or push promise).. so the \"any time\" should be changed.\n",
          "createdAt": "2013-08-06T12:27:56Z",
          "updatedAt": "2013-08-06T12:27:56Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This just seems overly pedantic to me.  It's also true that it can't be sent _inside_ a stream.\n",
          "createdAt": "2013-08-06T14:34:05Z",
          "updatedAt": "2013-08-06T14:34:05Z"
        }
      ]
    },
    {
      "number": 211,
      "id": "MDU6SXNzdWUxNzY4Njg1OA==",
      "title": "content-length required?",
      "url": "https://github.com/httpwg/http2-spec/issues/211",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping"
      ],
      "body": "\"All HTTP Requests that include a body SHOULD include the \"content-length\" header field.\"\n\nWhy? If I don't know the size upfront and leave it out, am I violating a requirement here? (I believe this is \"SHOULD/MUST if known upfront\"). \n",
      "createdAt": "2013-08-06T12:20:03Z",
      "updatedAt": "2013-08-07T08:41:00Z",
      "closedAt": "2013-08-07T08:41:00Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I thought that the spec was clear enough about the reasons for this.  Content-Length is a valuable metadata field that is required by some servers (so 2.0 -> 1.1 gateways might trigger this).\n",
          "createdAt": "2013-08-06T13:32:29Z",
          "updatedAt": "2013-08-06T13:32:29Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In HTTP/1.1, with conforming implementations, I _can_ use Chunked on requests. I don't see why we are taking this away.\n\nIf an _intermediary_ needs the length upfront, it can buffer the request. That's better than requiring the _generator_ to do it when it doesn't need to.\n",
          "createdAt": "2013-08-06T13:47:39Z",
          "updatedAt": "2013-08-06T13:47:39Z"
        },
        {
          "author": "mcmanus",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Content-Length is valuable meta data: thermometer UIs are the big use case, but also being able to do contiguous allocations up front is pretty interesting. It wasn't that big of a deal in HTTP/1 because there wasn't really any point in chunking something you did know the size of.. but in HTTP2 not only is the chunking required it is always necessary to preserve small buffers for higher priority bits that might float along... so saying you should send the C-L as advisory info if you have it is just the right advice imo.\n",
          "createdAt": "2013-08-06T14:18:10Z",
          "updatedAt": "2013-08-06T14:18:10Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is why it's a SHOULD.\n",
          "createdAt": "2013-08-06T14:18:11Z",
          "updatedAt": "2013-08-06T14:18:11Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "But that's what SHOULD is for. This is clearly the wrong use of RFC2119 terminology.\n",
          "createdAt": "2013-08-06T14:25:22Z",
          "updatedAt": "2013-08-06T14:25:22Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, let's just remove the normative language.  This is just advice.\n",
          "createdAt": "2013-08-07T08:36:58Z",
          "updatedAt": "2013-08-07T08:36:58Z"
        }
      ]
    },
    {
      "number": 212,
      "id": "MDU6SXNzdWUxNzY4NzI3MQ==",
      "title": "connection header intro",
      "url": "https://github.com/httpwg/http2-spec/issues/212",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "\"3.5 Connection Header\n\nUpon establishment of a TCP connection and determination that HTTP/2.0 will be used by both peers, each endpoint MUST send a connection header as a final confirmation and to establish the initial settings for the HTTP/2.0 connection.\n\nThe client connection header is a sequence of 24 octets, which in hex notation are:\n\n505249202a20485454502f322e300d0a0d0a534d0d0a0d0a\n\n(the string PRI \\* HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n) followed by a SETTINGS frame (Section 6.5). \"\n\nI believe it would be clearer if we said:\n\n\"3.5 Connection Header\n\nUpon establishment of a TCP connection and determination that HTTP/2.0 will be used by both peers, each endpoint MUST send a connection header as a final confirmation and to establish the initial settings for the HTTP/2.0 connection.\n\nThe client connection header is a sequence of 24 octets, which in hex notation are:\n\n```\n505249202a20485454502f322e300d0a0d0a534d0d0a0d0a\n```\n\nThis happens to be the HTTP message\n\n  PRI \\* HTTP/2.0\n  SM\n\nThis octet sequence is followed by a SETTINGS frame (Section 6.5).\" \n",
      "createdAt": "2013-08-06T12:30:26Z",
      "updatedAt": "2014-01-23T10:05:59Z",
      "closedAt": "2014-01-23T10:05:59Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I disagree.  The fact that this isn't an HTTP message is actually the whole point.\n",
          "createdAt": "2013-08-07T08:35:41Z",
          "updatedAt": "2013-08-07T08:35:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We have had a suggestion that we reserve the \"PRI\" string as a method, so that we avoid that from ever becoming valid.  Maybe \"SM\" as well.\n",
          "createdAt": "2013-10-10T21:15:50Z",
          "updatedAt": "2013-10-10T21:15:50Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Reservation of PRI method added in pull request #333; however, SM is intentionally not sensible to an HTTP/1.1 parser -- it's not a complete header line, even if SM were a reserved header field name.\n\nI think the goals here are that an HTTP/2.0 server can discriminate 2.0 vs. 1.1 connections (so it's incorrect to say \"Upon ... determination that HTTP/2.0 will be used by both peers\" since the server doesn't know until it sees the first line), and so that 1.1-only servers/intermediaries will kill the connection quickly.\n",
          "createdAt": "2014-01-01T00:19:58Z",
          "updatedAt": "2014-01-01T00:20:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to close this one.  The text that Mike added in #333 is - I hope - sufficient.\n",
          "createdAt": "2014-01-23T10:05:59Z",
          "updatedAt": "2014-01-23T10:05:59Z"
        }
      ]
    },
    {
      "number": 213,
      "id": "MDU6SXNzdWUxNzY4NzM3MA==",
      "title": "frame structure diagram",
      "url": "https://github.com/httpwg/http2-spec/issues/213",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "\"4.1 Frame Header\n\nAll frames begin with an 8-octet header followed by a payload of between 0 and 65,535 octets.\n\n```\n  0                   1                   2                   3\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |         Length (16)           |   Type (8)    |   Flags (8)   |\n +-+-------------+---------------+-------------------------------+\n |R|                 Stream Identifier (31)                      |\n +-+-------------------------------------------------------------+\n |                   Frame Payload (0...)                      ...\n +---------------------------------------------------------------+\n```\n\n\"\n\nI found it confusing that the section is called \"Frame Header\" but then defines the format of the complete frame.\n\nMaybe:\n\n\"4.1 Frame Format\n\nAll frames begin with an 8-octet header followed by a payload of between 0 and 65,535 octets.\n\n```\n  0                   1                   2                   3\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |         Length (16)           |   Type (8)    |   Flags (8)   |\n +-+-------------+---------------+-------------------------------+\n |R|                 Stream Identifier (31)                      |\n +-+-------------------------------------------------------------+\n +---------------------------------------------------------------+\n |                   Frame Payload (0...)                      ...\n +---------------------------------------------------------------+\n```\n\n\"\n",
      "createdAt": "2013-08-06T12:33:28Z",
      "updatedAt": "2013-08-07T08:41:00Z",
      "closedAt": "2013-08-07T08:41:00Z",
      "comments": []
    },
    {
      "number": 214,
      "id": "MDU6SXNzdWUxNzY4ODI1Mw==",
      "title": "Unbounded (i.e. bad) memory use requirement for proxies in Compression",
      "url": "https://github.com/httpwg/http2-spec/issues/214",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Right now the compressor has an idea of a \"working set\", which is to say the entire set of key-value pairs that comprise a set of headers.\n\nSince headers are unbounded in size, this means that a forwarding proxy must also allow unbounded size allocation in the compression context.\nIn addition, the computation of the reference set from the working set has some corner cases that enforce doing a full search of each header in the working set in the header table. This can be O(n^2) in worst case.\n\nIf the compressor instead emitted key-value pairs as it processed instructions instead of attempting to build up the entire set of headers, the amount of memory at a forwarding proxy is bounded by the compressor size (with the rest having been emitted onto the wire).\nThis also allows maintaining the reference set while processing, removing the potentially costly process of doing it afterwards.\n",
      "createdAt": "2013-08-06T12:54:50Z",
      "updatedAt": "2013-08-29T18:48:40Z",
      "closedAt": "2013-08-29T18:48:40Z",
      "comments": [
        {
          "author": "molnarg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There was a [proposal for solving this](http://webcache.googleusercontent.com/search?q=cache:I5nvNmAwgXoJ:https://github.com/http2/compression-spec/issues/11+&cd=2&hl=hu&ct=clnk&gl=hu&client=firefox-a), but I did net get to preparing a pull request in the end.\n",
          "createdAt": "2013-08-06T13:13:10Z",
          "updatedAt": "2013-08-06T13:13:10Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Personally, I'd rather see the reference set (and differential encoding) disappear entirely. Yeah, it means we end up sending a few more bits on the wire but it simplifies implementation _significantly_. At this point, I've put the whole idea of the reference set into the \"Being Too Clever\" category.\n",
          "createdAt": "2013-08-06T15:37:26Z",
          "updatedAt": "2013-08-06T15:37:26Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The proposal made in the Hamburg meeting is integrated in the spec. This should solve this issue.\n",
          "createdAt": "2013-08-09T15:14:10Z",
          "updatedAt": "2013-08-09T15:14:10Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Spring cleaning.\n",
          "createdAt": "2013-08-29T18:48:40Z",
          "updatedAt": "2013-08-29T18:48:40Z"
        }
      ]
    },
    {
      "number": 215,
      "id": "MDU6SXNzdWUxNzY5MTI0Mw==",
      "title": "header field value ordering",
      "url": "https://github.com/httpwg/http2-spec/issues/215",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "We need to decide whether we need to preserve ordering within the list of values for a single header field name.\n\nHTTP/1.1 makes the ordering significant. One approach is always to \",\"-concatenate before compression, but this breaks Set-Cookie both syntactically and will kill compression.\n\nThe interesting question is whether there are fields that can be repeated, have ordering semantics, but do not round-trip properly concatenation.\n\nWWW-Authenticate may be an example (not as defined, but as occurring in practice)\n",
      "createdAt": "2013-08-06T13:57:04Z",
      "updatedAt": "2013-10-16T02:15:02Z",
      "closedAt": "2013-10-16T02:15:02Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Enforcing value ordering is going to conflict badly with the current header compression definition... both in terms of compression ratios and code complexity... One of the typed codec variations I was experimenting with (http://tools.ietf.org/html/draft-snell-httpbis-bohe-10) could handle ordering quite easily...\n",
          "createdAt": "2013-08-06T15:31:35Z",
          "updatedAt": "2013-08-06T15:31:35Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The compression spec allows for an encoder to force the decoder to emit headers in a specific order, so in some sense this issue has been handled, however, the issue about whether or now we wish to continue to ascribe semantic meaning to such orderings has not been debated.\n",
          "createdAt": "2013-08-14T22:20:02Z",
          "updatedAt": "2013-08-14T22:20:02Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "On the list, gents.\n",
          "createdAt": "2013-08-16T02:04:59Z",
          "updatedAt": "2013-08-16T02:04:59Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; the compressor doesn't natively preserve ordering. Therefore, multiple values of a header field where ordering is significant will need to be null-separated and transmitted as a single header field-value. \n",
          "createdAt": "2013-10-10T21:53:57Z",
          "updatedAt": "2013-10-10T21:53:57Z"
        }
      ]
    },
    {
      "number": 216,
      "id": "MDU6SXNzdWUxNzY5MjUyMg==",
      "title": "Alternate Reference Sets",
      "url": "https://github.com/httpwg/http2-spec/issues/216",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "In addition to the reference set as specified in the current spec, other possible reference sets could be used:\n- A part of the header table (group)\n- An empty reference set\n\nSee: http://datatracker.ietf.org/doc/draft-ruellan-reference-set-definition/\n",
      "createdAt": "2013-08-06T14:20:01Z",
      "updatedAt": "2013-11-14T18:44:12Z",
      "closedAt": "2013-11-14T18:44:12Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Seattle: Concern was that this causes input to the compressor to require both the header block and the frame header.  @hruellan will come back with a proposal that encapsulates the flag in the header block, not the frame header to avoid this concern.\n",
          "createdAt": "2013-10-10T18:25:40Z",
          "updatedAt": "2013-10-10T18:25:40Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Proposal was accepted in Vancouver.\nIntegrated with b3fe6e488c214af43b2d13ff0e4ad85d2dcdfe5c.\n",
          "createdAt": "2013-11-14T18:44:12Z",
          "updatedAt": "2013-11-14T18:44:12Z"
        }
      ]
    },
    {
      "number": 217,
      "id": "MDU6SXNzdWUxNzY5MjUyNw==",
      "title": "Remove END_FLOW_CONTROL flag",
      "url": "https://github.com/httpwg/http2-spec/issues/217",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In Hamburg, we discussed the various ways that flow control is ended and we concluded that we wanted to remove the different ways of ending flow control in favor of the setting.\n",
      "createdAt": "2013-08-06T14:20:07Z",
      "updatedAt": "2013-08-06T14:30:10Z",
      "closedAt": "2013-08-06T14:30:10Z",
      "comments": []
    },
    {
      "number": 218,
      "id": "MDU6SXNzdWUxNzY5MjU2NQ==",
      "title": "Removal encoding",
      "url": "https://github.com/httpwg/http2-spec/issues/218",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Currently removals from the reference set are encoded as indexes. They could be encoded using an array of bits.\n\nSee: http://datatracker.ietf.org/doc/draft-ruellan-reference-set-definition/\n",
      "createdAt": "2013-08-06T14:20:53Z",
      "updatedAt": "2013-10-10T21:55:58Z",
      "closedAt": "2013-10-10T21:55:58Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm quite certain there are quite a large number of additional premature optimizations we could choose to continue making to the header compression algorithm.. I'm not convinced it buys us anything worthwhile... \"Perfect is the enemy of good\"\n",
          "createdAt": "2013-08-06T15:24:51Z",
          "updatedAt": "2013-08-06T15:24:51Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Covered in Seattle; because we closed a more general form of this, also closing here.\n",
          "createdAt": "2013-10-10T21:55:58Z",
          "updatedAt": "2013-10-10T21:55:58Z"
        }
      ]
    },
    {
      "number": 219,
      "id": "MDU6SXNzdWUxNzcwNzcxNg==",
      "title": "Design Proposal: Stored Header Encoding Alternative",
      "url": "https://github.com/httpwg/http2-spec/issues/219",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Proposal (made on list already) to use the Stored Header Encoding proposal rather than the current existing header compression.\n\nhttp://www.ietf.org/id/draft-snell-httpbis-bohe-12.txt\n",
      "createdAt": "2013-08-06T18:52:32Z",
      "updatedAt": "2013-10-10T21:58:45Z",
      "closedAt": "2013-10-10T21:58:45Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "James, if it's possible to identify separable features that you think are important, could you raise those as individual issues, rather than ask for a whole-cloth replacement.  Reading through this, there are several incremental changes, each making different trade-offs.  It would be good to be able to track each separately.\n",
          "createdAt": "2013-08-27T22:02:22Z",
          "updatedAt": "2013-08-27T22:02:22Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; as a whole-cloth replacement for header compression, there wasn't implementer interest in taking it on. There was _some_ interest in specific aspects; e.g., RLE of opcodes, typed codecs, but those are separable.\n",
          "createdAt": "2013-10-10T21:58:45Z",
          "updatedAt": "2013-10-10T21:58:45Z"
        }
      ]
    },
    {
      "number": 220,
      "id": "MDU6SXNzdWUxNzcwNzc5Ng==",
      "title": "Design: Introduce header value type codecs",
      "url": "https://github.com/httpwg/http2-spec/issues/220",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Independently of the specific header compression scheme used, the typed header value codecs are ready to go... as described here: http://www.ietf.org/id/draft-snell-httpbis-bohe-12.txt\n\nProposal is to work these into the current header compression mechanism if the decision is made not to switch to the proposed stored header encoding. \n",
      "createdAt": "2013-08-06T18:54:11Z",
      "updatedAt": "2014-01-23T04:06:13Z",
      "closedAt": "2014-01-22T09:10:36Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Zurich; we won't be doing this now.\n",
          "createdAt": "2014-01-22T09:10:36Z",
          "updatedAt": "2014-01-22T09:10:36Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dead for good?\n",
          "createdAt": "2014-01-22T16:58:32Z",
          "updatedAt": "2014-01-22T16:58:32Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We decided that if we were to meet our time goals (last call after the London IETF), we wouldn't have enough time to get good experience with this.  There is always the possibility of doing something in a new version, of course.\n",
          "createdAt": "2014-01-23T04:06:13Z",
          "updatedAt": "2014-01-23T04:06:13Z"
        }
      ]
    },
    {
      "number": 221,
      "id": "MDU6SXNzdWUxNzczNTM1Ng==",
      "title": "Can new colon headers be added?",
      "url": "https://github.com/httpwg/http2-spec/issues/221",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "editor-ready"
      ],
      "body": "Is the set of \":\" headers fixed forever, or can more be added. In the latter case, how?\n",
      "createdAt": "2013-08-07T08:25:54Z",
      "updatedAt": "2013-10-10T21:11:02Z",
      "closedAt": "2013-10-10T21:11:02Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I see no particular reason that \":\" headers are special other than the fact that they cannot be conveyed in HTTP/1.1.  The normal header field registration procedures should still apply.  We can clarify that.\n",
          "createdAt": "2013-08-07T08:31:13Z",
          "updatedAt": "2013-08-07T08:31:13Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, we've discussed making them appear first so that HTTP routers can do less work, so that's another way they _could_ be special. Just saying.\n\nI agree that normal header field registration procedures should apply.\n",
          "createdAt": "2013-08-07T08:51:16Z",
          "updatedAt": "2013-08-07T08:51:16Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The normal registration is problematic, as something starting with \":\" is not an allowed header field name.\n",
          "createdAt": "2013-08-07T09:06:03Z",
          "updatedAt": "2013-08-07T09:06:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That is a very easy problem to solve with an \"Updates:\" header in a published RFC.  Unpleasant perhaps, and we'd have to be careful not to mess with the other users of the registry, but I don't see this as unworkable.\n",
          "createdAt": "2013-08-07T09:30:18Z",
          "updatedAt": "2013-08-07T09:30:18Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds really unpleasant to me...\n",
          "createdAt": "2013-08-07T09:34:32Z",
          "updatedAt": "2013-08-07T09:34:32Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Conclusion in Seattle: MUST NOT send, MUST ignore (make it especially clear that these are NOT HTTP header fields).\n",
          "createdAt": "2013-10-10T20:00:41Z",
          "updatedAt": "2013-10-10T20:00:41Z"
        }
      ]
    },
    {
      "number": 222,
      "id": "MDU6SXNzdWUxNzczNjE0Mg==",
      "title": "Clarify that concurrent streams setting doesn't disable PUSH_PROMISE",
      "url": "https://github.com/httpwg/http2-spec/issues/222",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "server push"
      ],
      "body": "As discussed in Hamburg, we need to clarify that even when SETTINGS_MAX_CONCURRENT_STREAMS is zero the client still needs to handle PUSH_PROMISE frames.  That probably means sending RST_STREAM.\n",
      "createdAt": "2013-08-07T08:48:40Z",
      "updatedAt": "2013-08-07T09:15:12Z",
      "closedAt": "2013-08-07T09:15:12Z",
      "comments": []
    },
    {
      "number": 223,
      "id": "MDU6SXNzdWUxNzczNjQwOQ==",
      "title": "Disable PUSH_PROMISE",
      "url": "https://github.com/httpwg/http2-spec/issues/223",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "server push"
      ],
      "body": "As described in #222, it is not possible to actually disable PUSH_PROMISE, which imposes a burden on client implementations who don't want push at all.\n\nWe need to discuss further the options available for disabling this frame.\n",
      "createdAt": "2013-08-07T08:54:58Z",
      "updatedAt": "2013-10-14T16:22:06Z",
      "closedAt": "2013-10-14T16:22:06Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Seattle: decided that we'd add a setting for this.  We would require a PROTOCOL_ERROR if set, with an allowance for delay.\n",
          "createdAt": "2013-10-10T20:35:03Z",
          "updatedAt": "2013-10-10T20:35:03Z"
        }
      ]
    },
    {
      "number": 224,
      "id": "MDU6SXNzdWUxNzczNzY5NQ==",
      "title": "Does header compression remain as a separate spec",
      "url": "https://github.com/httpwg/http2-spec/issues/224",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "We need to determine whether these need to be merged.\n",
      "createdAt": "2013-08-07T09:24:57Z",
      "updatedAt": "2013-08-29T16:50:13Z",
      "closedAt": "2013-08-29T16:50:13Z",
      "comments": []
    },
    {
      "number": 225,
      "id": "MDU6SXNzdWUxNzc1NjIzNQ==",
      "title": "Connection-level flow control and DATA frame against closed state streams",
      "url": "https://github.com/httpwg/http2-spec/issues/225",
      "state": "CLOSED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> Section 5.1. Stream States says that:\n> \n> \"\"\"\n> closed:\n>       The \"closed\" state is the terminal state.\n> \n> ```\n>   An endpoint MUST NOT send frames on a closed stream.  An endpoint\n>   that receives a frame after receiving a RST_STREAM or a frame\n>   containing a END_STREAM flag on that stream MUST treat that as a\n>   stream error (Section 5.4.2) of type STREAM_CLOSED.\n> \n>   If this state is reached as a result of sending a RST_STREAM\n>   frame, the peer that receives the RST_STREAM might have already\n>   sent - or enqueued for sending - frames on the stream that cannot\n>   be withdrawn.  An endpoint that sends a RST_STREAM frame MUST\n>   ignore frames that it receives on closed streams after it has sent\n>   a RST_STREAM frame.  An endpoint MAY choose to limit the period\n>   over which it ignores frames and treat frames that arrive after\n>   this time as being in error.\n> ```\n> \n> \"\"\"\n> \n> My understanding is that DATA frames received in this closed state is still\n> under the connection-level flow control. This may be obvious because the\n> sender of DATA frame may send those frames before got RST_STREAM from the\n> remote and could not re-calculate connection-level window after RST_STREAM\n> was received.\n> But stating that explicitly in this section helps implementers and is a good\n> note for the test case.\n> Maybe just like this:\n> \n> \"\"\"\n> A flow controlled frame received in this state is still subject to the\n> connection-level flow control.\n> \"\"\"\n",
      "createdAt": "2013-08-07T15:53:50Z",
      "updatedAt": "2013-08-09T18:48:22Z",
      "closedAt": "2013-08-09T18:48:22Z",
      "comments": []
    },
    {
      "number": 226,
      "id": "MDU6SXNzdWUxNzg2NTg2Mw==",
      "title": "Ambiguity on how headers are matched when computing the reference set",
      "url": "https://github.com/httpwg/http2-spec/issues/226",
      "state": "CLOSED",
      "author": "squirrelfm",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Taken from here: https://github.com/MSOpenTech/http2-katana/issues/19\n\nDescription of how to match headers seems to be ambiguous in the spec:\n\n3.4\n\n```\n   First, upon starting the decoding of a new set of headers, the\n   reference set of headers is interpreted into the working set of\n   headers: for each header in the reference set, an entry is added to\n   the working set, containing the header name, its value, and its\n   current index in the header table.\n```\n\nThis makes me think that it should only be saved if the index matches.\n\nHowever, 3.2\n\n```\n   Header names are always represented as lower-case strings.  An input\n   header name matches the header name of a (name, value) pair stored in\n   the Header Table if they are equal using a character-based, _case\n   insensitive_ comparison.  An input header value matches the header\n   value of a (name, value) pair stored in the Header Table if they are\n   equal using a character-based, _case sensitive_ comparison.  An input\n   header (name, value) pair matches a pair in the Header Table if both\n   the name and value are matching as per above.\n```\n\nThis makes me think that we should only match the name and value on computing the reference set.\n",
      "createdAt": "2013-08-09T14:37:15Z",
      "updatedAt": "2013-08-12T16:17:39Z",
      "closedAt": "2013-08-12T16:17:39Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Is this concern addressed by the most recent edits to the compression-spec?  My reading suggests that this is no longer a concern.\n",
          "createdAt": "2013-08-09T18:47:37Z",
          "updatedAt": "2013-08-09T18:47:37Z"
        },
        {
          "author": "squirrelfm",
          "authorAssociation": "NONE",
          "body": "Yes, it is adderssed in 3.2.1 section. Closing.\n",
          "createdAt": "2013-08-12T16:17:39Z",
          "updatedAt": "2013-08-12T16:17:39Z"
        }
      ]
    },
    {
      "number": 227,
      "id": "MDU6SXNzdWUxNzk3MDA0NA==",
      "title": "Avoid making security claims in header compression spec intro",
      "url": "https://github.com/httpwg/http2-spec/issues/227",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "The current spec says, \"This scheme is believed to be safe for all known attacks against the compression context today.\"\n\nWhile we may believe this currently, these kinds of statements ought not be made in the introduction. For one, this is a new compression mechanism that has not yet been fully, and independently, verified to be safe \"for all known attacks\". It is perfectly fine to discuss the characteristics that make this mechanism an improvement over previously defined compression mechanisms but claims dealing with the _quality_ of security are inappropriate and might be misleading.\n\nRemoving this statement has zero negative impact on the technical definition of the spec; and there is zero technical reason for keeping the sentence.\n",
      "createdAt": "2013-08-12T22:36:28Z",
      "updatedAt": "2013-08-30T16:35:07Z",
      "closedAt": "2013-08-30T16:35:07Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "See http2/compression-spec#26.\n",
          "createdAt": "2013-08-27T21:37:59Z",
          "updatedAt": "2013-08-27T21:37:59Z"
        }
      ]
    },
    {
      "number": 228,
      "id": "MDU6SXNzdWUxNzk3MDM4NQ==",
      "title": "CONTINUATION can end a response stream",
      "url": "https://github.com/httpwg/http2-spec/issues/228",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "streams"
      ],
      "body": "PUSH_PROMISE does not have an END_STREAM flag.\n\nHowever, a sender might emit a PUSH_PROMISE followed by a CONTINUATION with the END_STREAM set.  As specified, this ends the stream.\n\nI think that we need to either prohibit this, or we add END_STREAM to PUSH_PROMISE.\n",
      "createdAt": "2013-08-12T22:46:15Z",
      "updatedAt": "2013-10-14T16:22:06Z",
      "closedAt": "2013-10-14T16:22:06Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Current proposals that I can remember include:\n1. Leave the END_STREAM flag on CONTINUATION and prohibit its on PUSH_PROMISE continuations.\n2. Remove the END_STREAM flag from CONTINUATION and determine whether a stream is ended based on the initial HEADERS frame flags.\n3. Allow ending of streams from PUSH_PROMISE, even though this might introduce issues for intermediaries that decide not to forward pushes.\n",
          "createdAt": "2013-08-21T18:50:04Z",
          "updatedAt": "2013-08-21T18:50:04Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "I vote for 2\n",
          "createdAt": "2013-08-21T19:49:33Z",
          "updatedAt": "2013-08-21T19:49:33Z"
        },
        {
          "author": "molnarg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I vote for 2 too. It would be nice if continuation would not carry any flag besides the one that signals the end of continuation.\n",
          "createdAt": "2013-08-21T21:42:29Z",
          "updatedAt": "2013-08-21T21:42:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Seattle: Option 2 will be used.  There will be a need to make it clear that END_STREAM doesn't signify the end of a stream.\n",
          "createdAt": "2013-10-10T18:31:57Z",
          "updatedAt": "2013-10-10T18:31:57Z"
        }
      ]
    },
    {
      "number": 229,
      "id": "MDU6SXNzdWUxNzk3MTIyNg==",
      "title": "CONTINUATION Frame Size",
      "url": "https://github.com/httpwg/http2-spec/issues/229",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "frame layout"
      ],
      "body": "Because sequences of header continuations are required to be contiguous without any interleaving or multiplexing or whatnot... it really does not make sense to limit CONTINUATION frames carrying HTTP headers to 16383 octets, as that needlessly just increases the encoding overhead for continuations. If the END_HEADERS flag is not set, we ought to allow frame sizes up to the maximum allowed (65,535) to eliminate this additional overhead.\n",
      "createdAt": "2013-08-12T23:10:36Z",
      "updatedAt": "2013-10-10T20:21:12Z",
      "closedAt": "2013-10-10T20:21:12Z",
      "comments": [
        {
          "author": "molnarg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In this case, you still have to write the code that deals with fragmented HEADERS frames. So I don't think this makes things simpler...\n",
          "createdAt": "2013-10-10T11:49:28Z",
          "updatedAt": "2013-10-10T11:49:28Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We concluded in Seattle that we didn't want to go with half-measures like this.  All frames will be required to be less than 2^14 in size, regardless of the upper layer protocol or frame type.\n",
          "createdAt": "2013-10-10T20:21:12Z",
          "updatedAt": "2013-10-10T20:21:12Z"
        }
      ]
    },
    {
      "number": 230,
      "id": "MDU6SXNzdWUxODAwOTQ5Ng==",
      "title": "CONNECT",
      "url": "https://github.com/httpwg/http2-spec/issues/230",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "It turns out that CONNECT doesn't map well to the protocol semantics we've developed.\n\nTatsuhiro Tsujikawa:\n\n> For example, CONNECT to remote example.org:443 via\n> proxy, chrome sends the followings:\n> \n> ```\n> :method => CONNECT\n> :host => example.org\n> :path => example:org:443\n> :version => HTTP/1.1\n> ```\n> \n> :version is not omitted in HTTP/2.0, so it can be ignored.\n\nThis changes the rules for processing `:path`.  Maybe there is a better option than this.  We need to consider how to provide CONNECT-equivalent behaviour for explicit proxies.\n",
      "createdAt": "2013-08-13T17:32:42Z",
      "updatedAt": "2013-10-03T21:07:47Z",
      "closedAt": "2013-10-03T21:07:47Z",
      "comments": []
    },
    {
      "number": 231,
      "id": "MDU6SXNzdWUxODAyNDI1NA==",
      "title": "UTF-8 or ASCII Header Names",
      "url": "https://github.com/httpwg/http2-spec/issues/231",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "The current header compression spec allows for UTF-8 encoded header names without any character restrictions. The main HTTP/2 spec, however, states that header names are \"strings of ASCII characters\" (also without specifying any character restrictions). We need to be clearer. \n\nRecommend that we specify in both the HTTP/2 and Header Compression spec that header names MUST conform to:\n\n```\nLOWERALPHA = %x61-7A\nheader-name = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" /\n              \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" /\n              \"`\" / \"|\" / \"~\" / DIGIT / LOWERALPHA\n```\n\nWhich is the all-lower-case equivalent to the header-name definition currently in httpbis.\n",
      "createdAt": "2013-08-13T22:07:11Z",
      "updatedAt": "2013-08-29T16:20:50Z",
      "closedAt": "2013-08-29T16:20:50Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good, but you missed \":\".\n\nI won't mention to Roberto that this presents a fantastic compression opportunity, since there are only 52 valid values.\n\n(I've tagged this \"header compression\", since the main spec is correct, if vague.  The real responsibility for doing anything special here lies with the header compression spec.)\n",
          "createdAt": "2013-08-13T22:14:39Z",
          "updatedAt": "2013-08-13T22:14:39Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Whoops... ok, make that:\n\n```\n    LOWERALPHA = %x61-7A\n    header-char = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" /\n                  \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" /\n                  \"`\" / \"|\" / \"~\" / DIGIT / LOWERALPHA\n    header-name = [\":\"] 1*header-char\n```\n",
          "createdAt": "2013-08-13T22:28:39Z",
          "updatedAt": "2013-08-13T22:28:39Z"
        }
      ]
    },
    {
      "number": 232,
      "id": "MDU6SXNzdWUxODAyNDQxNA==",
      "title": "Dealing with Invalid UTF-8",
      "url": "https://github.com/httpwg/http2-spec/issues/232",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "The current header compression draft states that header field values are UTF-8. However, the spec says nothing about how to deal with overlong encodings, invalid UTF-8 octet sequences or valid UTF-8 sequences that encode invalid Unicode codepoints.\n\nI recommend stating that any of these conditions ought to result in an error. An encoder MUST NOT output any of these; and a decoder ought to signal a connection error if encountered.\n",
      "createdAt": "2013-08-13T22:11:10Z",
      "updatedAt": "2013-10-10T21:01:39Z",
      "closedAt": "2013-10-10T21:01:39Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Decided on a plan for #242 that invalidates this issue.  Closing.\n",
          "createdAt": "2013-10-10T21:01:39Z",
          "updatedAt": "2013-10-10T21:01:39Z"
        }
      ]
    },
    {
      "number": 233,
      "id": "MDU6SXNzdWUxODA4MDE0NQ==",
      "title": "incrementally indexed headers should be inserted in index '0' instead of len(table)+1",
      "url": "https://github.com/httpwg/http2-spec/issues/233",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "Currently, index 0 is the 'top' of the table, and when a new header is added using incremental indexing, it is added at the 'bottom' (i.e. the highest number index).\n\nThis is potentially problematic from a compression-efficacy standpoint-- data analysis shows that newly added items are the most likely to be reused or removed from the reference set, and thus most likely to be referred to again.\n\nThis implies that we should change the spec to insert headers inserted via incremental indexing into position '0' (i.e. the top)\n",
      "createdAt": "2013-08-14T22:07:20Z",
      "updatedAt": "2013-10-15T15:29:38Z",
      "closedAt": "2013-10-15T15:29:38Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Does this also imply that eviction should occur from the \"bottom\" of the table?\n",
          "createdAt": "2013-08-14T22:16:54Z",
          "updatedAt": "2013-08-14T22:16:54Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "eviction from the bottom == oldest entry dies first when all one is using is incremental indexing.\n\nWith substitution indexing, that isn't true. I'm happy with either one, but I imagine that Herve might prefer one over the other.\n",
          "createdAt": "2013-08-14T22:42:31Z",
          "updatedAt": "2013-08-14T22:42:31Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And I'm fine with either, because I intend to only do incremental indexing, since my research as shown it to be as good or better than substitution (at least so far), and because I know that incremental indexing is suitable to use in a world where we have something like TCP-minion or SCTP doing out-of-order-delivery without HOL blocking at the compressor (with a couple of small modifications).\n",
          "createdAt": "2013-08-14T22:44:33Z",
          "updatedAt": "2013-08-14T22:44:33Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Does the small modification require you to expose the sequence number?\n",
          "createdAt": "2013-08-14T23:01:57Z",
          "updatedAt": "2013-08-14T23:01:57Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Precisely!\n",
          "createdAt": "2013-08-14T23:06:45Z",
          "updatedAt": "2013-08-14T23:06:45Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "An argument to drop substitution indexing from the spec?\n",
          "createdAt": "2013-08-14T23:38:27Z",
          "updatedAt": "2013-08-14T23:38:27Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thusfar, we're assuming TCP transport, and I can imagine that substitution has the capacity to help out there, but not on substrates like TCP-Minion, SCTP, etc. On those transports substitution indexing probably hurts more than it helps.\n",
          "createdAt": "2013-08-14T23:56:26Z",
          "updatedAt": "2013-08-14T23:56:38Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Interesting discussion.  Please continue on-list :)\n",
          "createdAt": "2013-08-15T15:34:48Z",
          "updatedAt": "2013-08-15T15:34:48Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Seattle: we will make this change.\n",
          "createdAt": "2013-10-10T17:12:50Z",
          "updatedAt": "2013-10-10T17:12:50Z"
        }
      ]
    },
    {
      "number": 234,
      "id": "MDU6SXNzdWUxODA4NDcyOQ==",
      "title": "9.1 - Terminating endpoint SHOULD send GOAWAY",
      "url": "https://github.com/httpwg/http2-spec/issues/234",
      "state": "CLOSED",
      "author": "andrewrockwell",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "According to 9.1, \u201cWhen either endpoint chooses to close the transport-level TCP connection, the terminating endpoint MUST first send a GOAWAY\u201d, but 5.4.1 states that \u201cEndpoints SHOULD send a GOAWAY frame when ending a connection\u201d. \n\n9.1 should say \u201cSHOULD\u201d as well.\n",
      "createdAt": "2013-08-15T00:10:52Z",
      "updatedAt": "2013-08-15T15:38:09Z",
      "closedAt": "2013-08-15T15:38:09Z",
      "comments": []
    },
    {
      "number": 235,
      "id": "MDU6SXNzdWUxODA4NTA2OQ==",
      "title": "Max frame payload size vs. max HTTP frame size is confusing",
      "url": "https://github.com/httpwg/http2-spec/issues/235",
      "state": "CLOSED",
      "author": "andrewrockwell",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "4.2: \"The absolute maximum [frame payload] size is 65,535 octets.\"\n\n9.3: \"Frames used for HTTP messages MUST NOT exceed 2^14-1 (16383) octets in length, not counting the 8 octet frame header.\"\n\nWhy do we care about the maximum frame payload size? Could we just remove 4.2 and put 9.3 in section 4 - titled \"HTTP Frames\"\n\nI find this distinction confusing, especially considering that framing layer reuse is a non-goal. My implementation would've had a max frame payload size of 64K had I not finally noticed 9.3 and had it pointed out to me that these sizes operate on two different planes and that the HTTP message size is what the HTTP-level implementation should care about.\n",
      "createdAt": "2013-08-15T00:21:44Z",
      "updatedAt": "2013-08-15T16:48:57Z",
      "closedAt": "2013-08-15T15:41:54Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "On 15 August 2013 01:21, andrewrockwell notifications@github.com wrote:\n\n> 4.2: \"The absolute maximum [frame payload] size is 65,535 octets.\"\n> \n> 9.3: \"Frames used for HTTP messages MUST NOT exceed 2^14-1 (16383) octets in length, not counting the 8 octet frame header.\"\n> \n> Why do we care about the maximum frame payload size? Could we just skip 4.2 and put 9.3 in the section 4 - titled \"HTTP Frames\"\n> \n> I find this distinction confusing, especially considering that framing layer reuse is a non-goal. My implementation would've had a max frame payload size of 64K had I not finally noticed 9.3 and had it pointed out to me that these sizes operate on two different planes and that the HTTP message size is what the HTTP-level implementation should care about.\n\nActually, we're hedging on the reuse of the framing layer.  We don't\nwant to make this 100% generic, because that's wasteful and dumb, but\nwe do know that multiplexing websockets is likely in future, so we\ndon't want to preclude some level of reuse.\n\n@andrewrockwell let me know if the edit clarifies things for you.\n",
          "createdAt": "2013-08-15T15:48:06Z",
          "updatedAt": "2013-08-15T15:48:06Z"
        },
        {
          "author": "andrewrockwell",
          "authorAssociation": "NONE",
          "body": "That decision makes a lot of sense with WebSockets in mind. Thanks for sharing that thought.\n\nI like the edit a lot :) Thanks!\n",
          "createdAt": "2013-08-15T16:48:57Z",
          "updatedAt": "2013-08-15T16:48:57Z"
        }
      ]
    },
    {
      "number": 236,
      "id": "MDU6SXNzdWUxODI5Njk1NQ==",
      "title": "Rejecting a promise may result in connection error",
      "url": "https://github.com/httpwg/http2-spec/issues/236",
      "state": "CLOSED",
      "author": "molnarg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The spec says the following in the 'closed' state descritpion in the stream state machine part:\n\n```\n'closed':\n  ...\n\n  If this state is reached as a result of sending a RST_STREAM\n  frame, the peer that receives the RST_STREAM might have already\n  sent - or enqueued for sending - frames on the stream that cannot\n  be withdrawn.  An endpoint MUST ignore frames that it receives on\n  closed streams after it has sent a RST_STREAM frame.  An endpoint\n  MAY choose to limit the period over which it ignores frames and\n  treat frames that arrive after this time as being in error.\n\n  ...\n```\n\nThis scenario is not handled explicitly from the perspective of the endpoint that sends the promise and the push stream, so it may result in connection error because everything should be rejected with connection error what is not explicitly allowed.\n\nFrom the viewpoint of the server, this situation looks like this:\n1. the server send a PUSH_PROMISE\n2. it puts the whole push stream into the output buffer including the last data frame with an END_STREAM flag\n3. from its perspective, the stream is now in 'closed' state\n4. but then it receives an RST_STREAM(CANCEL) from the client\n5. receiving an RST_STREAM in closed state is only allowed if the server sent an RST_STREAM before, but this is not the case here, so it's a connection error\n",
      "createdAt": "2013-08-20T13:52:10Z",
      "updatedAt": "2013-08-21T19:07:48Z",
      "closedAt": "2013-08-21T18:22:05Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "As I pointed out on-list, this is a more general bug with the spec.  Any sender might receive RST_STREAM after sending END_STREAM.  We already have exemptions for PRIORITY and WINDOW_UPDATE.  That just needs to be expanded to include RST_STREAM.\n",
          "createdAt": "2013-08-21T18:14:31Z",
          "updatedAt": "2013-08-21T18:14:31Z"
        },
        {
          "author": "molnarg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks!\n",
          "createdAt": "2013-08-21T19:07:48Z",
          "updatedAt": "2013-08-21T19:07:48Z"
        }
      ]
    },
    {
      "number": 238,
      "id": "MDU6SXNzdWUxODUwMjYyNg==",
      "title": "Clarify the modification to the reference set on eviction or substitution",
      "url": "https://github.com/httpwg/http2-spec/issues/238",
      "state": "CLOSED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "HPAC draft-02 says that the reference set points to the entry in the header table. But it does not say what happens if such entry is removed from the header table. The answer is:\n\n> Any removal from the state set requires that anything that pointed to it be removed (else you'd segv or equivalent).\n> Thus, substitution or expiry always requires the corresponding reference-set entry to be removed.\n\nI think it would be good to explicitly state this behavior in the draft.\n",
      "createdAt": "2013-08-24T06:47:59Z",
      "updatedAt": "2013-10-21T17:11:08Z",
      "closedAt": "2013-10-21T17:11:08Z",
      "comments": [
        {
          "author": "molnarg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A simple solution would be to add a 'reference' and 'emitted' flag to Header Table entries instead of maintaining a separate Reference Set. It would make it obvious that removal from the Header Table means removal of the 'reference' flag.\n\nThe text for the final reference set emission would become something like:\n\n```\nas a last step, emit every entry in the Header Table\nwith the 'reference' flag, but without the 'emitted' flag\n```\n",
          "createdAt": "2013-09-05T11:03:18Z",
          "updatedAt": "2013-09-05T11:03:18Z"
        },
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it works for decoder. I imagine that many implementations actually use this strategy.\n",
          "createdAt": "2013-09-05T14:54:33Z",
          "updatedAt": "2013-09-05T14:54:33Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that the description of the algorithm doesn't preclude doing\nequivalent things.\n\nIMHO, I'd maintain two reference sets, each of which contained pointers to\nthe table referenced entries, emitted_reference and nonemitted_reference.\nA lookup in the 'reference_set' would first look at nonemitted_reference,\nand if nothing found, then look at emitted_reference (access to which will\noccur most often when expiring entries).\nThis also means that one iterates through nonemitted_reference at the end\ninstead of iterating through everything, after which emitted_reference gets\nstuck back into nonemitted_reference.\n\n-=R\n\nOn Thu, Sep 5, 2013 at 7:54 AM, Tatsuhiro Tsujikawa <\nnotifications@github.com> wrote:\n\n> I think it works for decoder. I imagine that many implementations actually\n> use this strategy.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/238#issuecomment-23873568\n> .\n",
          "createdAt": "2013-09-05T15:58:14Z",
          "updatedAt": "2013-09-05T15:58:14Z"
        },
        {
          "author": "andrewrockwell",
          "authorAssociation": "NONE",
          "body": "My suggested wording in 3.2.4, which also incorporates that when an entry is removed, the referenced index numbers change for the reference set as well.\n\nFrom:\n \"A consequence of removing one or more entries at the beginning of the header table is that the remaining entries are renumbered. The first entry of the header table is always associated to the index 0.\"\n\nTo:\n \"A consequence of removing one or more entries at the beginning of the header table is that their corresponding entries in the reference set need to be removed. In addition, the remaining entries in the header table and reference set are renumbered. The first entry of the header table is always associated to the index 0. \"\n",
          "createdAt": "2013-09-11T22:42:35Z",
          "updatedAt": "2013-09-11T22:45:12Z"
        },
        {
          "author": "andrewrockwell",
          "authorAssociation": "NONE",
          "body": "Based on my understanding of the reference set, the behavior for substitution would be described as follows in 3.2.1:\n\nA _literal_ representation that is _substituted_ into the header table entails the following actions:\n\no The header is emitted.\n\no The header is added to the header table, at the location defined by the representation.\n\no If the substituted index is not present in the reference set, a new entry is added to the reference set.\n\no If the substituted index is present in the reference set, no changes to the reference set are needed.\n",
          "createdAt": "2013-09-11T22:44:52Z",
          "updatedAt": "2013-09-11T22:45:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually, it's worse than that.  You need to consider two things:\n- A substituted header might not fit in the table.  In which case you have a completely different branch to follow.\n- The substituted header might cause the eviction of the entry that it substitutes (i.e., it becomes a replacement for an index that it less than zero).  This causes the addition to be an insert, in which case all the indices need to be incremented by one as part of the addition.\n\nThe complexities in this header compression are in handling the edge cases.\n",
          "createdAt": "2013-09-12T16:11:50Z",
          "updatedAt": "2013-09-12T16:11:50Z"
        },
        {
          "author": "andrewrockwell",
          "authorAssociation": "NONE",
          "body": "Very true. I was aware of these edge cases but they are notably missing from the descriptions.\n\nI'm not sure how to make all the possibilities clear in the text, but am definitely with Tatsuhiro that they should be there.\n\nI mean, we could just kill reference sets... :)\n",
          "createdAt": "2013-09-12T17:06:21Z",
          "updatedAt": "2013-09-12T17:06:21Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since there was no obvious consensus on list, a solution was chosen which solves this problem and which solves the encoder-state not being zero w.r.t. reference set at the same time.\n",
          "createdAt": "2013-10-21T17:11:08Z",
          "updatedAt": "2013-10-21T17:11:08Z"
        }
      ]
    },
    {
      "number": 239,
      "id": "MDU6SXNzdWUxODYyNzIyOA==",
      "title": "Need to choose a number for header table size setting",
      "url": "https://github.com/httpwg/http2-spec/issues/239",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "The current compression-spec doesn't currently specify a value for the header table size setting.\n\nWe still need #120 before it can be used, of course.\n",
      "createdAt": "2013-08-27T19:03:09Z",
      "updatedAt": "2013-10-14T16:22:06Z",
      "closedAt": "2013-10-14T16:22:06Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed along with #120.\n",
          "createdAt": "2013-10-11T21:41:47Z",
          "updatedAt": "2013-10-11T21:41:47Z"
        }
      ]
    },
    {
      "number": 240,
      "id": "MDU6SXNzdWUxODcxMDczOA==",
      "title": "Indexing new entry with a size greater than SETTINGS_HEADER_TABLE_SIZE must be prohibited",
      "url": "https://github.com/httpwg/http2-spec/issues/240",
      "state": "CLOSED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "The current HPACK draft-03 says\n\n```\nThe addition of a new entry with a size greater than the\nSETTINGS_HEADER_TABLE_SIZE limit causes all the entries from the\nheader table to be dropped and the new entry not to be added to the\nheader table.  The replacement of an existing entry with a new entry\nwith a size greater than the SETTINGS_HEADER_TABLE_SIZE has the same\nconsequences.\n```\n\nI propose that Indexing new entry with a size greater than SETTINGS_HEADER_TABLE_SIZE must be prohibited.\n\nThe current wording showing above itself is an already a special case and handling gracefully to try to index entry which does not fit into the header table does not add value.\nInstead, without adding extra complexity, we can reject such indexing request by connection error. This is done by just checking the required space for the entry before indexing and emit error if necessary.\n\nThe relevant discussion was/is:\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2013JulSep/0991.html\n",
      "createdAt": "2013-08-29T03:59:56Z",
      "updatedAt": "2013-10-10T22:03:05Z",
      "closedAt": "2013-10-10T22:03:05Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; general feeling was that the current design is intentional; it is useful in some circumstances to be able to insert without disastrous effects (e.g., when settings for header context are 0).\n",
          "createdAt": "2013-10-10T22:03:05Z",
          "updatedAt": "2013-10-10T22:03:05Z"
        }
      ]
    },
    {
      "number": 242,
      "id": "MDU6SXNzdWUxODg5NzQ3MA==",
      "title": "header field value encoding",
      "url": "https://github.com/httpwg/http2-spec/issues/242",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "The spec currently claims header field values are UTF-8.\n\nFor a new protocol that would be nice; but we have the conflicting requirement to be able to tunnel existing HTTP/1.1 messages through 2.0.\n",
      "createdAt": "2013-09-03T09:22:59Z",
      "updatedAt": "2013-10-14T16:06:49Z",
      "closedAt": "2013-10-14T16:06:49Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "...by which you mean the header-compression spec.  Yes, this is true, and I believe that we've had several issues raised on the subject already.  #232 touches on it, #220 proposes a method for dealing with it, #187 deals with the actual literal.  None of these ask the simple question that this issue does though: what the hell do you do with the crap that HTTP/1.1 implementations emit?  It's not UTF-8 encoded unicode, that's for certain.\n",
          "createdAt": "2013-09-03T17:53:43Z",
          "updatedAt": "2013-09-03T18:52:50Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Decision in Seattle: We're not going to define what header field values are or aren't.  We're going to say that the compressor carries octet sequences and avoid the issue entirely.\n",
          "createdAt": "2013-10-10T17:51:01Z",
          "updatedAt": "2013-10-10T17:51:01Z"
        }
      ]
    },
    {
      "number": 244,
      "id": "MDU6SXNzdWUxOTM1MTI2MA==",
      "title": "Compression - Clarify effect of substitution on reference set in 3.2.1",
      "url": "https://github.com/httpwg/http2-spec/issues/244",
      "state": "CLOSED",
      "author": "andrewrockwell",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Based on my understanding of the reference set, the behavior would be described as follows:\n\n   A _literal representation_ that is _substituted_ into the header table\n   entails the following actions:\n\n   o  The header is emitted.\n\n   o  The header is added to the header table, at the location defined\n      by the representation.\n\n   o  If the substituted index is not present in the reference set, a new entry is added to the reference set.\n\n   o  If the substituted index is present in the reference set, no changes to the reference set are needed.\n",
      "createdAt": "2013-09-11T22:30:50Z",
      "updatedAt": "2013-09-11T22:43:45Z",
      "closedAt": "2013-09-11T22:43:45Z",
      "comments": [
        {
          "author": "andrewrockwell",
          "authorAssociation": "NONE",
          "body": "Duplicate of 238.\n",
          "createdAt": "2013-09-11T22:43:41Z",
          "updatedAt": "2013-09-11T22:43:41Z"
        }
      ]
    },
    {
      "number": 245,
      "id": "MDU6SXNzdWUxOTM1MTYxNQ==",
      "title": "Compression - Clarify effect of removing entry from table on header set in 3.2.4",
      "url": "https://github.com/httpwg/http2-spec/issues/245",
      "state": "CLOSED",
      "author": "andrewrockwell",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "From:\n\"A consequence of removing one or more entries at the beginning of the header table is that the remaining entries are renumbered. The first entry of the header table is always associated to the index 0.\"\n\nTo:\n\"A consequence of removing one or more entries at the beginning of the header table is that their corresponding entries in the reference set need to be removed. In addition, the remaining entries in the header table and reference set are renumbered. The first entry of the header table is always associated to the index 0. \"\n",
      "createdAt": "2013-09-11T22:38:54Z",
      "updatedAt": "2013-09-11T22:40:24Z",
      "closedAt": "2013-09-11T22:39:50Z",
      "comments": [
        {
          "author": "andrewrockwell",
          "authorAssociation": "NONE",
          "body": "Duplicate of 238.\n",
          "createdAt": "2013-09-11T22:40:00Z",
          "updatedAt": "2013-09-11T22:40:24Z"
        }
      ]
    },
    {
      "number": 246,
      "id": "MDU6SXNzdWUxOTUyMzkxMQ==",
      "title": "Error code for PING frame with wrong size",
      "url": "https://github.com/httpwg/http2-spec/issues/246",
      "state": "CLOSED",
      "author": "molnarg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics"
      ],
      "body": "Currently, there's two contradicting MUSTs for this. \n\n[Section 4.2:](http://tools.ietf.org/html/draft-ietf-httpbis-http2-06#section-4.2):\n\n```\nCertain frame types, such as PING (see Section 6.7), impose\nadditional limits on the amount of payload data allowed.  Likewise,\nadditional size limits can be set by specific application uses (see\nSection 9).\n\nIf a frame size exceeds any defined limit, or is too small to contain\nmandatory frame data, the endpoint MUST send a FRAME_TOO_LARGE error.\nFrame size errors in frames that affect connection-level state MUST\nbe treated as a connection error (Section 5.4.1).\n```\n\n[Section 6.7:](http://tools.ietf.org/html/draft-ietf-httpbis-http2-06#section-6.7)\n\n```\nReceipt of a PING frame with a length field value other than 8 MUST\nbe treated as a connection error (Section 5.4.1) of type\nPROTOCOL_ERROR.\n```\n\nI propose to simply omit the second one, or just reference the former section.\n",
      "createdAt": "2013-09-15T18:25:15Z",
      "updatedAt": "2013-10-10T18:35:57Z",
      "closedAt": "2013-10-10T18:35:57Z",
      "comments": [
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Now that you mention it, FRAME_TOO_LARGE actually sounds wrong for the usage in 4.2. It seems wrong to send a FRAME_TOO_LARGE if the frame size is \"too small to contain mandatory frame data\".\n\nDo we have text elsewhere for handling the case when the frame size does not match the specced size for the frame type? It seems like we can omit the special text for PING frame and generalize to all other frames. I don't think the text in 4.2 seems exactly right for it, but we can probably fix that.\n",
          "createdAt": "2013-09-16T04:46:32Z",
          "updatedAt": "2013-09-16T04:46:32Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "fwiw, I had brought this up back in June (http://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/1080.html). The general response seemed to be that the less specific PROTOCOL_ERROR was preferable to a more specific FRAME_SIZE_ERROR or whatever. \n",
          "createdAt": "2013-09-16T16:42:31Z",
          "updatedAt": "2013-09-16T16:42:31Z"
        },
        {
          "author": "molnarg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After re-reading the thread, I feel like it's probably better to use PROTOCOL_ERROR now that we can have opaque data in GOAWAY frames that can be used to describe the problem more accurately... but that leads to a more general error code discussion again.\n",
          "createdAt": "2013-09-16T18:32:17Z",
          "updatedAt": "2013-09-16T18:32:17Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Opaque data works when it needs to be sent back to the originator to be understood. That's why it's so perfect for INTERNAL_ERROR. But when you are trying to tell the peer that it's doing something wrong (i.e. PROTOCOL_ERROR), it can't be opaque. It needs to be understandable by the peer.\n",
          "createdAt": "2013-09-16T19:07:12Z",
          "updatedAt": "2013-09-16T19:07:12Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh, and I failed. We should move this back to ietf-http-wg@. Sorry.\n",
          "createdAt": "2013-09-16T19:07:40Z",
          "updatedAt": "2013-09-16T19:07:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Seattle: decided to use the more specific error and rename it to FRAME_SIZE_ERROR.\n",
          "createdAt": "2013-10-10T18:34:01Z",
          "updatedAt": "2013-10-10T18:34:01Z"
        }
      ]
    },
    {
      "number": 248,
      "id": "MDU6SXNzdWUxOTgxODgyOQ==",
      "title": "Cross-origin policy for pushed resources insecure?",
      "url": "https://github.com/httpwg/http2-spec/issues/248",
      "state": "CLOSED",
      "author": "joliss",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "security"
      ],
      "body": "http://http2.github.io/http2-spec/#rfc.section.10.1 says:\n\n> A server is considered authoritative for an \"http\" resource if the connection is\n> established to a resolved IP address for the domain in the origin of the resource.\n\nI believe this may be insecure: For instance, `foo.herokuapp.com` and `bar.herokuapp.com` could conceivably live behind a load balancer at the same IP address, yet `foo` shouldn't be able to push resources for `bar`. (Or am I mis-reading the spec here?)\n",
      "createdAt": "2013-09-20T14:01:40Z",
      "updatedAt": "2014-01-24T08:24:19Z",
      "closedAt": "2014-01-24T08:24:19Z",
      "comments": [
        {
          "author": "joliss",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thinking about this some more... I guess the expectation would be: If the load balancer speaks HTTP 2.0, it would forward individual streams to the servers, so we can expect it to enforce that servers don't send unauthorized push promises.\n\nBut what if an HTTP 1.1 load balancer forwards the entire TCP connection once it sees a `Host:` field? Then the server could conceivable upgrade to HTTP 2.0 and push resources that it isn't allowed to push.\n\nCould this happen? What do you think?\n",
          "createdAt": "2013-09-20T14:32:50Z",
          "updatedAt": "2013-09-20T14:32:50Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "These are good points. I have responses to them, but we try to have all discussion on the mailing list (ietf-http-wg@w3.org). Can you email a link to this issue there for discussion?\n",
          "createdAt": "2013-09-20T16:59:39Z",
          "updatedAt": "2013-09-20T16:59:39Z"
        },
        {
          "author": "joliss",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds good. I'll close this then.\n",
          "createdAt": "2013-09-20T18:55:39Z",
          "updatedAt": "2013-09-20T18:55:39Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry for the confusing procedure. Most of the working group doesn't monitor github, but we use github for issue tracking. We'll resolve the issue on the mailing list though. You can reopen if you want until we're ready to close this. Thanks for emailing the mailing list. I'll respond there.\n",
          "createdAt": "2013-09-20T19:16:43Z",
          "updatedAt": "2013-09-20T19:16:43Z"
        },
        {
          "author": "joliss",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mailing list thread: http://lists.w3.org/Archives/Public/ietf-http-wg/2013JulSep/1268.html\n\nFeel free to close this issue whenever you feel that it doesn't need tracking anymore.\n",
          "createdAt": "2013-09-26T00:38:47Z",
          "updatedAt": "2013-09-26T00:39:35Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; this is covered with the additional text in 10.4. Some editorial clean-up may be helpful.\n",
          "createdAt": "2014-01-24T08:24:19Z",
          "updatedAt": "2014-01-24T08:24:19Z"
        }
      ]
    },
    {
      "number": 250,
      "id": "MDU6SXNzdWUyMDQxMDU4Mg==",
      "title": "Remove substitution operation",
      "url": "https://github.com/httpwg/http2-spec/issues/250",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "We've seen varying amounts of advantage from having header table substitution enabled.  Most are fairly minimal, even assuming perfect foresight.  Some tests show single digit percentage improvements, others are much less.  The feature adds some complexity.  Is this complexity justified?  Should we remove this feature?\n",
      "createdAt": "2013-10-02T17:50:19Z",
      "updatedAt": "2013-10-10T21:00:43Z",
      "closedAt": "2013-10-10T21:00:43Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Offline discussions: @jpinner and @grmocg agree that if this isn't removed, we should swap the opcodes so that substitution gets a worse (the longer) opcode.\n",
          "createdAt": "2013-10-09T20:05:58Z",
          "updatedAt": "2013-10-09T20:05:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion in Seattle resulted in a conclusion to remove the substitution opcode from the draft.\n",
          "createdAt": "2013-10-10T17:07:20Z",
          "updatedAt": "2013-10-10T17:07:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #262.\n",
          "createdAt": "2013-10-10T21:00:43Z",
          "updatedAt": "2013-10-10T21:00:43Z"
        }
      ]
    },
    {
      "number": 251,
      "id": "MDU6SXNzdWUyMDQyNTczNA==",
      "title": "Bit width typo in Section 4.2",
      "url": "https://github.com/httpwg/http2-spec/issues/251",
      "state": "CLOSED",
      "author": "OsamaM",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "   The maximum size of a frame payload varies by frame type and use.\n   For instance, the HTTP/2.0 usage limits frames to 2^16-1 (16,383)\n   octets (Section 9.3).\n\n16383 is 2^14 - 1\n",
      "createdAt": "2013-10-02T22:13:15Z",
      "updatedAt": "2013-10-03T20:57:56Z",
      "closedAt": "2013-10-03T20:57:56Z",
      "comments": []
    },
    {
      "number": 252,
      "id": "MDU6SXNzdWUyMDUwMTQ4MA==",
      "title": "grammer typo in section 6.9.4",
      "url": "https://github.com/httpwg/http2-spec/issues/252",
      "state": "CLOSED",
      "author": "OsamaM",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "section 6.9.4 (Ending Flow Control), paragraph 2: \"Flow control can be disabled the entire connection using the SETTINGS_FLOW_CONTROL_OPTIONS setting.\"\n\nMissing \"on\" or \"for\" after \"disabled\".\n",
      "createdAt": "2013-10-04T06:07:19Z",
      "updatedAt": "2013-10-04T17:10:29Z",
      "closedAt": "2013-10-04T17:10:29Z",
      "comments": []
    },
    {
      "number": 253,
      "id": "MDU6SXNzdWUyMDUwMTY3MA==",
      "title": "typo in section 6.10",
      "url": "https://github.com/httpwg/http2-spec/issues/253",
      "state": "CLOSED",
      "author": "OsamaM",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "section 6.10 (CONTINUATION), last paragraph: First sentence is a sentence fragment \"header block fragments (Section 4.3).\"\n",
      "createdAt": "2013-10-04T06:15:19Z",
      "updatedAt": "2013-10-04T17:10:30Z",
      "closedAt": "2013-10-04T17:10:30Z",
      "comments": []
    },
    {
      "number": 255,
      "id": "MDU6SXNzdWUyMDYyNDMxNw==",
      "title": "Eviction simplification",
      "url": "https://github.com/httpwg/http2-spec/issues/255",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Currently, eviction has some special cases when occurring during a substitution. I think the whole eviction mechanism could be simplified without losing much.\n\nI would propose that logically, first, the header table is modified, then if its size is greater than the limit, the eviction mechanism is applied.\nIn this way, the eviction mechanism can be described once for all the cases where it may be used.\n\nThe only drawback I see, is that a substituted header may be dropped immediately. However this can be easily prevented by the encoder by choosing a target index that will not be evicted due to the substitution.\n",
      "createdAt": "2013-10-07T16:56:40Z",
      "updatedAt": "2013-10-10T22:31:47Z",
      "closedAt": "2013-10-10T22:31:47Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Getting rid of substitution.\n",
          "createdAt": "2013-10-10T22:31:47Z",
          "updatedAt": "2013-10-10T22:31:47Z"
        }
      ]
    },
    {
      "number": 256,
      "id": "MDU6SXNzdWUyMDY5NjQ2Nw==",
      "title": "Frame size consistency",
      "url": "https://github.com/httpwg/http2-spec/issues/256",
      "state": "CLOSED",
      "author": "andrewrockwell",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "9.3 clarifies that frame payload size limit is 16,383 as it is \"not counting the 8 octet frame header,\" but this clarification isn't made in 4.2.\n\nIn 4.2:\n\" For instance, the HTTP/2.0 usage limits frames to 2^14-1 (16,383) octets (Section 9.3).\"\n\nIn 9.3:\n\"Frames used for HTTP messages MUST NOT exceed 2^14-1 (16,383) octets in length, not counting the 8 octet frame header.\"\n",
      "createdAt": "2013-10-08T18:12:00Z",
      "updatedAt": "2013-10-08T18:42:21Z",
      "closedAt": "2013-10-08T18:42:21Z",
      "comments": []
    },
    {
      "number": 257,
      "id": "MDU6SXNzdWUyMDc1NjUzOQ==",
      "title": "Layering of errors from HTTP mapping",
      "url": "https://github.com/httpwg/http2-spec/issues/257",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "editor-ready"
      ],
      "body": "Several of the errors that are described in Section 8 (HTTP Mapping) as requiring the use of HTTP/2.0 framing layer errors (connection or stream errors).  For example, HTTP requests that omit colon-prefixed headers require that the receiver send a PROTOCOL_ERROR on the stream.\n\n@jpinner notes that analogous errors in HTTP/1.1 typically result in HTTP error responses.  For example, omitting the Host header field almost invariably results in a 400 response.\n\nShould we change these from HTTP/2.0 framing layer errors into HTTP errors?\n",
      "createdAt": "2013-10-09T17:12:50Z",
      "updatedAt": "2013-10-10T21:00:05Z",
      "closedAt": "2013-10-10T21:00:05Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion in Seattle: The conclusion is that...\n\nIntermediaries that do not interpret messages at the HTTP layer MAY forward messages that are malformed.  An HTTP request or response that omits mandatory colon headers is malformed. Clients MUST NOT accept a malformed response.  In either case, implementations need to ensure that the stream ends, however a server MAY send an HTTP response prior to closing or resetting the stream.\n",
          "createdAt": "2013-10-10T19:04:20Z",
          "updatedAt": "2013-10-10T19:12:53Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to close this and let people object if they find the added text objectionable.\n",
          "createdAt": "2013-10-10T21:00:05Z",
          "updatedAt": "2013-10-10T21:00:05Z"
        }
      ]
    },
    {
      "number": 258,
      "id": "MDU6SXNzdWUyMDc2NjE0Mw==",
      "title": "Make initial header table always accessible",
      "url": "https://github.com/httpwg/http2-spec/issues/258",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "The initial header table is currently mutable.  Even if we remove substitution, then the table is still, in theory, subject to the eviction rules.\n\nThe idea here is to make the initial header table completely immutable and always present.  The indices for the initial header table will start where the actual header table ceases.  Thus, if the mutable header table is empty (the initial state), the initial header table is indexed starting at index 0; more generally, for a mutable table size of N, the initial header table is indexed starting at N.\n\nWe should, at the same time, name the initial header table to the static header table.\n",
      "createdAt": "2013-10-09T19:53:35Z",
      "updatedAt": "2013-10-15T10:56:26Z",
      "closedAt": "2013-10-15T10:56:26Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion in Seattle concluded that we want to do this.\n",
          "createdAt": "2013-10-10T17:23:38Z",
          "updatedAt": "2013-10-10T17:23:38Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Solved by 985a07e711605d30417c350465157572daad50c1.\n",
          "createdAt": "2013-10-15T10:56:26Z",
          "updatedAt": "2013-10-15T10:56:26Z"
        }
      ]
    },
    {
      "number": 259,
      "id": "MDU6SXNzdWUyMDc2NjU1NQ==",
      "title": "Content and separation of initial header table",
      "url": "https://github.com/httpwg/http2-spec/issues/259",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "Because the server sends both response headers (HEADERS) and request headers (PUSH_PROMISE), the initial content of the server header table should contain common header names from both request and response headers.\n\nThere is also a question whether it is worth having separate tables for client and server at all, or simply have a single table containing common header names for both.\n",
      "createdAt": "2013-10-09T19:59:58Z",
      "updatedAt": "2013-10-15T10:55:26Z",
      "closedAt": "2013-10-15T10:55:26Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Seattle: we're going to go with a single table that contains both sets of fields.\n",
          "createdAt": "2013-10-10T17:26:09Z",
          "updatedAt": "2013-10-10T17:26:09Z"
        }
      ]
    },
    {
      "number": 260,
      "id": "MDU6SXNzdWUyMDc3NzQ0Ng==",
      "title": "HTTP max frame size should only apply to data frames <eom>",
      "url": "https://github.com/httpwg/http2-spec/issues/260",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "frame layout"
      ],
      "body": "",
      "createdAt": "2013-10-09T22:59:52Z",
      "updatedAt": "2014-04-17T00:28:05Z",
      "closedAt": "2013-10-10T20:59:05Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "#229 wants a different set of exclusions.\n",
          "createdAt": "2013-10-09T23:21:12Z",
          "updatedAt": "2013-10-09T23:21:12Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The coin toss in Seattle decided that it would be a fixed 2^14-1 limit for ALL frames, regardless of layer.\n",
          "createdAt": "2013-10-10T20:20:03Z",
          "updatedAt": "2013-10-10T20:20:03Z"
        }
      ]
    },
    {
      "number": 261,
      "id": "MDU6SXNzdWUyMDc3OTA0Nw==",
      "title": "per stream (initial) flow window size",
      "url": "https://github.com/httpwg/http2-spec/issues/261",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "flow control"
      ],
      "body": "SETTINGS allows us to set a default starting window for all streams + update this default later. However, I think there are compelling cases where it would be beneficial to allow different streams to start with a different initial window size (similar to optional priority in headers frame). Given that this would effectively be a new feature... let me try to motivate why the extra complexity is worth it based on some of the recent work I've been involved with: \n\nWe want to make browser pre{fetch,rendering} smarter [1,2]. Meaning, we want to be able to discover critical page resources as early as possible and kick off fetches for those assets also. However, since some of these assets are large (and there can be many of them), we need to control how much data we fetch (e.g. if we are too aggressive we may slow down the host page, and/or incur high overhead for the user). \n\nA concrete example of this is the work we've been experimenting with in PageSpeed [3], where we are aggressively inlining CSS/JS and even doing \"page splits\": the rewriter effectively creates two pages, the first is the \"prefetch friendly\" version which fits in < 15KB (one RTT), and second is the diff that fills in the rest once the navigation is triggered via an XHR -- if that sounds crazy, then that's not too far from the truth. That said, we have a working prototype, and it's showing impressive results.. For example, we can take a mobile wikipedia page, which currently takes 9s (!!!) to first render (on a 3G profile), down to 1.6s [3] by using the combination of prefetch + page split strategies.\n\nWhat does flow control have to do this with all this? When issuing a prefetch, we would like to be able to open a request with a lower initial window (e.g. 15KB), and fetch just the head of the document - in most cases, this will allow us to discover the critical resources, initiate requests for them, etc. Then, if the navigation is triggered, we would just increment the window and \"resume\" the stream to get the rest of the page... This eliminates the need for server rewriting / page splitting, which has a lot of gnarly edge conditions. Handling this at the transport layer would make it much, much simpler and more powerful.\n\n(Yes, we could lower the initial window for all streams, but that's counter productive in majority of cases... we'd just end up sending a lot more WINDOW_UPDATE frames for non-prefetch request.)\n\nFurther, the ability to set a custom window size also allows us to adjust this logic based on type of asset, prior knowledge of the site, or other signals. For example, the other use case is progressive rendering of images - i.e. using flow control to fetch image layers and having control over where and when to stop. Concretely, we could fetch first X KB, which may provide a reasonable low-res preview of the asset, and then continue fetching subsequent layers until some condition is met (end of file, or max resolution of device is reached -- if you're a 2x device, don't fetch the 3x layers). I'm intentionally skipping over the image container discussions here, since that's a separate conversation.. But I'll note that many sites are already trying to provide this sort of experience, except through rather poor implementation: inline low-res asset, render that, then initiate a separate XHR to fetch image and replace with high-res version. Needless to say, we can do much better, and there is strong interest in providing this sort of functionality natively...\n## \n\nIn short, there are interesting cases where the initiator of the stream may want to control the initial window size: to decrease it, and perhaps even to increase it in some cases. There are multiple ways to achieve this, but one plausible strategy would be to allow an optional SETTINGS_INITIAL_WINDOW_SIZE payload in the headers frame, not unlike the optional priority field -- minimal overhead, no races between initiating the request and WINDOW_UPDATE, etc. \n",
      "createdAt": "2013-10-09T23:40:34Z",
      "updatedAt": "2013-10-10T22:36:30Z",
      "closedAt": "2013-10-10T22:36:30Z",
      "comments": [
        {
          "author": "igrigorik",
          "authorAssociation": "MEMBER",
          "body": "Reference links from the [http-wg thread](http://lists.w3.org/Archives/Public/ietf-http-wg/2013OctDec/0084.html):\n\n[1] https://docs.google.com/document/d/1wck0tFTiibKzZDuBeyK0lrKTKsZ5pqfvcR__1r2m834/edit\n[2] http://lists.w3.org/Archives/Public/public-web-perf/2013Aug/0010.html\n[3] https://developers.google.com/speed/pagespeed/optimization \n[4] http://www.webpagetest.org/result/130715_PZ_08063384bd76cd2206a1b39e8678e438/3/details/\n",
          "createdAt": "2013-10-10T00:11:18Z",
          "updatedAt": "2013-10-10T03:06:19Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; general feeling was to close; if you want to experiment with this, please go ahead, but it's believed that what you want is already achievable. \n",
          "createdAt": "2013-10-10T22:36:30Z",
          "updatedAt": "2013-10-10T22:36:30Z"
        }
      ]
    },
    {
      "number": 263,
      "id": "MDU6SXNzdWUyMDgzMTUxMw==",
      "title": "Minor Editorial Point",
      "url": "https://github.com/httpwg/http2-spec/issues/263",
      "state": "CLOSED",
      "author": "emile22",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In section 6.2 I suggest to replace\n\"END_HEADERS (0x4):  The END_HEADERS bit indicates \" \nwith \"END_HEADERS (0x4):  Bit 3 indicates \" \n",
      "createdAt": "2013-10-10T20:01:57Z",
      "updatedAt": "2013-10-10T20:28:28Z",
      "closedAt": "2013-10-10T20:28:28Z",
      "comments": []
    },
    {
      "number": 264,
      "id": "MDU6SXNzdWUyMDgzMTc2Ng==",
      "title": "1xx non-final status codes",
      "url": "https://github.com/httpwg/http2-spec/issues/264",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "mnot"
      ],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "We've discussed, in relation to #18 the possibility of removing the ability to convey non-final status codes from HTTP/2.0 entirely.\n",
      "createdAt": "2013-10-10T20:06:04Z",
      "updatedAt": "2013-11-25T17:21:29Z",
      "closedAt": "2013-11-25T17:21:29Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Mark, please review http://http2.github.io/http2-spec/#informational-responses and let me know if you'd like to make changes.  All reasonable pull requests are accepted.\n",
          "createdAt": "2013-11-02T18:58:48Z",
          "updatedAt": "2013-11-02T18:58:48Z"
        }
      ]
    },
    {
      "number": 266,
      "id": "MDU6SXNzdWUyMDgzOTY5Mg==",
      "title": "Strings in the compressor should be huffman encoded",
      "url": "https://github.com/httpwg/http2-spec/issues/266",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "It reduces output size by ~30%, and is thus an acceptable complexity/result tradeoff.\n",
      "createdAt": "2013-10-10T22:24:21Z",
      "updatedAt": "2013-11-05T03:31:00Z",
      "closedAt": "2013-11-05T03:31:00Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; add huffman to the compression draft as something that can be negotiated with a separate alpn string - http-huf-07/2.0.\n",
          "createdAt": "2013-10-10T22:56:55Z",
          "updatedAt": "2013-10-10T22:56:55Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "(as an experiment)\n",
          "createdAt": "2013-10-10T22:57:08Z",
          "updatedAt": "2013-10-10T22:57:08Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Huffman is added; though there is currently no negotiation for it, one may select for it on an entry-by-entry basis.\n",
          "createdAt": "2013-10-21T17:12:06Z",
          "updatedAt": "2013-10-21T17:12:06Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this one now?  Or is there a desire to tweak it further?\n",
          "createdAt": "2013-11-02T18:57:25Z",
          "updatedAt": "2013-11-02T18:57:25Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Huffman strings are in, and are optional for an encoder, but we currently\ndon't have a way of signaling that they're optional for the decoder.\n.. i.e. we haven't specified the negotiation mechanism (ALPN string).\n\nOn Sat, Nov 2, 2013 at 11:57 AM, Martin Thomson notifications@github.comwrote:\n\n> Can we close this one now? Or is there a desire to tweak it further?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/266#issuecomment-27629568\n> .\n",
          "createdAt": "2013-11-02T19:14:26Z",
          "updatedAt": "2013-11-02T19:14:26Z"
        }
      ]
    },
    {
      "number": 267,
      "id": "MDU6SXNzdWUyMDgzOTc5NA==",
      "title": "[HPACK] We should Huffman-encode values",
      "url": "https://github.com/httpwg/http2-spec/issues/267",
      "state": "CLOSED",
      "author": "akalin-chromium",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Huffman encoding gives a nice boost to compression and is orthogonal to the rest of the HPACK.\n\nOne issue is whether to have a bit to signal that a particular value isn't Huffman-encoded (if the compressor knows a priori that a value doesn't follow the Huffman distribution very well).\n",
      "createdAt": "2013-10-10T22:26:34Z",
      "updatedAt": "2013-10-10T22:28:01Z",
      "closedAt": "2013-10-10T22:28:01Z",
      "comments": [
        {
          "author": "akalin-chromium",
          "authorAssociation": "NONE",
          "body": "Nevermind, Roberto beat me to it in #266.\n",
          "createdAt": "2013-10-10T22:28:01Z",
          "updatedAt": "2013-10-10T22:28:01Z"
        }
      ]
    },
    {
      "number": 268,
      "id": "MDU6SXNzdWUyMDg0MDI5Ng==",
      "title": "s/:host/:authority/",
      "url": "https://github.com/httpwg/http2-spec/issues/268",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "editor-ready"
      ],
      "body": "There's a great potential for confusion over what :host is, particularly in relation to the host header field in HTTP/1.1.  We can avoid that confusion with a new name.\n\nWe can also remove the use of :path from CONNECT requests.\n",
      "createdAt": "2013-10-10T22:39:10Z",
      "updatedAt": "2013-10-10T23:05:33Z",
      "closedAt": "2013-10-10T23:05:33Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; OK.\n",
          "createdAt": "2013-10-10T22:59:29Z",
          "updatedAt": "2013-10-10T22:59:29Z"
        }
      ]
    },
    {
      "number": 269,
      "id": "MDU6SXNzdWUyMDg0MTMyNQ==",
      "title": "Mapping of :authority",
      "url": "https://github.com/httpwg/http2-spec/issues/269",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "Remove prohibition on Host header and specify that in HTTP/1.1 <--> HTTP/2.0 translations that :authority is only used in translating absolute URIs and that when present the initial line should be regenerated appropriately.\n",
      "createdAt": "2013-10-10T23:03:37Z",
      "updatedAt": "2013-10-11T22:25:35Z",
      "closedAt": "2013-10-11T22:25:35Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Notes are to remove the Host header from the prohibited list.\n\n:authority can be omitted now, and it only appears when it is present in the URI.\n\nAn HTTP/2.0 client SHOULD populate :authority and not Host.  It may now omit Host.\n",
          "createdAt": "2013-10-11T16:28:54Z",
          "updatedAt": "2013-10-11T16:28:54Z"
        }
      ]
    },
    {
      "number": 270,
      "id": "MDU6SXNzdWUyMDg0MjY2Nw==",
      "title": "Priority Levelling",
      "url": "https://github.com/httpwg/http2-spec/issues/270",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "prioritisation",
        "writeup"
      ],
      "body": "As discussed in Tokyo and later in Seattle. Proxies need to be able to level the priorities between multiple clients on a single back-end connection. May also be important to browsers with tabs.\n\nNote that it's theoretically possible to accommodate this today because we have repriorisation, but it can be _very_ chatty.\n\nPossible solutions include priority grouping, trees or lists.\n",
      "createdAt": "2013-10-10T23:40:01Z",
      "updatedAt": "2014-12-05T00:00:15Z",
      "closedAt": "2014-03-11T09:38:55Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Roberto / Will to (re-)circulate their proposals for priority groups and lists.\n",
          "createdAt": "2013-10-10T23:43:10Z",
          "updatedAt": "2013-10-10T23:43:10Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See:\n  http://tools.ietf.org/html/draft-chan-http2-stream-dependencies\n",
          "createdAt": "2014-01-23T12:34:37Z",
          "updatedAt": "2014-01-23T12:34:37Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; decided to include weighted dependency tree approach (as proposed by Roberto). Martin to incorporate into next implementation draft.\n",
          "createdAt": "2014-01-23T15:02:41Z",
          "updatedAt": "2014-01-23T15:02:41Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Osama's counter-proposal: http://www.w3.org/mid/f2d284792b50431685dc551141945bec@SN2PR03MB046.namprd03.prod.outlook.com\n",
          "createdAt": "2014-02-13T03:08:23Z",
          "updatedAt": "2014-02-13T03:08:23Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would question the \"editor-ready\" tag, since there are two proposals without a clear consensus.\n",
          "createdAt": "2014-02-15T00:07:20Z",
          "updatedAt": "2014-02-15T00:07:20Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; going with the dependencies.\n",
          "createdAt": "2014-03-05T14:17:56Z",
          "updatedAt": "2014-03-05T14:17:56Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/http2/http2-spec/commit/846de1caced3db0d4e2675cbb367caac780fe654 for initial version.\n",
          "createdAt": "2014-03-11T09:38:55Z",
          "updatedAt": "2014-03-11T09:38:55Z"
        }
      ]
    },
    {
      "number": 272,
      "id": "MDU6SXNzdWUyMDg5MTEwMQ==",
      "title": "REFUSED error",
      "url": "https://github.com/httpwg/http2-spec/issues/272",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We've seen issues with implementations that treat a RST_STREAM with REFUSED as fatal for the request. The intent, as agreed by Hasan and Jeff, is that this indicates that the request be retried.  Then clients can retry the request.\n\nthe same applies\n\nPerhaps... We say that, at the HTTP layer, clients MUST NOT treat this code as a request failure.\n\nThen, clients can retry the request automatically.\n",
      "createdAt": "2013-10-11T20:02:12Z",
      "updatedAt": "2013-10-11T22:25:35Z",
      "closedAt": "2013-10-11T22:25:35Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "What I meant to say is that the same applies to streams that aren't covered by the last stream identifier in GOAWAY.\n",
          "createdAt": "2013-10-11T20:04:34Z",
          "updatedAt": "2013-10-11T20:04:34Z"
        }
      ]
    },
    {
      "number": 274,
      "id": "MDU6SXNzdWUyMDk2NTQ2MA==",
      "title": "Proposed DoS text",
      "url": "https://github.com/httpwg/http2-spec/issues/274",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "For tracking\n### Denial of Service Considerations\n\nAn HTTP/2.0 connection can demand a greater commitment of resources to\noperate than a HTTP/1.1 connection.  The use of header compression and\nflow control require that an implementation commit resources for\nstoring a greater amount of state.  Settings for these features ensure\nthat memory commitments for these features are strictly bounded.\nProcessing capacity cannot be guarded in the\nsame fashion.\n\nThe <x:ref>SETTINGS/x:ref frame can be abused to cause a peer to\nexpend additional processing time.  This might be done by pointlessly\nchanging settings, setting multiple undefined settings, or changing\nthe same setting multiple times in the same frame.  Similarly, trivial\n<x:ref>WINDOW_UPDATE/x:ref or <x:ref>PRIORITY/x:ref frames\nunnecessarily waste resources.\n\nLarge numbers of small or empty frames can be abused to cause a peer\nto expend time processing frame headers.  Note however that some uses\nare entirely legitimate, such as the sending of an empty\n<x:ref>DATA/x:ref frame to end a stream.\n\nHeader compression also offers some opportunities to waste processing\nresources, see <xref target=\"COMPRESSION\"/> for more details on\npotential abuses.\n\nIn all these cases, there are legitimate reasons to use these protocol\nmechanisms.  These features become a burden only when they are used\nunnecessarily or to excess.\n\nAn endpoint that doesn't monitor this behavior exposes itself to a\nrisk of denial of service attack.  Implementations SHOULD track the\nuse of these types of frames and set limits on their use.  An endpoint\nMAY treat activity that is suspicious as a <xref\ntarget=\"ConnectionErrorHandler\">connection error</xref> of type\n<x:ref>ENHANCE_YOUR_CALM/x:ref.\n",
      "createdAt": "2013-10-14T16:03:51Z",
      "updatedAt": "2013-10-21T17:30:55Z",
      "closedAt": "2013-10-21T17:30:55Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Bikeshedding paragraph 2 and 3:\n\nThe SETTINGS/x:ref frame can be abused to cause a peer to\nexpend unnecessary processing time. This might be done by pointlessly\nchanging settings, setting multiple undefined settings, or changing\nthe same setting multiple times in the same frame. Similarly, \nWINDOW_UPDATE/x:ref or PRIORITY/x:ref frames can also be abused to cause\nunnecessarily waste resources.\n\nLarge numbers of small or empty frames can be abused to cause a peer\nto expend time processing these frames.\n",
          "createdAt": "2013-10-14T16:18:20Z",
          "updatedAt": "2013-10-14T16:18:20Z"
        }
      ]
    },
    {
      "number": 277,
      "id": "MDU6SXNzdWUyMTAyMjY2OA==",
      "title": "Header Field Name comparison",
      "url": "https://github.com/httpwg/http2-spec/issues/277",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Currently, the HTTP/2.0 spec states that header field names are ASCII and that their comparison is case-insensitive (8.1.2).\nThe HPack spec states that header field names are sequences of bytes.\n\nAs such there is a comparison problem at the level of the HPack encoder: as case-insensitive comparison of bytes has no meaning.\n\nAs a resolution, and to keep the HPack spec generic (with header field names as sequences of bytes), the HTTP/2.0 spec could be change to state that header field names are transmitted lowercased to the header compressor.\n",
      "createdAt": "2013-10-15T15:13:24Z",
      "updatedAt": "2013-10-16T03:36:07Z",
      "closedAt": "2013-10-15T23:57:34Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I was just looking to include this, but found the following text: \"Note that header compression could cause case information to be lost.\"  That means that we're confused about what we want to do.  I'll include a fix in the main draft and we'll see how things work out.\n",
          "createdAt": "2013-10-15T23:31:57Z",
          "updatedAt": "2013-10-15T23:31:57Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Technically, lowercasing/uppercasing causes information loss when the input\nisn't assured to not need it.\nOne could conceivably (though not to be recommended) encode something\ninteresting in the fact that the 2nd letter is lowercase instead of not\nbeing lowercase, etc.\n\nOn Tue, Oct 15, 2013 at 4:32 PM, Martin Thomson notifications@github.comwrote:\n\n> I was just looking to include this, but found the following text: \"Note\n> that header compression could cause case information to be lost.\" That\n> means that we're confused about what we want to do. I'll include a fix in\n> the main draft and we'll see how things work out.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/277#issuecomment-26381716\n> .\n",
          "createdAt": "2013-10-15T23:37:00Z",
          "updatedAt": "2013-10-15T23:37:00Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "On 15 October 2013 16:37, grmocg notifications@github.com wrote:\n\n> Technically, lowercasing/uppercasing causes information loss when the\n> input\n> isn't assured to not need it.\n> One could conceivably (though not to be recommended) encode something\n> interesting in the fact that the 2nd letter is lowercase instead of not\n> being lowercase, etc.\n\nIn practice however, there is no guarantee that the 1 bit per character\nthat you get is actually going to survive to reach your intended audience.\nEven in the absence of intermediation, some APIs kill it.\n\nEither way, I've forced the issue in the latest change to the main spec.\nhttp://http2.github.io/http2-spec/#HttpHeaders defines uppercase header\nfield names as being malformed, in the same way that missing colon headers\nare.\n\nhttps://github.com/http2/http2-spec/commit/115bc86868c8ff35a52219bda31e17baea24f088\n",
          "createdAt": "2013-10-16T00:06:59Z",
          "updatedAt": "2013-10-16T00:06:59Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure. Honestly, I don't think it actually helps to point out that there is\npotential information loss anyway given that there isn't _supposed_ to be\nany semantically information contained there...\n\nOn Tue, Oct 15, 2013 at 5:07 PM, Martin Thomson notifications@github.comwrote:\n\n> On 15 October 2013 16:37, grmocg notifications@github.com wrote:\n> \n> > Technically, lowercasing/uppercasing causes information loss when the\n> > input\n> > isn't assured to not need it.\n> > One could conceivably (though not to be recommended) encode something\n> > interesting in the fact that the 2nd letter is lowercase instead of not\n> > being lowercase, etc.\n> \n> In practice however, there is no guarantee that the 1 bit per character\n> that you get is actually going to survive to reach your intended audience.\n> Even in the absence of intermediation, some APIs kill it.\n> \n> Either way, I've forced the issue in the latest change to the main spec.\n> http://http2.github.io/http2-spec/#HttpHeaders defines uppercase header\n> field names as being malformed, in the same way that missing colon headers\n> are.\n> \n> https://github.com/http2/http2-spec/commit/115bc86868c8ff35a52219bda31e17baea24f088\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/277#issuecomment-26383333\n> .\n",
          "createdAt": "2013-10-16T02:17:00Z",
          "updatedAt": "2013-10-16T02:17:00Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "On 15 October 2013 19:17, grmocg notifications@github.com wrote:\n\n> Sure. Honestly, I don't think it actually helps to point out that there is\n> potential information loss anyway given that there isn't _supposed_ to be\n> any semantically information contained there...\n\nAnd I removed that sentence.  There's a little duplication going on, as\nFred pointed out, but we're all good now.\n",
          "createdAt": "2013-10-16T03:36:07Z",
          "updatedAt": "2013-10-16T03:36:07Z"
        }
      ]
    },
    {
      "number": 279,
      "id": "MDU6SXNzdWUyMTEwMTkyNA==",
      "title": "5.1 - reserved (local) and reserved (remote) inconsistently use HEADERS and PRIORITY",
      "url": "https://github.com/httpwg/http2-spec/issues/279",
      "state": "CLOSED",
      "author": "andrewrockwell",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Editorial.\n\nIn 5.1 under \"reserved (local)\" the final block of text contains: \"Receiving any frame other than RST_STREAM or PRIORITY MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.\" though the text above it references the HEADERS and RST_STREAM frame types.\n\nIn 5.1 under \"reserved (remote)\" the final block of text says: \"An endpoint MAY send RST_STREAM or PRIORITY frames in this state to cancel or reprioritize the reserved stream.\" after just stating that \"Receiving any other type of frame [than HEADERS or RST_STREAM] MUST be treated as a stream error (Section 5.4.2) of type PROTOCOL_ERROR.\"\n",
      "createdAt": "2013-10-16T19:01:37Z",
      "updatedAt": "2013-10-21T18:01:21Z",
      "closedAt": "2013-10-21T18:01:21Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in https://github.com/http2/http2-spec/commit/986a650f5e9b803f6bc04d03fd2ca4b270b9f076 (my bad for not getting the commit history right).\n",
          "createdAt": "2013-10-21T18:01:21Z",
          "updatedAt": "2013-10-21T18:01:21Z"
        }
      ]
    },
    {
      "number": 281,
      "id": "MDU6SXNzdWUyMTEyMzMyNw==",
      "title": "Setting the max header size to 0 does not clear out all encoder state",
      "url": "https://github.com/httpwg/http2-spec/issues/281",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "grmocg"
      ],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "In particular, elements to the reference set that are pointing to static table elements are not cleared out.\n\nThere are a couple of obvious ways of fixing this:\n\n1) Include the space used in the reference set in the overhead (e.g. 2-bytes per reference)\n2) explicit SETTING for clearing the compression state \n",
      "createdAt": "2013-10-17T00:35:11Z",
      "updatedAt": "2013-10-21T17:08:53Z",
      "closedAt": "2013-10-21T17:08:53Z",
      "comments": [
        {
          "author": "akalin-chromium",
          "authorAssociation": "NONE",
          "body": "#1 has the problem that it introduces an ambiguity in what to do when reducing the max size (clear out the reference set first?). But if we specify exactly what to do when reducing the max size, then that isn't that bad.\n",
          "createdAt": "2013-10-17T01:17:28Z",
          "updatedAt": "2013-10-17T01:17:28Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(on the list please :) )\n\nOn Wed, Oct 16, 2013 at 6:17 PM, Fred Akalin notifications@github.comwrote:\n\n> #1 https://github.com/http2/http2-spec/issues/1 has the problem that it\n> introduces an ambiguity in what to do when reducing the max size (clear out\n> the reference set first?). But if we specify exactly what to do when\n> reducing the max size, then that isn't that bad.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/281#issuecomment-26472677\n> .\n",
          "createdAt": "2013-10-17T02:08:09Z",
          "updatedAt": "2013-10-17T02:08:09Z"
        }
      ]
    },
    {
      "number": 282,
      "id": "MDU6SXNzdWUyMTE3MzM1NA==",
      "title": "Header table length of name/value doesn't specify encoded or decoded length",
      "url": "https://github.com/httpwg/http2-spec/issues/282",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "grmocg"
      ],
      "labels": [
        "header compression"
      ],
      "body": "We should choose one or the other.\n",
      "createdAt": "2013-10-17T18:22:42Z",
      "updatedAt": "2013-10-18T10:54:47Z",
      "closedAt": "2013-10-18T10:54:47Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I chose to use the decoded length: most implementations will store the headers in decoded form in the header table.\n",
          "createdAt": "2013-10-18T10:54:47Z",
          "updatedAt": "2013-10-18T10:54:47Z"
        }
      ]
    },
    {
      "number": 283,
      "id": "MDU6SXNzdWUyMTE3MzUzNw==",
      "title": "Ambiguity when using literal-indexed-name and evicting the referenced entry",
      "url": "https://github.com/httpwg/http2-spec/issues/283",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "header compression"
      ],
      "body": "There is currently ambiguity as to how to deal with the situation whereby the decoder encounters a literal using an indexed name, and while making space for the new header field, then referenced element (and thus the name part of it) is evicted.\n",
      "createdAt": "2013-10-17T18:26:07Z",
      "updatedAt": "2013-10-21T17:10:34Z",
      "closedAt": "2013-10-21T17:10:34Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since there was no obvious consensus on list, a solution was chose which solves this problem and which solves the encoder-state not being zero w.r.t. reference set at the same time.\n",
          "createdAt": "2013-10-21T17:10:34Z",
          "updatedAt": "2013-10-21T17:10:34Z"
        }
      ]
    },
    {
      "number": 284,
      "id": "MDU6SXNzdWUyMTE3Mzk5Nw==",
      "title": "Huffman encoding should probably not always be required",
      "url": "https://github.com/httpwg/http2-spec/issues/284",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "header compression"
      ],
      "body": "The encoder should be able to make a choice about whether or not to use huffman encoding.\n\nWe do know that huffman encoding will bloat the encoded representation when parts of the code-space are used which are infrequently used. This.. sucks.\n",
      "createdAt": "2013-10-17T18:30:50Z",
      "updatedAt": "2013-10-21T17:09:40Z",
      "closedAt": "2013-10-21T17:09:40Z",
      "comments": []
    },
    {
      "number": 285,
      "id": "MDU6SXNzdWUyMTE3NDEzOQ==",
      "title": "Amibguity exists w.r.t. how huffman-encoded strings are terminated",
      "url": "https://github.com/httpwg/http2-spec/issues/285",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "header compression"
      ],
      "body": "- Is encountering a name/value without End-Of-String an error?\n- Is encountering a name/value with more bytes after EOS an error?\n  - Appears to be string delimiter for values?\n\nWe have a few options here.\n1) Represent length of huffman-encoded strings as _bits_ in the length field\n   I've done this, it works, but it bloats the encoding.\n2) Represent length of huffman-encoded strings as bytes and\n   a) include an EOF (or EOS :) ) terminal to indicate when the last valid bit was read\n   b) pad the last byte with bits from one of the 8+ bit symbols\n   c) assume that the last character successfully decoded within the bytes is the last one\n       intended, regardless of choice of a/b\n\n2b suffers if we don't have characters like this, though we could manufacture one\n(perhaps EOF/EOS?). Hmm.. this could work better than what we have now as it\nwould free up some a lower-bit-length code for an element of application data.\n\n2c is probably a good idea regardless, as it means that the EOF/EOS is never going\nto require adding additional bytes to the encoded data.\n\nCurrent proposal 2b+2c.\n",
      "createdAt": "2013-10-17T18:32:11Z",
      "updatedAt": "2013-10-17T21:27:42Z",
      "closedAt": "2013-10-17T21:27:42Z",
      "comments": []
    },
    {
      "number": 286,
      "id": "MDU6SXNzdWUyMTE4NjA0MA==",
      "title": "Use :authority instead of :host in HPACK spec",
      "url": "https://github.com/httpwg/http2-spec/issues/286",
      "state": "CLOSED",
      "author": "akalin-chromium",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "header compression"
      ],
      "body": "We decided to replace :host with :authority, right? If so, we should probably update the static table in the HPACK spec to reflect that.\n",
      "createdAt": "2013-10-17T21:16:31Z",
      "updatedAt": "2013-10-17T21:34:06Z",
      "closedAt": "2013-10-17T21:34:06Z",
      "comments": []
    },
    {
      "number": 287,
      "id": "MDU6SXNzdWUyMTE5MDA2OQ==",
      "title": "Huffman tables need to be regenerated",
      "url": "https://github.com/httpwg/http2-spec/issues/287",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "header compression"
      ],
      "body": "The huffman tables need regenerating.\nAt a minimum EOS needs to be at least 7 bits long.\n\nIt is probably preferable that the bit prefix for the long codes are zeroes instead of ones (i.e. if the same algorithm is used as was used to generate the code tables the first time, then left and right should be swapped/the bits should be xor'd)\n",
      "createdAt": "2013-10-17T22:33:41Z",
      "updatedAt": "2013-10-21T17:09:33Z",
      "closedAt": "2013-10-21T17:09:33Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "While EOS currently has a '1's prefix, good enough for now.\n",
          "createdAt": "2013-10-21T17:09:33Z",
          "updatedAt": "2013-10-21T17:09:33Z"
        }
      ]
    },
    {
      "number": 288,
      "id": "MDU6SXNzdWUyMTE5MDE1OA==",
      "title": "Static table should be ordered based on statistical analysis",
      "url": "https://github.com/httpwg/http2-spec/issues/288",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "The static table needs to be ordered base upon a statistical analysis of utility (i.e. size of entry \\* frequency), with the most useful elements having the smallest indices.\n",
      "createdAt": "2013-10-17T22:35:37Z",
      "updatedAt": "2014-01-24T15:41:14Z",
      "closedAt": "2014-01-24T15:41:14Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Good idea.  Isn't it frequency / size ?\n\nNo point in counting the values for those entries that have them, though you might drive the utility up artificially to account for reuse of the value.\n",
          "createdAt": "2013-10-17T22:57:25Z",
          "updatedAt": "2013-10-17T22:57:25Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What I mean is to order headers by sorting by: frequency*size, descending.\n\nif header \"foobarbaz\" is used the same number of times as header \"foo\",\nthen having encoded \"foobarbaz\" with a smaller index has ~3x the utility\n(modulo opcode size) of encoding \"foo\" at that index.\nIn any case, I suspect we're agreeing and just think of the computation\nbackwards? :)\n\nI agree that there is some possibility of biasing the future use.\nThe question there is how much we are worried about it-- thanks to the ACK\nfor settings, the table used in the future could be negotiated to be\ndifferent from what we have today, at the potential cost of 1 RT of\nthrowing bytes away for non-forwards-compatible implementations.\n\n(we might want to discuss the biasing thing on-list instead of here...)\n\nOn Thu, Oct 17, 2013 at 3:57 PM, Martin Thomson notifications@github.comwrote:\n\n> Good idea. Isn't it frequency / size ?\n> \n> No point in counting the values for those entries that have them, though\n> you might drive the utility up artificially to account for reuse of the\n> value.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/288#issuecomment-26560098\n> .\n",
          "createdAt": "2013-10-17T23:14:36Z",
          "updatedAt": "2013-10-17T23:14:36Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that we should put the entries with a non-empty value first. Then sort the remaining ones.\n",
          "createdAt": "2013-10-18T16:28:15Z",
          "updatedAt": "2013-10-18T16:28:15Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That sounds fine for now. That should result in an ordering very similar to\nwhat we have now in the sled.\n\nEventually I'd like to do a more rigorous analysis by getting the client\nside folks to compute frequency stats for this using stats aggregation.\nOn Oct 18, 2013 9:28 AM, \"Herv\u00e9\" notifications@github.com wrote:\n\n> I think that we should put the entries with a non-empty value first. Then\n> sort the remaining ones.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/288#issuecomment-26609776\n> .\n",
          "createdAt": "2013-10-18T16:37:47Z",
          "updatedAt": "2013-10-18T16:37:47Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; closing with no action.\n",
          "createdAt": "2014-01-24T15:41:14Z",
          "updatedAt": "2014-01-24T15:41:14Z"
        }
      ]
    },
    {
      "number": 289,
      "id": "MDU6SXNzdWUyMTI5NTE1Ng==",
      "title": "Connection header",
      "url": "https://github.com/httpwg/http2-spec/issues/289",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "editorial"
      ],
      "body": "In the latest HTTP/2.0 draft, section 3.2. says:\n\n   The first HTTP/2.0 frame sent by the server is a SETTINGS [SETTINGS]\n   frame (Section 6.5).  Upon receiving the 101 response, the client\n   sends a connection header (Section 3.5), which includes a SETTINGS\n   [SETTINGS] frame.\n\nand section 3.5 says:\n\n   The client connection header is a sequence of 24 octets, which in hex\n   notation are:\n\n   505249202a20485454502f322e300d0a0d0a534d0d0a0d0a\n\n   (the string \"PRI \\* HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\") followed by a\n   SETTINGS [SETTINGS] frame (Section 6.5).\n\nI guess the the former means a connection header \"includes\" SETTING frame but the latter means \na connection header \"is followed by\" a SETTINGS frame. Which one is correct?\n",
      "createdAt": "2013-10-21T04:26:17Z",
      "updatedAt": "2013-10-21T17:58:53Z",
      "closedAt": "2013-10-21T17:58:53Z",
      "comments": []
    },
    {
      "number": 290,
      "id": "MDU6SXNzdWUyMTMyOTY3NQ==",
      "title": "Example section of spec needs filling in",
      "url": "https://github.com/httpwg/http2-spec/issues/290",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "It is currently empty after the latest round of changes.\n",
      "createdAt": "2013-10-21T17:12:39Z",
      "updatedAt": "2013-11-05T23:07:52Z",
      "closedAt": "2013-11-05T23:07:52Z",
      "comments": []
    },
    {
      "number": 292,
      "id": "MDU6SXNzdWUyMTM0OTcwOQ==",
      "title": "Cookie crumbling",
      "url": "https://github.com/httpwg/http2-spec/issues/292",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Turns out that splitting the Cookie header into pieces improves compression efficiency considerably.  It also turns out that we haven't done that, despite talking about it, testing code with it, etc...\n",
      "createdAt": "2013-10-21T22:36:45Z",
      "updatedAt": "2013-11-15T19:41:10Z",
      "closedAt": "2013-11-15T19:41:10Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've added this to the main spec under the HTTP mapping.  The compression spec doesn't need to add any special handling for cookies.\n",
          "createdAt": "2013-11-15T19:41:02Z",
          "updatedAt": "2013-11-15T19:41:02Z"
        }
      ]
    },
    {
      "number": 293,
      "id": "MDU6SXNzdWUyMTM1MTEyOQ==",
      "title": "[HPACK] Pseudocode for integer decoding",
      "url": "https://github.com/httpwg/http2-spec/issues/293",
      "state": "CLOSED",
      "author": "akalin-chromium",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "We have pseudocode for integer encoding, but not for decoding. This may lead to problems for people smart enough to implement the encoding pseudocode, but not smart enough to derive a decoding implementation correctly (like me :).\n",
      "createdAt": "2013-10-21T23:08:41Z",
      "updatedAt": "2014-02-14T08:40:21Z",
      "closedAt": "2014-02-14T08:40:21Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "True, but if collectively we are not smart enough to write a correct pseudocode for integer decoding, we've got a bigger problem!\n",
          "createdAt": "2013-10-29T17:59:08Z",
          "updatedAt": "2013-10-29T17:59:08Z"
        },
        {
          "author": "molnarg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "When implementing this for node-http2, I wrote the pseudocode for this. I didn't check the latest compression spec (-04) yet, but I guess that the integer encoding did not change.\n1. Set I to the number coded on the lower N bits of the first byte\n2. If I is smaller than 2^N - 1 then return I\n3. Else the number is encoded on more than one byte, so do the following steps:\n   1. Set M to 0\n   2. While returning I\n      1. Let B be the next byte (the first byte if N is 0)\n      2. Read out the lower 7 bits of B and multiply it with 2^M\n      3. Increase I with this number\n      4. Increase M by 7\n      5. Return I if the most significant bit of B is 0\n",
          "createdAt": "2013-11-02T21:38:05Z",
          "updatedAt": "2013-11-02T21:38:05Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@hruellan did this miss -06?\n",
          "createdAt": "2014-02-13T19:36:39Z",
          "updatedAt": "2014-02-13T19:36:39Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed with 95fa6f30d358bfd6c96bae136ed8ab8a8d28072b.\n",
          "createdAt": "2014-02-14T08:40:21Z",
          "updatedAt": "2014-02-14T08:40:21Z"
        }
      ]
    },
    {
      "number": 294,
      "id": "MDU6SXNzdWUyMTM3ODI1MA==",
      "title": "Add host header field to the static table",
      "url": "https://github.com/httpwg/http2-spec/issues/294",
      "state": "CLOSED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Now host header is not prohibited in HTTP/2, we should consider to add it to the static header table.\n",
      "createdAt": "2013-10-22T12:24:19Z",
      "updatedAt": "2013-11-12T16:33:14Z",
      "closedAt": "2013-11-12T16:33:14Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If we want to encourage implementations to omit host, we should probably leave it out of the static header table.\n\nSee: http://lists.w3.org/Archives/Public/ietf-http-wg/2013OctDec/0309.html\n",
          "createdAt": "2013-10-29T17:56:33Z",
          "updatedAt": "2013-10-29T17:56:33Z"
        }
      ]
    },
    {
      "number": 296,
      "id": "MDU6SXNzdWUyMTQyMzcxMA==",
      "title": "HPACK-04 examples maybe incorrect",
      "url": "https://github.com/httpwg/http2-spec/issues/296",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "grmocg"
      ],
      "labels": [
        "header compression"
      ],
      "body": "The javascript implementation used to generate examples for HPACK-04 accidentally implemented a stack instead of a FIFO for expiry.\n\nThe indices in the examples are thus potentially wrong if expiry should have happened, but didn't.\nI need to verify if this occurred or not.\n",
      "createdAt": "2013-10-22T23:04:50Z",
      "updatedAt": "2013-10-22T23:12:36Z",
      "closedAt": "2013-10-22T23:12:36Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The examples didn't trigger eviction, and so are correct.\n",
          "createdAt": "2013-10-22T23:12:36Z",
          "updatedAt": "2013-10-22T23:12:36Z"
        }
      ]
    },
    {
      "number": 297,
      "id": "MDU6SXNzdWUyMTQyNDY4OA==",
      "title": "HPACK examples should include the following:",
      "url": "https://github.com/httpwg/http2-spec/issues/297",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "encoding decoding of:\n  header set consisting of single header with non-indexed name\n  header set consisting of single header with indexed name\n  header set consisting of many headers, including both indexed and non-indexed.\n\nencoding and decoding of:\n  value or name string with huffman\n  value or name string without huffman\n\neviction of elements when both huffman and non-huffman encoding was used\n(huffman coding is important there because we judge size based on the decoded size, not the encoded size)\n\nAdding a new entry which references the entry which will be evicted upon the new entry's addition to the state table.\n",
      "createdAt": "2013-10-22T23:28:25Z",
      "updatedAt": "2013-11-21T16:48:21Z",
      "closedAt": "2013-11-21T16:48:21Z",
      "comments": [
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd like to see the following scenario in the example, since I believe this is a common bug. I saw it in the several implementations:\nWhen encoding headers, implied header (aka, common header, which is in the reference set, but not emitted actually) is evicted. Encoder is required to detect this situation somehow and react to it.\n\nThe relevant discussion was happend in this thread (latter half of the mail):\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2013JulSep/1296.html\n",
          "createdAt": "2013-10-23T12:38:27Z",
          "updatedAt": "2013-10-23T12:38:27Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks Tatsuhiro!\n\nAlso:\nusing indexed representation from the static set with max size of zero.\n",
          "createdAt": "2013-10-23T18:08:38Z",
          "updatedAt": "2013-10-23T18:08:38Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All the suggestions should be covered by b41abb24ec8c8d71b6bbfab45ab42626828a12d1.\n",
          "createdAt": "2013-11-21T16:48:21Z",
          "updatedAt": "2013-11-21T16:48:21Z"
        }
      ]
    },
    {
      "number": 300,
      "id": "MDU6SXNzdWUyMTYwNjcyMA==",
      "title": "SETTINGS_HEADER_TABLE_SIZE should be negotiable",
      "url": "https://github.com/httpwg/http2-spec/issues/300",
      "state": "CLOSED",
      "author": "akalin-chromium",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Otherwise, there's no recourse if one endpoint sets the setting to some large value that the other endpoint cannot handle, other than closing the connection.\n",
      "createdAt": "2013-10-25T18:10:04Z",
      "updatedAt": "2013-10-25T18:44:10Z",
      "closedAt": "2013-10-25T18:44:10Z",
      "comments": [
        {
          "author": "akalin-chromium",
          "authorAssociation": "NONE",
          "body": "SETTINGS_HEADER_TABLE_SIZE applies to the sender's decode table only. In that case, a memory-limited endpoint can simply send that setting to a suitable value and use min(suitable value, other endpoint's SETTINGS_HEADER_TABLE_SIZE) for its encode state.\n",
          "createdAt": "2013-10-25T18:44:10Z",
          "updatedAt": "2013-10-25T18:44:10Z"
        }
      ]
    },
    {
      "number": 301,
      "id": "MDU6SXNzdWUyMTc5NDU1Ng==",
      "title": "Invalid headers in example",
      "url": "https://github.com/httpwg/http2-spec/issues/301",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 8.1.3 says that Connection, Keep-Alive, Proxy-Connection, TE, Transfer-Encoding, and Upgrade headers are not permitted in HTTP/2.0.\n\nThe immediately preceding section, 8.1.2, concludes with an example of how to send trailing headers, using Transfer-Encoding: chunked and TE: trailers.  If these headers aren't allowed, the example should be corrected, and how trailers are encoded instead should be reflected here.\n",
      "createdAt": "2013-10-29T23:02:40Z",
      "updatedAt": "2013-11-02T18:52:06Z",
      "closedAt": "2013-11-02T18:52:06Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "You will note that those examples show equivalence of HTTP/1.1 messages with HTTP/2.0.  None of the HTTP/2.0 examples include the offending headers.\n",
          "createdAt": "2013-11-02T18:52:06Z",
          "updatedAt": "2013-11-02T18:52:06Z"
        }
      ]
    },
    {
      "number": 303,
      "id": "MDU6SXNzdWUyMTk4OTA2Nw==",
      "title": "[HPACK] Literal header encoding section should be clarified re. when the literal name form can be used",
      "url": "https://github.com/httpwg/http2-spec/issues/303",
      "state": "CLOSED",
      "author": "akalin-chromium",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "4.3.1 says (literal header encoding):\n\n   If the header field name matches the header field name of a (name,\n   value) pair stored in the Header Table or Static Table, the index of\n   that entry, increased by one (index + 1), is represented as an\n   integer with a 6-bit prefix.  Note that if the index is strictly\n   below 63, only one byte is used for this representation.\n\nThis seems to imply that the indexed form must/should be used if the name already exists in the header table. However, the intent is that the literal name form may be used even if the name already exists in the header table. The language should be clarified.\n\nI recall at least one person coming to this conclusion in the interop meeting.\n",
      "createdAt": "2013-11-01T22:47:39Z",
      "updatedAt": "2013-11-12T16:54:17Z",
      "closedAt": "2013-11-12T16:54:17Z",
      "comments": []
    },
    {
      "number": 304,
      "id": "MDU6SXNzdWUyMjA5NTg0OA==",
      "title": "ALPN string/modifier needs to be defined for huffman encoding experimentation",
      "url": "https://github.com/httpwg/http2-spec/issues/304",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "This is a temporary measure, but we need to define ALPN strings for indicating that the compressor/decompressor is able/willing to do huffman encoding.\n",
      "createdAt": "2013-11-05T02:22:01Z",
      "updatedAt": "2013-11-05T03:21:06Z",
      "closedAt": "2013-11-05T03:21:06Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Nope; plunge the knife in. This will not be negotiated.\n",
          "createdAt": "2013-11-05T03:21:06Z",
          "updatedAt": "2013-11-05T03:21:06Z"
        }
      ]
    },
    {
      "number": 305,
      "id": "MDU6SXNzdWUyMjA5NzgyNQ==",
      "title": "Header ordering should be preserved",
      "url": "https://github.com/httpwg/http2-spec/issues/305",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "header compression"
      ],
      "body": "In addition to the general constraints on headers, cookies have an additional ordering constraint, once #292 is addressed.\n",
      "createdAt": "2013-11-05T03:34:41Z",
      "updatedAt": "2013-12-13T05:24:59Z",
      "closedAt": "2013-12-13T05:24:59Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are at least to ways of providing ordering between headers:\n- Using null-separated list of values, and mandating that the ordering of the values in these lists must be preserved.\n- Relying on the emission order. The only difficulty here is that the ordering of the headers in the reference set can not be chosen by the sending application. However tricks (like double indexed representation) can be used by the encoder to enforce an order.\n\nIf we are only targeting the ordering of cookies, then using null-separated list of values is sufficient.\n- It stays in the main HTTP/2.0 spec, therefore is not dependent of the header compression layer.\n- It allows removing from HPACK the emission ordering constraints.\n",
          "createdAt": "2013-11-21T16:56:47Z",
          "updatedAt": "2013-11-21T16:56:47Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Can this be closed now?\n",
          "createdAt": "2013-12-13T04:40:13Z",
          "updatedAt": "2013-12-13T04:40:13Z"
        }
      ]
    },
    {
      "number": 306,
      "id": "MDU6SXNzdWUyMjA5Nzg4Nw==",
      "title": "Reference Alt-Svc",
      "url": "https://github.com/httpwg/http2-spec/issues/306",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "upgrade"
      ],
      "body": "For learning about whether a server supports HTTP/2.0, http://tools.ietf.org/html/draft-nottingham-httpbis-alt-svc has been proposed as an experiment.\n\n@mnot will first revise the draft to make it clearer in scope and mechanism.  Then we will add a reference to it as one of the ways that you can learn about HTTP/2.0 support.\n",
      "createdAt": "2013-11-05T03:37:22Z",
      "updatedAt": "2014-01-23T09:15:08Z",
      "closedAt": "2014-01-23T09:15:08Z",
      "comments": []
    },
    {
      "number": 308,
      "id": "MDU6SXNzdWUyMjQxNjcwNw==",
      "title": "Clariying the Reference Set definition",
      "url": "https://github.com/httpwg/http2-spec/issues/308",
      "state": "CLOSED",
      "author": "molnarg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The [current definition](http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-04#section-3.1.3) begins with this sentence:\n\n> A reference set is an unordered set of references to entries either within the header table or the static table.\n\nBut, if my understanding is correct, this is not true. The reference set always contains references only to the Header Table, since entries from the Static Table are copied to the Header Table before addition to the Reference Set.\n",
      "createdAt": "2013-11-10T20:46:45Z",
      "updatedAt": "2013-11-14T18:38:02Z",
      "closedAt": "2013-11-14T18:38:02Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "True, this needs to be corrected.\n-=R\n\nOn Sun, Nov 10, 2013 at 12:46 PM, G\u00e1bor Moln\u00e1r notifications@github.comwrote:\n\n> The current definitionhttp://tools.ietf.org/html/draft-ietf-httpbis-header-compression-04#section-3.1.3begins with this sentence:\n> \n> A reference set is an unordered set of references to entries either within\n> the header table or the static table.\n> \n> But, if my understanding is correct, this is not true. The reference set\n> always contains references only to the Header Table, since entries from the\n> Static Table are copied to the Header Table before addition to the\n> Reference Set.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/308\n> .\n",
          "createdAt": "2013-11-11T05:10:42Z",
          "updatedAt": "2013-11-11T05:10:42Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also caught it and corrected it.\n",
          "createdAt": "2013-11-14T18:38:02Z",
          "updatedAt": "2013-11-14T18:38:02Z"
        }
      ]
    },
    {
      "number": 312,
      "id": "MDU6SXNzdWUyMjY5MjU0Mw==",
      "title": "please use example host names instead of foo.com and bar.com",
      "url": "https://github.com/httpwg/http2-spec/issues/312",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "see http://tools.ietf.org/html/rfc2606\n",
      "createdAt": "2013-11-14T21:03:07Z",
      "updatedAt": "2013-11-21T16:47:54Z",
      "closedAt": "2013-11-21T16:47:54Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed by b41abb24ec8c8d71b6bbfab45ab42626828a12d1.\n",
          "createdAt": "2013-11-21T16:47:54Z",
          "updatedAt": "2013-11-21T16:47:54Z"
        }
      ]
    },
    {
      "number": 313,
      "id": "MDU6SXNzdWUyMjY5Mjc1Mw==",
      "title": "break down examples into smaller artwork fragments",
      "url": "https://github.com/httpwg/http2-spec/issues/313",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Please break down the examples into smaller units of <artwork> for better readability and better page break control.\n\n(I can do that myself by I suspect the appendix might be autogenerated?)\n",
      "createdAt": "2013-11-14T21:07:08Z",
      "updatedAt": "2013-11-21T16:47:25Z",
      "closedAt": "2013-11-21T16:47:25Z",
      "comments": []
    },
    {
      "number": 314,
      "id": "MDU6SXNzdWUyMjcwOTU3Ng==",
      "title": "HTTP2 and http:// URIs on the \"open\" internet",
      "url": "https://github.com/httpwg/http2-spec/issues/314",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "security",
        "writeup"
      ],
      "body": "A number of browser implementers have stated an intent to only implement HTTP/2 over TLS for traffic over the \"open\" internet.\n\nThey can achieve that today by only implementing HTTP/2 for https:// URIs, requiring site that wish to use the new protocol to redirect http:// URIs, possibly using HSTS to \"pin\" that upgrade.\n\nAs such, we do not necessarily need to specify this with requirements (e.g., with a MUST or MUST NOT); those sites that want to use the new protocol with these browsers will implement the pattern above.\n\nHowever, to promote interoperability, we might want to give guiding language or even requirements to frame this. This issue is specifically for collecting proposals for such text.\n",
      "createdAt": "2013-11-15T02:44:46Z",
      "updatedAt": "2014-12-04T23:59:21Z",
      "closedAt": "2014-01-24T10:26:03Z",
      "comments": [
        {
          "author": "phluid61",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just playing devil's advocate, but a simple option is to say nothing.\n",
          "createdAt": "2013-11-15T05:51:35Z",
          "updatedAt": "2013-11-15T05:51:35Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Yep, that's definitely one option. \n",
          "createdAt": "2013-11-15T07:05:36Z",
          "updatedAt": "2013-11-15T07:05:36Z"
        },
        {
          "author": "lanthaler",
          "authorAssociation": "NONE",
          "body": "Using https instead of http doesn't just change the bits on the wire but has also a number of other important side effects (at least) in browsers. For example referrers may not be sent anymore, information in form fields isn't stored anymore for autocompletion etc. etc. I think it would be very beneficial to still keep this distinction of sensitivity/confidentiality. Whether traffic to http URIs is then (optimistically) encrypted or not, doesn't really matter to the average end user. The different UX on the hand does.\n",
          "createdAt": "2013-11-15T11:11:29Z",
          "updatedAt": "2013-11-15T11:11:29Z"
        },
        {
          "author": "michaelrsweet",
          "authorAssociation": "NONE",
          "body": "Since MITM https:// proxies exist and are widely deployed, https:// is no safer than http:// for open internet usage.\n\nI think we need to revisit the existing HTTP/1.1 Upgrade header, which specifically talks about supporting future major versions of HTTP. Aside from addressing how HTTP/2.0 proxies would work/interoperate, it would seem to deal with the perceived reliability issues as well.\n",
          "createdAt": "2013-11-15T16:45:48Z",
          "updatedAt": "2013-11-15T16:45:48Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Gents,\n\nGood to see the discussion, but it needs to take place on the list not here. \n\nThanks,\n",
          "createdAt": "2013-11-17T20:28:30Z",
          "updatedAt": "2013-11-17T20:28:30Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; the WG agreed that we will allow HTTP2 to be used with HTTP URIs, with or without TLS, without constraints from us.\n",
          "createdAt": "2014-01-24T10:26:03Z",
          "updatedAt": "2014-01-24T10:26:03Z"
        }
      ]
    },
    {
      "number": 315,
      "id": "MDU6SXNzdWUyMjcwOTY2OQ==",
      "title": "HTTP:// URIs over TLS",
      "url": "https://github.com/httpwg/http2-spec/issues/315",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "security",
        "writeup"
      ],
      "body": "One of the approaches considered for improving security is opportunistic encryption. \n\nTwo variants have been discussed; \"relaxed\" where server authentication is not checked, and \"strict\", where it is. In discussion, it appears that there's a preference for just using HTTPS URLs over \"strict\", but there is still some interest in \"relaxed.\"\n\nThere appears to be some implementer interest in this approach, but not yet readiness to implement, so this issue is on hold.\n\nNote that opp encryption might also be applied to HTTP/1.1.\n",
      "createdAt": "2013-11-15T02:48:33Z",
      "updatedAt": "2014-12-04T23:59:27Z",
      "closedAt": "2014-06-06T15:48:22Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See a breakdown of terminology at:\n  https://github.com/http2/http2-spec/wiki/Encryption-Terminology\n",
          "createdAt": "2013-11-21T00:50:08Z",
          "updatedAt": "2013-11-21T00:50:08Z"
        },
        {
          "author": "paulehoffman",
          "authorAssociation": "NONE",
          "body": "The description of this topic still only lists draft-nottingham-http2-encryption as an approach. Please add draft-hoffman-httpbis-minimal-unauth-enc, which does opportunistic encryption in a very different way than draft-nottingham-http2-encryption.\n",
          "createdAt": "2014-01-01T17:10:29Z",
          "updatedAt": "2014-01-01T17:10:29Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; further discussion in London; mark and patrick to revise draft and experiment. However, this will not block HTTP/2 unless delay is minimal.\n",
          "createdAt": "2014-01-24T15:17:04Z",
          "updatedAt": "2014-01-24T15:17:04Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Notes from Zurich:\n\n# HTTP URIs over TLS\n1. no\n\n## Authentication\n1. unauthenticated\n2. authenticated == HTTPS\n3. not WebPKI-authenticated (TACK? DANE? ETC. ETC.) -- NOT US\n\n## Discovery\n\na. In-band Hint (header) - optional to use.\n\nb. DNS -- not now.\n  I. SRV\n  II. TXT\n  III. SVCINFO\n  IV. HASTLS\n\nc. use existing 443 connection for defaulted ports - some interest (esp. in addition to other mechanisms); needs refusal. SETTINGS indicator for support; refusal error code (?)\n\nd. encryption inside HTTP/2 -- no\n\ne. speculative connection -- we will say nothing about this\n\n## Add-ons\n\ni. Refusal (you got the endpoint wrong)\n\nii. implicit shortcut\n\niii. pinning\n",
          "createdAt": "2014-01-24T15:28:43Z",
          "updatedAt": "2014-01-24T15:28:43Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See also:\n  https://tools.ietf.org/html/draft-miller-http-unauth-tls\n",
          "createdAt": "2014-02-19T01:11:38Z",
          "updatedAt": "2014-02-19T01:11:38Z"
        },
        {
          "author": "paulehoffman",
          "authorAssociation": "NONE",
          "body": "It would be good if the community could acknowledge the differences between opportunistic (doing something good that wasn't asked for) and unauthenticated (a security state).\n\n--Paul Hoffman\n",
          "createdAt": "2014-02-19T01:46:46Z",
          "updatedAt": "2014-02-19T01:46:46Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; support for documenting this.\n",
          "createdAt": "2014-03-05T16:50:13Z",
          "updatedAt": "2014-03-05T16:50:13Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "See also:  http://tools.ietf.org/html/draft-hoffman-uta-opportunistic-tls-00\nwhich was discussed in UTA.  \n",
          "createdAt": "2014-03-08T17:36:19Z",
          "updatedAt": "2014-03-08T17:36:19Z"
        },
        {
          "author": "mcilvena",
          "authorAssociation": "NONE",
          "body": "@mnot What are the fundamental difference between opportunistic TLS and RFC 2817?\n",
          "createdAt": "2014-03-11T22:45:54Z",
          "updatedAt": "2014-03-11T22:45:54Z"
        },
        {
          "author": "bagder",
          "authorAssociation": "NONE",
          "body": "@mcilvena take it to the mailing list? RFC2817 is quite different than the current Alt-Svc proposal. See http://tools.ietf.org/html/draft-nottingham-httpbis-alt-svc-03\n",
          "createdAt": "2014-03-12T07:49:15Z",
          "updatedAt": "2014-03-12T07:49:15Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "https://tools.ietf.org/html/draft-nottingham-http2-encryption-03 is the latest proposal in this regard.\n",
          "createdAt": "2014-06-02T22:37:14Z",
          "updatedAt": "2014-06-02T22:37:14Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; agreed to adopt as WG Experimental. Martin to edit.\n",
          "createdAt": "2014-06-06T15:48:22Z",
          "updatedAt": "2014-06-06T15:48:22Z"
        }
      ]
    },
    {
      "number": 316,
      "id": "MDU6SXNzdWUyMjcwOTgyMg==",
      "title": "\"Explicit\" Proxies",
      "url": "https://github.com/httpwg/http2-spec/issues/316",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "security"
      ],
      "body": "In some use cases, the network requires that traffic between a user agent and servers be visible to it (e.g., for application of policy, filtering, compliance requirements).\n\nCurrently, this is sometimes achieved using a combination of interception at a lower layer and TLS man-in-the-middle for HTTPS URIs. \n\nSeveral people have suggested that allowing an \"explicit\" proxy to be configured, where the proxy terminates TLS from the client, enforces its policy (etc.), and then uses a \"fresh\" TLS connection to the server, would enable these use cases.\n\nA number of issues need to be addressed as part of proposals, including:\n1. User experience recommendations (note that this might be out of scope for this WG, and therefore need to be done through a liaison)\n2. Security requirements for both the client and proxy (especially since the proxy takes on responsibility for terminating TLS to the origin)\n3. A possible opt-out mechanism for origin servers\n4. Protection against new kinds of attacks that exploit this mechanism\n5. Proxy discovery\n",
      "createdAt": "2013-11-15T02:54:43Z",
      "updatedAt": "2014-01-24T15:14:49Z",
      "closedAt": "2014-01-24T15:14:49Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; not currently in scope for HTTP/2, but a continuing item of discussion for the WG overall.\n",
          "createdAt": "2014-01-24T15:14:49Z",
          "updatedAt": "2014-01-24T15:14:49Z"
        }
      ]
    },
    {
      "number": 317,
      "id": "MDU6SXNzdWUyMjcwOTg3MQ==",
      "title": "TLS man-in-the-middle",
      "url": "https://github.com/httpwg/http2-spec/issues/317",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "liaison",
        "security"
      ],
      "body": "Many have noted that TLS man-in-the-middle is becoming a serious problem on the Web.\n\nThis issue tracks possible mitigations, for potential reference from HTTP/2. Note that this is a liaison issue; we do not define the mechanisms themselves, and discussion regarding them (as opposed to their use in HTTP) is out of scope for the WG.\n",
      "createdAt": "2013-11-15T02:56:23Z",
      "updatedAt": "2014-01-24T09:52:55Z",
      "closedAt": "2014-01-24T09:52:55Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Most relevant proposal in the IETF today is:\n  http://tools.ietf.org/html/draft-ietf-websec-key-pinning-08\n",
          "createdAt": "2013-11-15T03:10:04Z",
          "updatedAt": "2013-11-15T03:10:04Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; out of scope for us, and nothing external seems to be happening yet.\n",
          "createdAt": "2014-01-24T09:52:55Z",
          "updatedAt": "2014-01-24T09:52:55Z"
        }
      ]
    },
    {
      "number": 318,
      "id": "MDU6SXNzdWUyMjcxMDAxNw==",
      "title": "TLS profile for HTTP",
      "url": "https://github.com/httpwg/http2-spec/issues/318",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "liaison",
        "security"
      ],
      "body": "In #172, we set a baseline for TLS implementation. This issue is for tracking further improvements for consideration in how HTTP uses TLS; e.g. TLS 1.3, PFS suites, etc. \n\nNote that this is a liaison issue; the definition of the actual mechanisms is out of scope for our WG, we merely want to figure out what we want to reference / encourage / require.\n",
      "createdAt": "2013-11-15T03:01:01Z",
      "updatedAt": "2014-01-24T15:12:45Z",
      "closedAt": "2014-01-24T15:12:45Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "New IETF list on randomness in our protocols:\n  http://www.ietf.org/mail-archive/web/dsfjdssdfsd/current/maillist.html\n",
          "createdAt": "2013-11-15T04:20:53Z",
          "updatedAt": "2013-11-15T04:20:53Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "http://tools.ietf.org/html/draft-sheffer-tls-bcp seems applicable here.\n",
          "createdAt": "2013-11-15T15:19:35Z",
          "updatedAt": "2013-11-15T15:19:35Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; referencing draft-sheffer-tls-bcp seems like the way to go. Informative vs. Normative TBD, but biased towards normative.\n\nIf there is a significant scheduling issue, we may pull the reference.\n\nAdding an error code to indicate a bad security profile may be helpful; @grmocg to open a separate issue.\n",
          "createdAt": "2014-01-24T09:06:05Z",
          "updatedAt": "2014-01-24T09:06:05Z"
        }
      ]
    },
    {
      "number": 319,
      "id": "MDU6SXNzdWUyMjcxMDEyMQ==",
      "title": "User Experience for TLS ",
      "url": "https://github.com/httpwg/http2-spec/issues/319",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "liaison",
        "security"
      ],
      "body": "The user experience for TLS -- including but not limited to how certificates and certificate authorities are presented -- could be better.\n\nThis is a liaison issue to track any efforts outside the WG (whether in the IETF or elsewhere) to improve it, for possible reference or requirements from HTTP/2.\n",
      "createdAt": "2013-11-15T03:04:39Z",
      "updatedAt": "2014-01-24T08:28:44Z",
      "closedAt": "2014-01-24T08:28:44Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; closed with no action, due to both a lack of proposals / activity, and a question of scope.\n",
          "createdAt": "2014-01-24T08:28:44Z",
          "updatedAt": "2014-01-24T08:28:44Z"
        }
      ]
    },
    {
      "number": 320,
      "id": "MDU6SXNzdWUyMjcxMDE5MQ==",
      "title": "Orphaning http:// URIs",
      "url": "https://github.com/httpwg/http2-spec/issues/320",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "security"
      ],
      "body": "Depending on how #314 goes, we may be in a place where use of http:// URIs is being actively discouraged, at least for HTTP/2 and maybe overall.\n\nThis could be seen as a violation of our charter, and needs to be tracked. Possible resolutions include (but are not limited to):\n- Modifying our charter\n- Introducing opportunistic encryption for HTTP URIs (see #315)\n- Implementing HTTP/2 in the clear in defined situations\n",
      "createdAt": "2013-11-15T03:08:01Z",
      "updatedAt": "2014-01-24T10:27:24Z",
      "closedAt": "2014-01-24T10:27:24Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "As per #314 's resolution, this is not an issue.\n",
          "createdAt": "2014-01-24T10:27:24Z",
          "updatedAt": "2014-01-24T10:27:24Z"
        }
      ]
    },
    {
      "number": 324,
      "id": "MDU6SXNzdWUyMzExMDQ0OQ==",
      "title": "Compression - Huffman code appendix titles",
      "url": "https://github.com/httpwg/http2-spec/issues/324",
      "state": "CLOSED",
      "author": "andrewrockwell",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "\"Huffman Codes For Responses\" states that the codes that follow are for use in the \"server to client direction.\"\n\nNot all sends from the server to client are responses, mainly in the case of server push requests.\n",
      "createdAt": "2013-11-22T00:54:44Z",
      "updatedAt": "2013-11-28T17:46:09Z",
      "closedAt": "2013-11-28T17:46:09Z",
      "comments": []
    },
    {
      "number": 328,
      "id": "MDU6SXNzdWUyMzY5NTQ1NQ==",
      "title": "Editorial: Error in Section 8.3 The CONNECT Method",
      "url": "https://github.com/httpwg/http2-spec/issues/328",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Small editorial error in the draft... the third paragraph says, \"A proxy that supports CONNECT, establishes a TCP connection [TCP] to the server identified in the \":path\" header field.\" However, the \":path\" field is expressly forbidden in the CONNECT method. I suspect it should the \":authority\" and not \":path\"?\n",
      "createdAt": "2013-12-04T05:21:00Z",
      "updatedAt": "2013-12-04T18:21:49Z",
      "closedAt": "2013-12-04T18:21:49Z",
      "comments": []
    },
    {
      "number": 329,
      "id": "MDU6SXNzdWUyMzg3NTIzMg==",
      "title": "Flow control error on SETTINGS frame",
      "url": "https://github.com/httpwg/http2-spec/issues/329",
      "state": "CLOSED",
      "author": "dcsommer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "flow control"
      ],
      "body": "It is possible to receive a SETTINGS frame such that the window for a particular stream exceeds 2^31 - 1. This can happen two ways:\n- A previous WINDOW_UPDATE increased the window above it's initial size, and then a huge INITIAL_WINDOW_SIZE causes the value to exceed 2^31 - 1\n- The value for the INITIAL_WINDOW_SIZE is greater than 2^31 - 1 to begin with since SETTINGS values are defined to be unsigned 32 bit integers, which can be greater than 2^31 - 1.\n\nThe spec does not explicitly call either of these situations out in section 6.9.2. It is unclear what the receiver of such a SETTINGS frame should do. Should it send a GOAWAY or should it send RST_STREAM for all affected streams? I would advocate GOAWAY as it is simpler to implement and reason about.\n",
      "createdAt": "2013-12-06T18:15:13Z",
      "updatedAt": "2014-02-12T20:54:39Z",
      "closedAt": "2014-01-23T12:24:21Z",
      "comments": [
        {
          "author": "gongloo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "GOAWAY seems right here. I'm happy to draft a change if there's consensus (perhaps from the editor(s)?) on this.\n",
          "createdAt": "2013-12-06T18:42:03Z",
          "updatedAt": "2013-12-06T18:42:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK Hasan, it's yours.  I see no reason not to just fix this (and trust that enough people are watching that if I'm wrong, I'll hear about it).\n",
          "createdAt": "2013-12-06T18:46:53Z",
          "updatedAt": "2013-12-06T18:46:53Z"
        },
        {
          "author": "mcmanus",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe that after the perpass bof in yvr the official IETF position is\nthat people are always watching. And its an attack. Act accordingly :)\n\nOn Fri, Dec 6, 2013 at 1:46 PM, Martin Thomson notifications@github.comwrote:\n\n> OK Hasan, it's yours. I see no reason not to just fix this (and trust that\n> enough people are watching that if I'm wrong, I'll hear about it).\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/329#issuecomment-30018471\n> .\n",
          "createdAt": "2013-12-06T18:58:28Z",
          "updatedAt": "2013-12-06T18:58:28Z"
        },
        {
          "author": "dcsommer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson it seems that the wording in the commit only addresses the second point. The language doesn't specify what happens if any of the open stream's windows overflows during the adjustment.\n",
          "createdAt": "2014-02-12T20:54:39Z",
          "updatedAt": "2014-02-12T20:54:39Z"
        }
      ]
    },
    {
      "number": 330,
      "id": "MDU6SXNzdWUyMzk0NTQ5Mw==",
      "title": "typos and spelling and stuff in -09",
      "url": "https://github.com/httpwg/http2-spec/issues/330",
      "state": "CLOSED",
      "author": "danwinship",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "4.1 Frame Format - in the description of \"R\": \"the ~~bit~~ **bits** MUST remain unset\"\n\n4.2 Frame Size - \"Frame size errors in frames that affect connection-level state MUST be treated as ~~a connection error~~ **connection errors**\"\n\n4.3 Header Compression and Decompression - \"where the last CONTINUATION frame has the ~~END_HEADER~~ **END_HEADERS** flag set.\"\n\n5.1.1 Stream Identifiers - \"A stream identifier of zero (0x0) is used for connection control ~~message~~ **messages**;\"\n\n6.1 DATA - \"Setting this flag causes the stream to enter one of **the** \"half closed\" states or **the** \"closed\" state\"\n\n8.1.2 Examples - \"both the END_HEADERS and END_STREAM ~~flag~~ **flags**\"\n\n\"containing the request header fields followed by one or more DATA frames\" would read better with a comma between \"fields\" and \"followed\"\n\n8.2.1 Push Requests - \"sending push promises before the DATA frames that contain the image links ~~ensure~~ **ensures** that the client...\"\n",
      "createdAt": "2013-12-09T08:11:15Z",
      "updatedAt": "2013-12-09T09:25:14Z",
      "closedAt": "2013-12-09T09:24:50Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed with 7cdc10e5209adbd6704a5c648d94f149d4dd8048.\n",
          "createdAt": "2013-12-09T09:25:14Z",
          "updatedAt": "2013-12-09T09:25:14Z"
        }
      ]
    },
    {
      "number": 331,
      "id": "MDU6SXNzdWUyMzk0ODUzMw==",
      "title": "slightly less trivial editorial stuff in -09",
      "url": "https://github.com/httpwg/http2-spec/issues/331",
      "state": "CLOSED",
      "author": "danwinship",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "1.1 Document Organization\n\n> The HTTP/2.0 Specification is split into three parts ... (Section 3) ... (Section 4) ... (Section 8)\n\nThat confused me at first (what, sections 5-7 don't count?), but I guess what it really means is \"(Section 3) ... (Sections 4 through 7) ... (Sections 8 and 9)\", so maybe it should say that instead.\n\n1.2 Conventions and Terminology\n\n> connection error:  An error on the HTTP/2.0 connection.\n\nThat implies that a stream error is also a connection error. Should say something like \"an error that affects the whole connection\" or \"an error at the connection level\". Maybe even ending with \"rather than a single stream\"\n\n4.3 Header Compression and Decompression\n\n> Header sets are collections of zero or more header fields arranged at the application layer.\n\n\"Arranged\" is a confusing word to use given that \"HTTP Header Compression does not preserve the relative ordering of header fields.\"\n\n6.8 GOAWAY\n\n> The GOAWAY frame applies to the connection, not a specific stream.\n> The stream identifier MUST be zero.\n\nTo be consistent with every other frame type definition, that should followed by \"If an endpoint receives a GOAWAY frame whose stream identifier field is anything other than 0x0, the endpoint MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.\"\n\n8.1 HTTP Request/Response Exchange\n\n> Other frames MAY be interspersed with these frames, but those frames\n> do not carry HTTP semantics.\n\nI think \"HTTP\" here means \"HTTP/1.1\" or \"HTTP/1.1-equivalent\" or something like that? Otherwise it's saying that PUSH_PROMISE frames \"do not carry HTTP semantics\".\n\n> An HTTP request/response exchange fully consumes a single stream.  A\n> request starts with the HEADERS frame that puts the stream into an\n> \"open\" state and ends with a frame bearing END_STREAM, which causes\n> the stream to become \"half closed\" for the client.  A response starts\n> with a HEADERS frame and ends with a frame bearing END_STREAM, which\n> places the stream in the \"closed\" state.\n\nThe parts about END_STREAM are wrong in the case where the stream ends with a CONTINUATION.\n\n8.1.2 Examples\n\n> An HTTP GET request includes request header fields and no body and is\n> therefore transmitted as a single contiguous sequence of HEADERS\n> frames containing the serialized block of request header fields.\n\n\"single contiguous sequence of HEADERS frames\" should be \"one HEADERS frame, followed by zero or more CONTINUATION frames\" like in the following example with POST. (The description of the response has the same error.)\n\n> HTTP/1.1 204 No Content       HEADERS\n> Content-Length: 0        ===>   + END_STREAM\n\n204 responses MUST NOT have a Content-Length, so you should use some other header. (\"Server\"?)\n\n8.1.3.1 Request Header Fields\n\n> To ensure that the HTTP/1.1 request line can be reproduced accurately, this header field _[:authority]_ MUST be omitted when translating from an HTTP/1.1 request that has a request target in origin or asterisk form\n> ...\n> All HTTP/2.0 requests MUST include exactly one valid value for all of these header fields, unless this is a CONNECT request\n\nOne of those must be wrong...\n\n> Header field names that contain a colon are only valid in the\n> HTTP/2.0 context.  These are not HTTP header fields.  Implementations\n> MUST NOT generate header fields that start with a colon, but they\n> MUST ignore any header field that starts with a colon.  In\n> particular, header fields with names starting with a colon MUST NOT\n> be exposed as HTTP header fields.\n\nIs the distinction between \"contains a colon\" and \"starts with a colon\" intentional?\n",
      "createdAt": "2013-12-09T09:21:54Z",
      "updatedAt": "2014-01-23T08:37:05Z",
      "closedAt": "2014-01-23T08:36:47Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Finally getting around to this.\n\n> >  Other frames MAY be interspersed with these frames, but those frames do not carry HTTP semantics.\n> \n> I think \"HTTP\" here means \"HTTP/1.1\" or \"HTTP/1.1-equivalent\" or something like that? Otherwise it's saying that PUSH_PROMISE frames \"do not carry HTTP semantics\".\n\nWe're very careful throughout to only use HTTP/1.1 when referring to HTTP/1.1 semantics AND serialization.  Whereas HTTP alone refers to the semantics, which are transcendental (i.e., not version specific).\n",
          "createdAt": "2014-01-23T08:37:05Z",
          "updatedAt": "2014-01-23T08:37:05Z"
        }
      ]
    },
    {
      "number": 332,
      "id": "MDU6SXNzdWUyNDcxODUzNA==",
      "title": "[HPACK] E.4 and E.5 examples",
      "url": "https://github.com/httpwg/http2-spec/issues/332",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Example E.4.2 encodes the header set as \"848c\", but \"84\" is not necessary. \"8c\" will evict entry 4 from the header table, and in doing so, remove it from the reference set, so there is no need to remove it first. Similarly, \"date\" does not need to be removed from the reference set at the beginning of example E.4.3, so the initial index \"83\" can be removed.\n\nThese changes also apply to example E.5.2 and E.5.3.\n",
      "createdAt": "2013-12-23T18:35:44Z",
      "updatedAt": "2014-02-14T08:41:11Z",
      "closedAt": "2014-02-14T08:41:11Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@hruellan did this miss -06?\n",
          "createdAt": "2014-02-13T19:36:51Z",
          "updatedAt": "2014-02-13T19:36:51Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed with 8b3a56dd0bd2d7e86021c485e27f8c31a6153bb9.\n",
          "createdAt": "2014-02-14T08:41:11Z",
          "updatedAt": "2014-02-14T08:41:11Z"
        }
      ]
    },
    {
      "number": 334,
      "id": "MDU6SXNzdWUyNTA3NTI2Mg==",
      "title": "Clarification on :authority",
      "url": "https://github.com/httpwg/http2-spec/issues/334",
      "state": "CLOSED",
      "author": "adriancole",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "@swankjesse noted the following, wrt `:authority`\n\n```\n3.2.2. Server-based Naming Authority\n\n   URL schemes that involve the direct use of an IP-based protocol to a\n   specified server on the Internet use a common syntax for the server\n   component of the URI's scheme-specific data:\n\n      <userinfo>@<host>:<port>\n```\n\nDo we populate this field with the authority? Or the hostname? Using the full authority is almost certainly incorrect because it can include a password.\n\nhttp://www.ietf.org/rfc/rfc2396.txt\n",
      "createdAt": "2014-01-05T18:35:17Z",
      "updatedAt": "2014-01-06T18:15:58Z",
      "closedAt": "2014-01-06T18:15:58Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Well, the use of userinfo is deprecated: https://tools.ietf.org/html/rfc3986#section-3.2.1\n\nBut we really should have made it clear in the spec that this isn't permitted.\n",
          "createdAt": "2014-01-06T18:09:58Z",
          "updatedAt": "2014-01-06T18:09:58Z"
        }
      ]
    },
    {
      "number": 335,
      "id": "MDU6SXNzdWUyNTA3NTczNw==",
      "title": "Server max concurrent streams of zero",
      "url": "https://github.com/httpwg/http2-spec/issues/335",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "frame semantics",
        "streams"
      ],
      "body": "There was a question about SETTINGS_MAX_CONCURRENT_STREAMS and how a client should treat a value of zero if the server sets it.\n\nThe spec doesn't say anything about this value, and from the one perspective that's OK, zero streams doesn't need to be treated specially by the client.  A zero value could even have potential uses in temporarily halting requests, reducing server load more than the existing features in that area, like HTTP 503 or 420 Enhance Your Calm.\n\nThe question is whether we prohibit it to remove a potential footgun.\n\nAlternatively, we could leave the possibility there and document the dangers, making this an editorial question instead.\n\nOr we could remain silent, though I think we've seen evidence that that isn't enough.\n",
      "createdAt": "2014-01-05T19:04:13Z",
      "updatedAt": "2014-01-23T09:28:14Z",
      "closedAt": "2014-01-23T09:28:14Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Zurich; decided that this would become an editorial issue; text will be added explaining why 0 isn't special.\n",
          "createdAt": "2014-01-22T09:43:33Z",
          "updatedAt": "2014-01-22T09:43:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed in https://github.com/http2/http2-spec/commit/79d100e4fc47efeb49a3c01a7eaa33e63a3e1407\n",
          "createdAt": "2014-01-23T09:28:14Z",
          "updatedAt": "2014-01-23T09:28:14Z"
        }
      ]
    },
    {
      "number": 336,
      "id": "MDU6SXNzdWUyNTIwNTcwMw==",
      "title": "Status of settings ACK for HTTP2-Settings",
      "url": "https://github.com/httpwg/http2-spec/issues/336",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "upgrade"
      ],
      "body": "We don't really say what should be done to \"acknowledge\" the settings that appear in the HTTP2-Settings header field.  This is bad.  Either the settings have to be acknowledged (causing the server to send two SETTINGS ACK frames at the start of the session), or the settings are implicitly acked by the 101 response.\n\nI think that the implicit acknowledgement is easy enough to implement and creates less protocol-cruft.\n",
      "createdAt": "2014-01-07T23:32:01Z",
      "updatedAt": "2014-01-23T09:58:53Z",
      "closedAt": "2014-01-23T09:58:53Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; 101 is the ack so you don't send another one.\n",
          "createdAt": "2014-01-23T09:07:27Z",
          "updatedAt": "2014-01-23T09:07:27Z"
        }
      ]
    },
    {
      "number": 338,
      "id": "MDU6SXNzdWUyNTM2ODU5MQ==",
      "title": "Specify encoding of header keys as ISO-8859-1",
      "url": "https://github.com/httpwg/http2-spec/issues/338",
      "state": "CLOSED",
      "author": "adriancole",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The requirement of all header names being in lowercase seems to imply a character set.  I don't recall where, but I recall some spec somewhere saying that the default encoding of http messages is ISO-8859-1. Is it possible that we can clarify in the spec directly what encoding is used for header names?  \n",
      "createdAt": "2014-01-10T01:03:01Z",
      "updatedAt": "2014-01-11T08:54:52Z",
      "closedAt": "2014-01-10T03:47:18Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "IIRC, according to the HTTP/1.1 spec header names are US-ASCII -- as for what is actually sent on the internet? YMMV\n",
          "createdAt": "2014-01-10T01:11:02Z",
          "updatedAt": "2014-01-10T01:11:02Z"
        },
        {
          "author": "adriancole",
          "authorAssociation": "NONE",
          "body": "Thanks @jpinner.  The thing is that it doesn't seem to be called out directly as such (unless I'm missing something).  Basically, they are specified as a \"token\" which isn't defined elsewhere.  I was hoping we could clarify that as it would really simplify development if we know the character set is at least single-octet characters.\n\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n\nmake sense?\n",
          "createdAt": "2014-01-10T01:18:27Z",
          "updatedAt": "2014-01-10T01:18:27Z"
        },
        {
          "author": "adriancole",
          "authorAssociation": "NONE",
          "body": "ps US-ASCII would be fantastic to call out.\n",
          "createdAt": "2014-01-10T01:23:19Z",
          "updatedAt": "2014-01-10T01:23:19Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "I think there are two issues here: one is the ability to \"lower-case\" the header names, the second is if there are multi-byte characters in the names or values. The hpack spec specifically mentions that these are opaque sequences of octets so it avoids the character-encoding issue. In reality I've seen UTF-8 encoded URIs so I would expect to see some multi-byte character values (at least :path). As for names, the draft-09 spec states in Section 8.1.3:\n\n\"HTTP header field names are strings of ASCII characters that are compared in a case-insensitive fashion.\"\n",
          "createdAt": "2014-01-10T03:32:21Z",
          "updatedAt": "2014-01-10T03:32:21Z"
        },
        {
          "author": "adriancole",
          "authorAssociation": "NONE",
          "body": "Great.  I somehow missed that, Jeff!\n\nWill close the issue.\n",
          "createdAt": "2014-01-10T03:46:34Z",
          "updatedAt": "2014-01-10T03:46:34Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Token is defined in RFC2616 section 2.2; it's basically ASCII with some restrictions.\n\nCheers,\n",
          "createdAt": "2014-01-11T08:54:52Z",
          "updatedAt": "2014-01-11T08:54:52Z"
        }
      ]
    },
    {
      "number": 339,
      "id": "MDU6SXNzdWUyNTM3Mzc1OA==",
      "title": "[HPACK] only use one set of huffman codes",
      "url": "https://github.com/httpwg/http2-spec/issues/339",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "I would like to propose for hpack draft-06 that we consolidate the huffman implementation and use a common set of codes between requests and responses. I believe this would make both implementation and interop testing a bit simpler as you wouldn't have to know whether the encoded header block came from a client or a server.\n\nFor some reasoning behind why this should be ok, in a perfect world most resources that are currently inlined would be sent back to clients as pushed responses. The headers for these pushed requests and response would all be encoded using the server's encoder, and thus using the \"Response\" huffman codes. So these codes should already be chosen so that they efficiently compress both HTTP request and response headers.\n",
      "createdAt": "2014-01-10T03:49:05Z",
      "updatedAt": "2014-02-14T08:51:04Z",
      "closedAt": "2014-02-14T08:43:20Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I did some quick and dirty testing on the Huffman compaction impact, using the mnot test set.\nNo huffman: 29,6% of HTTP/1.1 size\nHuffman: 22,5% of HTTP/1.1 size, i.e. a 24% reduction.\nHuffman while swapping the request and response tables: 24.5% of HTTP/1.1 size, i.e. only a 17% reduction.\n\nUsing a single set of codes, we will fit somewhere between these two measures.\n",
          "createdAt": "2014-01-10T16:20:12Z",
          "updatedAt": "2014-01-10T16:20:12Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Completely in the middle is still a 20% reduction. I think the change is worthwhile to allow the same decoder to be used client and server side.\n",
          "createdAt": "2014-01-10T17:42:04Z",
          "updatedAt": "2014-01-10T17:42:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd point out that in absolute terms, we're talking 1%.  7.1% vs. 6.1%.  I think that if we start talking relative numbers (despite being mathematically more \"correct\"), we start to lose sight of what the real cost-benefit is.\n",
          "createdAt": "2014-01-10T17:47:41Z",
          "updatedAt": "2014-01-10T17:47:41Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One of the choices is to encode no state but use huffman. When this is\ndone, the efficiency of the encoding matters more.\n\nWe'll talk about it at the interim, though, so no need to discuss now.\n\nOn Fri, Jan 10, 2014 at 9:47 AM, Martin Thomson notifications@github.comwrote:\n\n> I'd point out that in absolute terms, we're talking 1%. 7.1% vs. 6.1%. I\n> think that if we start talking relative numbers (despite being\n> mathematically more \"correct\"), we start to lose sight of what the real\n> cost-benefit is.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/339#issuecomment-32048977\n> .\n",
          "createdAt": "2014-01-10T18:33:54Z",
          "updatedAt": "2014-01-10T18:33:54Z"
        },
        {
          "author": "OsamaM",
          "authorAssociation": "NONE",
          "body": "The implementation cost is trivial (e.g. an 'if' to know your role and pick the appropriate table). So if it gives a slight edge in compression it might be worth it.\n",
          "createdAt": "2014-01-14T02:04:15Z",
          "updatedAt": "2014-01-14T02:04:15Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "I think it depends on your use of server push. Let's say you push down n resources with your request, then you'd have 1 request encoded with the client encoder, and n requests and n+1 responses encoded with the server encoder. The more resources you push, the more parity you have encoding requests with the server encoder.\n\nWe want to encourage push over inlining (caching for the win!) and we should try to make the server encoder compress requests and responses equally well (since each will represent roughly half of the requests). At this point I wonder what the slight edge would be.\n",
          "createdAt": "2014-01-14T03:47:55Z",
          "updatedAt": "2014-01-14T03:47:55Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are a couple of obvious places for improvement in the area if we're\nwilling to accept selecting between huffman tables.\n\n1) Encode cookies with a separate table/encoder.\nThis is probably desirable from a security perspective anyway: the encoding\nwould essentially just do a B64 encoding using 6 bits.\n2) encode server push'd things with the 'other side' parity.\n\nI wouldn't be surprised if some analysis showed that encoding everything\nbut cookies with one encoder, and cookies with another showed improvement\nover the current scheme.\n\nOn Mon, Jan 13, 2014 at 7:47 PM, Jeff Pinner notifications@github.comwrote:\n\n> I think it depends on your use of server push. Let's say you push down n\n> resources with your request, then you'd have 1 request encoded with the\n> client encoder, and n requests and n+1 responses encoded with the server\n> encoder. The more resources you push, the more parity you have encoding\n> requests with the server encoder.\n> \n> We want to encourage push over inlining (caching for the win!) and we\n> should try to make the server encoder compress requests and responses\n> equally well (since each will represent roughly half of the requests). At\n> this point I wonder what the slight edge would be.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/339#issuecomment-32236641\n> .\n",
          "createdAt": "2014-01-14T04:49:56Z",
          "updatedAt": "2014-01-14T04:49:56Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "That is mostly heading down the \"typed\" codec route.\n",
          "createdAt": "2014-01-14T05:01:06Z",
          "updatedAt": "2014-01-14T05:01:06Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Kinda sortof, but not from an implementation machinery standpoint-- there\nis only one piece of encoder code in that case, with a switch on which\ntable to use. Same as now, but different condition.\n\nOn Mon, Jan 13, 2014 at 9:01 PM, Jeff Pinner notifications@github.comwrote:\n\n> That is mostly heading down the \"typed\" codec route.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/339#issuecomment-32238982\n> .\n",
          "createdAt": "2014-01-14T05:10:42Z",
          "updatedAt": "2014-01-14T05:10:42Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; will have one huffman table plus a separate table just for Cookie + Set-Cookie.\n",
          "createdAt": "2014-01-22T08:33:48Z",
          "updatedAt": "2014-01-22T08:33:48Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@hruellan appears to have done this in 8fe97b5464334 - what else needs to be done? @grmocg ?\n",
          "createdAt": "2014-02-05T02:38:30Z",
          "updatedAt": "2014-02-05T02:38:30Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've been busy so it is entirely possible that I missed it, but I didn't\nsee any analysis that this was useful enough to merit the complexity of\nhaving to peek at the keys from within the compressor.\nin Herve's change, he includes: \"This table will be regenerated. It may be\nsuppressed if not deemed efficient enought.\"\nwhich implies that we haven't done the analysis yet (which I believed I was\non the hook for, and won't get to).\n\nOn Tue, Feb 4, 2014 at 6:38 PM, Mark Nottingham notifications@github.comwrote:\n\n> @hruellan https://github.com/hruellan appears to have done this in\n> 8fe97b5 https://github.com/http2/http2-spec/commit/8fe97b5464334 - what\n> else needs to be done? @grmocg https://github.com/grmocg ?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/339#issuecomment-34132500\n> .\n",
          "createdAt": "2014-02-05T02:42:14Z",
          "updatedAt": "2014-02-05T02:42:14Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "That commit doesn't actually recompute the table across requests and responses, or compute a table for cookies from base64 input -- it just prepares the text.\n",
          "createdAt": "2014-02-05T02:42:24Z",
          "updatedAt": "2014-02-05T02:42:24Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@grmocg \"Which implies that we haven't done the analysis yet\" -- yeah, saw that. My recollection was that the updated tables was a nice-to-have, and wouldn't block -10; WDYT?\n",
          "createdAt": "2014-02-05T02:46:52Z",
          "updatedAt": "2014-02-05T02:46:52Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think the updated tables should block -10.\n",
          "createdAt": "2014-02-06T16:56:29Z",
          "updatedAt": "2014-02-06T16:56:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@hruellan I know that you did something here, do you want to keep this ticket open to track fixing this?\n",
          "createdAt": "2014-02-13T19:37:39Z",
          "updatedAt": "2014-02-13T19:37:39Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The asymmetry was removed with 8b3a56dd0bd2d7e86021c485e27f8c31a6153bb9. This also added a cookie-specific set of Huffman codes.\nThe cookie-specific set of Huffman codes was removed by 3d30a08a7f642aa4ab24b7fafe0c2384cb760d27.\n",
          "createdAt": "2014-02-14T08:43:20Z",
          "updatedAt": "2014-02-14T08:43:20Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I closed this issue as we now have only one set of Huffman codes. In addition, I created #385 for tracking that we need to update the Huffman codes.\n",
          "createdAt": "2014-02-14T08:51:04Z",
          "updatedAt": "2014-02-14T08:51:04Z"
        }
      ]
    },
    {
      "number": 340,
      "id": "MDU6SXNzdWUyNTUyMjgzNw==",
      "title": "[HPACK] separate indexing of static table from header table",
      "url": "https://github.com/httpwg/http2-spec/issues/340",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Currently the peer is able to advertise an arbitrarily large decoding size which must be respected by the encoder. The encoder can still maintain a smaller encoding size but it must follow the following two requirements:\n\n1) the encoder must make sure that whenever it wants to discard an entry from its header table, it must remove that entry form the reference set. This is because the peer's header table is larger so the entry will remain in the peer's table. If it also remains in the reference set it will be emitted for each subsequent header set. This requirement trades off compression efficiency for needing memory to track the peer's state.\n\n2) the encoder must keep track of the number of entries and the size of those entries in the peer's header table in order to reference the static table. Because the static table indicies are offset by the length of the header table, we must keep track of the length of the peer's table. This requirement requires allocating memory to track the peers state and prevents us from bounding the memory size of the encoder.\n\nSeparating the indexing of the static table and the header table removes the second requirement.\n",
      "createdAt": "2014-01-13T19:47:07Z",
      "updatedAt": "2014-01-22T09:06:03Z",
      "closedAt": "2014-01-22T09:06:03Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Point 2 is only necessary if the encoder wants to reference the static table, which is possible to avoid by copying into the dynamic table.\n\nIt's true that without some care, this tracking could take a good proportion of the memory that the decoder is offering.  If the encoder is not completely in control of the headers it encodes, an attacker could force that proportion to be pretty high.\n",
          "createdAt": "2014-01-13T21:21:04Z",
          "updatedAt": "2014-01-13T21:21:04Z"
        },
        {
          "author": "OsamaM",
          "authorAssociation": "NONE",
          "body": "Previous discussion that also seems related http://lists.w3.org/Archives/Public/ietf-http-wg/2013OctDec/0317.html\n",
          "createdAt": "2014-01-14T02:15:45Z",
          "updatedAt": "2014-01-14T02:16:15Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing based on the conclusions of #341.\n",
          "createdAt": "2014-01-22T09:06:03Z",
          "updatedAt": "2014-01-22T09:06:03Z"
        }
      ]
    },
    {
      "number": 341,
      "id": "MDU6SXNzdWUyNTY2ODg2NA==",
      "title": "[HPACK] signal table size changes in band",
      "url": "https://github.com/httpwg/http2-spec/issues/341",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "I'd like to propose a change to the negotiation mechanism to place the table size in band with the header block.\n\nCurrently the receiver can use a settings frame to inform it's peer that it is changing the size it is allocating to the header table. The peer then has to respond with an ACK frame within a user-defined time, accepting the change. The change must be accepted and receivers that increase their limit beyond what the encoder is capable of require the encoder to track at least a partial state of the receivers context.\n\nI propose instead that size changes be signaled in the compressed stream. This would allow the encoder to modify its table without needing prior synchronization from the peer as long as the receiver size limits are obeyed.\n\nFor example if the receiver increased its window size to 8k, the encoder can chose a setting of 6k and signal it in band, keeping both peers in sync. The encoder could even later choose to increase the window to 8k when it is able to allocate more memory to the connection, and still signal this to its peer to keep their tables in sync.\n\nThe only state that has to be tracked in the encoder is the maximum allowed table size for the receiver to ensure that it doesn't signal a size larger than this value. This is the value updated by the settings frame.\n\nAs a proposed mechanism. I suggest repurposing index 0 so that it is followed with the new encoder size: 0x80, varint encoded size\n",
      "createdAt": "2014-01-15T18:19:21Z",
      "updatedAt": "2014-01-27T13:51:42Z",
      "closedAt": "2014-01-27T13:51:42Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Zurich; we will do this.  No need to change SETTINGS ACK any way to address this.\n",
          "createdAt": "2014-01-22T09:01:03Z",
          "updatedAt": "2014-01-22T09:01:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Herve raised the issue of clearing the reference set orthogonal to the clearing of the table.  Tentative proposal is to steal a bit from the varint for a flag.  We discussed using a flag on the HEADERS/PUSH_PROMISE frame, but that causes HPACK to spill out of its hermetically sealed container, which was considered sad-making by some.\n",
          "createdAt": "2014-01-22T09:05:40Z",
          "updatedAt": "2014-01-22T09:05:40Z"
        }
      ]
    },
    {
      "number": 342,
      "id": "MDU6SXNzdWUyNTY3NjA3OA==",
      "title": "enable determinism for URI encoding in HTTP/2.0",
      "url": "https://github.com/httpwg/http2-spec/issues/342",
      "state": "CLOSED",
      "author": "GabrielMontenegro",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "The \u201chttp\u201d and \u201chttps\u201d URI schemes don\u2019t have a fixed encoding. The URI RFC (http://tools.ietf.org/html/rfc3986#section-2.5) talks about the generic syntax for URI components:\n    \u2022 Legacy URI components (before 2005) tend to use UTF-8 \u201cor some other superset of the US-ASCII character encoding\u201d \n    \u2022 New schemes (after 2005) have to use UTF-8 with percent encoding for reserved characters.\n\nThe first bullet explains why we currently have non-determinism for \u201chttp\u201d and \u201chttps\u201d URIs. This is particularly problematic when parsing URIs at the server side or at intermediate proxies (e.g., when looking for a cache hit).\n\nProposed goal: enable determinism for URI encoding in HTTP/2.0. \n",
      "createdAt": "2014-01-15T19:44:26Z",
      "updatedAt": "2014-01-23T08:48:56Z",
      "closedAt": "2014-01-23T08:48:56Z",
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And how exactly are we going to achieve this without breaking compatibility?\n",
          "createdAt": "2014-01-15T19:52:36Z",
          "updatedAt": "2014-01-15T19:52:36Z"
        },
        {
          "author": "GabrielMontenegro",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please continue the discussion on the mailing list on this thread:\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/0111.html\n",
          "createdAt": "2014-01-15T20:00:14Z",
          "updatedAt": "2014-01-15T20:00:14Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; the intent is to define a hint (as a new header) that indicates how the URI was encoded by the user agent, NOT to allow UTF-8 on the wire.\n\nGabriel to publish an I-D, will discuss in London.\n",
          "createdAt": "2014-01-23T08:48:56Z",
          "updatedAt": "2014-01-23T08:48:56Z"
        }
      ]
    },
    {
      "number": 343,
      "id": "MDU6SXNzdWUyNTY5NTgzNA==",
      "title": "add a case of massive HEADERS at startup in the section of DoS Considerations",
      "url": "https://github.com/httpwg/http2-spec/issues/343",
      "state": "CLOSED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "security"
      ],
      "body": "An initial value of SETTINGS_MAX_CONCURRENT_STREAMS is no limit and a server can receive massive HEADERS from a malicious client before synchronization of the first SETTINGS.\n\nThese requests are legitimate but it is a risk of denial of service attack and need to be described in the security section.\n",
      "createdAt": "2014-01-16T01:04:50Z",
      "updatedAt": "2014-02-03T18:04:01Z",
      "closedAt": "2014-02-03T18:04:01Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; add a sentence or two to DoS Considerations along these lines.\n",
          "createdAt": "2014-01-24T08:16:36Z",
          "updatedAt": "2014-01-24T08:16:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "While settings changes are outstanding, there are things that a peer might be able to do that is not provably bad and can therefore be exploited to generate excessive work.\n",
          "createdAt": "2014-01-24T08:18:12Z",
          "updatedAt": "2014-01-24T08:18:12Z"
        }
      ]
    },
    {
      "number": 344,
      "id": "MDU6SXNzdWUyNjA4MjY2Mg==",
      "title": "Padding",
      "url": "https://github.com/httpwg/http2-spec/issues/344",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame layout",
        "security"
      ],
      "body": "In two places:\n- HPACK padding (is possible with Huffman coded strings, maybe)\n- Request and response payloads (c.f., BREACH attack)\n\nNeed a way to stuff bytes in these places to hide the size of things.\n",
      "createdAt": "2014-01-22T11:22:34Z",
      "updatedAt": "2014-02-07T21:53:23Z",
      "closedAt": "2014-02-07T21:52:16Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "One way we could achieve request and response padding is via an \"END_MESSAGE\" flag on the headers / data frames. This would give us a way at the protocol layer to distinguish the end of the HTTP message body would the end of the stream so that end data frames for a given stream ID that occurred after receiving the flag would be considered padding. These bytes would then still be subject to flow control, hopefully mitigating any flow-control based side-channel attacks.\n",
          "createdAt": "2014-01-23T03:48:27Z",
          "updatedAt": "2014-01-23T03:48:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Another approach would be to send DATA frames on stream 0.  The only drawback there is that you don't get to pad less than 8 bytes.  I'm sure that there are plenty of options.\n",
          "createdAt": "2014-01-23T04:08:44Z",
          "updatedAt": "2014-01-23T04:08:44Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "One issue with that is we don't have flow control, concurrency, or DOS semantics defined for stream 0.\n",
          "createdAt": "2014-01-23T05:35:18Z",
          "updatedAt": "2014-01-23T05:35:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, of those, the flow control is the only one to be a concern.  DOS and concurrency we both have inherently.  (You know, we should discuss this somewhere else...)\n",
          "createdAt": "2014-01-23T05:57:34Z",
          "updatedAt": "2014-01-23T05:57:34Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "For HPACK, Roberto will open a separate issue with a proposal.\n\nFor frames, we'll add:\n\n1) a new flag indicating that the frame payload includes padding at the end\n2) a new flag indicating whether the length of padding is indicated by the first 8 or 16 bits of the frame payload\n",
          "createdAt": "2014-01-23T08:29:48Z",
          "updatedAt": "2014-01-23T08:29:48Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Quick thought: what prevents an intermediary from stripping out the padding?\n",
          "createdAt": "2014-01-24T04:15:40Z",
          "updatedAt": "2014-01-24T04:15:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Absolutely nothing.  The idea would be that we would recommend against it, though not make it completely verboten.\n",
          "createdAt": "2014-01-24T04:48:02Z",
          "updatedAt": "2014-01-24T04:48:02Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yup.\nGlad to see that jet lag affects us all similarly...\nNothing currently prevents it, nor should it. There are interesting\nproperties w.r.t freq/size analysis where, when a stream is forwarded on a\nnon 1-1 basis on another session (aggregating/deaggregating proxy), it\nmight be preferable to change how things are padded to mask how the\nparticular stream was routed. Or perhaps because the proxy does a better\njob of padding and one is reasonably sure that observation of the flow is\noccurring on only one side of the proxy (else changing padding potentially\nleaks more information if done poorly).\n On Jan 23, 2014 8:48 PM, \"Martin Thomson\" notifications@github.com wrote:\n\n> Absolutely nothing. The idea would be that we would recommend against it,\n> though not make it completely verboten.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/344#issuecomment-33197200\n> .\n",
          "createdAt": "2014-01-24T04:57:30Z",
          "updatedAt": "2014-01-24T04:57:30Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed again in Zurich; we will need to make it clear that padding (or lack thereof) can expose information in various ways.  We also need to deal with how frames are coalesced or split and what is done with padding.  We also need to say that TLS compression MUST be disabled.\n",
          "createdAt": "2014-01-24T08:11:52Z",
          "updatedAt": "2014-01-24T08:11:52Z"
        },
        {
          "author": "OsamaM",
          "authorAssociation": "NONE",
          "body": "Ideally, ciphertext size randomization should be done in TLS.\n\nIf we are doing to duct tape it in http2 then we should\n1) bury it deep inside hpack OR\n2) pull it all the way to the top as a separate frame (e.g. PADDING frame).\n\nAnd then document all the caveats about cryptographically secure random num generators, ensuring that the padding and size-sensitive data should be placed into the same TLS record, etc. \n",
          "createdAt": "2014-01-24T19:01:21Z",
          "updatedAt": "2014-01-24T19:01:21Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I brought this up internally with Chrome security folks. They recommend mentioning, perhaps in Security Considerations, that the padding is not intended to be used as an always-on general traffic analysis prevention mechanism (which would be wasteful and is unlikely to be useful). It's an optional mechanism specifically to address CRIME/BREACH.\n",
          "createdAt": "2014-01-27T21:43:58Z",
          "updatedAt": "2014-01-27T21:43:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd be happy to take text suggestions from these unnamed people.\n",
          "createdAt": "2014-01-27T22:21:37Z",
          "updatedAt": "2014-01-27T22:21:37Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thaidn has agreed to put together concrete text here.\n",
          "createdAt": "2014-02-01T21:55:23Z",
          "updatedAt": "2014-02-01T21:55:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@willchan, can you follow up and make sure that this happens this week?  I'm hoping to issue -10 as soon as possible.\n",
          "createdAt": "2014-02-03T18:32:08Z",
          "updatedAt": "2014-02-03T18:32:08Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I contacted Thai and he hopes to have something by end of week. FWIW, if it's just in the Security Considerations section, it hopefully can be orthogonal to an implementation draft release.\n",
          "createdAt": "2014-02-05T01:01:10Z",
          "updatedAt": "2014-02-05T01:01:10Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "True.  But we agreed to include it, and there's nothing like a deadline to motivate someone.  No need to mention that the priority stuff or HPACK could cause the deadline to be moved out...\n",
          "createdAt": "2014-02-05T01:10:08Z",
          "updatedAt": "2014-02-05T01:10:08Z"
        },
        {
          "author": "thaidn",
          "authorAssociation": "NONE",
          "body": "Comments from Google Security Team (ideas from Michal Zalewski, Jim Roskind, etc.; blame Thai Duong thaidn@google.com for anything else)\n\nWe have a few observations regarding padding that we hope you'll find useful:\n- Padding will not \"defeat\" traffic analysis. Padding doesn't really obscure other traffic analysis signals: even in padded traffic, one would be typically able to distinguish between separate encrypted HTTP requests and responses to them, making it easy to distinguish between a Wikipedia article with five images and the one with eight. Timing analysis or simple packet counting (i.e., making a packet large enough that when it's overflown because of compresion or whatever one sees two packets) could turn this into a hopeless game for the defenders.\n- Padding will not defeat CRIME attacks. Imagine this scenario: if the attackers hit the correct guess the request / response will be compressed down to a few bytes; otherwise it would be a thousand bytes. Padding couldn't help in that case. In fact we aren't aware of any generic solutions to defeat these attacks. What we've known so far is that padding will, however, in some cases, make attacks harder, often by orders of magnitude. In some cases, it will render attacks mostly impossible. But all of these cases are application-dependent, and need a case-by-case analysis to choose the right padding scheme.\n- That means you should make padding optional. The protocol should provide a way to add up to 1024 bytes of padding, but it should be up to each implementation to enable this mechanism, and choose the padding strategies they need. Non-targeted padding strategies for a protocol as diverse and quickly evolving as HTTP typically fall on the spectrum between wasteful and outright dangerous: they may help in a tiny percentage of all uses, but they may also make it harder to understand the exposure in the scenarios where they fail. More often than not, you'd be wasting a fair amount of bandwidth without providing any well-defined benefits, and possibly giving developers a false sense of security. \n- An effective padding scheme should have a non-uniform non-normal distribution. In general you don't want a distribution that resembles a well-known distribution, as it's easy to fit the observed response sizes to the expected distribution of padding and detect outliers. That means simple random-length padding won't work, as it can be averaged out simply by making multiple observations of an identical request / response, which is extremely easy in the browser environment (both for passive and active attackers).\n- The padding should have 1-byte increments. Some people have suggested using chunked encoding as a padding mechanism, but we've found that it's easy to defeat this because the padding has 5-byte increments, for example. Another flawed suggestion was using a deterministic padding scheme, i.e., calculating n as HMAC-SHA1 of the URL or the response, and adding a deterministic amount of padding such as n % 1024. This is easy to defeat, as attackers can always vary the URL or the response as they want.\n- Besides HTTP-level padding you can also mitigate CRIME attacks by randomizing the compression algorithm; switching to a new algorithm that isn't vulnerable to CRIME techniques; inserting random-length random-data headers (e.g., X-CRIME-PADDING: Korvh2XAcm879g) that get compressed together with the request / response, but will be ignored by the other side; or (more hackish) adding padding to the compression algorithm, e.g., inserting empty chunks to the end of gzip streams. All of these ideas will help conceal the real length of request / response, and make it harder to analyze traffic.\n\nThat's all we know about padding.\n",
          "createdAt": "2014-02-07T20:55:07Z",
          "updatedAt": "2014-02-07T21:03:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @thaidn.  I think that I can improve the text based on this.  We have the functional parts done.  Really, what we want to do is ensure that people understand that this is hard, and to discourage them from doing anything stupid.\n",
          "createdAt": "2014-02-07T21:53:23Z",
          "updatedAt": "2014-02-07T21:53:23Z"
        }
      ]
    },
    {
      "number": 345,
      "id": "MDU6SXNzdWUyNjEwODgyNg==",
      "title": "Gzip transfer encoding",
      "url": "https://github.com/httpwg/http2-spec/issues/345",
      "state": "CLOSED",
      "author": "const",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Looking at GZip format there is the following specified in http://tools.ietf.org/html/rfc1952#page-5\n\n```\n   2.2. File format\n\n      A gzip file consists of a series of \"members\" (compressed data\n      sets).  The format of each member is specified in the following\n      section.  The members simply appear one after another in the file,\n      with no additional information before, between, or after them.\n```\n\nIn the draft draft-ietf-httpbis-p1-messaging-25.xml the following is said.\n\n```\n<section title=\"Gzip Coding\" anchor=\"gzip.coding\">\n<iref item=\"gzip (Coding Format)\"/>\n<t>\n   The \"gzip\" coding is an LZ77 coding with a 32 bit CRC that is commonly\n   produced by the gzip file compression program <xref target=\"RFC1952\"/>.\n   A recipient &SHOULD; consider \"x-gzip\" to be equivalent to \"gzip\".\n</t>\n</section>\n```\n\nIt is not clear whether multiple members are allowed for gzip or not and how they should be treated if they are allowed. I think that only one member in the file should be used for transfrer encoding \"gzip\". The same should be defined for content encoding. I doubt that anyone supports multi-member gzip format on webservers.\n",
      "createdAt": "2014-01-22T17:54:06Z",
      "updatedAt": "2014-01-22T18:10:38Z",
      "closedAt": "2014-01-22T18:10:38Z",
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please send feedback related to the 1.1 documents to the HTTPbis WG mailing list (as indicated in the document's boilerplate).\n",
          "createdAt": "2014-01-22T18:10:38Z",
          "updatedAt": "2014-01-22T18:10:38Z"
        }
      ]
    },
    {
      "number": 346,
      "id": "MDU6SXNzdWUyNjE1MTM2NQ==",
      "title": "hpack padding needs to be defined",
      "url": "https://github.com/httpwg/http2-spec/issues/346",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "We wish to provide for a facility to add non-interpreted data (padding) to the HEADERS frame, or held within the headers frame.\nAn obvious place for this is within the HPACK compression format.\n",
      "createdAt": "2014-01-23T08:36:53Z",
      "updatedAt": "2014-02-07T19:35:02Z",
      "closedAt": "2014-02-07T19:31:05Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are several options to do this.\n\nMy preference is for using the re-worked op-codes from #365.\n\nA second possibility is to use a literal header field with a 0-length name (which is forbidden by HTTP), the padding being the header field value.\n",
          "createdAt": "2014-02-06T17:04:59Z",
          "updatedAt": "2014-02-06T17:04:59Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "One thing that concerns me about using a 0-length name is needing to make sure the padding doesn't end up in the header table.\n",
          "createdAt": "2014-02-06T17:10:04Z",
          "updatedAt": "2014-02-06T17:10:04Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, a 0-length name must not be added to the header table. However, there is still a risk with a buggy implementation.\nOtherwise, whether or not we adopt #365, we can always use the contextual change to encode a padding.\n",
          "createdAt": "2014-02-06T17:14:27Z",
          "updatedAt": "2014-02-06T17:14:27Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "imho, I'd prefer to not have padding in HPACK itself, but rather use\nexactly the same scheme as used in DATA frames.\n\nCan we reconsider adding it here? It really doesn't make a lot of sense\nhere.\n-=R\n\nOn Thu, Feb 6, 2014 at 9:14 AM, Herv\u00e9 notifications@github.com wrote:\n\n> Yes, a 0-length name must not be added to the header table. However, there\n> is still a risk with a buggy implementation.\n> Otherwise, whether or not we adopt #365https://github.com/http2/http2-spec/issues/365,\n> we can always use the contextual change to encode a padding.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/346#issuecomment-34346371\n> .\n",
          "createdAt": "2014-02-06T20:25:45Z",
          "updatedAt": "2014-02-06T20:25:45Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@grmocg your proposal is to add an optional padding to the HEADER and CONTINUATION frames, as for DATA frames?\nI think it makes sense. Even if some kind of attack is more easily detected at the HPACK level, a HPACK encoder can signal to the framing layer that some padding is necessary.\n",
          "createdAt": "2014-02-07T14:45:57Z",
          "updatedAt": "2014-02-07T14:45:57Z"
        },
        {
          "author": "gongloo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1. We've already agreed upon one type of padding -- in DATA. Let's extend\nthat to HEADERS and CONTINUATION frames and call it a day.\n\nOn Fri Feb 07 2014 at 9:46:19 AM, Herv\u00e9 notifications@github.com wrote:\n\n> @grmocg https://github.com/grmocg your proposal is to add an optional\n> padding to the HEADER and CONTINUATION frames, as for DATA frames?\n> I think it makes sense. Even if some kind of attack is more easily\n> detected at the HPACK level, a HPACK encoder can signal to the framing\n> layer that some padding is necessary.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/346#issuecomment-34442015\n> .\n",
          "createdAt": "2014-02-07T15:31:57Z",
          "updatedAt": "2014-02-07T15:31:57Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to take this one and put it in the main spec.\n",
          "createdAt": "2014-02-07T19:07:12Z",
          "updatedAt": "2014-02-07T19:07:12Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "@martinthomson thanks for making the bits consistent :+1: \n",
          "createdAt": "2014-02-07T19:35:02Z",
          "updatedAt": "2014-02-07T19:35:02Z"
        }
      ]
    },
    {
      "number": 347,
      "id": "MDU6SXNzdWUyNjE1MTYzNw==",
      "title": "Opcodes should define frame layout",
      "url": "https://github.com/httpwg/http2-spec/issues/347",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "frame layout"
      ],
      "body": "Flags should not be used to signal a change in the layout of the data within a frame.\n\nThe HEADERS frame should be split into two frames:\n\n  1) HEADERS_WITH_PRIORITY, which includes the 4 bytes of priority field after the frame header, followed by header data, and\n\n  2) HEADERS, which has header data immediately following the frame header.\n",
      "createdAt": "2014-01-23T08:43:59Z",
      "updatedAt": "2014-01-24T15:38:10Z",
      "closedAt": "2014-01-24T15:38:10Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; more work for the editor, unsure about readability. Consensus was to stay as is.\n",
          "createdAt": "2014-01-24T15:38:10Z",
          "updatedAt": "2014-01-24T15:38:10Z"
        }
      ]
    },
    {
      "number": 348,
      "id": "MDU6SXNzdWUyNjE1MjMzNQ==",
      "title": "Header concatenation separator",
      "url": "https://github.com/httpwg/http2-spec/issues/348",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "A long discussion was had.  We decided to go with NUL (0x0) as a separator, but HTTP/1.1 has a perfectly good separator character, \",\".\n",
      "createdAt": "2014-01-23T09:02:09Z",
      "updatedAt": "2014-01-23T09:15:08Z",
      "closedAt": "2014-01-23T09:15:08Z",
      "comments": []
    },
    {
      "number": 349,
      "id": "MDU6SXNzdWUyNjE1MzQ5Ng==",
      "title": "Load Asymmetry",
      "url": "https://github.com/httpwg/http2-spec/issues/349",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "mnot"
      ],
      "labels": [
        "design",
        "editor-ready",
        "transport mapping"
      ],
      "body": "HTTP/2 has different properties to HTTP/1 regarding server-side load, because load balancers etc. currently exploit HTTP/1's short connections. HTTP/2 has much longer-lived connections, making it more difficult to load balance traffic.\n\nA mechanism to direct the client to use a different server/port would mitigate this. While GOAWAY could be used to do this, it introduces latency as the new connection is set up.\n",
      "createdAt": "2014-01-23T09:26:35Z",
      "updatedAt": "2014-03-25T23:01:58Z",
      "closedAt": "2014-03-25T23:01:58Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Alt-Svc?\n",
          "createdAt": "2014-01-23T13:05:25Z",
          "updatedAt": "2014-01-23T13:05:25Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "http://tools.ietf.org/html/draft-nottingham-httpbis-alt-svc\n",
          "createdAt": "2014-01-24T15:33:26Z",
          "updatedAt": "2014-01-24T15:33:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@mnot, is this really in the next milestone?  It doesn't seem like we're ready yet.\n",
          "createdAt": "2014-02-03T17:38:04Z",
          "updatedAt": "2014-02-03T17:38:04Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Should get out a draft momentarily; if we don't make it, that's fine, but if we can, it'd be good to have a bit of discussion first.\n",
          "createdAt": "2014-02-05T04:44:16Z",
          "updatedAt": "2014-02-05T04:44:16Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@mnot this missed the boat.  Can I request that you put together something we can discuss in London instead.\n",
          "createdAt": "2014-02-13T19:35:44Z",
          "updatedAt": "2014-02-13T19:35:44Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Yes, it's on the list for discussion there. The boat technically is delayed at dock...\n",
          "createdAt": "2014-02-17T02:46:59Z",
          "updatedAt": "2014-02-17T02:46:59Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; agreed to using ALTSVC frame for this.\n",
          "createdAt": "2014-03-05T16:50:50Z",
          "updatedAt": "2014-03-05T16:50:50Z"
        }
      ]
    },
    {
      "number": 350,
      "id": "MDU6SXNzdWUyNjE1NDMwNg==",
      "title": "Add END_MESSAGE flag to ensure it is passed end-to-end.",
      "url": "https://github.com/httpwg/http2-spec/issues/350",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [
        "jpinner"
      ],
      "labels": [
        "design",
        "streams"
      ],
      "body": "There is some usefulness from both an extensibility perspective and a load balancing perspective to indicate multiple messages over an individual stream.\n\nThis issue is to un-reserve the 0x02 END_MESSAGE flag to ensure that intermediaries that are deployed proxy the flag so that they are agnostic to the layered protocol and can still successfully load balance messages appropriately.\n",
      "createdAt": "2014-01-23T09:41:53Z",
      "updatedAt": "2014-02-03T20:53:15Z",
      "closedAt": "2014-02-03T20:53:15Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Note that this places a requirement on proxies that they cannot coalesce data frames across \"END_MESSAGE\" boundaries.\n",
          "createdAt": "2014-01-23T09:48:35Z",
          "updatedAt": "2014-01-23T09:48:35Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Zurich with no real conclusion.  Support and opposition were weak.\n",
          "createdAt": "2014-01-23T17:00:28Z",
          "updatedAt": "2014-01-23T17:00:28Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; accepted in principle. Jeff to do a pull request.\n",
          "createdAt": "2014-01-24T15:54:42Z",
          "updatedAt": "2014-01-24T15:54:42Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Renamed END_MESSAGE to END_SEGMENT to avoid any confusion with HTTP messages. Feel free to re-name. Couldn't find any text that stated intermediaries could combine frames but may want to add a requirement that intermediaries must re-emit the flag at the same byte position.\n",
          "createdAt": "2014-01-28T20:13:02Z",
          "updatedAt": "2014-01-28T20:13:02Z"
        }
      ]
    },
    {
      "number": 351,
      "id": "MDU6SXNzdWUyNjE1NjMzMA==",
      "title": "Comma and NUL for header splitting",
      "url": "https://github.com/httpwg/http2-spec/issues/351",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "NUL is unnecessary.\n",
      "createdAt": "2014-01-23T10:19:42Z",
      "updatedAt": "2014-01-23T11:10:50Z",
      "closedAt": "2014-01-23T11:10:50Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; will remain with NULL (or other control character, at editor's discretion).\n",
          "createdAt": "2014-01-23T11:10:50Z",
          "updatedAt": "2014-01-23T11:10:50Z"
        }
      ]
    },
    {
      "number": 352,
      "id": "MDU6SXNzdWUyNjE1NzY3Mw==",
      "title": "Require Flow Control",
      "url": "https://github.com/httpwg/http2-spec/issues/352",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "flow control"
      ],
      "body": "Remove the end_flow_control setting and associated wording.\n",
      "createdAt": "2014-01-23T10:44:44Z",
      "updatedAt": "2014-01-23T12:42:08Z",
      "closedAt": "2014-01-23T12:42:08Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; make it so.\n",
          "createdAt": "2014-01-23T10:56:05Z",
          "updatedAt": "2014-01-23T10:56:05Z"
        }
      ]
    },
    {
      "number": 354,
      "id": "MDU6SXNzdWUyNjE2MzgxNQ==",
      "title": "duplicate change log entry for -01 draft",
      "url": "https://github.com/httpwg/http2-spec/issues/354",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "See http://greenbytes.de/tech/webdav/draft-ietf-httpbis-header-compression-05.html#rfc.section.A.4\n",
      "createdAt": "2014-01-23T12:47:04Z",
      "updatedAt": "2014-02-03T18:10:01Z",
      "closedAt": "2014-02-03T18:10:01Z",
      "comments": []
    },
    {
      "number": 355,
      "id": "MDU6SXNzdWUyNjE2NzEwNw==",
      "title": "Drop Minor Versioning",
      "url": "https://github.com/httpwg/http2-spec/issues/355",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready"
      ],
      "body": "Indicating backwards-compatible changes in the protocol version isn't useful, so we should drop the minor version number.\n",
      "createdAt": "2014-01-23T13:47:25Z",
      "updatedAt": "2014-01-29T17:30:50Z",
      "closedAt": "2014-01-29T17:30:50Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We discussed this in Zurich and the general sense of the room was that the minor version number added no value.\n",
          "createdAt": "2014-01-23T13:51:26Z",
          "updatedAt": "2014-01-23T13:51:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in https://github.com/http2/http2-spec/commit/384706f09f1c7af5e3cbd0721b1a09b6463058d8\n",
          "createdAt": "2014-01-29T17:30:50Z",
          "updatedAt": "2014-01-29T17:30:50Z"
        }
      ]
    },
    {
      "number": 356,
      "id": "MDU6SXNzdWUyNjE3NjEwMQ==",
      "title": "Too damned many settings",
      "url": "https://github.com/httpwg/http2-spec/issues/356",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics"
      ],
      "body": "2^32 is far too many settings.\n",
      "createdAt": "2014-01-23T15:57:07Z",
      "updatedAt": "2014-01-23T16:22:53Z",
      "closedAt": "2014-01-23T16:22:53Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Zurich; 1-byte IDs, 4-byte values.\n",
          "createdAt": "2014-01-23T16:06:05Z",
          "updatedAt": "2014-01-23T16:06:05Z"
        }
      ]
    },
    {
      "number": 357,
      "id": "MDU6SXNzdWUyNjIyNjM4Mg==",
      "title": "Remote side needs to be informed when it has failed to meet minimum security requirements",
      "url": "https://github.com/httpwg/http2-spec/issues/357",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "transport mapping"
      ],
      "body": "Give how much software is constructed, it is likely that the TLS connection, including ALPN negotiation will have succeeded before the state about the negotiated TLS parameters is propagated to the application-layer code.\n\nAs a result, it is likely that the current text in the draft saying that the negotiation should not occur as a result of not including the alpn-token for HTTP2 within the ALPN string will often not match reality.\n\nWe need to modify the text to deal with this case by ensuring that the application-layer must tear-down the connection in such cases without sending any requests, including an error code indicating that the minimum security baseline was not met.\n",
      "createdAt": "2014-01-24T08:44:09Z",
      "updatedAt": "2014-01-24T15:12:45Z",
      "closedAt": "2014-01-24T15:12:45Z",
      "comments": []
    },
    {
      "number": 359,
      "id": "MDU6SXNzdWUyNjIyOTY1NA==",
      "title": "Connection Coalescing",
      "url": "https://github.com/httpwg/http2-spec/issues/359",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "transport mapping"
      ],
      "body": "",
      "createdAt": "2014-01-24T09:49:54Z",
      "updatedAt": "2014-03-05T14:36:31Z",
      "closedAt": "2014-03-05T14:36:31Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "We need to define how to decide which connection to use for a given URI, when they can be reused, etc. May need to consider http URIs over TLS, etc. depending on decisions there. Client certificates are a complication. SubjectAltName too.\n",
          "createdAt": "2014-01-24T15:30:30Z",
          "updatedAt": "2014-01-24T15:30:30Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Partial proposal: insert after 9.1 Connection Management second paragraph:\n\nClients MAY use a single connection for more than one origin when each origin's hostname resolves to the same IP address, and they share the same port. When an origin's scheme is \"https\", the server's certificate MUST be valid for the origin's hostname to be used in this fashion; this might be accomplished using a \"wildcard certificate\", SubjectAltName [RFC3280], or some other mechanism.\n",
          "createdAt": "2014-01-31T05:29:25Z",
          "updatedAt": "2014-01-31T05:32:11Z"
        }
      ]
    },
    {
      "number": 360,
      "id": "MDU6SXNzdWUyNjIzMDY4OQ==",
      "title": "Allow http schemed URIs to go over an existing TLS connection for which it is authoritative.",
      "url": "https://github.com/httpwg/http2-spec/issues/360",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "security",
        "transport mapping"
      ],
      "body": "",
      "createdAt": "2014-01-24T10:10:52Z",
      "updatedAt": "2014-01-24T15:27:59Z",
      "closedAt": "2014-01-24T15:27:59Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Duplicate of opportunistic encryption discussion; some impact on connection coalescing.\n",
          "createdAt": "2014-01-24T15:27:59Z",
          "updatedAt": "2014-01-24T15:27:59Z"
        }
      ]
    },
    {
      "number": 362,
      "id": "MDU6SXNzdWUyNjI1NTI3Ng==",
      "title": "BLOCKED frame should be added",
      "url": "https://github.com/httpwg/http2-spec/issues/362",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "grmocg"
      ],
      "labels": [
        "design",
        "flow control",
        "server push",
        "streams"
      ],
      "body": "A remote endpoint may be blocked on a lack of allocated resources, and may wish to signal this.\nExamples:\nA server may have offered 100 max concurrency, and the client has all 100 used for long-polling requests, and thus can make no forward progress, i.e. it is blocked.\n\nA client has offered a flow control window that is substantially smaller than the TCP send buffer, and so, the server can make no forward progress without receiving a WINDOW_UPDATE frame, i.e. it is blocked.\n\nWe should include a frame which allows this to be indicated.\nProposals:\n\nOption A) after the 8-byte header,\n single one-byte field indicating what is causing the endpoint to be blocked, with the following two values allowed\nBLOCKED_ON_FLOW_CONTROL: 0x1\nBLOCKED_ON_STREAM_LIMIT: 0x2\n\nStream flow control that is blocked uses the stream-id of the stream-id that is blocked.\nsession flow control that is blocked uses stream-id 0.\nwhen blocked on stream limit, uses stream-id 0\n\nOption B)\nblocked frame consists of the 8 byte header, and a flag indicates whether the blockage is resulting from flow-control, or from stream limits. stream-ids signaled as in option A.\n",
      "createdAt": "2014-01-24T17:07:36Z",
      "updatedAt": "2014-04-24T22:12:44Z",
      "closedAt": "2014-04-24T22:12:44Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Please raise this on the list so that I can present my argument against it.\n",
          "createdAt": "2014-01-24T22:36:37Z",
          "updatedAt": "2014-01-24T22:36:37Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London DTM; pushback on adding complexity, need for it, more opportunity for DDoS. Roberto to take to the list.\n",
          "createdAt": "2014-03-08T10:35:29Z",
          "updatedAt": "2014-03-08T10:35:29Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Incorporated with 28701268d, etc.\n",
          "createdAt": "2014-04-24T22:12:44Z",
          "updatedAt": "2014-04-24T22:12:44Z"
        }
      ]
    },
    {
      "number": 363,
      "id": "MDU6SXNzdWUyNjI4NzE0Mg==",
      "title": "TLS renegotiation",
      "url": "https://github.com/httpwg/http2-spec/issues/363",
      "state": "CLOSED",
      "author": "briansmith",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "security"
      ],
      "body": "In Firefox, we refuse servers' requests for client certificates if we've done connection coalescing on a connection. This has potential interop issues. For example, Apache can be configured to require a client certificate (via a TLS renegotiation) only upon the first request to some particular paths. This can easily put us in a state where we cannot access such paths:\n1. Browser connects to https://foo.example.org\n2. Browser coalesces https://bar.example.org onto that same connection.\n3. Browser requests https://foo.example.org/requires-cert.\n4. Server requests (demands) client cert\n5. Browser refuses to send one.\n6. Server returns 401/403/whatever error.\n\nNote that in theory coalescing could happen before any requests are sent on the connection. Thus, this has the potential to make some client-certificate-required resources completely inaccessible to the client, unless the client retries the request. The client probably won't retry the request, and may not be allowed to if it isn't idempotent.\n\nBesides the problems with connection coalescing, TLS renegotiation doesn't fit well with browser UI. In particular, it is possible for the server to send a different server cert in a renegotiation than it sent in the initial handshake. It could do this renegotiation even in the middle of a request or response, even in HTTP/1. This problem is even more likely to occur in HTTP/2 because transactions are multiplexed instead of being serialized. The browser thus cannot map requests/responses to certificates in a well-defined way. Yet, usually browsers present server identity in such a way that would make any server certificate change potentially misleading to the user.\n\nI am sure we can think of many reasons why TLS renegotiation is a bad idea for HTTP servers (of any version). It's probably too late to do anything meaningful about it for HTTP/1 since clients have to deal with existing servers that do it. it would be great to improve things for HTTP/2.\n\nHowever, because TLS <= 1.2 sends the client certificate in the clear, many implementations (including, IIRC, IIS in its default configuration) do a handshake without a client certificate and then immediately renegotiate to get the client certificate, to protect the client's identity. Thus, we probably cannot prohibit renegotiations that occur at the start of the handshake. A further complication is that TLS False Start interacts poorly with such schemes because the client may send a request on the connection before the server can even request the renegotiation that it intended to occur before any requests were made.\n",
      "createdAt": "2014-01-25T05:21:23Z",
      "updatedAt": "2014-06-16T18:55:34Z",
      "closedAt": "2014-06-16T18:55:34Z",
      "comments": [
        {
          "author": "BukhariH",
          "authorAssociation": "NONE",
          "body": "TLS renegotiation is a problem that's been discussed an awful lot since 2010 when the renegotiation handshake exploit came out. Later on it was fixed by RFC 5746 however the discussion was at the time that TLS renegotiation had to be changed (probably in a way that wasn't backwards incompatible).\n\nHence, I agree with Brian that this behaviour isn't the fault of connection coalescing but rather a fundamental problem with TLS renegotiation hence we should probably limit it's use if not completely forbidding it.\n",
          "createdAt": "2014-02-02T19:09:40Z",
          "updatedAt": "2014-02-02T19:09:40Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; sense in the room that renegotiation shouldn't be allowed; more discussion about how to accommodate use cases to ensue (e.g., at design team meeting).\n",
          "createdAt": "2014-03-05T14:28:24Z",
          "updatedAt": "2014-03-05T14:28:24Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just documenting my concern for posterity...I too would like to forbid TLS renegotiation if possible. I just worry that we will create pressure for servers not to adopt HTTP/2 or for users to switch browsers if TLS renegotiation isn't supported in HTTP/2. Other than this concern, I'm all for forbidding TLS renegotiation. I hope we can get away with it :)\n",
          "createdAt": "2014-03-05T16:36:40Z",
          "updatedAt": "2014-03-05T16:36:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "As far as I can tell the high running reasons for using renegotiation are:\n1. client authentication (either mid-session, or to provide confidentiality for user credentials)\n2. key update for long-running sessions\n\nSince we already have an expiration date on HTTP/2 connections, perhaps we can punt on the second one.\n\nI've put together a pair of proposals for addressing the first.  If these are palatable, then we should consider forcing implementations to only renegotiate immediately after connecting.  That would address these concerns, especially allowing TLS 1.2 and earlier implementations to get confidentiality protection for client credentials.\n- https://tools.ietf.org/html/draft-thomson-tls-care-00\n- http://tools.ietf.org/html/draft-thomson-httpbis-catch-00\n",
          "createdAt": "2014-03-13T21:15:08Z",
          "updatedAt": "2014-03-13T21:16:27Z"
        },
        {
          "author": "BukhariH",
          "authorAssociation": "NONE",
          "body": "I think the aim of HTTP/2 is to be backwards compatible so as to rush adoption of it as a protocol hence I think @martinthomson is on the right track. We can still be mostly backwards compatible by forcing renegotiations to happen immediately after the initial handshake.\n\nBut, these are still all short term solutions I feel because TLS renegotiation is an utter mess and the only real way to fix it would be to forbid TLS renegotiation and force the use of TLS > 1.2 but that would be backwards incompatible hence it's off the table I would assume.\n",
          "createdAt": "2014-03-14T22:08:57Z",
          "updatedAt": "2014-03-14T22:08:57Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@BukhariH, yeah, mandating use of something that doesn't yet exist (TLS 1.3) would be a non-starter.\n",
          "createdAt": "2014-03-14T22:13:17Z",
          "updatedAt": "2014-03-14T22:13:17Z"
        },
        {
          "author": "BukhariH",
          "authorAssociation": "NONE",
          "body": "@martinthomson TLS 1.2 in practical terms is reliant on renegotiations as Brian described hence we can't exactly forbid renegotiation without making TLS connections are workable.\n",
          "createdAt": "2014-03-14T23:11:30Z",
          "updatedAt": "2014-03-14T23:11:49Z"
        },
        {
          "author": "brianraymor",
          "authorAssociation": "NONE",
          "body": "Also see Rob's posting  - http://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/0186.html - \n\nWe have been doing some internal investigations and it looks like we have scenarios that require TLS client auth.  Based on this, we took another look at the current editor's draft, and it appears that the spec creates a conflict between the [TLS-EXT] spec and coalescing.  Essentially, coalescing to multiple server names violates section 3, RFC 6066 [TLS-EXT] where it states:\n\n\"If the server_name is established in the TLS session handshake, the client SHOULD NOT attempt to request a different server name at the application layer.\"\n\nBecause of this, we have two SHOULD NOT statements that clearly contradict each other and now cause complication for existing HTTP deployments.  The original text of section 9.1 was that we were encouraging clients to follow the same origin policy which would avoid these problems.  The new text in section 9.1 actually discourages implementations from following the same origin policy.\n\nMy proposal is the following:\n1. ```\n     Discourage coalescing. This is especially true for TLS connections in order to reuse TLS and SNI as defined and implemented.  This also follows the principle from the charter of maintaining existing HTTP semantics.\n   ```\n2. ```\n     If an implementation is doing #1 then we can leave client auth as is and we do not need to disallow HTTP/2 for scenarios that require it today.\n   ```\n3. ```\n     Refer the discussion of coalescing, removing renegotiation and client auth to the TLS working group.  Maybe it is something that can be addressed in TLS 1.3.\n   ```\n",
          "createdAt": "2014-04-28T20:52:02Z",
          "updatedAt": "2014-04-28T20:52:02Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Commit 565572d5322c9db0f600dcc291db081447f496c3 introduces the conflict with SNI.  The simplest resolution to that aspect would be to expand the definition of a destination from IP:port to IP:port:SNI when TLS is used.  Then the SHOULD NOTs would align.\n",
          "createdAt": "2014-06-02T22:58:17Z",
          "updatedAt": "2014-06-02T22:58:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's not try to disguise this issue as a bug-fix.  This is a feature that some parties find important.  Let's discuss this a) on the list, and b) as openly as we can manage.  I've opened issue #490 to cover this.\n\nThe alternatives I see are:\n1. Permit coalescing, as the current text allows and deal with the RFC 6066 violation.\n2. Forbid coalescing.\n\nI think that we can easily collect pros and cons on both options and then have it out.\n",
          "createdAt": "2014-06-02T23:45:28Z",
          "updatedAt": "2014-06-02T23:45:28Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; #496 resolution gives a transitional strategy; better things may be done in the future.\n\nSpec text needs to disallow (MUST NOT) renegotiation (client to PROTOCOL_ERROR) and illustrate what to do (i.e., fall back to 1.1) for client auth using #496 (non-normative).\n",
          "createdAt": "2014-06-06T16:11:09Z",
          "updatedAt": "2014-06-06T16:11:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed in #514.\n",
          "createdAt": "2014-06-16T18:55:34Z",
          "updatedAt": "2014-06-16T18:55:34Z"
        }
      ]
    },
    {
      "number": 365,
      "id": "MDU6SXNzdWUyNjM2MzY0MQ==",
      "title": "Re-work op-code patterns",
      "url": "https://github.com/httpwg/http2-spec/issues/365",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "With the different changes added in Z\u00fcrich to HPACK, I think a re-working of the patterns used for the different op-code could be more efficient.\nCurrent, we have 3 op-ocodes:\n- 1 - Indexed Header\n- 01 - Literal Header without Indexing\n- 00 - Literal Header with Indexing\n\nI would propose to add a 4th op-code, which would be used for signalling changes to the encoding context:\n- Empty reference set\n- Change maximum header table size\n- Empty header table\n- Padding\n\nThe new op-codes would be:\n- 1 - Indexed Header\n- 010 - Literal Header without Indexing\n- 011 - Encoding context change\n- 00 - Literal Header with Indexing\n\nI did some quick testing, and changing the op-code for Literal Header without Indexing has only a very small impact on the compaction size.\n- For the mnot test-set: going from 29.62% of HTTP/1.1 size to 29.64.\n- For the hruellan test-set: going from 21.65% to 21.68%.\n\nI think this is a cleaner approach with a negligible compression cost.\n",
      "createdAt": "2014-01-27T16:15:11Z",
      "updatedAt": "2014-03-03T15:01:26Z",
      "closedAt": "2014-03-03T15:01:26Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "With the proposed change what would 0b1000000 signal?\n\nIf we are going to add a new opcode, I'd prefer to see the literal header encodes both start with the same symbol:\n\n1 - Indexed Header\n00 - Encoding context change\n010 - Literal Header without Indexing\n011 - Literal Header with Indexing\n\nThough I'm not sure why this is necessary -- seems like 0x80 is a clean enough signal and can be followed by an arbitrary set of control opcodes without expanding the compression size.\n",
          "createdAt": "2014-01-27T16:43:05Z",
          "updatedAt": "2014-01-27T16:43:05Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "**Issue recap**\n\nClearing the reference set is useful for cases where differential header set encoding doesn't work well. An example is a connection aggregating several other connections, for example between a proxy and a server.\n\nUsing two bytes for clearing the reference set instead of one decreases the usefulness of this mechanism: quick testing showed between 1/4 and 1/3 loss in compression increase.\n\nTherefore, it would be better to use only one byte.\n\n**First proposal: re-work opcodes**\n\nAs described previously, the new opcodes would be:\n- 1 - Indexed Header\n- 010 - Literal Header without Indexing\n- 011 - Encoding context change\n- 00 - Literal Header with Indexing\n\n**Second proposal: use specific indexes**\n\nIndex 0 is used for clearing the reference set.\n\nThe first free index after the static table (or another one) is used for signalling header table size change.\n",
          "createdAt": "2014-03-02T19:47:53Z",
          "updatedAt": "2014-03-02T19:48:23Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; closed with no action.\n",
          "createdAt": "2014-03-03T15:01:26Z",
          "updatedAt": "2014-03-03T15:01:26Z"
        }
      ]
    },
    {
      "number": 370,
      "id": "MDU6SXNzdWUyNjYxNDgzMA==",
      "title": "Server Push request header fields",
      "url": "https://github.com/httpwg/http2-spec/issues/370",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "server push"
      ],
      "body": "In 8.2.1, the request header fields for a pushed resourced are defined as the header fields in the PUSH_PROMISE.\nIn 10.4, they are defined as a combination of the request that triggered the push, plus resource identification information provided by the server.\n\nWe should make this consistent.\n\nUsing only the header fields in the PUSH_PROMISE is probably the simplest solution, but makes the protocol more chatty as some headers present in the initial request will be repeated in the PUSH_PROMISE (in particular cookies...). However, a server will probably push more than one resource, and HPACK will deal in most part with these repetitions.\n\nThe other solution is to use a combination of the initial request and the PUSH_PROMISE. It's more complex and we need to define clear rules for handling this. It also may prove more complex to handle in implementations, in particular for proxies.\n",
      "createdAt": "2014-01-30T17:14:27Z",
      "updatedAt": "2014-01-30T22:49:43Z",
      "closedAt": "2014-01-30T22:49:43Z",
      "comments": []
    },
    {
      "number": 373,
      "id": "MDU6SXNzdWUyNjcwNzUwOQ==",
      "title": "HPACK vulnerabilities",
      "url": "https://github.com/httpwg/http2-spec/issues/373",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression",
        "security"
      ],
      "body": "Analysis suggests that there might be some issues with HPACK that at least need documenting.\n\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/0233.html\n\nThe most serious concern is the use of reference sets or the header table to confirm guesses about header contents.  This doesn't require a server oracle, which reduces the potential cost to an attacker.\n\nThis isn't constant time like CRIME, but there are headers with low entropy secrets out there (basic auth, for example).  Thus, we need to be very cautious about this.  It may be that in a browser, the only way we are able to mitigate this is to prevent use of the header table for requests that are controlled by different origins.\n",
      "createdAt": "2014-01-31T19:08:09Z",
      "updatedAt": "2014-03-31T16:47:11Z",
      "closedAt": "2014-03-31T16:47:11Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "As part of this we should also consider the risks of HPACK if multiple schemes are allowed on a single connection (which may just be another reason to be careful when mixing schemes, especially http and https).\n",
          "createdAt": "2014-03-03T15:02:26Z",
          "updatedAt": "2014-03-03T15:02:26Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; agreed to have a single bit in the header format indicating that it can't be compressed, and add Security Considerations about this attack, with potential options.\n",
          "createdAt": "2014-03-05T14:16:27Z",
          "updatedAt": "2014-03-05T14:16:27Z"
        }
      ]
    },
    {
      "number": 381,
      "id": "MDU6SXNzdWUyNzMwNTY4OQ==",
      "title": "DNS-based Upgrade",
      "url": "https://github.com/httpwg/http2-spec/issues/381",
      "state": "CLOSED",
      "author": "emile22",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "upgrade"
      ],
      "body": "Section 3 doesn't document the discovery of the support of the HTTP2 protocol by a content origin.\n",
      "createdAt": "2014-02-10T22:19:35Z",
      "updatedAt": "2014-03-03T14:53:30Z",
      "closedAt": "2014-03-03T14:53:30Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Can you give more details / an example? Not sure what you mean...\n",
          "createdAt": "2014-02-10T23:02:44Z",
          "updatedAt": "2014-02-10T23:02:44Z"
        },
        {
          "author": "emile22",
          "authorAssociation": "NONE",
          "body": " HTTP2 is carried over TCP. So when HTTP1 and HTTP2 are not carried on the\nsame TCP port, browsers need a mechanism to discover this port.\nDNS SRV provides such a mechanism and is already standardized. So I propose\nto add this discovery mechanism in a new section in section 3.\n",
          "createdAt": "2014-02-11T11:05:45Z",
          "updatedAt": "2014-02-11T11:05:45Z"
        },
        {
          "author": "salvatoreloreto",
          "authorAssociation": "NONE",
          "body": "I support this proposal\n\n/Salvatore\n\nOn Feb 11, 2014, at 1:05 PM, emile notifications@github.com wrote:\n\n> HTTP2 is carried over TCP. So when HTTP1 and HTTP2 are not carried on the\n> same TCP port, browsers need a mechanism to discover this port.\n> DNS SRV provides such a mechanism and is already standardized. So I propose\n> to add this discovery mechanism in a new section in section 3.\n> \u2014\n> Reply to this email directly or view it on GitHub.\n",
          "createdAt": "2014-02-11T11:17:46Z",
          "updatedAt": "2014-02-11T11:17:46Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the clarification. Hasn't Paul Hoffman proposed this before,\nwith Patrick McManus supporting this? I forget. In any case, I think it's\nworthwhile to bring this to the list.\n\nOn Tue Feb 11 2014 at 3:17:49 AM, Salvatore Loreto notifications@github.com\nwrote:\n\n> I support this proposal\n> \n> /Salvatore\n> \n> On Feb 11, 2014, at 1:05 PM, emile notifications@github.com wrote:\n> \n> > HTTP2 is carried over TCP. So when HTTP1 and HTTP2 are not carried on\n> > the\n> > same TCP port, browsers need a mechanism to discover this port.\n> > DNS SRV provides such a mechanism and is already standardized. So I\n> > propose\n> > to add this discovery mechanism in a new section in section 3.\n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/381#issuecomment-34745246\n> .\n",
          "createdAt": "2014-02-11T19:55:29Z",
          "updatedAt": "2014-02-11T19:55:29Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Ah. We've discussed DNS-based discovery a few times, but so far there hasn't been great interest in it; I believe Mozilla is running some experiments on it. \n\nWe can discuss again in London; feel free to bring up on the list in the meantime.\n\nThis is related to #1.\n",
          "createdAt": "2014-02-12T04:36:36Z",
          "updatedAt": "2014-02-12T04:36:36Z"
        },
        {
          "author": "inopinatus",
          "authorAssociation": "NONE",
          "body": "Using SRV records will resolve a whole raft of practical hosting issues that ISPs face.\n\nThe most important point is philosophical: HTTP/2.x is a service and should be looking up a service, not a hostname.\n\nDoing so:\n- Will resolve the misbehaviours with IPv6, because the response to SRV lookup usually includes both IPv4 and IPv6 records. Failure to address IPv6 issues is a failure to consider the very near future.\n- Will resolve the inability to use CNAMEs for naked domains (the \"apex record\" issue), with all the availability & hosting design problems that have arisen as a result, because SRV works at the apex, unlike CNAME.\n- Enables the use of other SRV record behaviours, most usefully declaring fallback services.\n- Allows HTTP/2.x to be served on a different TCP port without making it URL explicit, which was always a layering violation.\n\nSeriously, not using SRV means that the protocol isn't addressing the whole picture. Perhaps more ISP hosting people would like to chime in. Having designed hosting systems for many ISPs now, I think this is pretty much the only opportunity to resolve these issues.\n\nIn my view, SRV could be the sole mandatory method for discovering HTTP/2.x services. The use of address records really should be firmly deprecated; they are for hosts, not services. We do this for mail server discovery already (RFC6186).\n\nEssentially, SRV is what CNAME should've been. RFC 2219 foresees this; section 5 of RFC 6335 (aka BCP 165 - the governing document for the IANA service registry) even has explicit clarification for how \"http\" is to be used in SRV records, firmly deprecating \"www\", but this hasn't gained traction due to the momentum of the existing protocol. HTTP/2.x, once deployed, will go the same way, so this is the _only_ opportunity to improve matters.\n",
          "createdAt": "2014-02-16T23:11:55Z",
          "updatedAt": "2014-02-16T23:11:55Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@inopinatus, can you please take this to the mailing list ietf-http-wg@w3.org?  Thanks.\n",
          "createdAt": "2014-02-17T19:42:45Z",
          "updatedAt": "2014-02-17T19:42:45Z"
        },
        {
          "author": "inopinatus",
          "authorAssociation": "NONE",
          "body": "@martinthomson - I already did\n",
          "createdAt": "2014-02-17T20:19:42Z",
          "updatedAt": "2014-02-17T20:19:42Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; this is decoupled from the HTTP/2 spec and not blocking it; we may see more experimentation / discussion.\n",
          "createdAt": "2014-03-03T14:53:30Z",
          "updatedAt": "2014-03-03T14:53:30Z"
        }
      ]
    },
    {
      "number": 384,
      "id": "MDU6SXNzdWUyNzU1MTczMQ==",
      "title": "Cleanup text for SETTINGS_INITIAL_WINDOW_SIZE",
      "url": "https://github.com/httpwg/http2-spec/issues/384",
      "state": "CLOSED",
      "author": "OsamaM",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In section 6.5.2 \"Defined Settings\", all the settings describe their initial/default value.  However, SETTINGS_INITIAL_WINDOW_SIZE does not.  \n\nSection 6.9.2 \"Initial Flow Control Window Size\" says the initial flow control window size is 65535 so lets move that text as part of SETTINGS_INITIAL_WINDOW_SIZE description.\n",
      "createdAt": "2014-02-13T20:58:08Z",
      "updatedAt": "2014-02-25T22:54:18Z",
      "closedAt": "2014-02-25T22:54:18Z",
      "comments": []
    },
    {
      "number": 385,
      "id": "MDU6SXNzdWUyNzU4MTI4MA==",
      "title": "Huffman Codes",
      "url": "https://github.com/httpwg/http2-spec/issues/385",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Huffman codes in HPACK should be revised to take into account statistics for both requests and responses.\nPossibly, using a large representative set of headers would be good.\n",
      "createdAt": "2014-02-14T08:45:57Z",
      "updatedAt": "2014-04-01T14:52:34Z",
      "closedAt": "2014-04-01T14:52:34Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@hruellan @grmocg - think this will be ready by end of London?\n",
          "createdAt": "2014-02-19T00:43:25Z",
          "updatedAt": "2014-02-19T00:43:25Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unless Herve chimes in soon, one should assume this won't be done by London.\nThis is a low impact change if delayed, thankfully-- changing constants in\na program _should_ be easy.\n\nOn Tue, Feb 18, 2014 at 4:43 PM, Mark Nottingham\nnotifications@github.comwrote:\n\n> @hruellan https://github.com/hruellan @grmocghttps://github.com/grmocg\\- think this will be ready by end of London?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/385#issuecomment-35453834\n> .\n",
          "createdAt": "2014-02-19T00:59:16Z",
          "updatedAt": "2014-02-19T00:59:16Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There's a point at which we are required to stop changing stuff.  That should be soon.  I think that \"end of London\" is a reasonable marker.\n",
          "createdAt": "2014-02-19T18:37:19Z",
          "updatedAt": "2014-02-19T18:37:19Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The rejection of a change should be based on how much disruption the change\ncauses, as opposed to a wholesale modification freeze.\n\nThe latter essentially implies last call.\nOn Feb 19, 2014 10:37 AM, \"Martin Thomson\" notifications@github.com wrote:\n\n> There's a point at which we are required to stop changing stuff. That\n> should be soon. I think that \"end of London\" is a reasonable marker.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/385#issuecomment-35532108\n> .\n",
          "createdAt": "2014-02-19T18:41:44Z",
          "updatedAt": "2014-02-19T18:41:44Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, that was what I was implying.  We discussed taking this to last call soon, is there any reason why you think that would be a bad idea?\n",
          "createdAt": "2014-02-19T20:49:06Z",
          "updatedAt": "2014-02-19T20:49:06Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I won't have time to work on this before London. I should be able to do it after London.\n",
          "createdAt": "2014-02-20T10:29:27Z",
          "updatedAt": "2014-02-20T10:29:27Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; Herve to regenerate.\n",
          "createdAt": "2014-03-03T14:43:43Z",
          "updatedAt": "2014-03-03T14:43:43Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How many times can Herve regenerate? Do they have the same limits in France as on Gallifrey?\n\n(I was asked by mnot to comment over here) \n",
          "createdAt": "2014-03-04T11:02:18Z",
          "updatedAt": "2014-03-04T11:02:18Z"
        }
      ]
    },
    {
      "number": 386,
      "id": "MDU6SXNzdWUyNzY2MDAwMQ==",
      "title": "WebSockets",
      "url": "https://github.com/httpwg/http2-spec/issues/386",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "This issue is a placeholder / tracking issue for anything related to WebSockets support in HTTP/2.\n",
      "createdAt": "2014-02-15T23:37:11Z",
      "updatedAt": "2017-11-13T22:26:58Z",
      "closedAt": "2014-06-05T15:48:01Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Note that our charter says we need to \"will coordinate this item with...[t]he HYBI Working Group, regarding the possible future extension of HTTP/2.0 to carry WebSockets semantics.\"\n",
          "createdAt": "2014-02-15T23:39:35Z",
          "updatedAt": "2014-02-15T23:39:35Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See also:\n  http://tools.ietf.org/html/draft-hirano-httpbis-websocket-over-http2-00\n",
          "createdAt": "2014-03-01T11:16:07Z",
          "updatedAt": "2014-03-01T11:16:07Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "And:\n  https://github.com/yutakahirano/ws-over-http2/blob/master/ws-over-http2-message-mapping.md\n",
          "createdAt": "2014-03-01T11:25:13Z",
          "updatedAt": "2014-03-01T11:25:13Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; we believe this _could_ be done with extensibility (e.g,. with a new ALPN token, _maybe_ new frame types + settings) - but we're not going to explicitly design it.\n",
          "createdAt": "2014-06-05T15:48:01Z",
          "updatedAt": "2014-06-05T15:48:01Z"
        },
        {
          "author": "thedrow",
          "authorAssociation": "NONE",
          "body": "Why not? WebSockets are here to stay. If it won't be designed later implementations with HTTP 2.0 will be a mess (think JavaScript in the 90s).\n",
          "createdAt": "2014-06-05T16:55:02Z",
          "updatedAt": "2014-06-05T16:55:02Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@thedrow we haven't decided not to do websockets, we've only decided not to block HTTP/2 until a design for websockets over HTTP/2 is done.\n",
          "createdAt": "2014-06-05T16:57:47Z",
          "updatedAt": "2014-06-05T16:57:47Z"
        },
        {
          "author": "lenovouser",
          "authorAssociation": "NONE",
          "body": "Are there any updates on this? It has been a whole year now since someone commented on this, are WebSockets still going to be implemented in **HTTP/2**?\n\nAlso see https://github.com/mholt/caddy/issues/189\n",
          "createdAt": "2015-09-12T11:12:40Z",
          "updatedAt": "2015-09-12T12:25:35Z"
        },
        {
          "author": "MartinKei",
          "authorAssociation": "NONE",
          "body": "What's the status on this one?\n",
          "createdAt": "2015-12-15T15:27:23Z",
          "updatedAt": "2015-12-15T15:27:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Awaiting someone to do some work: implement it, convince others to implement it, etc...\n",
          "createdAt": "2015-12-15T20:56:01Z",
          "updatedAt": "2015-12-15T20:56:01Z"
        },
        {
          "author": "AlanQuatermain",
          "authorAssociation": "NONE",
          "body": "I'm looking into this for the HTTP/2 upgrade across our systems at LinkedIn. I'm given to understand that the lack of WebSockets makes this upgrade more arduous for us (i.e. minimal benefit unless we roll out these changes across a very wide number of micro services across a large number of colocation locations, etc.) I've found Yutaka Hirano's [draft spec at the IETF](https://tools.ietf.org/html/draft-hirano-httpbis-websocket-over-http2-01) and it looks like I can take that & run with it fairly simply.\r\n\r\nMy question here is: who else is interested in this? Has there been any other work in this direction since Hirano's last draft nearly three years ago?",
          "createdAt": "2017-11-13T22:18:16Z",
          "updatedAt": "2017-11-13T22:18:16Z"
        },
        {
          "author": "bagder",
          "authorAssociation": "NONE",
          "body": "@AlanQuatermain: there's now a new draft [being discussed](https://lists.w3.org/Archives/Public/ietf-http-wg/2017OctDec/thread.html) and worked on in the HTTPbis WG: https://datatracker.ietf.org/doc/draft-mcmanus-httpbis-h2-websockets/",
          "createdAt": "2017-11-13T22:26:57Z",
          "updatedAt": "2017-11-13T22:26:57Z"
        }
      ]
    },
    {
      "number": 388,
      "id": "MDU6SXNzdWUyNzc3MTEwOQ==",
      "title": "\"h2\" character set",
      "url": "https://github.com/httpwg/http2-spec/issues/388",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "upgrade"
      ],
      "body": "3.1 HTTP/2 Version Identification says:\n\n> The protocol defined in this document is identified using the string \"h2\".\n\nI know this is pedantic, but we don't define the character set; ALPN strings are octet sequences, not strings.\n\nI think the fix is to specify something like this in 3.3 Starting HTTP/2 for \"https\" URIs:\n\n> When serialised into an ALPN protocol identifier (which is a sequence of octets), the \"h2\" string is encoded using ASCII.\n\nOr UTF-8, of course.\n",
      "createdAt": "2014-02-18T05:47:34Z",
      "updatedAt": "2014-02-18T17:46:04Z",
      "closedAt": "2014-02-18T17:46:04Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This was already in the IANA registration; though I take the point.\n\nIt's easier to reference UTF-8.  Same net effect, sets a better precedent (maybe).\n",
          "createdAt": "2014-02-18T17:45:28Z",
          "updatedAt": "2014-02-18T17:45:28Z"
        }
      ]
    },
    {
      "number": 389,
      "id": "MDU6SXNzdWUyNzc3MTMwOQ==",
      "title": "Protocol Overview",
      "url": "https://github.com/httpwg/http2-spec/issues/389",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The sections here (2.1-2.3) feel really sparse. I'm wondering if they should be combined, or fleshed out more.\n\nAny thoughts? I'm happy to take a crack at it, just wanted to sync first.\n",
      "createdAt": "2014-02-18T05:53:37Z",
      "updatedAt": "2014-03-07T18:36:11Z",
      "closedAt": "2014-03-07T18:36:11Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree to the sparse feeling. I would keep the structure, because I think it helps getting the overview of what is HTTP/2. I would also put some more information there, as I'm not sure someone new to HTTP/2 would get a full overview of it (for example, we don't describe the link between frames and streams).\n",
          "createdAt": "2014-02-18T09:23:43Z",
          "updatedAt": "2014-02-18T09:23:43Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Feel free to take a crack.  A protocol overview might be good, but I really only intended to hit the lower bar: a document overview.  In that regard, I don't know why these ended up as sections in their own right. \n",
          "createdAt": "2014-02-18T17:56:33Z",
          "updatedAt": "2014-02-18T17:56:33Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I gave a try: finally, I choose to combine them, adding a few things along the way.\n",
          "createdAt": "2014-02-20T14:43:33Z",
          "updatedAt": "2014-02-20T14:43:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that Herve's proposal is a good start.  I don't think that it goes quite far enough.  I've made my own proposal for changes in #414.\n",
          "createdAt": "2014-02-24T23:24:57Z",
          "updatedAt": "2014-02-24T23:24:57Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've exercised editorial discretion here and taken #414.  If you think that this needs to be further clarified or cleaned up, let me know.\n",
          "createdAt": "2014-02-25T21:08:00Z",
          "updatedAt": "2014-02-25T21:08:00Z"
        }
      ]
    },
    {
      "number": 390,
      "id": "MDU6SXNzdWUyNzc3MTM2OQ==",
      "title": "\"Connection-Level State\"",
      "url": "https://github.com/httpwg/http2-spec/issues/390",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "frame semantics"
      ],
      "body": "There are a few places that refer to \"connection-level state\"; e.g., in 4.2 Frame Size:\n\n> A frame size error that affects connection-level state MUST be treated as a connection error (Section 5.4.1).\n\nThis needs to be clarified; ideally, with a list of frame types.\n",
      "createdAt": "2014-02-18T05:55:42Z",
      "updatedAt": "2014-02-26T21:10:36Z",
      "closedAt": "2014-02-26T21:10:24Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Found a single instance, clarified it.\n",
          "createdAt": "2014-02-26T21:10:36Z",
          "updatedAt": "2014-02-26T21:10:36Z"
        }
      ]
    },
    {
      "number": 391,
      "id": "MDU6SXNzdWUyNzc3MTQ2Ng==",
      "title": "Frames and Streams",
      "url": "https://github.com/httpwg/http2-spec/issues/391",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "streams"
      ],
      "body": "Section 5 Streams and Multiplexing starts:\n\n> A \"stream\" is an independent, bi-directional sequence of HEADER and DATA frames exchanged between the client and server within an HTTP/2 connection. \n\nRead literally, this means that streams can't contain PUSH_PROMISE, CONTINUATION, RST_STREAM and so on. I know that there's a distinction between \"on\" and \"about\" streams, but that doesn't appear to make it into the document, and this sentence will confuse.\n\nWe could enumerate the frame types, but given that every frame has a stream ID, even it is sometimes 0, I wonder if the \"of HEADER and DATA\" clause should just be dropped.\n",
      "createdAt": "2014-02-18T05:58:30Z",
      "updatedAt": "2014-03-13T21:28:42Z",
      "closedAt": "2014-03-13T21:27:23Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So, this was an attempt to resolve the \"on\" and \"about\" thing we were fixated on a while back.  I think that it's no longer an issue; the document is simply much more precise about what can be sent and when, we don't need the classification.\n",
          "createdAt": "2014-03-13T21:28:42Z",
          "updatedAt": "2014-03-13T21:28:42Z"
        }
      ]
    },
    {
      "number": 392,
      "id": "MDU6SXNzdWUyNzc3MTY4Mw==",
      "title": "SETTINGS_MAX_CONCURRENT_STREAMS advice",
      "url": "https://github.com/httpwg/http2-spec/issues/392",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "streams"
      ],
      "body": "5.1.2 Stream Concurrency says:\n\n> Endpoints MUST NOT exceed the limit set by their peer.\n\n... but it doesn't say what the consequence of them doing this will be.\n\nI know this has been discussed a lot; however, it's good spec style to say what the expectations are when you receive something (in this case, too many open streams) that's prohibited on the other side.\n\nE.g., maybe implementation advice along the lines of:\n\n> Note that an endpoint whose peer has opened more streams than allowed by SETTINGS_MAX_CONCURRENT_STREAMS is not required to close the connection, but MAY do so; see [ref to Connection Error Handling].\n\nMarked as editorial; feel free to raise to design if you think it'll be contentious.\n",
      "createdAt": "2014-02-18T06:06:00Z",
      "updatedAt": "2014-03-03T14:32:02Z",
      "closedAt": "2014-03-03T14:32:02Z",
      "comments": []
    },
    {
      "number": 395,
      "id": "MDU6SXNzdWUyNzg2MzEwMQ==",
      "title": "HTTPS should be mandatory",
      "url": "https://github.com/httpwg/http2-spec/issues/395",
      "state": "CLOSED",
      "author": "ilhansubasi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "A new law in Turkey has been approved, it says that all the surfing of the Internet users' should be recorded by the ISPs. In other words, my ISP is going to record URLs of web pages that I visit, such as xxx.xxx/i-love-tits.php or qa.com/how-to-abortion.php or socialnetwork.net/myfriend/mylove/lucy.php etc.\n\nThus, HTTPS or encrypted communication over the protocol should be mandatory. In other words unencrypted communication must not be optional. Because these guys can  ask for metadata too, like POST requests, I mean my password and my username, or my comments or complains that I make with POST requests.\n\ndr;tl: NSA spying got real in Turkey by law. So, I'm not free to speak. You don't know what they do if you speak against the government here.\n\nhttp://www.todayszaman.com/news-339798-turkeys-gul-approves-tighter-control-of-internet.html\n\nhttp://www.hurriyetdailynews.com/president-gul-approves-disputed-internet-bill-as-govt-offers-amendments.aspx?pageID=238&nID=62654&NewsCatID=338\n",
      "createdAt": "2014-02-19T10:05:18Z",
      "updatedAt": "2014-02-19T20:50:16Z",
      "closedAt": "2014-02-19T20:50:16Z",
      "comments": [
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ilhanyumer I'm on your side on this one, but I don't believe there's consensus in the IETF to mandate it. I know that sucks, but the majority of browsers will mandate at least TLS for HTTP/2, if not full HTTPS. And since it's very difficult to deploy HTTP/2 in the clear due to intermediaries, the economics for HTTP/2 to incentivize wider TLS deployment is favorable. It'd be nice to have it mandatory in the spec for us to use as a hammer to beat people over the heads with, but I don't think it'll happen. FYI, I work on the Chromium (Chrome) browser, and we have no plans to do HTTP/2 in the clear.\n\nSo yeah, I think we unfortunately should close this issue.\n",
          "createdAt": "2014-02-19T19:58:03Z",
          "updatedAt": "2014-02-19T19:58:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This really isn't the right forum for this sort of discussion.  Feel free to join in on the mailing list ietf-http-wg@w3.org.\n",
          "createdAt": "2014-02-19T20:50:16Z",
          "updatedAt": "2014-02-19T20:50:16Z"
        }
      ]
    },
    {
      "number": 397,
      "id": "MDU6SXNzdWUyNzkzNjM5NA==",
      "title": "\"Segments\"",
      "url": "https://github.com/httpwg/http2-spec/issues/397",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "mnot"
      ],
      "labels": [
        "editorial",
        "non-blocking"
      ],
      "body": "6.2 HEADERS' description of END_STREAM is the only place that mentions \"segments\", as per the most recently added feature. \n\nThis is very easy to miss there. If we had something that talked about intermediaries in general, this would be a good place to introduce \"segments\" more completely.\n",
      "createdAt": "2014-02-20T04:24:43Z",
      "updatedAt": "2014-07-15T17:50:37Z",
      "closedAt": "2014-07-15T17:50:37Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "What do you imagine that we have in a section in intermediation?  A reference to the section(s) in the 1.1 docs?  Some mention about 1.1->2 and 2->1.1 translation?\n",
          "createdAt": "2014-02-20T05:12:27Z",
          "updatedAt": "2014-02-20T05:12:27Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I have a feeling we're going to need to say more about intermediaries, and I should probably try to scribble something down. Feel free to ignore this in the meantime, or assign it to me if you like.\n",
          "createdAt": "2014-02-20T09:17:40Z",
          "updatedAt": "2014-02-20T09:17:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "You know I like doing that.\n",
          "createdAt": "2014-02-20T19:15:40Z",
          "updatedAt": "2014-02-20T19:15:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed with #537\n",
          "createdAt": "2014-07-15T17:50:37Z",
          "updatedAt": "2014-07-15T17:50:37Z"
        }
      ]
    },
    {
      "number": 398,
      "id": "MDU6SXNzdWUyNzkzNjQ0Nw==",
      "title": "Legitimate reasons...",
      "url": "https://github.com/httpwg/http2-spec/issues/398",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "10.5 DoS Considerations has a para:\n\n> In all these cases, there are legitimate reasons to use these protocol mechanisms. These features become a burden only when they are used unnecessarily or to excess.\n\nWhat does this _mean_? \n",
      "createdAt": "2014-02-20T04:26:06Z",
      "updatedAt": "2014-02-26T00:29:14Z",
      "closedAt": "2014-02-26T00:29:14Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All these features (SETTINGS frame, small frames, header compression...) have legitimate usages but can also be used for DoS attacks. I think that this sentence tries to make this point, but apparently fails to make it clearly.\n",
          "createdAt": "2014-02-20T10:25:03Z",
          "updatedAt": "2014-02-20T10:25:03Z"
        }
      ]
    },
    {
      "number": 399,
      "id": "MDU6SXNzdWUyNzkzNjUxOA==",
      "title": "Privacy Considerations",
      "url": "https://github.com/httpwg/http2-spec/issues/399",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The contents of 11 seem to be based upon the understanding that privacy can be compromised by long-lived connections. Although there may be some minor information leakage (IP address, etc.) surely this is dwarfed by the privacy considerations of other aspects of HTTP, e.g., cookies? \n\nIn particular,\n\n> For example, a user using a browser hours after the previous user stopped using that browser may be able to learn about what the previous user was doing.\n\ndoesn't seem at all affected by HTTP/2; if the connection is open that long or new connections are opened, the privacy exposure is surely the same, isn't it?\n",
      "createdAt": "2014-02-20T04:28:32Z",
      "updatedAt": "2014-02-25T22:36:51Z",
      "closedAt": "2014-02-25T22:36:51Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That's very old text.  I think that we'll be safe in removing it.\n",
          "createdAt": "2014-02-25T21:39:36Z",
          "updatedAt": "2014-02-25T21:39:36Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "SGTM.\n",
          "createdAt": "2014-02-25T22:10:19Z",
          "updatedAt": "2014-02-25T22:10:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've rewritten privacy considerations to cover the \"fingerprinting\" issue.  Ostensibly at least, we've defined a protocol that provides more correlators than 1.1.  I'm not sure that it's worth losing sleep over, but that's what the Security/Privacy considerations are for.\n",
          "createdAt": "2014-02-25T22:36:35Z",
          "updatedAt": "2014-02-25T22:36:35Z"
        }
      ]
    },
    {
      "number": 400,
      "id": "MDU6SXNzdWUyNzkzNjU4NQ==",
      "title": "Intermediary capabilities",
      "url": "https://github.com/httpwg/http2-spec/issues/400",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "10.3 Intermediary Encapsulation Attacks says:\n\n> An intermediary that performs translation into HTTP/1.1 cannot alter the semantics of requests or responses. \n\nBut, it can! See http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-26#section-5.7.2\n",
      "createdAt": "2014-02-20T04:30:54Z",
      "updatedAt": "2014-02-20T19:10:33Z",
      "closedAt": "2014-02-20T19:10:33Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll an an ...except... then.  I think that it's \"MUST NOT _unwittingly_ alter semantics\" or something like that.\n",
          "createdAt": "2014-02-20T05:03:01Z",
          "updatedAt": "2014-02-20T05:03:01Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I think that sentence can just be dropped.\n",
          "createdAt": "2014-02-20T09:07:23Z",
          "updatedAt": "2014-02-20T09:07:23Z"
        }
      ]
    },
    {
      "number": 401,
      "id": "MDU6SXNzdWUyNzkzNjYzNQ==",
      "title": "Clients' treatment of unprocessed requests",
      "url": "https://github.com/httpwg/http2-spec/issues/401",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "8.1 says:\n\n> Clients MUST NOT treat requests that have not been processed as having failed.\n\nIsn't this a bit strong? Perhaps the client doesn't want to expend resources on retrying the request...\n",
      "createdAt": "2014-02-20T04:32:16Z",
      "updatedAt": "2014-02-20T19:18:23Z",
      "closedAt": "2014-02-20T19:18:23Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Seems allright to me. The client, if it didn't care to send the request,\ncan decide not to resend anyway...\nThe important part is that it is not treated as a failure...\n\nOn Wed, Feb 19, 2014 at 8:32 PM, Mark Nottingham\nnotifications@github.comwrote:\n\n> 8.1 says:\n> \n> Clients MUST NOT treat requests that have not been processed as having\n> failed.\n> \n> Isn't this a bit strong? Perhaps the client doesn't want to expend\n> resources on retrying the request...\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/401\n> .\n",
          "createdAt": "2014-02-20T04:34:36Z",
          "updatedAt": "2014-02-20T04:34:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Would a \"this does not imply any particular responsibility on a client, like retransmission\" or similar help?  It's more words and I'm not sure that there is an implied burden on the client regarding retransmission.\n",
          "createdAt": "2014-02-20T05:04:42Z",
          "updatedAt": "2014-02-20T05:04:42Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "it might be as simple as s/treated/interpreted/\nMark?\n\nOn Wed, Feb 19, 2014 at 9:04 PM, Martin Thomson notifications@github.comwrote:\n\n> Would a \"this does not imply any particular responsibility on a client,\n> like retransmission\" or similar help? It's more words and I'm not sure that\n> there is an implied burden on the client regarding retransmission.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/401#issuecomment-35589659\n> .\n",
          "createdAt": "2014-02-20T05:16:20Z",
          "updatedAt": "2014-02-20T05:16:20Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "We're specifying the semantics of the wire protocol, we shouldn't constrain what's done with those semantics beyond assuring that they're appropriately honoured. As Roy constantly pounds into our heads, we specify the interface, not the implementation.\n\nI'm also pushing back here because it's completely untestable. \n\nWhy not just\n\n> Requests that have not been processed have not failed; clients MAY automatically retry them, even those with non-idempotent methods.\n",
          "createdAt": "2014-02-20T09:14:41Z",
          "updatedAt": "2014-02-20T09:14:41Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1: seems clearer.\n",
          "createdAt": "2014-02-20T09:31:00Z",
          "updatedAt": "2014-02-20T09:31:00Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes.  It's better as a statement of fact.  This doesn't even imply a requirement on behaviour.\n",
          "createdAt": "2014-02-20T19:18:18Z",
          "updatedAt": "2014-02-20T19:18:18Z"
        }
      ]
    },
    {
      "number": 402,
      "id": "MDU6SXNzdWUyNzkzNjczMg==",
      "title": "Cookie Decompression",
      "url": "https://github.com/httpwg/http2-spec/issues/402",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "3.1.3.4 Compressing the Cookie Header Field says:\n\n> When decoding, zero octets MUST be replaced with the cookie delimiter\n\nBut if there's a zero octet, that implies that the cookies came in as separate headers; why not reconstitute the cookies? It's true that RFC6265 doesn't allow cookies to span multiple headers, but if someone wants to faithfully reproduce the wire format so they can figure it out downstream, why forbid this with a MUST? How about a SHOULD?\n\n(feel free to bump up to design if you think it needs it)\n",
      "createdAt": "2014-02-20T04:36:17Z",
      "updatedAt": "2014-02-20T22:39:35Z",
      "closedAt": "2014-02-20T22:39:35Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The reason is that 6265 prohibits splitting, so the implication is that if someone split the cookie, then it should be reconstituted before passing on.  Otherwise the downstream user gets a nasty unexpected surprise (and may drop either side of the NUL, for example).  Happy to discuss further if you like.\n",
          "createdAt": "2014-02-20T05:01:56Z",
          "updatedAt": "2014-02-20T05:01:56Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Right, but we don't have special handling for any other headers' syntax; e.g., if something has multiple Content-Lenths, we pass that to the 1.1 side and let it figure things out (even if that is on the same box).\n\nAfter the whole \"do we need to preserve the distinction between comma-separated and different headers\" discussion, I don't see why this is a special case -- somebody might want that fidelity.\n",
          "createdAt": "2014-02-20T09:05:25Z",
          "updatedAt": "2014-02-20T09:05:25Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "You can't have perfect fidelity at the same time as allowing splitting to improve compression.  They are incompatible.\n\nA purely mechanical process (not one that is semantically aware) could be splitting at a 1.1->2 translation point.  If a 2->1.1 translation point on the other end doesn't reassemble, the 1.1 message that came into the system is different to the 1.1 message that leaves it.  That's a net loss of fidelity.\n\n(I'll note for the record that I went with WG consensus on the comma-separated thing, I didn't find the fidelity argument compelling enough to justify the NUL separator.)\n",
          "createdAt": "2014-02-20T17:27:43Z",
          "updatedAt": "2014-02-20T17:27:43Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Never mind, I woke up this AM and realised this issue is bogus. \n",
          "createdAt": "2014-02-20T22:39:35Z",
          "updatedAt": "2014-02-20T22:39:35Z"
        }
      ]
    },
    {
      "number": 403,
      "id": "MDU6SXNzdWUyNzkzNjg2NQ==",
      "title": "\"negotiate\" vs. \"offer\"",
      "url": "https://github.com/httpwg/http2-spec/issues/403",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "security"
      ],
      "body": "9.2 Use of TLS Features says:\n\n> Implementations MUST negotiate ephemeral cipher suites...\n\nNote \"negotiate\", not \"offer\" or \"support.\"\n\nLater:\n\n> Implementations are encouraged not to negotiate TLS cipher suites with known vulnerabilities, such as [RC4].\n\nDepending on how you read the word \"negotiate\", this seems somewhat self-contradictory; if implementations have to negotiate ephemeral suites, how would they be able to negotiate anything else?\n\nRFC5246 seems to use \"offer\" to mean what \"negotiate\" is used for here.\n",
      "createdAt": "2014-02-20T04:41:30Z",
      "updatedAt": "2014-03-03T14:53:51Z",
      "closedAt": "2014-03-03T14:53:51Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Stop thinking like a client for a moment.  I think that covers both ends well enough.  A client \"offer\" and a server \"answer\" ...sorry, I don't know what happened there, WebRTC leakage... I mean, \"selection\" are intended to both be covered by the word \"negotiate\".\n\n(BTW, I think that the first example isn't actually mine, the text on TLS usage comes from ekr.)\n",
          "createdAt": "2014-02-20T05:07:29Z",
          "updatedAt": "2014-02-20T05:07:29Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "My point is that one can read \"MUST negotiate\" as \"MUST end up with.\"\n\nDoes \"support\" work?\n",
          "createdAt": "2014-02-20T09:09:18Z",
          "updatedAt": "2014-02-20T09:09:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> My point is that one can read \"MUST negotiate\" as \"MUST end up with.\"\n\nI thought that that was the point of this.  Now, you could say \"MUST NOT offer non-ephemeral\" instead of \"MUST end up using ephemeral\", but - aside from being a double negative - it's only the end state we care about.\n",
          "createdAt": "2014-02-20T19:08:54Z",
          "updatedAt": "2014-02-20T19:08:54Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "If the point is that the end state MUST be ephemeral, we need to say that better. I'm not 100% sure that's what's been agreed to.\n\nIf it is the case, \n\n> Implementations are encouraged not to negotiate TLS cipher suites with known vulnerabilities, such as [RC4].\n\nIs superfluous at best, confusing at worst.\n",
          "createdAt": "2014-02-21T00:50:20Z",
          "updatedAt": "2014-02-21T00:50:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We should confirm about ephemeral then, because I thought that it was pretty clear from the discussions in Zurich.\n\nAs for RC4, that's still something that you can select even if you are using (EC)DHE, see TLS_ECDHE_RSA_WITH_RC4_128_SHA.  That would be bad, I think.  Personally, I think that stronger language around RC4 could be appropriate, but given the requirement on 1.2, I think that we're probably OK.\n",
          "createdAt": "2014-02-21T01:04:11Z",
          "updatedAt": "2014-02-21T01:04:11Z"
        },
        {
          "author": "mcmanus",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also believed in zrh that we were discussing (and declared consensus for) making ephemeral mandatory to use.\n",
          "createdAt": "2014-02-21T02:08:33Z",
          "updatedAt": "2014-02-21T02:08:33Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "/me looks at the minutes...\n\nYep, it's pretty clear. \n\nSince this is the case, I think:\n- we should remove the sentence about RC4 above; it's redundant.\n- we should clarify 'negotiate' somehow; e.g., s/negotiate/use/g, or add a sentence explaining it in prose.\n",
          "createdAt": "2014-02-21T02:45:35Z",
          "updatedAt": "2014-02-21T02:45:35Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think that the statement regarding RC4 is redundant.  RC4 != not ephemeral, they are orthogonal (as above).  Happy to clarify what it means by negotiate (don't offer, don't accept...don't end up using).\n",
          "createdAt": "2014-02-21T17:00:18Z",
          "updatedAt": "2014-02-21T17:00:18Z"
        }
      ]
    },
    {
      "number": 404,
      "id": "MDU6SXNzdWUyNzkzNzAwNA==",
      "title": "Requiring GZIP and Deflate",
      "url": "https://github.com/httpwg/http2-spec/issues/404",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "editor-ready"
      ],
      "body": "9.3 GZip Content-Encoding says:\n\n> Clients MUST support gzip compression for HTTP request bodies. Regardless of the value of the accept-encoding header field, a server MAY send responses with gzip or deflate encoding.\n\nA few things here:\n1. My understanding is that people want this so that intermediaries can't strip encoding and therefore impact performance. However, AIUI those same people intend to always run HTTP/2 over TLS, so I wonder if this is really necessary.\n\nIf we keep this text, a few requests:\n1. Is it both gzip _and_ deflate (which last I checked, some clients don't support)? If so, the first sentence and section title should be changed to reflect this.\n2. The implication on a HTTP/1 to HTTP/2 intermediary should be spelled out -- that they MUST decompress the response body if the HTTP/1 client doesn't advertise support for the compression used. \n",
      "createdAt": "2014-02-20T04:47:00Z",
      "updatedAt": "2014-04-18T06:49:17Z",
      "closedAt": "2014-03-04T15:51:46Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds reasonable.  I assume the design issue here for discussion is the first (i.e., gzip or gzip+deflate) ?\n",
          "createdAt": "2014-02-20T05:08:49Z",
          "updatedAt": "2014-02-20T05:08:49Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "My understanding of the intent is that both gzip and deflate encoding must be supported by the client -- but happy to ask the list :)\n",
          "createdAt": "2014-02-20T05:40:22Z",
          "updatedAt": "2014-02-20T05:40:22Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That was the original intent.\nI can't think of a truly good reason that both MUST be supported (so long\nas one is), but most libraries do both if they do one..\n\nOn Wed, Feb 19, 2014 at 9:40 PM, Jeff Pinner notifications@github.comwrote:\n\n> My understanding of the intent is that both gzip and deflate encoding must\n> be supported by the client -- but happy to ask the list :)\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/404#issuecomment-35590944\n> .\n",
          "createdAt": "2014-02-20T06:22:40Z",
          "updatedAt": "2014-02-20T06:22:40Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@martinthomson - yes. Will probably just bring it up in London, given the timing.\n",
          "createdAt": "2014-02-20T09:16:08Z",
          "updatedAt": "2014-02-20T09:16:27Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; gzip only + editorial massaging.\n",
          "createdAt": "2014-03-03T14:25:24Z",
          "updatedAt": "2014-03-03T14:25:24Z"
        }
      ]
    },
    {
      "number": 405,
      "id": "MDU6SXNzdWUyNzkzNzA3MQ==",
      "title": "\"Authoritative\" restrictions",
      "url": "https://github.com/httpwg/http2-spec/issues/405",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "10.1 Server Authority and Same-Origin says:\n\n> A client MUST NOT use, in any way, resources provided by a server that is not authoritative for those resources.\n\nThis seems too restrictive; it disallows layering in Alt-Svc, for example (either in this process, or later on) without changing the ALPN identifier.\n",
      "createdAt": "2014-02-20T04:49:22Z",
      "updatedAt": "2014-03-04T11:04:34Z",
      "closedAt": "2014-03-03T14:12:41Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not so certain.  Alt-Svc or whatever future mechanism we use (POSH, attribute cert-based delegation...as if) is free to alter the meaning of \"authoritative\".  I believe that this is what Alt-Svc actually does to a small extent.\n",
          "createdAt": "2014-02-20T05:10:27Z",
          "updatedAt": "2014-02-20T05:10:27Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What Martin said.\nIt is important that a client never use anything not authoritative. If we\nbelieve that there is a scenario that doesn't fit the current meaning of\nauthoritative, that is what should probably change.\n\nOn Wed, Feb 19, 2014 at 9:10 PM, Martin Thomson notifications@github.comwrote:\n\n> I'm not so certain. Alt-Svc or whatever future mechanism we use (POSH,\n> attribute cert-based delegation...as if) is free to alter the meaning of\n> \"authoritative\". I believe that this is what Alt-Svc actually does to a\n> small extent.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/405#issuecomment-35589858\n> .\n",
          "createdAt": "2014-02-20T05:19:00Z",
          "updatedAt": "2014-02-20T05:19:00Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "If we rewrite the definition of authoritative to allow it to be monkey-patched by future specs, I'm OK with that.\n",
          "createdAt": "2014-02-20T09:15:39Z",
          "updatedAt": "2014-02-20T09:15:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's make sure that we have a better definition of authoritative.  That should include dropping the dependency on RFC 6454.  The origin model is nice, but I don't think that it's adding anything here: http://http2.github.io/http2-spec/#authority\n\nAlso, there's a weaselly use of \"generally\" when describing what can be pushed: http://http2.github.io/http2-spec/#rfc.comment.2  If we get \"authoritative\" right, we should just use that.\n",
          "createdAt": "2014-02-21T01:23:50Z",
          "updatedAt": "2014-02-21T01:23:50Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So, I looked at this yesterday, and made some changes ^^.  By my reading, the definition of \"authority\" in HTTP/1.1 suits our ends perfectly.  I couldn't see any way that it could be interpreted that would disallow coalescing, which we all thought was the big feature we were adding here.\n\nSo what I've done is more explicitly reference the text in HTTP/1.1 p1.  I haven't added explicit text regarding changes to this.  I'm a little uncomfortable saying \"Future specifications MAY change the definition of authoritative.\"  Mostly because that seems _too_ open to me.  Getting any change right could be tricky.  I don't want people thinking that they can arbitrarily monkey patch HTTP with _their_ spec.  That wouldn't be good for the protocol.\n\nI think that we can easily write another RFC that \"Updates\" either HTTP/1.1 or HTTP/2 with respect to the definition of \"authority\".\n",
          "createdAt": "2014-02-26T17:06:34Z",
          "updatedAt": "2014-02-26T17:06:34Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; Martin to use HTTP/1 text.\n",
          "createdAt": "2014-03-03T14:12:41Z",
          "updatedAt": "2014-03-03T14:12:41Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The current HTTP/1.1 text: http://greenbytes.de/tech/webdav/draft-ietf-httpbis-p1-messaging-26.html#establishing.authority\n",
          "createdAt": "2014-03-04T11:04:34Z",
          "updatedAt": "2014-03-04T11:04:34Z"
        }
      ]
    },
    {
      "number": 407,
      "id": "MDU6SXNzdWUyODAxMjE4MA==",
      "title": "Cross-protocol attacks",
      "url": "https://github.com/httpwg/http2-spec/issues/407",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "security"
      ],
      "body": "Section 10.2 is out of date.  Our mitigation against cross-protocol attacks relies on the either TLS (good) or the handshake and the preface: http://http2.github.io/http2-spec/#rfc.section.10.2\n\nMy sense from discussions was that we should just make this clear by writing down the properties as we know them, then cease to worry about it.\n",
      "createdAt": "2014-02-21T01:27:14Z",
      "updatedAt": "2014-03-07T18:13:42Z",
      "closedAt": "2014-03-07T18:13:42Z",
      "comments": []
    },
    {
      "number": 409,
      "id": "MDU6SXNzdWUyODAxNzUzNA==",
      "title": "Recomputing the flow control window",
      "url": "https://github.com/httpwg/http2-spec/issues/409",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "flow control"
      ],
      "body": "6.9.2 Reducing the Stream Window Size has:\n\n> If a receiver decides to accept streams, both sides MUST recompute the available flow control window based on the initial window size sent in the SETTINGS.\n\nThis feels like it needs a little bit more explanation; it's not clear when both sides should do it (esp. the sender), and \"initial\" is a bit confusing (in that someone might read it as referring to the _first_ SETTINGS sent as part of the prelude).\n",
      "createdAt": "2014-02-21T04:00:11Z",
      "updatedAt": "2014-02-21T17:06:36Z",
      "closedAt": "2014-02-21T17:06:36Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm wondering if we should not just drop this sentence: the previous section has the whole explanation fro recomputing the flow control windows.\n\nIn addition, I think we should change the sentence:\n\n> A receiver has two options for handling streams that exceed flow control limits: \n\nTo something like:\n\n> After sending a SETTINGS frame for reducing the stream's flow control windows, a receiver has two options for handling streams that exceed flow control limits:\n",
          "createdAt": "2014-02-21T09:07:15Z",
          "updatedAt": "2014-02-21T09:07:24Z"
        }
      ]
    },
    {
      "number": 413,
      "id": "MDU6SXNzdWUyODE0MDk0NA==",
      "title": "Account for Proxies",
      "url": "https://github.com/httpwg/http2-spec/issues/413",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "editorial"
      ],
      "body": "The spec needs to be reviewed to take proxies into account.\n\nE.g., 9.1 Connection Management is written as if proxies didn't exist.\n\nWe probably also need to write a bit about how to get HTTPS URIs onto a proxy connection using CONNECT.\n\nIt could be easies just to have a new section near 9.1 about proxy connections, and make 9.1 about origin connections.\n",
      "createdAt": "2014-02-24T06:30:45Z",
      "updatedAt": "2014-09-23T11:03:15Z",
      "closedAt": "2014-09-23T11:03:15Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; closed.\n",
          "createdAt": "2014-06-05T20:18:43Z",
          "updatedAt": "2014-06-05T20:18:43Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See also http://www.w3.org/mid/F45796EF-3998-4D5B-A0F7-0A9F23A34231@gbiv.com\n",
          "createdAt": "2014-09-03T06:29:17Z",
          "updatedAt": "2014-09-03T06:29:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that this was addressed by #606.\n",
          "createdAt": "2014-09-23T11:03:14Z",
          "updatedAt": "2014-09-23T11:03:14Z"
        }
      ]
    },
    {
      "number": 416,
      "id": "MDU6SXNzdWUyODI4OTIxOA==",
      "title": "default max stream limit should be finite for security reasons",
      "url": "https://github.com/httpwg/http2-spec/issues/416",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression",
        "security"
      ],
      "body": "One of the interesting attack vectors against HTTP2 is to successfully allow a client to begin a session with a website, then attempt to probe its compression context by forging acks (to ensure the TCP send window continues to be open), by having javascript (or equivalent) emit links to the DOM linking to the site whose cookie/secret in the compression context is going to attack and thus  causing the browser to continue to emit TLS records which the attacker then black-holes, though it observes the size of the packets).\n\nThis is particularly fun because it provides the server little/no information that it is occurring.\n\nBy limiting the number of concurrent streams, however, this attack can be greatly slowed and be forced to be visible-- since no data is sent until the TLS handshake completes, the server which has the certificate needs to be contacted if the attacker wishes to continue to press the attack. This implies that that server is given at least that signal, and it also implies that the attacker must wait for this to succeed before continuing to attack.\n",
      "createdAt": "2014-02-25T22:07:23Z",
      "updatedAt": "2014-03-05T14:18:41Z",
      "closedAt": "2014-03-05T14:17:34Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is mitigation for #373.\n",
          "createdAt": "2014-02-26T00:54:19Z",
          "updatedAt": "2014-02-26T00:54:19Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; closing with no action.\n",
          "createdAt": "2014-03-05T14:17:34Z",
          "updatedAt": "2014-03-05T14:17:34Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This proposal has no merit and would be ineffectual, since an attacker could cancel requests, causing the streams to be reset, and thus the limit is useless.\n",
          "createdAt": "2014-03-05T14:18:41Z",
          "updatedAt": "2014-03-05T14:18:41Z"
        }
      ]
    },
    {
      "number": 417,
      "id": "MDU6SXNzdWUyODM0OTkwNg==",
      "title": "Change the way we identify plain text HTTP/2",
      "url": "https://github.com/httpwg/http2-spec/issues/417",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "transport mapping"
      ],
      "body": "In this thread: http://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/0721.html, I suggest that we use a different ALPN string to identify HTTP/2 when it operates over plain text TCP.  We should consider this.\n",
      "createdAt": "2014-02-26T17:00:16Z",
      "updatedAt": "2014-03-10T08:31:28Z",
      "closedAt": "2014-03-10T08:31:28Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; will use two identifiers, and they will identify the stack used. Editor to choose specific ids.\n",
          "createdAt": "2014-03-03T14:09:20Z",
          "updatedAt": "2014-03-03T14:09:20Z"
        }
      ]
    },
    {
      "number": 418,
      "id": "MDU6SXNzdWUyODQwNzAxOA==",
      "title": "Refining Prior Knowledge ",
      "url": "https://github.com/httpwg/http2-spec/issues/418",
      "state": "CLOSED",
      "author": "emile22",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "upgrade"
      ],
      "body": "We need something more granular than the Prior Knowledge approach because a client which does a request without prior knowledge about support for HTTP2 can discover the support of HTTP/2 during the resolution of the domain of the \u2018URI\u2019.  A client may make a request Without Prior Knowledge and got the information at the time it establishes the TCP connection.\n\nI will propose text to clarify this point.\n",
      "createdAt": "2014-02-27T10:09:16Z",
      "updatedAt": "2014-06-05T19:58:31Z",
      "closedAt": "2014-06-05T19:58:31Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds reasonable.  Marking this editorial.\n",
          "createdAt": "2014-02-27T17:59:31Z",
          "updatedAt": "2014-02-27T17:59:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks like this is more than editorial.  It's a proposal to include specific text on SRV.\n",
          "createdAt": "2014-03-11T16:36:24Z",
          "updatedAt": "2014-03-11T16:36:24Z"
        },
        {
          "author": "emile22",
          "authorAssociation": "NONE",
          "body": " It's a proposal to include specific text on DNS based discovery.\n",
          "createdAt": "2014-03-18T14:12:32Z",
          "updatedAt": "2014-03-18T14:12:32Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; closed because we don't want to block on DNS-based discovery (although it is a topic of continuing interest and discussion).\n",
          "createdAt": "2014-06-05T19:58:31Z",
          "updatedAt": "2014-06-05T19:58:31Z"
        }
      ]
    },
    {
      "number": 419,
      "id": "MDU6SXNzdWUyODUzMTYyMw==",
      "title": "Consistent recommendations/requirements around sending settings",
      "url": "https://github.com/httpwg/http2-spec/issues/419",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "upgrade"
      ],
      "body": "We currently require clients to set particular settings in HTTP2-Settings, but nowhere else.  This is not consistent.  We should make it consistent throughout.\n\nHere are the options I see as most likely:\n1. MUST send all the first time.\n2. SHOULD send all the first time.\n3. Don't make any particular recommendation or requirement.\n4. MUST send all always.\n",
      "createdAt": "2014-02-28T20:42:31Z",
      "updatedAt": "2014-03-03T14:32:02Z",
      "closedAt": "2014-03-03T14:32:02Z",
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "If we take a MUST way for senders, the default values are to handle error cases for receivers. This should be explicitly mentioned in the spec.\n",
          "createdAt": "2014-03-01T01:28:22Z",
          "updatedAt": "2014-03-01T01:28:22Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Defaults would still apply to clients prior to receiving the server preface SETTINGS.  But yes, they would only apply in that limited case.\n",
          "createdAt": "2014-03-01T03:18:41Z",
          "updatedAt": "2014-03-01T03:18:41Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; agreed to defer to Martin's judgement (who favoured #3). \n",
          "createdAt": "2014-03-03T13:54:12Z",
          "updatedAt": "2014-03-03T13:54:12Z"
        }
      ]
    },
    {
      "number": 421,
      "id": "MDU6SXNzdWUyODYwNjI5MA==",
      "title": "mixed schemes",
      "url": "https://github.com/httpwg/http2-spec/issues/421",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "we need stronger language making it clear that we can send requests for multiple schemes on the same connection\n",
      "createdAt": "2014-03-03T08:47:15Z",
      "updatedAt": "2014-03-31T22:37:37Z",
      "closedAt": "2014-03-31T22:37:37Z",
      "comments": []
    },
    {
      "number": 422,
      "id": "MDU6SXNzdWUyODYwOTAwMQ==",
      "title": "Perhaps need structured ALPN tokens",
      "url": "https://github.com/httpwg/http2-spec/issues/422",
      "state": "CLOSED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "upgrade"
      ],
      "body": "There has been a lot of conversation about how to use the ALPN tokens.\nIn the case of TLS, the token indicates only the application-layer protocol on top of TLS/TCP/IP. This is unlikely to lead to a combinatorial explosion of IDs.\n\nIn the case of usage from DNS, the token potentially indicates a stack of protocols.\nThis could easily lead to a combinatorial explosion of IDs, especially if identifiers for schemes are included.\n\nIf it is decided that this is unnecessary, then some characters should be reserved so that structured tokens can be created in the future, e.g. '/', '{', '}', ',' could be reserved.\n",
      "createdAt": "2014-03-03T09:42:22Z",
      "updatedAt": "2014-03-03T13:47:25Z",
      "closedAt": "2014-03-03T13:47:25Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; constraining ALPN tokens formally isn't in-scope for this WG, but we'll endeavour not to use special characters.\n",
          "createdAt": "2014-03-03T13:47:25Z",
          "updatedAt": "2014-03-03T13:47:25Z"
        }
      ]
    },
    {
      "number": 423,
      "id": "MDU6SXNzdWUyODYyNDY3MQ==",
      "title": "Security implications of gzip",
      "url": "https://github.com/httpwg/http2-spec/issues/423",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "design",
        "security"
      ],
      "body": "We need to construct security considerations around the use of gzip compression for requests and responses.\n\n(Editorial, unless we uncover issues of dire import.)\n",
      "createdAt": "2014-03-03T14:22:43Z",
      "updatedAt": "2014-06-05T17:38:42Z",
      "closedAt": "2014-06-05T17:38:42Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Martin to make a proposal.\n",
          "createdAt": "2014-03-08T09:38:11Z",
          "updatedAt": "2014-03-08T09:38:11Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Needs to be passed by the mailing list; is more than editorial to security folk.\n",
          "createdAt": "2014-03-13T00:51:18Z",
          "updatedAt": "2014-03-13T00:51:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Opening, pending conclusion of discussion of proposal.\n",
          "createdAt": "2014-03-13T20:59:13Z",
          "updatedAt": "2014-03-13T20:59:13Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; closed for our purposes.\n",
          "createdAt": "2014-06-05T17:38:42Z",
          "updatedAt": "2014-06-05T17:38:42Z"
        }
      ]
    },
    {
      "number": 424,
      "id": "MDU6SXNzdWUyODYyNDcxOQ==",
      "title": "Support for gzip at the server",
      "url": "https://github.com/httpwg/http2-spec/issues/424",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "non-blocking"
      ],
      "body": "Can we extend the implicit Accept-Encoding to the server side?\n",
      "createdAt": "2014-03-03T14:23:23Z",
      "updatedAt": "2014-06-05T17:37:28Z",
      "closedAt": "2014-06-05T17:37:28Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London; some interest / support, but need to work through DoS implications. Take to list.\n",
          "createdAt": "2014-03-03T14:27:32Z",
          "updatedAt": "2014-03-03T14:27:32Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in London DTM; feeling there was that this would be good.\n",
          "createdAt": "2014-03-08T09:39:17Z",
          "updatedAt": "2014-03-08T09:39:17Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; because of resolution of #460, we won't do this.\n",
          "createdAt": "2014-06-05T17:37:28Z",
          "updatedAt": "2014-06-05T17:37:28Z"
        }
      ]
    },
    {
      "number": 425,
      "id": "MDU6SXNzdWUyODYyNDc1MA==",
      "title": "gzip content-encoding required for clients or recipients?",
      "url": "https://github.com/httpwg/http2-spec/issues/425",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Why do we require \"clients\" to support gzip, not \"recipients\"?\n",
      "createdAt": "2014-03-03T14:23:50Z",
      "updatedAt": "2014-03-03T14:26:02Z",
      "closedAt": "2014-03-03T14:26:02Z",
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "duplicate of 424\n",
          "createdAt": "2014-03-03T14:26:02Z",
          "updatedAt": "2014-03-03T14:26:02Z"
        }
      ]
    },
    {
      "number": 426,
      "id": "MDU6SXNzdWUyODYyNTg2Ng==",
      "title": "\"Unsupported Scheme\" stream error code",
      "url": "https://github.com/httpwg/http2-spec/issues/426",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "We need an error code to indicate that a scheme isn't supported on this connection.\n\nOr a HTTP status code.\n",
      "createdAt": "2014-03-03T14:40:11Z",
      "updatedAt": "2014-04-02T00:23:49Z",
      "closedAt": "2014-04-02T00:23:49Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Seems to be consensus that the status code is adequate.\n",
          "createdAt": "2014-04-02T00:23:49Z",
          "updatedAt": "2014-04-02T00:23:49Z"
        }
      ]
    },
    {
      "number": 427,
      "id": "MDU6SXNzdWUyODcwNjEwMw==",
      "title": "terminology: intermediary",
      "url": "https://github.com/httpwg/http2-spec/issues/427",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "We have several statements about intermediaries, some of which normative requirements, but the terminology section doesn't even mention them.\n\nAre intermediaries exactly what 1.1 says about them? If yes, shouldn't we clarify that?\n",
      "createdAt": "2014-03-04T13:49:51Z",
      "updatedAt": "2014-06-05T20:13:04Z",
      "closedAt": "2014-06-05T20:13:04Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we use #413 to address this comment?\n",
          "createdAt": "2014-03-04T15:24:48Z",
          "updatedAt": "2014-03-04T15:24:48Z"
        },
        {
          "author": "salvatoreloreto",
          "authorAssociation": "NONE",
          "body": "this one is more general than 413.\nThe spec is quite cryptic about intermediaries, it mention it several times but when it does is not clear to what type of intermediaries it is referring to.\nit is not clear if intermediaries are exactly the same defined in 1.1 or they are different, slightly different etc. etc.\n",
          "createdAt": "2014-03-05T11:21:27Z",
          "updatedAt": "2014-03-05T11:21:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The intent here is to use the definitions in 1.1 exactly as is.  There are additional requirements on intermediaries, or requirements that are specific to HTTP2, which is why we include text on intermediation.  However, there should be no change to the definition of their role.  Mark seems keen on having a whole section on their role, but after reading the 1.1 text, that seems sufficient to me.  I'm sure that you can let me know if the text I've proposed is insufficient/incorrect/etc...\n",
          "createdAt": "2014-03-31T21:59:49Z",
          "updatedAt": "2014-03-31T21:59:49Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe we need a tiny bit more; specifically entries (or a combined entry) for \"tunnel\", \"proxy\", and \"gateway\".\n",
          "createdAt": "2014-04-28T14:01:39Z",
          "updatedAt": "2014-04-28T14:01:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The change is fine and we can keep it.  Is there anything else that we need here (@mnot, @reschke)? \n",
          "createdAt": "2014-04-28T16:33:31Z",
          "updatedAt": "2014-04-28T16:33:31Z"
        }
      ]
    },
    {
      "number": 428,
      "id": "MDU6SXNzdWUyODc4Mjk3Ng==",
      "title": "Fix references",
      "url": "https://github.com/httpwg/http2-spec/issues/428",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "reschke"
      ],
      "labels": [
        "editorial"
      ],
      "body": "draft-ietf-tls-applayerprotoneg-04: Alternate version available: 05\ndraft-nottingham-httpbis-alt-svc-01: Alternate version available: 03\ndraft-sheffer-tls-bcp-01: Alternate version available: 02\n",
      "createdAt": "2014-03-05T11:30:43Z",
      "updatedAt": "2014-03-06T08:22:59Z",
      "closedAt": "2014-03-06T08:22:59Z",
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "draft-nottingham-httpbis-alt-svc-01: already fixed\n",
          "createdAt": "2014-03-06T08:14:03Z",
          "updatedAt": "2014-03-06T08:14:03Z"
        }
      ]
    },
    {
      "number": 429,
      "id": "MDU6SXNzdWUyODc5MTE5Mg==",
      "title": "HPACKing security/privacy related header fields",
      "url": "https://github.com/httpwg/http2-spec/issues/429",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression",
        "security"
      ],
      "body": "(see http://www.ietf.org/proceedings/89/slides/slides-89-httpbis-7.pdf)\n\nMaybe we should exclude \"Authorization\" from HPACK; that doesn't solve the whole problem, but at least the one inherent in HTTP authentication.\n",
      "createdAt": "2014-03-05T14:01:28Z",
      "updatedAt": "2014-05-22T04:54:22Z",
      "closedAt": "2014-05-22T04:54:22Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "There didn't seem to be support for special-casing headers in London. Julian, do you want to take this to the list, or shall we close it?\n",
          "createdAt": "2014-03-30T07:27:17Z",
          "updatedAt": "2014-03-30T07:27:17Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closed; can be re-opened with new input.\n",
          "createdAt": "2014-05-22T04:54:22Z",
          "updatedAt": "2014-05-22T04:54:22Z"
        }
      ]
    },
    {
      "number": 430,
      "id": "MDU6SXNzdWUyODk2MjA4OA==",
      "title": "HPACK edge cases",
      "url": "https://github.com/httpwg/http2-spec/issues/430",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Several edge cases are pointed at in:\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/0884.html\n\nThey mainly cover EOS usage, and need to be resolved in the spec.\n",
      "createdAt": "2014-03-07T12:32:29Z",
      "updatedAt": "2014-03-21T17:25:17Z",
      "closedAt": "2014-03-21T17:25:17Z",
      "comments": []
    },
    {
      "number": 431,
      "id": "MDU6SXNzdWUyODk2MjE1NQ==",
      "title": "Huffman table description",
      "url": "https://github.com/httpwg/http2-spec/issues/431",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "http://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/0880.html points that the description of the Huffman table format is insufficient.\n",
      "createdAt": "2014-03-07T12:33:44Z",
      "updatedAt": "2014-03-21T17:25:17Z",
      "closedAt": "2014-03-21T17:25:17Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The table as it exists now is sufficient.\nFrequency tables are not necessarily sufficient (their inclusion would\nrequire being far more precise about how exactly the tables are generated)\nand should not be specified unless we have a really good reason.\n\nOn Fri, Mar 7, 2014 at 4:33 AM, Herv\u00e9 notifications@github.com wrote:\n\n> http://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/0880.htmlpoints that the description of the Huffman table format is insufficient.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/431\n> .\n",
          "createdAt": "2014-03-07T13:59:47Z",
          "updatedAt": "2014-03-07T13:59:47Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that the table itself doesn't need any change. However, explanations on how to use it could be improved.\n",
          "createdAt": "2014-03-13T14:06:21Z",
          "updatedAt": "2014-03-13T14:06:21Z"
        }
      ]
    },
    {
      "number": 434,
      "id": "MDU6SXNzdWUyOTQxNjk3NQ==",
      "title": "HPACK Unicode and :path:",
      "url": "https://github.com/httpwg/http2-spec/issues/434",
      "state": "CLOSED",
      "author": "potswa",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Lowercase characters encode better than uppercase ones. RFC3986 (URIs) and RFC3987 (IRIs) recommend uppercase hexadecimal digits in percent-encoding. Some advice, allowance, or special case should be made for efficiency of the :path: header.\n\nMore generally, \"Names and values are considered to be opaque sequences of octets,\" but application designers might want advice. For example, the Huffman encoding requires just over 3 bytes for any character outside printable ASCII, such as UTF-8 leading and continuation bytes. It is therefore more efficient to use percent-encoded UTF-8, or to clear the Huffman bit for internationalized values.\n",
      "createdAt": "2014-03-14T08:17:38Z",
      "updatedAt": "2014-03-14T08:42:54Z",
      "closedAt": "2014-03-14T08:42:54Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": ":path is already constrained to ASCII, effectively; we're not allowing IRIs to be transported (they have to be percent-encoded first, just as in HTTP/1). We also can't change how people use HTTP (e.g., by disallowing uppercase percent-encoding).\n\nI'm closing this now; if you'd like to discuss more, it's best to bring it up on list. \n\nThanks,\n",
          "createdAt": "2014-03-14T08:42:54Z",
          "updatedAt": "2014-03-14T08:42:54Z"
        }
      ]
    },
    {
      "number": 438,
      "id": "MDU6SXNzdWUyOTc5NjI2MA==",
      "title": "Define the hash algorithm behind E-tag/alternative tag",
      "url": "https://github.com/httpwg/http2-spec/issues/438",
      "state": "CLOSED",
      "author": "vlovich",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "E-tag's are problematic since implementations need to store the etag's alongside the content since there's no standardized way to compute the tag from the file contents (i.e. server-defined).\n\nI believe this inhibits their use as a much more reliable alternative to last-modified-since which has it's own set of problems.\n\nThere should either be a mechanism to negotiate the algorithm used for E-tags or just define that they're some known hashing algorithm (e.g. sha-1, sha-256).  This will encourage their adoption instead of people avoiding e-tags all-together.\n\nWhether this is E-tag or some other header doesn't really matter.\n",
      "createdAt": "2014-03-20T06:14:02Z",
      "updatedAt": "2014-03-20T08:11:50Z",
      "closedAt": "2014-03-20T08:11:03Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This is out of scope for HTTP/2; it belonged in HTTPbis, but those specs have shipped now. \n",
          "createdAt": "2014-03-20T08:11:03Z",
          "updatedAt": "2014-03-20T08:11:03Z"
        }
      ]
    },
    {
      "number": 441,
      "id": "MDU6SXNzdWUyOTk2MDQxMA==",
      "title": "Clarify continuation protocol",
      "url": "https://github.com/httpwg/http2-spec/issues/441",
      "state": "CLOSED",
      "author": "potswa",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "We have (emphasis added):\n\nCONTINUATION frames can be sent \u2026 as long as the preceding frame **on the same stream** is \u2026 without the END_HEADERS flag set.\n\nHowever each of the three kinds of headers that may precede a continuation prohibits an intervening frame from another stream.\n\nIt would be clearer to phrase this,\n\nas long as the preceding frame **on the connection**\n\nOr just omit the qualifier.\n",
      "createdAt": "2014-03-22T12:48:43Z",
      "updatedAt": "2014-03-31T21:52:09Z",
      "closedAt": "2014-03-31T21:52:09Z",
      "comments": []
    },
    {
      "number": 442,
      "id": "MDU6SXNzdWUzMDE4OTY0Nw==",
      "title": "alt-svc framework document",
      "url": "https://github.com/httpwg/http2-spec/issues/442",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "reschke"
      ],
      "labels": [
        "alt-svc",
        "editorial"
      ],
      "body": "",
      "createdAt": "2014-03-26T07:03:34Z",
      "updatedAt": "2014-05-02T00:20:42Z",
      "closedAt": "2014-05-02T00:20:42Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@reschke, just doing a bit of a cleanup.  Do you need this any more, or can you track individual issues?\n",
          "createdAt": "2014-05-01T20:11:11Z",
          "updatedAt": "2014-05-01T20:11:11Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On 2014-05-01 22:11, Martin Thomson wrote:\n\n> @reschke https://github.com/reschke, just doing a bit of a cleanup. Do\n> you need this any more, or can you track individual issues?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/issues/442#issuecomment-41951171.\n\nWe can close it.\n",
          "createdAt": "2014-05-01T21:43:19Z",
          "updatedAt": "2014-05-01T21:43:19Z"
        }
      ]
    },
    {
      "number": 443,
      "id": "MDU6SXNzdWUzMDQ4Mjk3Mw==",
      "title": "Indicating Chosen Service",
      "url": "https://github.com/httpwg/http2-spec/issues/443",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "alt-svc",
        "design"
      ],
      "body": "It's likely necessary for the server to know which protocol the user agent has chosen, and perhaps even the hostname (for load balancing). At the very least, there should be a flag in SETTINGS that indicates that an alternate service has been used.\n",
      "createdAt": "2014-03-31T03:19:54Z",
      "updatedAt": "2014-06-24T01:27:32Z",
      "closedAt": "2014-06-05T20:34:59Z",
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "is this about the frame or the header field?\n",
          "createdAt": "2014-04-01T06:18:14Z",
          "updatedAt": "2014-04-01T06:18:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that this refers to the Service header field.\n",
          "createdAt": "2014-04-01T17:27:24Z",
          "updatedAt": "2014-04-01T17:27:24Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; current approach (Service header) is the right approach; still need to justify / discuss the motivations on the list.\n",
          "createdAt": "2014-06-05T20:34:53Z",
          "updatedAt": "2014-06-05T20:34:53Z"
        }
      ]
    },
    {
      "number": 444,
      "id": "MDU6SXNzdWUzMDQ4MzAwOA==",
      "title": "Flushing Alt-Svc Cache",
      "url": "https://github.com/httpwg/http2-spec/issues/444",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "alt-svc",
        "design",
        "editor-ready"
      ],
      "body": "For the load balancing use case, it's necessary for clients to always flush altsvc cache upon a network change, but right now they're only required to examine the cache for suspicious entries. We should discuss whether this should be upgraded to always flush.\n",
      "createdAt": "2014-03-31T03:20:50Z",
      "updatedAt": "2014-06-24T01:38:28Z",
      "closedAt": "2014-06-24T01:38:28Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; need to be careful about wording so we don't rule out strategies like keeping segmented caches per network. Otherwise seems reasonable.\n",
          "createdAt": "2014-06-05T19:39:37Z",
          "updatedAt": "2014-06-05T19:39:37Z"
        }
      ]
    },
    {
      "number": 445,
      "id": "MDU6SXNzdWUzMDQ4NzM1MQ==",
      "title": "Transfer-codings",
      "url": "https://github.com/httpwg/http2-spec/issues/445",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "The current draft does not accommodate transfer-codings. There has been some pushback at this, since in some situations (e.g., range requests), it is difficult to compress without them.\n\nIn discussion, it appears unlikely that we'd require support for transfer-codings; however, it might be that we want to accommodate them, or a subset.\n\nOne simple remedy might be to add a flag on DATA indicating that the body is compressed, and have a corresponding setting to negotiate its use.\n",
      "createdAt": "2014-03-31T06:14:16Z",
      "updatedAt": "2019-03-26T15:04:23Z",
      "closedAt": "2014-04-25T00:33:41Z",
      "comments": [
        {
          "author": "cben",
          "authorAssociation": "NONE",
          "body": "historical notes:\r\n[I hoped to use TE compression without CE in a place where CE negotiation is messy, so was sad TE is gone in HTTP/2, and got curious why...]\r\n\r\n### Result\r\n\r\nThe per-frame compression added in #463 was later reverted in #511 due to concerns #497.\r\n\r\n=> HTTP/2 has only HPACK headers and CE content compression, as does https://tools.ietf.org/html/draft-ietf-quic-http-17.\r\n\r\n### initial state:\r\n\r\n- initial \"no TE compression\" decision somewhat lost to time; rumors I read are (1) desire to get rid of hop-by-hop headers (2) SPDY experience not supporting it.\r\n\r\n- \"CE gzip was made a fixed part of the protocol, in part, because intercepting intermediaries (or antivirus libraries as a subset of that) were explicitly stripping negotiation for it for their own convenience. Making it non negotiable enhances the robustness of the protocol against that which is imo the right trade given the history here and the importance of compression.\"\r\n\r\n### security\r\n\r\n#423 and other security concerns mentioned several times thoughout:\r\n- [BREACH attack](http://breachattack.com/) was known and future problems were conceivable.\r\n  - a recurring point is that only origin server knows when compression is safe, thus proxies adding hop-by-hop compression are risky; a recurring rebuttal is proxies already do (incorrectly) add hop-by-hop CE.\r\n  - AFAICT there was concensus that \"don't add compression\" and \"dont merge\" make TE safe (if obeyed).\r\n- DoS using decompressing intermediary to amplify\r\n- forcing the other end to allocate large memory\r\n\r\n### discussions summary\r\nObviously subjective; in particular I understand servers & clients well but intermediaries badly.\r\n\r\nomitting most discussion on #424 which is about CE/AE, except where relevant.\r\n\r\nEmail thread on reviving TE compression: https://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/thread.html#msg1179\r\n\r\n- A concrete proposal by Keith Morgan & Christoph Brunhuber to add TE and somewhat deprecate CE compression here: https://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/1205.html\r\n(this got pushback about 2-to-1.x translating intermediaries and about CE compression having its place when server already has both representations) \r\n\r\n- [near the end](https://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/1269.html), Matthew Kerwin suggests having effectively removed hop-by-hop headers may have good effects (or \"even just\r\nclarity of the spec\") and floats idea of new frame type\r\n\r\nNext thread: https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/thread.html#msg59\r\n\r\n- Matthew Kerwin proposed new optional ENCODING field in DATA frames, with SETTINGS negotiation.\r\n- https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/0156.html\r\n  experimental data on this being *per-frame*: compresses worse than whole-stream but surprisingly not much worse, and has benefits (less state)\r\n- https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/0076.html Keith Morgan compares to TE and proposes 2 retains 1.1 TE semantics minus \"chunked\".\r\n- https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/0103.html Roberto Peon says transport compression in SPDY didn't work well\r\n- https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/0113.html Keith Morgan sumarizes goals and problems so far; proposes \"Message-Encoding\" that is end-to-end like CE but encoded after Range is applied.\r\n\r\n\"Porting T-E to HTTP/2: Reasons Against\" thread https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/thread.html#msg166\r\n\r\n\"Transfer-codings, mandatory content-coding support and intermediaries\" thread https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/thread.html#msg273\r\n\r\n- #460 implicitly assumed AE gzip breaks semantic transparency of proxies (this was also discussed before first TE thread) => led to dropping implicitly assumed AE gzip.\r\n- several people point out TE would solve the *goal* of semantically transparent compression better.\r\n- discussion whether security concern is solved by forbidding intermediaries to _add_ compression.\r\n\r\n\"#445: Transfer-Codings\" thread https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/thread.html#msg442\r\n\r\n- proposed #463 (per-frame gzip bit) which got in!\r\n- fine-tuning of Security Considerations, esp. \"don't merge\".\r\n- discussion of per-frame vs per-segment => #466\r\n\r\n\"#466 segment compression\" thread https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/thread.html#msg523\r\n\r\n- per-frame doesn't require retaining state\r\n- per-segment simpler for proxies: \"since an intermediary already can\u2019t re-frame across segment boundaries\"\r\n- DoS / memory / multiplexing tradeoff discussions...\r\n- => closed \"per-frame is good enough, and the DoS considerations are too much of a worry\".\r\n\r\n\"Making Implicit C-E work\" thread. https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/thread.html#msg529\r\n\r\n- distinguishing implicit CE from explicit CE \u2014 basically shot down as complex & modifying CE semantics out of charter for HTTP/2.\r\n- much bemoaning of CE, some mentioning of TE but no concrete progress.\r\n- much DoS discussion.\r\n- Message-Encoding spun off as Draft RFC!\r\n  https://github.com/shearl/Internet-Drafts/blob/master/draft-morgan-http-message-encoding/draft-morgan-http-message-encoding.txt\r\n  https://tools.ietf.org/html/draft-morgan-http2-header-compression-00\r\n\r\n\"Range Requests vs Content Codings #msg1327\" thread https://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/thread.html#msg1327 \r\n\r\n- proposes a new range unit, \"bbcc\" (bytes-before-content-coding)\r\n- didn't fully read; this is not about TE but attempt to solve some of the problems with CE.\r\n\r\nI don't see email discussion that led to #511 except for the brief motivation in #497.\r\n(Decided in NYC meeting; agenda & minutes etherpad are down by now.)\r\n\r\n### My impressions (_very_ subjective, bias: I love TE)\r\n\r\n- it was not for lack of good will :angel: \r\n- TE would easily get in if there was no security considerations shadow over the whole area :closed_lock_with_key: \r\n- HTTP/1 interoperability and proxies gave status quo a strong advantage \u2014 even despite CE's interoperability and proxies problems :-(  Can't blame a standards process for this!\r\n- The preference for frame/segment compression over just allowing TE gzip wasn't suffiently motivated?\r\n  Eventually frame-vs-segment proved a problematic tradeoff but TE wasn't resurrected.\r\n- it seems participants have a blind spot for CE: people frequently called out problems with TE that equally apply to CE!  But this was swiftly called out, so can't say if it influenced the process.\r\n",
          "createdAt": "2019-03-17T14:45:40Z",
          "updatedAt": "2019-03-26T15:04:23Z"
        }
      ]
    },
    {
      "number": 446,
      "id": "MDU6SXNzdWUzMDU3MzkzOA==",
      "title": "alt-svc header field syntax",
      "url": "https://github.com/httpwg/http2-spec/issues/446",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "alt-svc",
        "design"
      ],
      "body": "See http://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/0856.html\n",
      "createdAt": "2014-04-01T06:16:57Z",
      "updatedAt": "2014-06-24T01:27:39Z",
      "closedAt": "2014-04-02T02:59:41Z",
      "comments": []
    },
    {
      "number": 447,
      "id": "MDU6SXNzdWUzMDc5MTAxMg==",
      "title": "HPACK / HTTP2 settings interaction",
      "url": "https://github.com/httpwg/http2-spec/issues/447",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "This is mostly an editorial issue that I believe needs clarification.\n\nThe HPACK spec allows the encoder to change the maximum header table size, so long as the new size is less than or equal to the value in the peer's SETTINGS_HEADER_TABLE_SIZE setting. It signals that it has done this by sending an encoding context update.\n\nWhen receiving a new SETTINGS_HEADER_TABLE_SIZE from the peer, it is not specified whether the encoder must simply apply this change (and signal it's acceptance via the SETTINGS ACK) or it must signal this change in-band by sending an encoding context update.\n\nMy preference is that all changes to the encoder (even those caused by receiving a settings with a value smaller than the encoder currently allows) MUST be signaled in-band via an encoding context update that occurs at the beginning of the first header block frame immediately following the SETTINGS ACK.\n",
      "createdAt": "2014-04-03T16:28:28Z",
      "updatedAt": "2014-04-04T13:41:35Z",
      "closedAt": "2014-04-04T13:41:35Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds reasonable.  I think that the Jeff's preference (if size is lower than current size, then MUST change to a smaller size immediately after the SETTINGS ACK) is right.\n\nThis really belongs HPACK side - the main spec doesn't even know about this in-band stuff.\n",
          "createdAt": "2014-04-03T17:15:34Z",
          "updatedAt": "2014-04-03T17:15:34Z"
        }
      ]
    },
    {
      "number": 448,
      "id": "MDU6SXNzdWUzMDc5MzI1Nw==",
      "title": "HPACK-07 Inconsistency",
      "url": "https://github.com/httpwg/http2-spec/issues/448",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Section 3.2.1 states that:\n\n\" An _indexed representation_ with an index value of 0 entails one of the following actions...\"\n\nSection 4.2 states:\n\n\"The index value of 0 is not used. It MUST be treated as a decoding error...\"\n\nIt seems that when adding \"Literal Header Field never Indexed\", as part of the security consideration update, the Encoding Context Update section was replaced as well to give it it's own op-codes (0b001Fxxxx) instead of being signaled by the 0-index opcode (0b10000000).\n\nThis change also required the two types of literals without indexing to need a larger op-code space (4 bits instead 3).\n",
      "createdAt": "2014-04-03T16:55:02Z",
      "updatedAt": "2014-04-04T13:41:35Z",
      "closedAt": "2014-04-04T13:41:35Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Marking editorial.  If you think that this needs more visibility or discussion, please take it to the list.\n",
          "createdAt": "2014-04-03T17:17:04Z",
          "updatedAt": "2014-04-03T17:17:04Z"
        }
      ]
    },
    {
      "number": 458,
      "id": "MDU6SXNzdWUzMTczMTkxMQ==",
      "title": "Race condition in shutdown proxying from HTTP/1.1 to HTTP/2",
      "url": "https://github.com/httpwg/http2-spec/issues/458",
      "state": "CLOSED",
      "author": "dcsommer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "I first brought this up in http://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/0158.html but I wanted to open an issue to track this as I believe this is a design flaw with HTTP/2 as it is today.\n\nConsider an HTTP/1.1 connection to a proxy that speaks HTTP/2 to the server. If the server needs to shut down, it will send a GOAWAY acknowledging the last request it processed.\n\nHowever, there is a race condition where a request could be in flight or queued. When the server eventually sees the delayed requests, it will not process it and the proxy will eventually return an error (most likey 5xx) to the client.\n\nRequiring proxies to buffer the request in order to replay for this case is not feasible.\n\nOne solution is to have the server send an ALTSVC frame, but this is not ideal as it implies each server must keep track of a list of alternatives. It may not make sense for the origin server itself to maintain this (potentially quickly changing) list.\n\nAnother solution is to allow acknowledging unreceived streams in the GOAWAY. For instance, the server could acknowledge last-stream-id plus SETTINGS_MAX_CONCURRENT_STREAMS. This might work in practice, but seems hacky.\n\nAnother (and in my view best) solution would be to introduce a two phase shutdown mechanism. Some strawman language: \"If a server needs to shut down for maintenance, the server SHOULD immediately send a DRAINING frame on all its client HTTP/2 connections to indicate that it will soon shut down. This allows the client to stop issuing new requests and avoids unnecessary retries. After a reasonable amount of time, the server SHOULD send a GOAWAY with status NO_ERROR on all its connections and then close the connection. Clients MAY may open new connections to the server after receiving a DRAINING frame.\"\n",
      "createdAt": "2014-04-17T14:36:33Z",
      "updatedAt": "2014-06-05T20:02:21Z",
      "closedAt": "2014-06-05T20:02:21Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I have added some text in https://github.com/http2/http2-spec/commit/d00b4f82001305a5d01e810a7b45140223cb2d08 that covers some of this.\n\nI'm going to leave this one open, because I don't think that this is completely done yet.  We need to discuss whether we want to be more explicit about this particular use case.\n",
          "createdAt": "2014-04-25T21:39:17Z",
          "updatedAt": "2014-04-25T21:39:17Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; double GOAWAY sounds good.\n",
          "createdAt": "2014-06-05T20:02:21Z",
          "updatedAt": "2014-06-05T20:02:21Z"
        }
      ]
    },
    {
      "number": 460,
      "id": "MDU6SXNzdWUzMTc4NDM5MQ==",
      "title": "Requiring Clients to support content-codings",
      "url": "https://github.com/httpwg/http2-spec/issues/460",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "editor-ready"
      ],
      "body": "HTTP/2 requires clients to support the gzip content-coding. \n\nThe justification for this has always been that it helps avoid intermediaries and other interposed software (e.g., virus filters) that strip Accept-Encoding to avoid the pain of decompressing responses.\n\nHowever, it has been pointed out that doing so means that intermediaries that translate from 1 to 2 are now required to synthesise new entity tags for decompressed responses, breaking semantic transparency and/or losing significant HTTP functionality.\n",
      "createdAt": "2014-04-18T06:47:28Z",
      "updatedAt": "2014-06-05T17:37:28Z",
      "closedAt": "2014-06-05T17:34:48Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See also #404.\n",
          "createdAt": "2014-04-18T06:49:17Z",
          "updatedAt": "2014-04-18T06:49:17Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It also requires to rewrite ETags in request headers (conditional ones), which is an open-ended list. Furthermore, ETags also appear in payloads (WebDAV properties, for instance).\n",
          "createdAt": "2014-04-28T10:21:10Z",
          "updatedAt": "2014-04-28T10:21:10Z"
        },
        {
          "author": "phluid61",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The outcome of this issue also affects #424 \n",
          "createdAt": "2014-04-29T07:03:48Z",
          "updatedAt": "2014-04-29T07:03:48Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; will remove implicit gzip from spec; may create new content-coding required status code or other strategy (non-blocking). \n",
          "createdAt": "2014-06-05T17:33:48Z",
          "updatedAt": "2014-06-05T17:33:48Z"
        }
      ]
    },
    {
      "number": 462,
      "id": "MDU6SXNzdWUzMTg3ODIxNw==",
      "title": "Intermediaries and Alt-Svc",
      "url": "https://github.com/httpwg/http2-spec/issues/462",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "alt-svc",
        "design",
        "editor-ready"
      ],
      "body": "Currently, Alt-Svc says:\n\n```\nIntermediaries MUST NOT change or append Alt-Svc field values.\n```\n\nThis seems too restrictive; e.g., a gateway (CDN) could do something useful here.\n\nSuggestion:\n\n```\nProxies MUST NOT change or append Alt-Svc field values.\n```\n\nAn argument could be made to degrade to SHOULD NOT, but if we do that, the specific conditions ought to be enumerated.\n",
      "createdAt": "2014-04-21T03:02:43Z",
      "updatedAt": "2014-06-24T01:27:40Z",
      "closedAt": "2014-06-05T19:56:19Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; remove the sentence completely.\n",
          "createdAt": "2014-06-05T19:53:39Z",
          "updatedAt": "2014-06-05T19:53:39Z"
        }
      ]
    },
    {
      "number": 465,
      "id": "MDU6SXNzdWUzMjE2Mjc4MQ==",
      "title": "Priority Terminology",
      "url": "https://github.com/httpwg/http2-spec/issues/465",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "prioritisation"
      ],
      "body": "I think that the priority model description could be improved by using everywhere a well defined terminology.\n\nUsing the following example:\n\n```\n  A\n / \\\nB   C\n```\n\nMy proposal:\n- B **depends on** A that is A is B **parent**.\n- A **dependencies** are B and C\n- The **dependency link** of B (meaning the dependency between A and B) has a weight of 16.\n",
      "createdAt": "2014-04-24T16:12:23Z",
      "updatedAt": "2014-05-02T00:28:18Z",
      "closedAt": "2014-05-02T00:28:18Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that parent is very useful.  B and C are merely dependent streams.  And we don't really need anything for weight; \"stream B has a weight of 16\" or \"stream B, of weight 16\" both suffice.\n\nI'll go through and see what I can do.  I'll leave this issue open until we're both happy.\n",
          "createdAt": "2014-04-25T21:44:49Z",
          "updatedAt": "2014-04-25T21:44:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that I got this one.  Let me know if I missed something.\n",
          "createdAt": "2014-05-02T00:28:18Z",
          "updatedAt": "2014-05-02T00:28:18Z"
        }
      ]
    },
    {
      "number": 466,
      "id": "MDU6SXNzdWUzMjIwNTI4NQ==",
      "title": "Compress segments rather than frames",
      "url": "https://github.com/httpwg/http2-spec/issues/466",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "There are two reasons why compressing segments might be better than individual frames:\n1. Better compression efficiency\n2. Compression effectively creates a delineation similar to what segments allow; aligning the two would avoid issues with reframing, padding and other related concerns.\n\nOf course, we would need rules that governed how frames are marked.  The obvious one is to require all frames in a segment to be uniformly compressed or uncompressed, not a mix of the two.\n\nThen there are the drawbacks, which are that more state is required to process streams because a compression context is maintained over a longer period, not just for the time it takes to decompress/compress a frame.  Since this is an optional feature, I'm thinking that this is a manageable cost.\n",
      "createdAt": "2014-04-25T04:32:31Z",
      "updatedAt": "2014-06-05T17:42:12Z",
      "closedAt": "2014-06-05T17:42:12Z",
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Compressed segments mean that one gzip per stream could be required.\n\nThis would be a vast increase in DoS surface area and is, imho, untenable.\n-=R\n\nOn Thu, Apr 24, 2014 at 9:32 PM, Martin Thomson notifications@github.comwrote:\n\n> There are two reasons why compressing segments might be better than\n> individual frames:\n> 1. Better compression efficiency\n> 2. Compression effectively creates a delineation similar to what\n>    segments allow; aligning the two would avoid issues with reframing, padding\n>    and other related concerns.\n> \n> Of course, we would need rules that governed how frames are marked. The\n> obvious one is to require all frames in a segment to be uniformly\n> compressed or uncompressed, not a mix of the two.\n> \n> Then there are the drawbacks, which are that more state is required to\n> process streams because a compression context is maintained over a longer\n> period, not just for the time it takes to decompress/compress a frame.\n> Since this is an optional feature, I'm thinking that this is a manageable\n> cost.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/466\n> .\n",
          "createdAt": "2014-04-25T06:09:47Z",
          "updatedAt": "2014-04-25T06:09:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Keith suggests that instead of aligning segments with compression context boundaries, we instead only require that we align compression context boundaries with segment boundaries.  This would mean that a server that uses compression is required to use END_SEGMENT to mark places where the origin of the data changes.  We'd have to create a safe harbour for implementations that don't want to bother with this so that if a segment is not compressed, then it can't be compressed by an intermediary.\n\nThis gives the simple rules:\n- if any part of a segment is compressed, then any part of that segment MAY be compressed (which implies merging of uncompressed content in any fashion)\n- if no part of a segment is compressed, then the entire segment MUST remain uncompressed\n\nThis would allow for per-frame compression to remain, isolating the use of compression to a single frame, avoiding the concerns @grmocg has with respect to DoS.\n",
          "createdAt": "2014-04-29T18:21:36Z",
          "updatedAt": "2014-04-29T18:21:36Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; per-frame is good enough, and the DoS considerations are too much of a worry for per-segment.\n",
          "createdAt": "2014-06-05T17:42:12Z",
          "updatedAt": "2014-06-05T17:42:12Z"
        }
      ]
    },
    {
      "number": 467,
      "id": "MDU6SXNzdWUzMjI0NTcxOQ==",
      "title": "Remove reserved bits from ALTSVC",
      "url": "https://github.com/httpwg/http2-spec/issues/467",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "frame layout"
      ],
      "body": "We have flags, so these can probably go away.\n",
      "createdAt": "2014-04-25T16:16:09Z",
      "updatedAt": "2014-04-29T18:15:14Z",
      "closedAt": "2014-04-29T18:15:14Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in https://github.com/http2/http2-spec/commit/9e38f157faa02b24bfe436bef5d7a95a9e55b38b\n",
          "createdAt": "2014-04-29T18:15:14Z",
          "updatedAt": "2014-04-29T18:15:14Z"
        }
      ]
    },
    {
      "number": 468,
      "id": "MDU6SXNzdWUzMjI0NjE4NQ==",
      "title": "Sending PRIORITY for closed streams",
      "url": "https://github.com/httpwg/http2-spec/issues/468",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "prioritisation"
      ],
      "body": "I realize that I made a bit of a mistake when merging #453.  The document should expressly permit the sending of PRIORITY frames for closed streams.  Otherwise, certain use cases are made more difficult (not impossible, but certainly cumbersome).\n\nThinking more on this, the text I'm arguing with Herve on in #464 is probably worthwhile, but it would need to be retargeted.  The point here is that a closed node that is high up in the priority tree is a useful construct for performing large-scale reprioritization changes, explicitly pointing this out means that we have a higher chance that servers keep nodes around if they continue to be used.  That is, branch nodes with active leaves are retained as long as possible; nodes close to the root are retained as long as possible.\n\n(I'm not sure that I could device a sorting algorithm that would optimally determine what nodes to keep, but that's probably something for implementation \"secret sauce\".)\n",
      "createdAt": "2014-04-25T16:22:24Z",
      "updatedAt": "2014-06-05T20:08:35Z",
      "closedAt": "2014-06-05T20:08:35Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; seems good.\n",
          "createdAt": "2014-06-05T20:08:15Z",
          "updatedAt": "2014-06-05T20:08:15Z"
        }
      ]
    },
    {
      "number": 469,
      "id": "MDU6SXNzdWUzMjI1MTQxMQ==",
      "title": "DATA frame clarification",
      "url": "https://github.com/httpwg/http2-spec/issues/469",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In 6.1, we define \"Padding\" as the field after the application data. We then say that padding is included in flow control. So does this include the length of the \"Pad High\" or \"Pad Low\" fields? or just the length of \"Padding.\"\n",
      "createdAt": "2014-04-25T17:30:41Z",
      "updatedAt": "2014-04-25T21:33:56Z",
      "closedAt": "2014-04-25T21:33:56Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Obviously it has to include the entire frame because we point out that padding by one byte can be done by including Pad Low of 0.  Let me fix that.\n",
          "createdAt": "2014-04-25T21:32:26Z",
          "updatedAt": "2014-04-25T21:32:26Z"
        }
      ]
    },
    {
      "number": 473,
      "id": "MDU6SXNzdWUzMjYxMDAzMg==",
      "title": "Header Field definition is too broad",
      "url": "https://github.com/httpwg/http2-spec/issues/473",
      "state": "CLOSED",
      "author": "petethepig",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Taken from the HPACK specs:\n\n> Header Field:\n> A name-value pair. Both the name and value are treated as opaque sequences of octets.\n\nThis means that both name and value can be anything, right?\nThis brings several concerns:\n- this will break compatibility with HTTP1.1. For example, how do I proxy HTTP2 requests to an HTTP1.1 server?\n- what if my value has a '\\0' in it? The receiving side will treat it like 2 separate header fields;\n- having a binary header value can be justifiable, but what about binary names?\n",
      "createdAt": "2014-05-01T11:53:18Z",
      "updatedAt": "2014-05-01T16:56:07Z",
      "closedAt": "2014-05-01T16:56:07Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "HPACK can carry a larger range of values than HTTP permits for header fields (and names).  Those header fields are still invalid according to HTTP.\n\nIncidentally, a '\\0' octet is used (see [Section 8.1.3.3](https://tools.ietf.org/html/draft-ietf-httpbis-http2-12#section-8.1.3.3)) to allow for deterministic ordering of multiple header fields.\n\nA secondary reason is to allow for illegal - but still widespread - uses of HTTP that include illegal octets in header fields.  We are still able to carry those in HTTP/2, even if that is not strictly permitted by the protocol.  That helps with some of the backward compatibility cases.\n",
          "createdAt": "2014-05-01T16:56:07Z",
          "updatedAt": "2014-05-01T16:56:07Z"
        }
      ]
    },
    {
      "number": 477,
      "id": "MDU6SXNzdWUzMzAwMjcxNQ==",
      "title": "Clarify text around cipher strengths",
      "url": "https://github.com/httpwg/http2-spec/issues/477",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "security"
      ],
      "body": "This isn't necessarily clear enough, particularly the bit about \"128 bit security level\", which is intended to encompass P256, but also 25519, which isn't quite 256 bits.  More clarification is probably needed.\n",
      "createdAt": "2014-05-07T16:42:37Z",
      "updatedAt": "2014-07-28T15:27:18Z",
      "closedAt": "2014-07-28T15:27:18Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is for @ekr to provide text on.\n",
          "createdAt": "2014-06-05T20:44:49Z",
          "updatedAt": "2014-06-05T20:44:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "'twas non-blocking, and a good thing.\n",
          "createdAt": "2014-07-28T15:27:18Z",
          "updatedAt": "2014-07-28T15:27:18Z"
        }
      ]
    },
    {
      "number": 478,
      "id": "MDU6SXNzdWUzMzMwNjU1Mg==",
      "title": "Accept-Language should be Accept-Locale",
      "url": "https://github.com/httpwg/http2-spec/issues/478",
      "state": "CLOSED",
      "author": "tinganho",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I'm being a little bit confused that the Accept-Language header is called Accept-Language header. Because it sends region information as well. If it send region information it is definetely a locale.\n\nIsn't language is a subset of locales?\n\nHere is a set of languages:\n\n``` javascript\nvar languages = [\n'en',\n'zh',\n'fr',\n...\n];\n```\n\nHere is a set of locales:\n\n``` javascript\nvar locales = [\n'en',\n'zh',\n'fr',\n'en-US',\n'zh-CN',\n'fr-CA'\n...\n];\n```\n\nAnd here is the definition from Wikipedia:\n\n> In computing, a locale is a set of parameters that defines the user's language, country and any special variant preferences that the user wants to see in their user interface. Usually a locale identifier consists of at least a language identifier and a region identifier.\n\nIt is also very confusing for programmers, because they are always dealing with locales not languages.\n",
      "createdAt": "2014-05-12T13:18:59Z",
      "updatedAt": "2014-05-12T13:54:33Z",
      "closedAt": "2014-05-12T13:54:33Z",
      "comments": [
        {
          "author": "tinganho",
          "authorAssociation": "NONE",
          "body": "I hope it can be fixed in HTTP 2.0\n",
          "createdAt": "2014-05-12T13:19:27Z",
          "updatedAt": "2014-05-12T13:19:27Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "HTTP/2 shares field names with 1.1, thus this will not be changed.\n",
          "createdAt": "2014-05-12T13:54:33Z",
          "updatedAt": "2014-05-12T13:54:33Z"
        }
      ]
    },
    {
      "number": 480,
      "id": "MDU6SXNzdWUzMzc3NjYzMA==",
      "title": "Headers and flow control",
      "url": "https://github.com/httpwg/http2-spec/issues/480",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "flow control"
      ],
      "body": "It's been suggested that we make HEADERS that don't establish a new stream subject to flow control, to better avoid situations where large amounts of metadata could pause multiplexing.\n\nOne solution would be a new OPCODE for such headers, e.g., METADATA. However, the intersection with CONTINUATION needs to be considered.\n",
      "createdAt": "2014-05-19T07:40:11Z",
      "updatedAt": "2014-06-05T18:23:43Z",
      "closedAt": "2014-06-05T18:23:43Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; not enough interest in solving this problem in this version of HTTP. Might define a new error code if a proposal is made (non-blocking).\n",
          "createdAt": "2014-06-05T18:23:43Z",
          "updatedAt": "2014-06-05T18:23:43Z"
        }
      ]
    },
    {
      "number": 481,
      "id": "MDU6SXNzdWUzNDA3OTg4OA==",
      "title": "Allow intervening DATA frames",
      "url": "https://github.com/httpwg/http2-spec/issues/481",
      "state": "CLOSED",
      "author": "michaelrsweet",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "frame semantics",
        "header compression"
      ],
      "body": "Currently the HTTP2 draft requires that HEADER frames be contiguous. Since a header block can be arbitrarily large, this presents both an obvious DoS vector and a practical issue with streaming performance and preservation of the priority scheme that HTTP/2 provides.\n\nA simple solution is to allow intervening DATA frames on other, established streams. That will allow high-priority data through without major interruptions.\n\nWithout such a change, I fear that implementers will either continue to use HTTP/1.1 or open a separate HTTP/2 connection for high-priority traffic to avoid \"stuttering\" of the data stream.\n",
      "createdAt": "2014-05-22T13:13:01Z",
      "updatedAt": "2014-06-05T18:41:06Z",
      "closedAt": "2014-06-05T18:41:06Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; this would require intermediaries, etc. to keep more state for longer, blowing out resource requirements. The current requirement makes error handling easier, reduces buffering requirements, and make the abstraction cleaner. As with other issue resolutions, the best guidance here is to not send overly large header blocks.\n",
          "createdAt": "2014-06-05T18:41:06Z",
          "updatedAt": "2014-06-05T18:41:06Z"
        }
      ]
    },
    {
      "number": 484,
      "id": "MDU6SXNzdWUzNDI4MTQ2NQ==",
      "title": "State Diagram",
      "url": "https://github.com/httpwg/http2-spec/issues/484",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "streams"
      ],
      "body": "Greg proposes a replacement diagram at:\n  http://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/att-0720/http2state.txt\n",
      "createdAt": "2014-05-26T04:29:00Z",
      "updatedAt": "2014-06-05T21:04:43Z",
      "closedAt": "2014-06-05T21:04:43Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; will stick with the current diagram, as it's more comprehensible, and diagrams are non-normative. Will add notes to clarify continuations, etc. Also clarify that the diagram is about stream lifecycle, not frames (e.g., PING doesn't show up).\n",
          "createdAt": "2014-06-05T20:33:31Z",
          "updatedAt": "2014-06-05T20:33:31Z"
        }
      ]
    },
    {
      "number": 485,
      "id": "MDU6SXNzdWUzNDMxODE0Mw==",
      "title": "Need way to negotiate \"no Huffman\" in settings",
      "url": "https://github.com/httpwg/http2-spec/issues/485",
      "state": "CLOSED",
      "author": "michaelrsweet",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Just as we currently have settings for the compression table size and whether DATA frames can be gzip'd, we should have a setting to control whether Huffman encoding is used in HEADER frames. This will allow for simpler client implementations and allow both ends to decide whether Huffman is a valid compression algorithm to use over a connection.\n",
      "createdAt": "2014-05-26T16:28:08Z",
      "updatedAt": "2014-06-05T18:37:23Z",
      "closedAt": "2014-06-05T18:37:23Z",
      "comments": [
        {
          "author": "potswa",
          "authorAssociation": "NONE",
          "body": "Client implementation could ironically be complicated if servers are allowed to refuse Huffman coding, or in any case hard-coded headers would have to use plain text. If such a switch is added, it should be limited to clients only.\n\nI have implemented an 8-bit microcontroller friendly [Huffman decoder](https://code.google.com/p/lightweight-http2-huffman-decoder). It should take under a kilobyte of program space on any system. Currently it does not implement an initial fast-lookup table, but at the expense of 600 or so more bytes, it should be quite performant as well. Streaming capability is still lacking, but should be easy enough to add. I just wanted to get this out the door, to demonstrate that Huffman is only a modest incremental step in complexity for HTTP/2 overall.\n",
          "createdAt": "2014-05-31T02:45:10Z",
          "updatedAt": "2014-05-31T02:45:10Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; we don't want more optionality in the protocol, and huffman implementation isn't overly onerous. Security issues can be addressed better by a  protocol rev, if they ever eventuate.\n",
          "createdAt": "2014-06-05T18:37:23Z",
          "updatedAt": "2014-06-05T18:37:23Z"
        }
      ]
    },
    {
      "number": 490,
      "id": "MDU6SXNzdWUzNDgyMDk5OA==",
      "title": "Permit/Forbid Coalescing",
      "url": "https://github.com/httpwg/http2-spec/issues/490",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "security"
      ],
      "body": "Several of the comments in #363 note that a lot of the issues we have with renegotiation are as a result of a coalescing feature.\n\nThis is the not-fully-formally-accepted feature where a client can use an existing connection to a server for different origins.\n\nTo recap, coalescing occurs when a client discovers that they have an existing connection to the same IP and port that a URL resolves to.  AND the existing connection has a valid certificate for the name that is being sought.\n\nRob notes the prohibition in [Section 3 of RFC 6066](http://tools.ietf.org/html/rfc6066#page-8) where it states:\n\n```\nIf the server_name is established in the TLS session handshake, the client SHOULD NOT attempt to request a different server name at the application layer.\n```\n",
      "createdAt": "2014-06-02T23:44:16Z",
      "updatedAt": "2014-06-17T21:17:04Z",
      "closedAt": "2014-06-17T21:17:04Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "If we intend to keep this, then we need to have some fairly strong security considerations regarding having mutually distrustful entities on the same connection.\n",
          "createdAt": "2014-06-06T15:07:30Z",
          "updatedAt": "2014-06-06T15:07:30Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in NYC; Aside from security considerations, we need a way for a server to foreswear knowledge of a given host/origin and require the creation of a new connection.  We need to talk to folks in the TLS WG and we have to allow them to block this feature.\n\nIf we proceed, we need to s/SHOULD/MAY/ regarding this, and add context that discourages its use without a good understanding.\n\nWe discussed, but will not add, the addition of a setting to signal that coalescing is not supported by the server.\n",
          "createdAt": "2014-06-06T15:22:40Z",
          "updatedAt": "2014-06-06T15:22:40Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; \n- Coalescing is a MAY\n- need security considerations around risks\n- need status code to say \"Not Authoritative\"\n- need review by TLSWG\n- future extension to say \"this connection doesn't coalesce\" might be interesting\n",
          "createdAt": "2014-06-06T15:24:00Z",
          "updatedAt": "2014-06-06T15:24:00Z"
        }
      ]
    },
    {
      "number": 491,
      "id": "MDU6SXNzdWUzNDkwOTAyMA==",
      "title": "Restrict cipher suite selection",
      "url": "https://github.com/httpwg/http2-spec/issues/491",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "security"
      ],
      "body": "Will Chan has suggested that Chrome wants to restrict the set of cipher suites that we consider to be acceptable for HTTP/2.  A unilateral action on the part of Chrome might have the effect of forcing the issue for sites, but that would be problematic.\n\nWe already require (potentially) ephemeral key exchange with a certain minimum strength.  But that's just the handshake.  The changes here relate to the TLS record layer.\n\nIf we want to improve the situation on the record layer, we can start by considering the following list of options, all of which are on the threatened species list (they won't be part of TLS 1.3), in order of least to most desirable:\n- RC4 (we currently advise against this in a non-normative fashion)\n- 3DES\n- AES CBC modes\n",
      "createdAt": "2014-06-03T22:05:25Z",
      "updatedAt": "2014-06-06T17:12:15Z",
      "closedAt": "2014-06-06T17:12:15Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; accept Martin's pull request delta making it a blacklist, not a whitelist.\n",
          "createdAt": "2014-06-06T16:27:29Z",
          "updatedAt": "2014-06-06T16:27:29Z"
        }
      ]
    },
    {
      "number": 492,
      "id": "MDU6SXNzdWUzNDk3NDA1OQ==",
      "title": "Alt-Svc header host restriction",
      "url": "https://github.com/httpwg/http2-spec/issues/492",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "reschke"
      ],
      "labels": [
        "alt-svc",
        "design",
        "editor-ready"
      ],
      "body": "When we were originally working on Alt-Svc, Patrick and I put a restriction on the Alt-Svc header field so that it couldn\u2019t redirect clients to a different host.\n\nSince then, several people have pointed out that the requirement to have strong server authentication, as well as cache flushing, seems to contain the risk associated with doing this, and that the facility could be quite useful.\n\nSo, I\u2019m suggesting we (re-) add the capability to the header.\n",
      "createdAt": "2014-06-04T16:11:12Z",
      "updatedAt": "2014-06-24T01:38:28Z",
      "closedAt": "2014-06-24T01:38:28Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; do it.\n",
          "createdAt": "2014-06-05T19:42:30Z",
          "updatedAt": "2014-06-05T19:42:30Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Two questions:\n\n1) the text around the ALTSVC frame currently talks about IDNA; I assume the same considerations would apply for the header field once we include the host, right?\n\n2) if we change the value from port to host:port we'll have to allow quoted-string syntax as well (because of the \":\"), right?\n",
          "createdAt": "2014-06-09T18:39:09Z",
          "updatedAt": "2014-06-09T18:39:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, IDNA restrictions apply equally (to bother or neither).  The colon sucks, if you want a consistent grammar.  (I suppose Host is an exception in that regard.)\n",
          "createdAt": "2014-06-09T23:32:22Z",
          "updatedAt": "2014-06-09T23:32:22Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On 2014-06-10 01:32, Martin Thomson wrote:\n\n> Yes, IDNA restrictions apply equally (to bother or neither). The colon\n> sucks, if you want a consistent grammar. (I suppose Host is an exception\n> in that regard.)\n\nWe already require understanding of quoted-string when processing the \nparameters, so I'll stick to the colon and make the value \ntoken/quoted-string.\n\nBest regards, Julian\n",
          "createdAt": "2014-06-10T20:31:36Z",
          "updatedAt": "2014-06-10T20:31:36Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "Do we need to clarify whether IP addresses (IPv4 and/or IPv6) are or are not allowed?\nIf so, for the IPv6 case are the square brackets required and do the colons need to be escaped?\n",
          "createdAt": "2014-06-12T12:43:19Z",
          "updatedAt": "2014-06-12T12:43:19Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The intent is to allow exactly what's allowed in an HTTP Host header field, which includes IP addresses.\n\nSee http://greenbytes.de/tech/webdav/rfc3986.html#host\n\nSo yes, IPv6 addresses would require square brackets. And no, colons would not need any additional escaping.\n",
          "createdAt": "2014-06-12T12:54:21Z",
          "updatedAt": "2014-06-12T12:54:21Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Still need to explain what checks need to be done when switching hosts; see http://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/1232.html\n",
          "createdAt": "2014-06-12T18:07:27Z",
          "updatedAt": "2014-06-12T18:07:27Z"
        }
      ]
    },
    {
      "number": 496,
      "id": "MDU6SXNzdWUzNTA3OTUzNw==",
      "title": "Fallback to HTTP/1.1?",
      "url": "https://github.com/httpwg/http2-spec/issues/496",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mnot"
      ],
      "labels": [
        "design",
        "editor-ready",
        "has-proposal",
        "upgrade"
      ],
      "body": "There have been a number of discussions about scenarios where we may want the client to fall back to 1.1 (a server forcing gzip, APIs incompatible with HPACK, etc.).  HTTP/1.1 defines status code 505 as indicating that the server \"refuses to support the major version of HTTP that was used in the request message [and] is unable or unwilling to complete the request using the same major version as the client [...] other than with this error message.\"\n\nHowever, that doesn't define a programmatic way to tell the user agent what version to retry with, simply a representation to be shown to the user.  We should define a way to inform the client what HTTP version to retry with (presumably 1.1).\n",
      "createdAt": "2014-06-05T17:35:59Z",
      "updatedAt": "2014-10-12T16:33:29Z",
      "closedAt": "2014-10-12T16:33:29Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; task force-ish to come up with a proposal either using 505 or a new status code + header to point to the version(s) to bounce to.\n",
          "createdAt": "2014-06-06T16:06:25Z",
          "updatedAt": "2014-06-06T16:06:25Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Mark to write draft.\n- use 505\n- extra header\n  - what version to down/upgrade to\n  - what the scope of applicability is (server vs resource)\n  - cache-control applies \n",
          "createdAt": "2014-06-06T18:47:29Z",
          "updatedAt": "2014-06-06T18:47:29Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Discussed in person, but capturing here:  Scope could also be a path prefix, not just a single resource.\n",
          "createdAt": "2014-06-07T01:35:26Z",
          "updatedAt": "2014-06-07T01:35:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Marking this one as non-blocking.  We need to discuss adoption of a mechanism for this; and that's not going to happen in the sorts of time frames we're talking about.\n",
          "createdAt": "2014-06-16T19:10:44Z",
          "updatedAt": "2014-06-16T19:10:44Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Can this be closed -- i.e., do we need to actually reference the new draft in HTTP/2?\n",
          "createdAt": "2014-07-21T15:12:29Z",
          "updatedAt": "2014-07-21T15:12:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yep.\n",
          "createdAt": "2014-07-21T15:14:27Z",
          "updatedAt": "2014-07-21T15:14:27Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Reopening (preliminary) based upon feedback from Mike.\n",
          "createdAt": "2014-08-15T02:05:01Z",
          "updatedAt": "2014-08-15T02:05:01Z"
        }
      ]
    },
    {
      "number": 497,
      "id": "MDU6SXNzdWUzNTA4MDExOQ==",
      "title": "Remove frame-based compression.",
      "url": "https://github.com/httpwg/http2-spec/issues/497",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics"
      ],
      "body": "",
      "createdAt": "2014-06-05T17:42:44Z",
      "updatedAt": "2014-06-06T18:29:30Z",
      "closedAt": "2014-06-06T18:29:30Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Frames can be coalesced or split -- this is antagonistic to end-to-end, per-frame compression. This requires decompression / recompression in proxies that need to coalesce or split frame.\n",
          "createdAt": "2014-06-05T17:44:50Z",
          "updatedAt": "2014-06-05T17:44:50Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; no implementer interest, security concerns about proxying it. We believe it can be addressed as an extension now if someone wants to scratch that itch (and can find someone to interop with); however, fixing this properly means doing it at the HTTP semantic layer (e.g., with a new range type).\n\nIn the meantime, remove frame compression.\n",
          "createdAt": "2014-06-06T18:29:27Z",
          "updatedAt": "2014-06-06T18:29:27Z"
        }
      ]
    },
    {
      "number": 498,
      "id": "MDU6SXNzdWUzNTA4NzAyOQ==",
      "title": "Mandatory to implement key exchange/cipher suite",
      "url": "https://github.com/httpwg/http2-spec/issues/498",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "liaison",
        "security"
      ],
      "body": "It has been noted that there is an opportunity for interoperability failure with the rules we have regarding ephemeral key exchange.\n\ne.g., client has only DHE, server has only ECDHE, can't use HTTP/2\n\nDo we want to specify a mandatory to implement cipher suite so that we can avoid this?\n",
      "createdAt": "2014-06-05T19:05:01Z",
      "updatedAt": "2014-07-28T15:25:58Z",
      "closedAt": "2014-07-28T15:25:58Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I think you do. TLS 1.3 will be mandating ephemeral key exchange, so I think you just want to use whatever their MTI is (presumably either DHE or ECDHE  with AES-GCM). I expect to have a preliminary answer to this in YVR. Will that be soon enough?\n",
          "createdAt": "2014-06-06T14:44:41Z",
          "updatedAt": "2014-06-06T14:44:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "TOR, I hope.  But I think that should suffice.  We can discuss whether we try to preempt that decision or leave a placeholder.\n",
          "createdAt": "2014-06-06T14:48:48Z",
          "updatedAt": "2014-06-06T14:48:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I meant YYZ.\n",
          "createdAt": "2014-06-06T14:56:33Z",
          "updatedAt": "2014-06-06T14:56:33Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; will make a decision about it in Toronto.\n\nUnder discussion - ECDHE / DHE + RSA + AES-GCM + SHA256. Maybe another too.\n",
          "createdAt": "2014-06-06T18:15:38Z",
          "updatedAt": "2014-06-06T18:17:23Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "We need to settle this for WGLC. @ekr, any chance of getting a decision earlier?\n",
          "createdAt": "2014-07-02T05:18:16Z",
          "updatedAt": "2014-07-02T05:18:16Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "#562 is editor-ready.\n",
          "createdAt": "2014-07-24T23:57:48Z",
          "updatedAt": "2014-07-24T23:57:48Z"
        }
      ]
    },
    {
      "number": 499,
      "id": "MDU6SXNzdWUzNTA4NzI1Mg==",
      "title": "Make Alt-Svc an extension to the spec.",
      "url": "https://github.com/httpwg/http2-spec/issues/499",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "alt-svc",
        "editorial"
      ],
      "body": "It's a Hop-by-Hop frame that MUST be dropped by intermediaries. It is a HINT as to service availability. Perfect for an extension.\n",
      "createdAt": "2014-06-05T19:07:38Z",
      "updatedAt": "2014-06-06T16:50:18Z",
      "closedAt": "2014-06-06T16:50:18Z",
      "comments": []
    },
    {
      "number": 500,
      "id": "MDU6SXNzdWUzNTA4OTEwNQ==",
      "title": "Make Blocked an extension to the spec.",
      "url": "https://github.com/httpwg/http2-spec/issues/500",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics"
      ],
      "body": "Hop-by-hop frame that can be dropped and is listed as \"experimental.\"\n",
      "createdAt": "2014-06-05T19:30:37Z",
      "updatedAt": "2014-06-05T20:52:36Z",
      "closedAt": "2014-06-05T20:52:36Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; make it an extension. Draft editor will be (or be found by) Hasan.\n",
          "createdAt": "2014-06-05T20:51:02Z",
          "updatedAt": "2014-06-05T20:51:02Z"
        }
      ]
    },
    {
      "number": 502,
      "id": "MDU6SXNzdWUzNTA5MDM3NA==",
      "title": "Make the Service header field SHOULD",
      "url": "https://github.com/httpwg/http2-spec/issues/502",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "alt-svc",
        "design",
        "editor-ready",
        "security"
      ],
      "body": "...with a good explanation.  This helps alleviate the privacy considerations (see #501)\n",
      "createdAt": "2014-06-05T19:46:45Z",
      "updatedAt": "2014-06-24T01:27:52Z",
      "closedAt": "2014-06-06T23:36:13Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; agreed to change Service header to have a fixed value of \"1\" to indicate that an alternative service is being accessed; put extensibility in the field to allow future elaboration. Change header name to Alt-Svc-Used. Remains a MUST.\n",
          "createdAt": "2014-06-06T17:26:41Z",
          "updatedAt": "2014-06-06T17:26:41Z"
        }
      ]
    },
    {
      "number": 505,
      "id": "MDU6SXNzdWUzNTE0MDc2NA==",
      "title": "Simplify Padding",
      "url": "https://github.com/httpwg/http2-spec/issues/505",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame layout"
      ],
      "body": "1) Remove padding from HEADERS, PUSH_PROMISE, and CONTINUATION frames.\n\nIntermediaries are instructed not to remove padding. Padding on these non-flow-controlled frames can block other streams on multiplexed connections (identically to large header blocks). Further, should padding of header blocks truly be necessary, it is more appropriate for this to occur within HPACK.\n\n2) Remove PAD_HIGH.\n\nThe reason for not implementing padding as a separate frame is to be able to pad by less the 8-byte frame header that would be required. This can be accomplished with only PAD_LOW and simplifies the processing of a frame.\n",
      "createdAt": "2014-06-06T12:19:05Z",
      "updatedAt": "2018-07-26T03:45:30Z",
      "closedAt": "2014-06-06T18:25:33Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; removing PAD_HIGH is not controversial (PAD_LOW becomes just PAD). For header-bearing frames, PAD remains in DATA, HEADERS, and PUSH_PROMISE -- not CONTINUATION.\n\nIntermediaries MAY pass through, re-pad or drop padding from header-bearing frames (see Sec Considerations). Intermediaries SHOULD maintain padding in DATA frames.\n",
          "createdAt": "2014-06-06T18:10:07Z",
          "updatedAt": "2014-06-06T18:10:07Z"
        },
        {
          "author": "ioquatix",
          "authorAssociation": "NONE",
          "body": "It's not clear to me why we don't have padding on CONTINUATION frames. Would you be able to clarify this decision?",
          "createdAt": "2018-07-26T03:45:30Z",
          "updatedAt": "2018-07-26T03:45:30Z"
        }
      ]
    },
    {
      "number": 506,
      "id": "MDU6SXNzdWUzNTE0MDgzOQ==",
      "title": "Consider making PRIORITY scheme an extension.",
      "url": "https://github.com/httpwg/http2-spec/issues/506",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "prioritisation",
        "writeup"
      ],
      "body": "It is advisory only, hop-by-hop, and there is little implementation experience.\n",
      "createdAt": "2014-06-06T12:20:32Z",
      "updatedAt": "2014-12-05T00:01:07Z",
      "closedAt": "2014-06-10T18:35:00Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; will not make it an extension, but mark dependency trees at risk, with the backup plan of keeping the syntax the same, but restricting the values sent (E=0 D=0).\n",
          "createdAt": "2014-06-06T14:39:33Z",
          "updatedAt": "2014-06-06T14:39:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Marked at risk: https://github.com/http2/http2-spec/commit/92e5bcd0d96e07100d9c79c402a24a26196ca059\n",
          "createdAt": "2014-06-10T18:35:00Z",
          "updatedAt": "2014-06-10T18:35:00Z"
        }
      ]
    },
    {
      "number": 508,
      "id": "MDU6SXNzdWUzNTE0MzM0Ng==",
      "title": "Never indexed representation constraints",
      "url": "https://github.com/httpwg/http2-spec/issues/508",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "header compression",
        "security"
      ],
      "body": "In HPACK, the \"never indexed representation\" is intended to protect sensitive header values from being indexed, to prevent an attacker to use HPACK as an oracle.\n\nCurrently HPACK states that a value encoded with this representation MUST not be indexed by an intermediary re-encoding it.\n\nDo we want to extend this to add that it SHOULD/MUST not be indexed in a more general fashion? This would be to enable a server to signal a client that a value has to use the \"never indexed representation\" when the client sends it back to the server.\n",
      "createdAt": "2014-06-06T13:00:46Z",
      "updatedAt": "2014-06-06T18:32:29Z",
      "closedAt": "2014-06-06T18:32:29Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; strong pushback, won't do.\n",
          "createdAt": "2014-06-06T18:32:29Z",
          "updatedAt": "2014-06-06T18:32:29Z"
        }
      ]
    },
    {
      "number": 520,
      "id": "MDU6SXNzdWUzNTU3NDE5OQ==",
      "title": "Including screen size to header messages (extending UserAgent)",
      "url": "https://github.com/httpwg/http2-spec/issues/520",
      "state": "CLOSED",
      "author": "basememara",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Please see following contribution to the spec to handle different screen sizes for a post mobile world (written in 1996!): http://www.watersprings.org/pub/id/draft-mutz-http-attributes-00.txt\n\nIt was intended for HTTP/1.1, but did not make it. It should be reconsidered for HTTP/2.\n# \n\nAbstract\n\nUser-Agent Display Attributes Headers provide a means for an HTTP client  \n[3] to inform a server about its display capabilities.  This memo  \ndescribes the syntax for introducing this information into an HTTP  \ntransmission. The intent is to express a client's capabilities such that  \na capable server may present documents in a preferred form.  If such a  \npreferred form is not available, the server should still provide the  \nrequested documents.  \n\nThis specification is intended as an extension to HTTP/1.1 [4].  \n\nIntroduction   \n\nPurpose   \n\nThe Hypertext Transfer Protocol (HTTP) is protocol for distributed,  \ncollaborative, hypermedia information systems.  \nAt present it relies on the client's ability to present visual  \ninformation in a usable fashion without information about the client's  \ndisplay characteristics.   The presence of large images, video, and  \nother visual information in HTML documents has strained this model.  \nHTML documents suitable for a certain video monitor size are often less  \nusable on displays of much smaller or larger resolution, such as PDA's  \nand high-resolution printers.    \n\nThis specification defines message headers as an extension to the  \nprotocol referred to as HTTP. This extension enables a client to inform  \na server regarding its display capabilities.  The server may then  \nprovide a variant of the resource more suitable for the display.  This  \nvariant would typically have higher or lower resolution images (for  \nexample) as appropriate.  In the case of a printer client, the result  \nwould be higher quality output.  In the case of a PDA, the result would  \nbe faster transmission.    These display attribute headers should be  \nsuitable for use with the negotiation mechanisms of HTTP.  The presence  \nof these headers must not cause a request to be failed for lack of the  \nvariant resouce.  \n\nOperation   \n\nWhen a server receives an HTTP request including  UA-attrib message  \nheaders, it may use this information to indicate a variant of a resource  \nmost appropriate for the client's display.  The variants are expected to  \ndiffer primarily in image size and color content, but other variations  \nsuch as shorter text descriptions are also foreseeable.  \nThe number of variants should be limited to provide efficient caching  \nsince the number of variants could become very large.    \n\nUA-attrib headers can indicate display size (in pixels), window size (in  \npixels), display resolution  (in pixels/inch), color capability and bit-  \ndepth, and display media type.  The physical dimensions of the display  \ncan be inferred from the display size and display resolution.  These are  \npresented formally in the Notation section.  \n\nFive UA-attrib headers are defined.  \n\nUser-Agent Attributes:  \n\nUA-pixels: <n>x<m>  \n\nThe available display size of the client's device is transmitted in  \ntotal (horizontal) <n>  x (vertical) <m> pixel number, for example:  UA-  \npixels: 1024x768.    The intent is to expose a maximum capability rather  \nthan a preferred size such as current browser window, with the  \npresumption that a user would prefer to resize a window than request a  \nnew set of resources.  In the case of paper media, the size should  \nrepresent the printable area rather than the physical sheet size (to  \navoid clipping of contents).  \n\nFor the case of an embedded object, this should be the size of the  \nembedding frame.  \n\nUA-windowpixels: <n>x<m>  \n\nThe window size of the client's application is transmitted in total  \n(horizontal) <n>  x (vertical) <m> pixel number, for example:  UA-  \npixels: 640x300.    The intent is to relay the client's preferred window  \nsize, with the presumption that a user would like to view the available  \nresources in this window.   \n\nThe authors are debating the utility of this field, and it is included  \nhere for discussion.  \n\nUA-resolution: <n>  \n\nThe display device resolution is transmitted in pixels per inch.  For  \nexample:  UA-resolution: 72.  \n\nThe authors recognize English units are not universal, but desire to  \navoid multiple unit definitions.  \n\nUA-media: <token>  \n\nThe display device media is indicated with an ASCII token.  Basic token  \nvalues are:  screen, stationary, transparency, envelope, or continuous-  \nlong.  Other values may be defined.  Except for `screen', these tokens  \nare a subset of the Printer MIB MediaType set defined in RFC-1759 [6].  \nThey are defined as:  \n    screen:         a refreshable display  \n    stationary:     separately cut sheets of an opaque material  \n    transparency:   separately cut sheets of a transparent material  \n    envelope:       envelopes that can be used for conventional mailing  \n            purposes  \n    continuous-short:   continuously connected sheets of an opaque  \n            material connected along the short edge  \n\nUA-color: <token><n>  \n\nThe display color capabilities are indicated with a combination of an  \nASCII token and a parameter <n> describing the number of color channel  \nbits available.  Token values must be:  grey or color.  Values of <n>  \nare typically (but not limited to)  2, 8, or 24.   For example:  grey8  \nindicates a display capable of representing an image in 256 levels of  a  \nsingle color, while color8 indicates a display capable of representing  \nan image with a palette of 256 colors.  \n\nThe authors recognize the issue of color model may be raised, but have  \nconcluded for this draft multiple color models such as CMYK and display  \ngamma are not included.  The RGB color model with gamma 2.2 is  \nassumed.  \n\nNegotiation  \n\nThe use of a UA-attrib should not cause a request to fail.  The intent  \nis to request a preferred presentation rather than a basic inability to  \npresent a resource (such as inability to handle a MIME type.)    \n\nNotation  \n\nUA-attrib related syntax is specified here relative to the definitions  \nand rules of the HTTP specifications.  \n\nHeader fields  \n\nUA-attrib defines 4 new specific header fields, UA-pixels, UA-  \nresolution, UA-media, and UA-color to be added to HTTP/1.1.  These  \nattributes may be used together or independently.  The header fields are  \ndefined as follows:  \n\nUA-pixels   =   \"UA-pixels\" \":\" horizontal \"x\" vertical  \nUA-windowpixels =   \"UA-windowpixels\" \":\" horizontal \"x\" vertical  \nUA-resolution   =   \"UA-resolution\" \":\" ppi  \nUA-media    =   \"UA-media\" \":\" media  \nUA-color    =   \"UA-color\" \":\" (\"grey\" | \"color\") colorbits  \nhorizontal  =   1_DIGIT  \nvertical    =   1_DIGIT  \nppi     =   1_DIGIT  \nmedia       =   token | (\"screen\" | \"stationary\" | \"transparency\" |  \n            \"envelope\" | \"continuous-short\")  \ncolorbits   =   1_DIGIT  \n\nExamples of the above attributes:  \n\nUA-pixels: 1024x768  \n    indicates a 1024x768 display  \nUA-windowpixels: 640x300  \n    indicates a 640x300 display window  \nUA-resolution: 72  \n    indicates a 72 dpi display  \nUA-media: stationary  \n    indicates the display is a cut sheet of opaque material, such as  \n    paper.  \nUA-color: color24  \n    indicates the display supports 24-bit (8-bit/channel) color.  \n\nAcknowledgments   \n\nThis document has benefited from the comments of Ho John Lee, Brian Behlendorf \nand Koen Holtman.  \n\nReferences   \n\n[1] T. Berners-Lee. \"Universal Resource Identifiers in WWW.\" A  \nUnifying Syntax for the Expression of Names and Addresses of Objects  \non the Network as used in the World-Wide Web.\" RFC 1630, CERN, June  \n1994.  \n[2] T. Berners-Lee, L. Masinter, M. McCahill.  \n\"Uniform Resource Locators (URL).\" RFC 1738, CERN, Xerox PARC,  \nUniversity of Minnesota, December 1994.  \n[3] T. Berners-Lee, R. Fielding, H. Frystyk.  \n\"Hypertext Transfer Protocol -- HTTP/1.0.\" RFC 1945.\" MIT/LCS, UC  \nIrvine, May 1996.  \n[4]     T. Berners-Lee, R. Fielding,I J. Gettys, J. Mogul,  H. Frystyk.  \n\"Hypertext Transfer Protocol - HTTP/1.1.\" Work in progress.\" MIT/LCS,  \nUC Irvine, May 1996.  \n[5] R. Braden.  \n\"Requirements for Internet hosts - application and support.\" STD 3,  \nRFC 1123, IETF, October 1989.  \n[6] R. Smith, F. Wright, T. Hastings, S. Zilles, J. Gyllenskog. \"Printer  \nMIB.\" RFC 1759.\" IETF, March 1995  \n\nAuthors' Addresses   \n\nLarry Masinter  \nXerox Palo Alto Research Center  \n3333 Coyote Hill Road  \nPalo Alto CA 94304  \nPhone: +1 415 812 4365  \nFax +1 415 812 4333  \nEmail: masinter@parc.xerox.com   \n\nLou Montulli  \nNetscape Communications Corp.  \n501 E. Middlefield Rd.  \nMountain View, CA 94043, USA  \nPhone +1 415 528 2600  \nEmail: montulli@netscape.com  \n\nAndrew H. Mutz  \nHewlett-Packard Company  \n1501 Page Mill Road 3U-3  \nPalo Alto CA 94304, USA  \nFax +1 415 857 4691  \nEmail: mutz@hpl.hp.com  \n",
      "createdAt": "2014-06-12T11:02:38Z",
      "updatedAt": "2014-06-12T11:08:55Z",
      "closedAt": "2014-06-12T11:08:55Z",
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This doesn't require any change in the protocol (thus is out of scope for HTTP/2). Header fields can and are defined in separate specs. If you want to pursue this, come up with an updated spec and present it to the IETF for consideration.\n",
          "createdAt": "2014-06-12T11:08:55Z",
          "updatedAt": "2014-06-12T11:08:55Z"
        }
      ]
    },
    {
      "number": 521,
      "id": "MDU6SXNzdWUzNTYwNzgwOQ==",
      "title": "Ranking multiple alternative services",
      "url": "https://github.com/httpwg/http2-spec/issues/521",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "alt-svc",
        "design"
      ],
      "body": "The Alt-Svc header field permits multiple entries.  How does a client select between them when there are multiple options that are acceptable to the client?\n1. Add a q= parameter.\n2. Select the first acceptable option.\n3. Something else.\n",
      "createdAt": "2014-06-12T17:56:34Z",
      "updatedAt": "2014-06-24T01:38:28Z",
      "closedAt": "2014-06-24T01:38:28Z",
      "comments": []
    },
    {
      "number": 522,
      "id": "MDU6SXNzdWUzNTYwODA2OA==",
      "title": "Multiple ALTSVC frames",
      "url": "https://github.com/httpwg/http2-spec/issues/522",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "alt-svc",
        "design"
      ],
      "body": "What are the semantics of subsequent ALTSVC frames for a given origin?\n\nThe current story is that a new value replaces the value of the old for that origin.\n\nAlternatively, we could have multiple frames present alternative alternative services.  That opens the question of how to indicate that a given service is obsolete.  But it's not clear we even need to do that.\n\nThen there is the fact that the Alt-Svc header field can have multiple values (see #521).  Do we need to replicate that capability for frames?\n",
      "createdAt": "2014-06-12T18:00:05Z",
      "updatedAt": "2014-06-24T01:38:28Z",
      "closedAt": "2014-06-24T01:38:28Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "The original proposal had a priority mechanism in it, so you could rank alternative services; the current approach is effectively a one-deep queue. \n\nThe header has the ability to convey multiple values because it might be that there are several protocols that the server can speak, and it wants the client to choose its most preferable. Same with multiple frames, IIRC. I.e., there are multiple choices of what to put into the queue, but only one gets in.\n",
          "createdAt": "2014-06-12T19:11:33Z",
          "updatedAt": "2014-06-12T19:11:33Z"
        }
      ]
    },
    {
      "number": 528,
      "id": "MDU6SXNzdWUzNTgzODI4Ng==",
      "title": "Feedback from PHK",
      "url": "https://github.com/httpwg/http2-spec/issues/528",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "## Page 12: Reserved bits\n\nHistorically RFCs have defined reserved bits opposite what would\nhave been most useful later on approximately 50% of the time.\n\nI would split the difference:  A R1 single-bit field, which must\nbe sent as zero and ignored on reception, and a R2 single-bit field,\nwhich must be sent a zero, and where receiving a one is an error.\n## Page 22ff: Priority\n\nI think the PRIORITY stuff is going to be trouble and will need\nrevisions later on to truly work.\n\nIt will also be the first thing implementors skip in order to get\nsomething working fast, and they may never come back and implement\nit, unless serious numbers show it's worth the complexity.\n\nI would restrict treatment of PRIORITY in this main RFC to a outline\nformat of the frame starting with a one byte version number, and\nwhere the frames can go etc.\n\nInterpretation of the frames for version #0 I would eject to a\nseparate optional RFC, to make the main RFC smaller, simpler and\nthus more appetizing.\n\nIn HEADERS the PRIORITY flag should just enable a 32bit field,\nthe intepretation of which goes in the side-RFC.\n## Page 28ff: Padding\n\nIf padding is intended for obscuration of traffic patterns, it should\nbe available in all frames to avoid \"housekeeping\" frames from leaking\ninformation about the relationships of other frames.\n\nFor this reason I would make padding part of the framing format,\nrather than the individual message types.\n\nI'm also sceptical of demanding that padding be zeros, historically\nthat has been a popular recipe for staring through compressions and\nencryptions.  I would probably specify that it is up to the sender\nto decide what to pad with, with guidance to prefer PRN bits rather\nthan predictable (ie: zeros) or meaningful data.\n## Page 28: Typographical\n\nIt's a bad idea to end a sentence with \"... %d.\" because of exactly\nwhat happens in draft 12:  It might bet pushed to the next page\nand confuse everybody.   s/1/one/ ?\n## Page 30  HEADERS/SEGMENTS\n\nWhat does END_SEGMENT do on a HEADERS frame ?\n\nIt looks like Copy&Paste error.\n\nIf it's needed, no text explains what it does and it's missing on\nCONTINUATION.\n\nIt's bogus that a lot of text separates HEADERS from CONTINUATION.\n\nIt's also pretty non-obvious why we need CONTINUATION in the\nfirst place:  Why not simply send HEADERS until one of them has\nthe END_HEADERS bit set ?\n## Page 34: SETTINGS\n\nAre we absolutely certain that we will never need per-stream SETTINGS ?\n\nAt least I would specify SETTINGS with non-zero stream to be ignored\nso that we can open that later.\n## Page 34: SETTINGS_MAX_CONCURRENT_STREAMS\n\nI would make the this field mandatory in the initial SETTINGS frames\nin order to make sure people think about the DoS potential.\n\nI also seriously doubt that anybody with a relevant DoS risk is\ngoing to open with a default value of \"infinite\" until they have\nseen some kind of \"proof of work\" on part of the client.\n\nI suspect such DoS mitigation will cause a lot of SETTINGS frames,\nbut that is less prone to failure than trying to define a \"slow-start\"\nwithout any benefit of real-life DoS mitigation experience.\n\n(You should _seriously_ consider trying to arrange an INTEROP with\nthe specific goal of investigating DoS resistance.)\n\nText should be added to explain what happens if N streams are\nopen but (x < N) SETTINGS_MAX_CONCURRENT_STREAMS is sent (the\nalready open streams survive, new streams must wait for them to\nfinish ?)\n\nWhat happens of SETTINGS_MAX_CONCURRENT_STREAMS gets set to zero\nand stays there ?  How long time does the client wait for before\nopening a new connection ?\n\nAre clients allowed to open multiple connections to bypass the\nSETTINGS_MAX_CONCURRENT_STREAMS limit ?\n\nAre proxies ?\n## Page 36: SETTINGS synchronization\n\nThis is utterly bogus.\n\nThere is no way a SETTINGS frame can overtake any other frame while\nin transit, and there is no way the receiver can refuse the SETTINGS.\n\nThere is also none of the settings which require synchronization between\nthe ends or which the sender cannot prepare for before sending the\nSETTINGS frame.\n\nSimply demand that SETTINGS be applied atomically when received, before\nprocessing any subsequent frames and we're done.\n\nIf the sender _really_ wants to know that the SETTINGS has been\nregistered in the far end, it can send a PING after the SETTINGS\nand wait for the PING+ACK.\n\nAs it is now, SETTINGS causes the loss of an RTT if implemented as\nspecified.\n## Page 39: GOAWAY\n\nI would give the sender the ability to add a small-ish integer\nto the Last-Stream-ID, as a way to avoid wasted work.\n\nDoing that, I think an opening gambit of\n\n```\nSETTINGS(MAX_CONNCURRENT_STREAMS = n)\nGOAWAY(Last-Stream-ID = n)\n```\n\ncould be a very efficient DoS mitigation strategy, which would give\nlegitimate users a chance.  In particular if we allow GOWAY to\nupdate the Last-Stream-ID once the client has proven non-hostile.\n\nIn fact, it's not obvious to me why GOAWAY isn't simply a field\nin SETTINGS to begin with ?\n## Page 42:  Flow Control Window\n\nAgain:  Why is WINDOW_UPDATE a separate frame type ?  a field\nin SETTINGS would do just fine.\n\nDoing that would also allow the connection FCW to be updated\nsubsequently.\n\nFor obvious DoS reasons, it's a mistake to not apply flowcontrol\nto HEADERS.\n\nI would allocate frame Type values so that the top bit indicates\n\"subject to flow-control\" to simplify implementation.  Similarly\nexpending a bit to mark hop-to-hop frames would make life easier\nfor high performance implementations.\n\nI also think it is a mistake to exempt the 8 byte frame header from \nthe FCW:  You can fill a lot of pipe with 1 byte DATA frames when\nthe overhead isn't counted.\n\nThe explanation about SETTINGS_INITIAL_WINDOW_SIZE causing negative\nwindow-sizes is somewhat clumsy because some unrealted stuff breaks\nthe flow.  Maybe move \"A SETTINGS frame cannot alter the connection\nflow control window.\" and \"An endpoint MUST ... FLOW_CONTROL_ERROR\"\nout of the way.\n## Page 49: BLOCKED\n\nIn general sending data to tell you cannot send data is a non-bright\nidea, that has been discared in almost all protocols for the last\nthree decades.\n\nIf the goal is real-time tuning, information about how many bytes\nare stuck in queue should be communicated.\n\nIf the goal is offline statistics, it would be sufficient to report\nat the end of each stream how many times the window closed and\nthe max number of bytes we saw queued on a closed window.\n## Page 50: Error messages\n\nThe RFC should propose text-messages for presentation purposes\nbearing in mind that they will be seen and reported by grandmothers\nand brothers in-law.  For a good example how not to do this,\nsee the gai_strerror(3) default implemenations.\n## Page 51: out of order flags\n\nThis is just asking for trouble...\n\n  The last frame in the sequence bears an END_STREAM flag, though a\n  HEADERS frame bearing the END_STREAM flag can be followed by\n  CONTINUATION frames that carry any remaining portions of the header\n  block.\n\nThe last frame should have the END_STREAM flag, always, there's\nno excuse for \"whoops\" details like this.\n## Page 51: More details in example\n\nThe example in 8.1 should show where the END_HEADERS and END_STREAM bits\nare set.\n## Page 51:  To strict ordering ?\n\n  Other frames (from any stream) MUST NOT occur between either HEADERS\n  frame and the following CONTINUATION frames (if present), nor between\n  CONTINUATION frames.\n\nIsn't this needlessly strict ?  No harm would come from DATA frames\nor SETTING frames being stuffed in there.\n\nAll this trouble could be avoided by only submitting headers for\ndecompression, as a unit, when the END_HEADERS have been received.\n## Page 51: Gibberish\n\nThis needs to be translated to human readable form:\n\n  Otherwise, frames MAY be interspersed on the stream between these\n  frames, but those frames do not carry HTTP semantics.  In particular,\n  HEADERS frames (and any CONTINUATION frames that follow) other than\n  the first and optional last frames in this sequence do not carry HTTP\n  semantics.\n## Page 51: Trailing headers\n\nSupport for trailing headers should have a bit in SETTINGS.\n\nHow dow we know the DATA section is done if there are trailing headers ?\n\nBy Content-Length ?  (what if it doesn't match ?)\n\nBy appearance of the first (trailer-)HEADER ?\n\nTrailing headers should be marked in a way that does not force a\nhigh-perf load-balancer to decode all headers to find out.  Setting\na flag bit in the first block of HEADERS/CONTINUATION is free for\nthe sender (they have to find out at that time anyway) and saves a\nlot of time for the receiver.\n## Page 55: reverse order\n\nIt would make more sense if the \":\" header fields were described\nbefore they appear in the examples on the preceeding pages.\n## page 57: query part\n\nThe query part of the URI should get its own \":query\" psuedo-field\nfor reasons of othogonality and to reduce the amount of data typical\nload-balancers have to examine.\n## Page 59: cookie compression needs example\n\nBasic confusion-prevention.\n## Page 59: Clarification\n\n```\n[...]the sum of the uncompressed DATA frame payload lengths [...]\n```\n\nShould probably (better) clarify that 'uncompressed' obny pertains to the\nper frame GZIP compression.\n\nI havn't looked at the PUSH stuff, I still consider it a fundamentally\nbad idea.\n",
      "createdAt": "2014-06-16T21:30:51Z",
      "updatedAt": "2014-06-16T23:43:11Z",
      "closedAt": "2014-06-16T23:43:11Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Got the editorial stuff with https://github.com/http2/http2-spec/commit/3f1fe905e25c31b0234e382a57945c86efbfeaae  The rest needs discussion before I can change anything.\n",
          "createdAt": "2014-06-16T23:43:09Z",
          "updatedAt": "2014-06-16T23:43:09Z"
        }
      ]
    },
    {
      "number": 529,
      "id": "MDU6SXNzdWUzNTg0MDM5Mg==",
      "title": "Working around concurrency limits",
      "url": "https://github.com/httpwg/http2-spec/issues/529",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "transport mapping"
      ],
      "body": "From PHK:\n\n> Are clients allowed to open multiple connections to bypass the\n> SETTINGS_MAX_CONCURRENT_STREAMS limit ?\n> \n> Are proxies ?\n\nThe latter being a harder question to answer.\n",
      "createdAt": "2014-06-16T21:58:42Z",
      "updatedAt": "2014-07-15T05:04:13Z",
      "closedAt": "2014-07-15T05:04:13Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "The relevant requirement is:\n\n```\nClients SHOULD NOT open more than one HTTP/2 connection to a given host and port pair, where host is derived from a URI, a selected alternative service [ALT-SVC], or a configured proxy.\n```\n\nSHOULD NOT allows clients (including proxies) to open more connections in exceptional (albeit undefined) circumstances. If that's not sufficient, we could:\n\n1) define the circumstances (which seems unlikely)\n2) relax the requirement to prose encouragement\n",
          "createdAt": "2014-07-02T05:15:03Z",
          "updatedAt": "2014-07-02T05:15:03Z"
        },
        {
          "author": "kinkie",
          "authorAssociation": "NONE",
          "body": "I expect any client who wishes to will simply ignore the SHOULD NOT; valid reasons can be trivially found; clients can be expected to try and greedily increase their own performance.\nI would thus relax the requirement to prose encouragement.\n",
          "createdAt": "2014-07-02T08:28:13Z",
          "updatedAt": "2014-07-02T08:32:49Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed on list; the SHOULD gives ample leeway, and this is nearly editorial anyway.\n",
          "createdAt": "2014-07-15T05:04:13Z",
          "updatedAt": "2014-07-15T05:04:13Z"
        }
      ]
    },
    {
      "number": 530,
      "id": "MDU6SXNzdWUzNTg0NDUxOQ==",
      "title": "SETTINGS_TRAILERS_OK rather than TE: trailers",
      "url": "https://github.com/httpwg/http2-spec/issues/530",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "non-blocking"
      ],
      "body": "PHK suggests this.  It's worth considering.  It would let us eliminate the one vestigal hop-by-hop header field.\n",
      "createdAt": "2014-06-16T23:05:43Z",
      "updatedAt": "2014-07-22T19:22:45Z",
      "closedAt": "2014-07-22T19:22:45Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Concerns over intermediation are minimal: trailers are supposed to be expendable, so an intermediary wouldn't be obligated to send the setting, even if some of its clients signaled it.  And an intermediary could signal it, even when responses are being forwarded to clients that don't support it.\n",
          "createdAt": "2014-06-16T23:18:45Z",
          "updatedAt": "2014-06-16T23:18:45Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh yeah, and initial value...\n",
          "createdAt": "2014-06-16T23:19:14Z",
          "updatedAt": "2014-06-16T23:19:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Toronto; decision was to close this.\n",
          "createdAt": "2014-07-22T19:22:45Z",
          "updatedAt": "2014-07-22T19:22:45Z"
        }
      ]
    },
    {
      "number": 531,
      "id": "MDU6SXNzdWUzNTg0NTY4MA==",
      "title": "Force failure on reserved bits",
      "url": "https://github.com/httpwg/http2-spec/issues/531",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "frame layout"
      ],
      "body": "Selectively, starting with the first two bits of the frame header.\n",
      "createdAt": "2014-06-16T23:28:26Z",
      "updatedAt": "2014-07-15T20:25:21Z",
      "closedAt": "2014-07-15T20:25:21Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Overcome by events (#553)\n",
          "createdAt": "2014-07-15T20:25:21Z",
          "updatedAt": "2014-07-15T20:25:21Z"
        }
      ]
    },
    {
      "number": 532,
      "id": "MDU6SXNzdWUzNTg0OTY3OQ==",
      "title": "HPACK feedback from PHK",
      "url": "https://github.com/httpwg/http2-spec/issues/532",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "## Page 8, appending static table\n\nLacking documentation, I find it somewhat dubious that\nassigning higher indicies to the static tables very common\nentries makes sense performance wise.\n\nForcing \"GET\" to have an index >30 causing it to encode into two\nbytes (or likely even three bytes) rather than one seems very\ncounter inuitive.\n\nThe dynmic and shifting indicies for the static table also robs\nhigh-performance load balancers an important optimization opportunity\n(ie: screening out non-GETs and similar).\n\nThe optimal case is probably to have a small static table\nat the front and another one with less used entries at the\ntail, but I doubt that complexity is warranted.  I would just\nput the static table at the front.\n## Page 25, just before the table\n\n  As an example, the Huffman code for the symbol 48 (corresponding to\n  the ASCII character \"0\") consists in the 5 bits \"0\", \"0\", \"1\", \"0\",\n  \"1\".  This corresponds to the value 5 encoded on 5 bits.\n\nThis does not match the table.\n## Page 25, the table(s)\n\nThe RFC should document for the future where these tables came from,\npeople are (rightfully) quite paranoid about \"magic numbers appearing\nout of nowhere\" these days.\n\nIt might be wise to reserve a couple of bits somewhere to allow the\ntables to be revised if experience shows them to be too suboptimal.\n\nWhy does it make sense to assign huffman codes to characters which\nare illegal in HTTP headers, such as 0x01-0x31 and which should cause\nerrors if encountered ?\n",
      "createdAt": "2014-06-17T00:55:24Z",
      "updatedAt": "2014-06-18T07:30:04Z",
      "closedAt": "2014-06-18T07:30:04Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@hruellan can this be closed now?\n",
          "createdAt": "2014-06-17T20:15:44Z",
          "updatedAt": "2014-06-17T20:15:44Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed with:\n- Page 8, appending static table: d6620edf72feadd31e18c4482f60ac87e5d8a58f\n- Page 25, just before the table: 2e6eb1e8dbd3473900c6cde614fc70f5acdda3f7\n- Page 25, the table(s):\n  - 67a00920a392d4f17dc5051e88ade51054f40174 for static table\n  - 19bce6e8dc9164f3180df44a3f055844d86ae8ca for Huffman table\n",
          "createdAt": "2014-06-18T07:30:04Z",
          "updatedAt": "2014-06-18T07:30:04Z"
        }
      ]
    },
    {
      "number": 535,
      "id": "MDU6SXNzdWUzNTk4ODUyNA==",
      "title": "no 1xx status codes",
      "url": "https://github.com/httpwg/http2-spec/issues/535",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "Draft -12 is much better in explaining that those are gone, and how some of them aren't needed anymore.\n\nHowever, this still removes an interesting feature of HTTP/1.1, and I fail to see a compelling reason to do so which wouldn't also apply to trailers, which continue to be supported.\n",
      "createdAt": "2014-06-18T14:05:10Z",
      "updatedAt": "2014-07-21T15:33:51Z",
      "closedAt": "2014-07-21T15:33:51Z",
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sketch of a proposed change: https://gist.github.com/reschke/48ec30b0ac9d012b8b4e\n",
          "createdAt": "2014-07-02T13:42:06Z",
          "updatedAt": "2014-07-02T13:42:06Z"
        }
      ]
    },
    {
      "number": 536,
      "id": "MDU6SXNzdWUzNTk4ODYwOA==",
      "title": "clarify extensibility for :pseudo header fields",
      "url": "https://github.com/httpwg/http2-spec/issues/536",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design",
        "editor-ready"
      ],
      "body": "We don't seem to have a way to define new pseudo header fields without revising the specification. if that's indeed the intent we should clarify that somewhere.\n",
      "createdAt": "2014-06-18T14:06:12Z",
      "updatedAt": "2014-07-15T16:47:58Z",
      "closedAt": "2014-07-15T16:47:58Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is allowed by section 5.5 Extending HTTP/2.\n",
          "createdAt": "2014-06-18T15:03:04Z",
          "updatedAt": "2014-06-18T15:03:04Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "But it doesn't say how, as there's no registry for it.\n",
          "createdAt": "2014-06-18T15:30:31Z",
          "updatedAt": "2014-06-18T15:30:31Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Yes, a LOT more needs to be said about that if we're going to allow it. header field-names with colons in them may not be allowed by HTTP APIs, and they'll cause problems (including potential security issues) if they're put onto a HTTP/1 connection. \n\nPersonally, I'm more inclined to disallow other header field names with colons in them; i.e., PROTOCOL_ERROR. It's much more robust.\n",
          "createdAt": "2014-06-19T05:25:52Z",
          "updatedAt": "2014-06-19T05:25:52Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Section 8.1.2.1 says these are only valid in the context of HTTP/2, so the leakage would be a bad implementation.  However, it seems like we should have a registry, just like we do for \"real\" headers.\n",
          "createdAt": "2014-06-30T22:42:51Z",
          "updatedAt": "2014-06-30T22:42:51Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "#546 looks like the go; marking editor-ready.\n",
          "createdAt": "2014-07-15T04:54:49Z",
          "updatedAt": "2014-07-15T04:54:49Z"
        }
      ]
    },
    {
      "number": 537,
      "id": "MDU6SXNzdWUzNjAxODAwMQ==",
      "title": "Remove segments",
      "url": "https://github.com/httpwg/http2-spec/issues/537",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame layout"
      ],
      "body": "We should discuss whether segments are needed.  It might be easier to remove them than to address #397.\n",
      "createdAt": "2014-06-18T19:15:35Z",
      "updatedAt": "2014-07-15T17:51:39Z",
      "closedAt": "2014-07-15T17:50:55Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "FYI see END_SEGMENT usage in:\nhttp://tools.ietf.org/html/draft-hirano-httpbis-websocket-over-http2-00\n",
          "createdAt": "2014-06-18T19:24:17Z",
          "updatedAt": "2014-06-18T19:24:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, that document would need to be updated to add the flag.\n",
          "createdAt": "2014-06-18T19:43:47Z",
          "updatedAt": "2014-06-18T19:43:47Z"
        },
        {
          "author": "yutakahirano",
          "authorAssociation": "NONE",
          "body": "And more preferred one\nhttps://github.com/yutakahirano/ws-over-http2/blob/master/ws-over-http2-message-mapping.md\n",
          "createdAt": "2014-06-19T01:58:47Z",
          "updatedAt": "2014-06-19T01:58:47Z"
        },
        {
          "author": "potswa",
          "authorAssociation": "NONE",
          "body": "Segments don't do anything that midstream header blocks don't. The END_SEGMENT flag has exactly the same semantics as an empty header set, except that an application may distinguish the two.\n\nWhat happens to END_SEGMENT as a feature must also happen to HEADERS that do not open a new stream. There should probably be a SETTINGS support indicator, propagated end-to-end.\n\nAs an API designer, I favor removing the semantic distinction between segments and headers. This is \"removing segments\" in a sense, but be aware that simply excising the feature would have almost no effect on HTTP/2's complexity or expressive power.\n",
          "createdAt": "2014-07-01T04:04:25Z",
          "updatedAt": "2014-07-01T04:05:06Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "This isn't entirely true, an empty HEADERS frame has the effect of\nre-emitting the HPACK reference set at the end of the \"empty\" header block.\n\nOn Mon, Jun 30, 2014 at 9:04 PM, David Krauss notifications@github.com\nwrote:\n\n> Segments don't do anything that midstream header blocks don't. The\n> END_SEGMENT flag has exactly the same semantics as an empty header set,\n> except that an application may distinguish the two.\n> \n> What happens to END_SEGMENT must also happen to HEADERS that do not open a\n> new stream. There should probably be a SETTINGS support indicator,\n> propagated end-to-end.\n> \n> As an API designer, I favor removing the semantic distinction between\n> segments and headers. This is \"removing segments\" in a sense, but be aware\n> that simply excising the feature would have almost no effect on HTTP/2's\n> complexity or expressive power.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/issues/537#issuecomment-47614884.\n",
          "createdAt": "2014-07-01T04:27:57Z",
          "updatedAt": "2014-07-01T04:27:57Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "On the list please...\n",
          "createdAt": "2014-07-01T04:37:52Z",
          "updatedAt": "2014-07-01T04:37:52Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed on-list; remove end_segment.\n",
          "createdAt": "2014-07-15T05:29:45Z",
          "updatedAt": "2014-07-15T05:29:45Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/http2/http2-spec/commit/2afb211f57dca5f4b4dc9603d8a8654297c9b116\n",
          "createdAt": "2014-07-15T17:51:39Z",
          "updatedAt": "2014-07-15T17:51:39Z"
        }
      ]
    },
    {
      "number": 539,
      "id": "MDU6SXNzdWUzNjMxMDExNA==",
      "title": "Priority from server to client",
      "url": "https://github.com/httpwg/http2-spec/issues/539",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "frame semantics"
      ],
      "body": "The current draft is not very clear on which side can send a priority frame. The only location handling this subject is the first sentence of \"5.3 Stream priority\", which speaks of the client sending priorities.\n\nOne question is whether a server is allowed to send a priority frame to a client, and if yes, what is the meaning.\n\nI would propose, in line with #526:\n- At the frame layer, there is no restriction on priority direction (it could be useful for extension, for example for WebSocket to send priorities in both directions).\n- At the HTTP layer, there are some restrictions:\n  - Client can send priority frames to prioritize responses\n  - Server can send priority frames to indicate the intended prioritization of pushed responses.\n",
      "createdAt": "2014-06-23T17:00:00Z",
      "updatedAt": "2014-07-22T19:05:57Z",
      "closedAt": "2014-07-22T19:05:57Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Discussed in Toronto. No enough support for this as it is too speculative.\nClosed with no action.\n",
          "createdAt": "2014-07-22T19:05:57Z",
          "updatedAt": "2014-07-22T19:05:57Z"
        }
      ]
    },
    {
      "number": 540,
      "id": "MDU6SXNzdWUzNjM4OTg0MQ==",
      "title": "jumbo frames",
      "url": "https://github.com/httpwg/http2-spec/issues/540",
      "state": "CLOSED",
      "author": "shearl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "frame layout"
      ],
      "body": "PHK suggests taking one of the reserved bits for frame length and using it as a \"jumbo frame\" marker. If it's set, the first the first four octets of payload are an extra 32 bits of payload length. (Need to clarify how the 32 bits are concatenated to the other 14 bits of payload length.)\n\nThere would be an associated setting, SETTINGS_MAX_FRAME_SIZE, to advertise how much you're willing to receive in a single frame.  Matthew suggested the setting be added to 16K-1 (i.e. default would be 0). PHK suggested the setting be the absolute value (i.e default would be 16K-1). I'll note that with PHK's method you can't actually use all 46 bits of payload length, however you could actually advertise maximum frame lengths smaller than 16K-1.\n\nAdding the \"jumbo frame\" capability would allow getting rid of CONTINUATION frames.  It would also allow requiring the _actual_ last frame in the stream to have the END_STREAM bit set.\n\nWilly notes that jumbo frames would be useful for high traffic sites (above 100 Gbps). \"At these rates, the problem is not TCP overhead or any such thing, but the processing cost.\" \n\nMatthew notes that the effort to support this change is minimal.  Implementations which elect not to support \"jumbo frames\" may simply ignore the setting, and maybe do a little bit more reading/arithmetic to decide whether to throw a FRAME_SIZE_ERROR. Some of that could even be gotten around if we make setting the \"jumbo frame\" bit illegal without having ACKed a SETINGS_MAX_FRAME_SIZE.\n",
      "createdAt": "2014-06-24T14:36:26Z",
      "updatedAt": "2014-06-27T07:27:13Z",
      "closedAt": "2014-06-27T07:27:13Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed on-list; no consensus to add jumbo frames into the spec, but some support for making it a (separate) extension.\n",
          "createdAt": "2014-06-27T07:27:13Z",
          "updatedAt": "2014-06-27T07:27:13Z"
        }
      ]
    },
    {
      "number": 541,
      "id": "MDU6SXNzdWUzNjU5NjEzNA==",
      "title": "Stateless Multiplexable Continuations",
      "url": "https://github.com/httpwg/http2-spec/issues/541",
      "state": "CLOSED",
      "author": "n1hility",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "frame semantics"
      ],
      "body": "Per Mark N:\n\n\"One thing that came up in a side conversation in NYC was the possibility of only HPACKing the HEADERS frame; subsequent CONTINUATION frames would be uncompressed (so they don't affect state, and could be flow controlled). \n\nA sender would have to compose their header frames appropriately; e.g., putting all of the small / repeating headers in the compressed frame, with remaining frames in the subsequent uncompressed frames. In a pathological case, it means that most or all of the headers would be uncompressed.\"\n\nNot yet discussed was the uncompressed format. Following HPACK as if table_size is 0 would offer benefits of static values and prevent the need for extensive language.\n\nJustification:\nThe problem is the existing CONTINUATION mechanism is HOL blocking, which is particularly bad for proxies. Consider this topology:\n\n```\n+----+                                      \n|Evil+-----------+                          \n+----+   h2      |                          \n             +---v---+                      \n+----+       |       |              +------+\n| C1 +-------> Proxy +-------------->Origin|\n+----+   h2  |       |  Coalesced   +------+\n             +---^---+     h2               \n+----+           |                          \n| C2 +-----------+                          \n+----+   h2                                 \n```\n\nIf \u201cevil\" sends large headers, which forces the proxy to send CONTINUATION, then the coalesced connection to origin unfairly favors Evil impacting the QOS for C1 and C2. Even worse is if Origin rejects and refuses to process the CONTINUATION, thereby requiring it to down the coalesced connection and forcing the proxy to reestablish. QOS suffers.\n\nMitigation options are for a proxy not to coalesce connections, which gives up a significant benefit of HTTP/2, or to reject big CONTINUATIONS from \u201cEvil\". The problem with the latter is the proxy has no idea what Origin can and can not handle. \n\nThe cost to fix this is minimal, and well worth eliminating HOL issues. Discouraging bloated headers is also a nice secondary benefit. Finally coalescing proxies would have the ability to safely chunk headers if so desired.\n",
      "createdAt": "2014-06-26T17:21:33Z",
      "updatedAt": "2014-07-09T01:11:12Z",
      "closedAt": "2014-07-09T01:11:12Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "If the intent is to get any sort of concurrency, then the CONTINUATION frames would not be permitted to touch the header table at all.  Setting the effective size to 0 might work for that.\n",
          "createdAt": "2014-06-26T17:44:42Z",
          "updatedAt": "2014-06-26T17:44:42Z"
        },
        {
          "author": "n1hility",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/http2/http2-spec/pull/544 codifies this \n",
          "createdAt": "2014-06-30T18:36:50Z",
          "updatedAt": "2014-06-30T18:36:50Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I'm going to close this, as it's a proposal (that's already embodied by #544, which will stay open as a proposal); the actual underlying issue is #550. \n",
          "createdAt": "2014-07-09T01:11:12Z",
          "updatedAt": "2014-07-09T01:11:12Z"
        }
      ]
    },
    {
      "number": 543,
      "id": "MDU6SXNzdWUzNjgwMDY2OA==",
      "title": "Document Layout",
      "url": "https://github.com/httpwg/http2-spec/issues/543",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "Check for split tables or figures, removing them if possible.\n",
      "createdAt": "2014-06-30T14:10:04Z",
      "updatedAt": "2014-06-30T16:38:40Z",
      "closedAt": "2014-06-30T16:38:40Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is usually something that the RFC editor does.  Doing it before the final editorial pass tends to be self-defeating, because there always seems to be just one more edit that screws the pagination up again.  I wouldn't bother with this.\n",
          "createdAt": "2014-06-30T16:35:04Z",
          "updatedAt": "2014-06-30T16:35:04Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "HPACK-08 has a badly split table. I opened this issue as a reminder for checking this as a last item before publishing a new version.\nBut if the RFC editor is doing this, I'll close the issue.\n",
          "createdAt": "2014-06-30T16:38:40Z",
          "updatedAt": "2014-06-30T16:38:40Z"
        }
      ]
    },
    {
      "number": 545,
      "id": "MDU6SXNzdWUzNjk4NTkyMw==",
      "title": "Header Compression Example errors",
      "url": "https://github.com/httpwg/http2-spec/issues/545",
      "state": "CLOSED",
      "author": "michaelrsweet",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In D.4.1, the length of the Huffman-encoded :authority value is 12, not 15.\n\nSimilarly, in D.4.2 the length of the cache-control value is 6, not 8.\n\nAnd in D.4.3 the lengths of the custom-key: custom-value are 8 and 9, respectively.\n\nThis all looks like copy/paste errors from the corresponding non-huffman examples.\n",
      "createdAt": "2014-07-02T14:14:48Z",
      "updatedAt": "2014-07-29T16:17:23Z",
      "closedAt": "2014-07-29T16:17:23Z",
      "comments": [
        {
          "author": "michaelrsweet",
          "authorAssociation": "NONE",
          "body": "The same errors show up in the response examples in D.6.x... :/\n",
          "createdAt": "2014-07-02T14:17:41Z",
          "updatedAt": "2014-07-02T14:17:41Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed by 45b607f14cc3fe8af88192b433c07afbc001f474.\n",
          "createdAt": "2014-07-29T16:17:23Z",
          "updatedAt": "2014-07-29T16:17:23Z"
        }
      ]
    },
    {
      "number": 549,
      "id": "MDU6SXNzdWUzNzI0ODQxNQ==",
      "title": "END_STREAM flag on CONTINUATION",
      "url": "https://github.com/httpwg/http2-spec/issues/549",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "frame layout"
      ],
      "body": "Several reviewers have commented that END_STREAM being on HEADERS / PUSH_PROMISE instead of the last CONTINUATION is a design decision.\n",
      "createdAt": "2014-07-07T08:31:12Z",
      "updatedAt": "2014-07-24T23:40:43Z",
      "closedAt": "2014-07-24T23:40:43Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "To articulate the reasons for the current design:\n1. END_STREAM has no place on PUSH_PROMISE, or continuations thereof.\n2. Placing END_STREAM on HEADERS ensures that there is no possibility for stupid errors where you have END_STREAM but not END_HEADERS.\n3. CONTINUATIONS are in most respects a way to create a single frame from many.  Logically, they are part of the preceding HEADERS/PUSH_PROMISE.  Adding some flags from the preceding frame but not others is conceptually muddy.\n\nI don't recall any complaint from people actually implementing the protocol.\n",
          "createdAt": "2014-07-11T20:56:41Z",
          "updatedAt": "2014-07-11T20:56:41Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "No consensus to make a change.\n",
          "createdAt": "2014-07-24T23:40:43Z",
          "updatedAt": "2014-07-24T23:40:43Z"
        }
      ]
    },
    {
      "number": 550,
      "id": "MDU6SXNzdWUzNzI0ODU1MA==",
      "title": "Using CONTINUATION blocks multiplexing",
      "url": "https://github.com/httpwg/http2-spec/issues/550",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "frame semantics"
      ],
      "body": "When CONTINUATION is in use, it effectively blocks progress on other streams.\n\nIssue #541 (and the specific proposal #544) try to mitigate this by not allowing CONTINUATION to change compressor state; however, since they are not complete, since it can still _reference_ compressor state.\n### Possible solutions\n\na) Accept that headers don't play well with multiplexing, and well-behaved senders will not send large numbers of continuations (just as they don't do other things that would negatively affect performance)\n\nb) Disallow CONTINUATION from modifying _or_ referencing compressor state (either using the same on-wire syntax, or a different form)\n\nc) Mitigate blocking by limiting the total size of headers / number of continuation blocks allowed (either statically or dynamically).\n",
      "createdAt": "2014-07-07T08:33:11Z",
      "updatedAt": "2014-07-21T14:30:23Z",
      "closedAt": "2014-07-21T14:30:23Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed on list; consensus is that CONTINUATION stays. Closing.\n",
          "createdAt": "2014-07-21T14:30:23Z",
          "updatedAt": "2014-07-21T14:30:23Z"
        }
      ]
    },
    {
      "number": 551,
      "id": "MDU6SXNzdWUzNzI0ODkwMg==",
      "title": "Recipient impact of large header blocks",
      "url": "https://github.com/httpwg/http2-spec/issues/551",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics"
      ],
      "body": "Receivers of large header blocks need to allocate resources (e.g., buffers) and make policy decisions (e.g., max header sizes). Because the size of the header block is not known up front, it is difficult to efficiently allocate resources and make policy decisions; the recipient has to either kill the connection or wait for (and process) all of it.\n### Possible solutions\n\n a) Limit the size of headers available in the protocol, e.g. by using a SETTING, or by forcing larger header blocks to use negotiated extensions.\n\nb) Have HEADERS / PUSH_PROMISE advertise the number of subsequent CONTINUATIONS up-front, so that resources can be allocated, policy applied. Note that if the recipient wants to avoid processing a header block, they'll still need to kill the connection.\n\nc) Don't allow CONTINUATION to modify state, so that they can be discarded if the recipient wants to avoid processing the header block without killing the connection.\n",
      "createdAt": "2014-07-07T08:38:42Z",
      "updatedAt": "2014-07-21T14:59:33Z",
      "closedAt": "2014-07-21T14:59:33Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed on list; add a new setting advising (not requiring) the peer of the maximum uncompressed header set size a receiver will accept.\n",
          "createdAt": "2014-07-21T14:30:33Z",
          "updatedAt": "2014-07-21T14:30:33Z"
        }
      ]
    },
    {
      "number": 552,
      "id": "MDU6SXNzdWUzNzM4NTAzMg==",
      "title": "Remove \"reference set\" from HPACK",
      "url": "https://github.com/httpwg/http2-spec/issues/552",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "header compression"
      ],
      "body": "I think that this would help to alleviate many of the issues that are\nbeing brought up on the list w.r.t large header blocks and their\naffect on HOL blocking.\n\nBy using the \"reference set\" of headers, the frame boundary and the\nheader block boundary are tied together. We have also made the\nordering of headers indeterminate leading to the null-separator hack\nand made requirements on the receipt of the \":\" headers impossible to\nenforce requiring possibly complete buffering before basic routing\ndecisions can be made.\n\nRemoving the \"reference set\" would allow interleaving of HEADERS\nframes from different streams. It would remove the need for large\ncontiguous frames carrying an entire \"header block\" since the\ntermination of these blocks is meaningless. Headers could be more\neffectively \"streamed\" and CONTINUATION frames could be dropped from\nthe spec.\n\nSince HEADERS frames can now be interleaved even if they do not\ncontain the complete header set, this would also remove the HOL\nblocking issue and open up the possibility to flow control headers as\nwell as data.\n\nAddress #549, #550, and #551.\n",
      "createdAt": "2014-07-08T15:56:58Z",
      "updatedAt": "2014-07-28T17:09:35Z",
      "closedAt": "2014-07-28T17:09:35Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For extra context note that @kazu-yamamoto [posted to the list](http://lists.w3.org/Archives/Public/ietf-http-wg/2014JulSep/0149.html) with implementation data that suggests that the reference set does not provide a much in the way of increased compression.\n",
          "createdAt": "2014-07-08T16:00:17Z",
          "updatedAt": "2014-07-08T16:00:17Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "The referenced commit removes the reference set and increases the length field to 16 bits to address large individual header fields. I will follow it up with a commit to remove CONTINUATION frames.\n",
          "createdAt": "2014-07-08T17:53:20Z",
          "updatedAt": "2014-07-08T17:53:20Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Updated to remove CONTINUATIONs.\n",
          "createdAt": "2014-07-08T18:13:50Z",
          "updatedAt": "2014-07-08T18:13:50Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "Just FYI. If reference set is removed, the order of headers are always kept.\n",
          "createdAt": "2014-07-09T00:03:00Z",
          "updatedAt": "2014-07-09T00:03:00Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Jeff, did you mean to make a pull request? \n\n(please leave this issue open even if you do make a pull)\n",
          "createdAt": "2014-07-09T01:12:41Z",
          "updatedAt": "2014-07-09T01:12:41Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "I added some reference commits to the issue just to give people an idea of scope.\nThese can be converted into an actual pull request but I figured I would wait on the discussion.\n",
          "createdAt": "2014-07-09T01:22:04Z",
          "updatedAt": "2014-07-09T01:22:04Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed on list; consensus to remove reference set; editors to work out details.\n",
          "createdAt": "2014-07-20T19:00:03Z",
          "updatedAt": "2014-07-20T19:00:03Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed by 99356111a4a5437f59bcb947a7ce17341a09c84f.\n",
          "createdAt": "2014-07-28T17:09:35Z",
          "updatedAt": "2014-07-28T17:09:35Z"
        }
      ]
    },
    {
      "number": 553,
      "id": "MDU6SXNzdWUzNzQyMjY1OA==",
      "title": "Overhead of frame processing",
      "url": "https://github.com/httpwg/http2-spec/issues/553",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame layout"
      ],
      "body": "Some have pointed out that the 14-bit limit on frame size adds overhead to processing.\n\nSpecifically:\n- Using sendfile() or TCP splice is difficult-to-impractical\n- Limited-CPU devices will spend a greater proportion of time on frame processing\n",
      "createdAt": "2014-07-08T23:51:12Z",
      "updatedAt": "2014-07-15T22:26:56Z",
      "closedAt": "2014-07-15T22:26:56Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Consensus on list is to:\n- use at least 24 bits\n- editor has discretion to reserve additional bits as suitable\n- create a max_frame_size (or similar) setting with a default of 16K\n- minimum value of max_frame_size is the default\n- granularity of max_frame_size is up to editor, although it has been noted that weird settings like \"25,487\" would be unfortunate.\n",
          "createdAt": "2014-07-15T01:33:55Z",
          "updatedAt": "2014-07-15T01:33:55Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/http2/http2-spec/commit/2ccabc6e17f57db41c17814c55434829d0e755ef\n- 24 bits\n- no extras saved (that means that we have at worst 4 bits of flags and 1 other reserved bit in the frame header left; in other words, plenty)\n- setting created\n- min = default\n- granularity of one octet; senders are free to treat 25487 as any value between 16384 and 25487 if they don't believe that there is any value in having such a specific value\n",
          "createdAt": "2014-07-15T22:24:02Z",
          "updatedAt": "2014-07-15T22:24:02Z"
        }
      ]
    },
    {
      "number": 555,
      "id": "MDU6SXNzdWUzNzcyMjM2OQ==",
      "title": "Lack of frame synchronization",
      "url": "https://github.com/httpwg/http2-spec/issues/555",
      "state": "CLOSED",
      "author": "bsdphk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "frame layout"
      ],
      "body": "Has anybody considered frame-desynchronization ?\n\nThe framing layer has neither pattern, checksum or sequence numbers to help us tell if the sender and receiver have become mis-synchronized,\n\nIf we wanted to be strictly compliant with \"end-to-end argument\" we should have an integrity check, but given that we have a CRC and sums in the layers below I don't think that's really an overhead which would justify itself.\n\nHowever, it would make good sense to add a pattern or sequence number to the frame header to give us a \"must match field\" to detect frame misalignment.  (I looked at the current frames and there are no fields which lend themselves naturally to this).\n\nIf a frame header gets misaligned one byte either way, there are pretty good chances that it will still look legit enough for processing to commence.\n\nGiven that many people talk about processing frames while they are still being received, adding a more robust misalignment detection sounds like a good idea to me.\n\nThe easiest is probably a single byte sequence number which just increments from frame to frame.  That number could be included in RST frames to indicate which frame caused the error.\n",
      "createdAt": "2014-07-12T15:47:42Z",
      "updatedAt": "2014-07-21T21:16:34Z",
      "closedAt": "2014-07-21T21:16:34Z",
      "comments": []
    },
    {
      "number": 556,
      "id": "MDU6SXNzdWUzNzcyMjQ1Mg==",
      "title": "Split :query out",
      "url": "https://github.com/httpwg/http2-spec/issues/556",
      "state": "CLOSED",
      "author": "bsdphk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "Currently the :path also contain the query part of the URL.\n\nGiven the rather different semantics of these two parts, they should be split into separate headers:\n\n:path is much more static than :query  (relevant for compression)\n\n:query data typically needs more privacy than :path\n\nLoad-balancers seldom care about :query but often about :path\n\netc.\n\nI think :query should be a separate (pseudo-)field.\n",
      "createdAt": "2014-07-12T15:52:04Z",
      "updatedAt": "2014-07-21T21:16:34Z",
      "closedAt": "2014-07-21T21:16:34Z",
      "comments": []
    },
    {
      "number": 557,
      "id": "MDU6SXNzdWUzNzcyOTA1Nw==",
      "title": "Intra-Message HEADERS frames",
      "url": "https://github.com/httpwg/http2-spec/issues/557",
      "state": "CLOSED",
      "author": "shearl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "Jeff said:\n\n> streaming checksums and the like\n> are currently permitted to be sent but have no \"semantic\" mapping to\n> HTTP/1.1\n\nI'm all for this, but I've said this before, and I'll say it again. Re-using HEADERS frames for this purpose is confusing. Are they hpack encoded? What does it mean if you get an intra-message HEADERS frame and END_HEADERS is set? Is END_STREAM allowed?\n\nWhy not just add a simple METADATA frame and be done with it.\n",
      "createdAt": "2014-07-12T21:32:41Z",
      "updatedAt": "2014-07-22T17:12:05Z",
      "closedAt": "2014-07-22T17:12:05Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Text is now:\n\nOther frames (from any stream) MUST NOT occur between either HEADERS frame and any CONTINUATION frames that might follow.\n\nA HEADERS frame (and associated CONTINUATION frames) can only appear at the start or end of a stream. An endpoint that receives a second HEADERS frame without the END_STREAM flag set MUST treat the corresponding request or response as malformed (Section 8.1.2.5).\n",
          "createdAt": "2014-07-22T17:12:05Z",
          "updatedAt": "2014-07-22T17:12:05Z"
        }
      ]
    },
    {
      "number": 558,
      "id": "MDU6SXNzdWUzNzc3NTQ5MQ==",
      "title": "Encouraging Content-Length headers",
      "url": "https://github.com/httpwg/http2-spec/issues/558",
      "state": "CLOSED",
      "author": "bsdphk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "design"
      ],
      "body": "I would like to propose that we actively encourage Content-Length headers in HTTP/2.   \n\nEven though they are not necessary for the protocol to function, they really improve the efficiency and performance of memory  management in receivers, when they are available.\n\nToday pretty much all image format objects are transferred with a Content-Length header.\n\nI think the best place to slot this in would be 8.1.2, before the paragraph about Connection:\n\n```\n    When possible, the sender SHOULD provide a Content-Length\n    header to inform the receiver of the size of the entity\n    body.\n```\n\nThe other place to address this is in 8.1.3, where the HTTP/1->2 conversion examples strip the Content-Length header:  They should be fixed to preserve it.\n\nWe already have language in 8.1.2.5 about how to deal with wrong \nContent-Length headers.\n",
      "createdAt": "2014-07-14T10:37:56Z",
      "updatedAt": "2014-07-15T04:52:50Z",
      "closedAt": "2014-07-15T04:52:50Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This is out of scope; C-L's semantics and guidance on it use are already provided by:\n  http://httpwg.github.io/specs/rfc7230.html#header.content-length -\n\n```\nan origin server should send a Content-Length header field when \nthe payload body size is known prior to sending the complete header \nsection. This will allow downstream recipients to measure transfer \nprogress, know when a received message is complete, and \npotentially reuse the connection for additional requests.\n```\n\nAlso, if you look at that section, the rules for when to send and not send C-L are a lot more complex than \"when possible\"; giving conflicting advice in HTTP/2 will only muddy the waters. \n",
          "createdAt": "2014-07-15T04:52:50Z",
          "updatedAt": "2014-07-15T04:52:50Z"
        }
      ]
    },
    {
      "number": 563,
      "id": "MDU6SXNzdWUzODI2MTQ5NA==",
      "title": "Clarify that server may send SETTINGS before receiving from client",
      "url": "https://github.com/httpwg/http2-spec/issues/563",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In \"3.3. Starting HTTP/2 for 'https' URIs\" there should be a clarification along the lines of:\n\n```\n The server MAY send its SETTINGS connection prefix prior to receiving the client \n connection prefix.\n```\n\nThere doesn't seem to be prohibited, but it's also not explicitly allowed or mentioned that I could find.  This could be especially useful in a TLS 1.3 1RTT context as this could then be sent in the first server response flight following the server finished.\n",
      "createdAt": "2014-07-20T16:50:18Z",
      "updatedAt": "2014-07-21T15:20:19Z",
      "closedAt": "2014-07-21T15:20:19Z",
      "comments": []
    },
    {
      "number": 564,
      "id": "MDU6SXNzdWUzODI2NDAwNA==",
      "title": "Content-Length and HEAD",
      "url": "https://github.com/httpwg/http2-spec/issues/564",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "We make this impossible. Fix that.\n",
      "createdAt": "2014-07-20T18:52:45Z",
      "updatedAt": "2014-07-21T15:03:42Z",
      "closedAt": "2014-07-21T15:03:42Z",
      "comments": []
    },
    {
      "number": 565,
      "id": "MDU6SXNzdWUzODQxODk3MA==",
      "title": "Encoding context update (low, high)",
      "url": "https://github.com/httpwg/http2-spec/issues/565",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "We need to note that multiple changes to the header table size can occur before this, in which case you need to include the lowest value seen, followed by the one that the encoder intends to use.  The former can be omitted if it is greater than or equal to the latter.\n",
      "createdAt": "2014-07-22T16:44:21Z",
      "updatedAt": "2020-09-22T04:09:37Z",
      "closedAt": "2014-07-28T17:09:04Z",
      "comments": []
    },
    {
      "number": 567,
      "id": "MDU6SXNzdWUzODQ3NDQxNA==",
      "title": "mistake in Huffman example",
      "url": "https://github.com/httpwg/http2-spec/issues/567",
      "state": "CLOSED",
      "author": "bradfitz",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In draft-ietf-httpbis-header-compression-08,\n\nThe length in Appendix D.4.1's representation example of a Huffman-encoded string is wrong; I believe it should be 12, not 15, per Section 6.1:\n\nhttp://tools.ietf.org/html/draft-ietf-httpbis-header-compression-08#appendix-D.4.1\n\n8c                                      |   Literal value (len = 15)\n                                        |     Huffman encoded:\nf1e3 c2e5 f23a 6ba0 ab90 f4ff           | .....:k.....\n\nIt looks like it was copy/pasted incorrectly from http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-08#appendix-D.3.1 where it's correctly 15.\n",
      "createdAt": "2014-07-23T01:02:42Z",
      "updatedAt": "2014-07-24T22:39:49Z",
      "closedAt": "2014-07-24T22:39:49Z",
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Duplicate of #545.\n",
          "createdAt": "2014-07-24T22:39:49Z",
          "updatedAt": "2014-07-24T22:39:49Z"
        }
      ]
    },
    {
      "number": 569,
      "id": "MDU6SXNzdWUzODkxODMyNw==",
      "title": "explicitly forbid TLS <1.2",
      "url": "https://github.com/httpwg/http2-spec/issues/569",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"Implementations of HTTP/2 MUST support TLS 1.2 [TLS12] for HTTP/2 over TLS.\"\n\nALPN requirement implicitly forbids SSL & AEAD requirement implicitly requires TLS 1.2 or later, however the spec as written doesn't technically forbid the usage of old TLS versions. This is an entirely redundant enhancement request, however I'd like to suggest rewording the TLS support requirement to make it fully clear up front that TLS 1.2+ is acceptable and TLS 1.0 & 1.1 are not supported.\n",
      "createdAt": "2014-07-28T18:29:27Z",
      "updatedAt": "2014-07-28T20:01:39Z",
      "closedAt": "2014-07-28T19:19:31Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've done some refactoring, let me know if that makes sense.\nhttps://github.com/http2/http2-spec/commit/798dcdc48abcd7bf4cad100054170ee42a4fcb61\n",
          "createdAt": "2014-07-28T19:19:31Z",
          "updatedAt": "2014-07-28T19:19:31Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Perfect. Thanks for the lightning quick improvement.\n",
          "createdAt": "2014-07-28T19:51:35Z",
          "updatedAt": "2014-07-28T19:51:35Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note that this change also clears up any possible ambiguity over how to respond to other existing TLS restrictions. You've now made TLS compression or lack of SNI usage explicitly result in an expectation of an INADEQUATE_SECURITY error.\n",
          "createdAt": "2014-07-28T20:01:39Z",
          "updatedAt": "2014-07-28T20:01:39Z"
        }
      ]
    },
    {
      "number": 575,
      "id": "MDU6SXNzdWUzOTI1MjkzNA==",
      "title": "Clarification needed for 3.5. HTTP/2 Connection Preface",
      "url": "https://github.com/httpwg/http2-spec/issues/575",
      "state": "CLOSED",
      "author": "EugeneChung",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I think the HTTP/2 spec. need to be clarified for the HTTP/2 connection preface.\nAt the beginning of 3.5,\n\n3.5. HTTP/2 Connection Preface\n\nUpon establishment of a TCP connection and determination that HTTP/2\nwill be used by both peers, each endpoint MUST send a connection\npreface as a final confirmation and .....\n\nit says that each endpoint MUST send a connection preface, but the connection preface is not clearly classified at this time. So I think it would be helpful for readers to understand if it adds description like below;\n\nThere are two types of connection prefaces, the client connection preface and the server connection preface.\n\nFYI,\nhttps://github.com/netty/netty/issues/2402\nhttps://github.com/netty/netty/issues/2403\n",
      "createdAt": "2014-08-01T00:46:58Z",
      "updatedAt": "2014-08-02T14:45:08Z",
      "closedAt": "2014-08-01T16:07:58Z",
      "comments": [
        {
          "author": "EugeneChung",
          "authorAssociation": "NONE",
          "body": "Thanks!\n",
          "createdAt": "2014-08-02T14:45:08Z",
          "updatedAt": "2014-08-02T14:45:08Z"
        }
      ]
    },
    {
      "number": 578,
      "id": "MDU6SXNzdWUzOTMwOTk5MQ==",
      "title": "Header Table and Static Table Indicies Switched",
      "url": "https://github.com/httpwg/http2-spec/issues/578",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "header compression"
      ],
      "body": "Not sure why this change was made but doing so now means that referencing names not in the header table require an extra byte.\n\nThe \"Literal Header Field with Incremental Indexing - Indexed Name\" representation only allows 6 bits for the index, requiring indexes 63 and higher to be encoded in two bytes. The static table has 61 entries. This reduces the compression efficiency for almost all names not in the static table.\n",
      "createdAt": "2014-08-01T17:19:20Z",
      "updatedAt": "2014-10-29T22:32:14Z",
      "closedAt": "2014-10-29T22:32:14Z",
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "I propose that the current HPACK draft be changed such that Sec. 2.3.3 Index Address Space reads,\n\n\"Indices between 1 and the length of the dynamic table (inclusive) refer to elements in the dynamic table.\n\nIndices strictly greater than the length of the dynamic table refer to elements in the static table. The length of the dynamic table is subtracted from the index into the static table.\"\n\nwith the associated diagram updated. This reverts the change made between draft -08 and -09 in the change log, \"Exchanged header and static table positions.\"\n",
          "createdAt": "2014-10-06T15:04:05Z",
          "updatedAt": "2014-10-06T15:04:05Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed on list; no consensus for change.\n",
          "createdAt": "2014-10-29T22:32:14Z",
          "updatedAt": "2014-10-29T22:32:14Z"
        }
      ]
    },
    {
      "number": 579,
      "id": "MDU6SXNzdWUzOTM5MTMyNw==",
      "title": "post relevant portions of [TLSBCP] inline into new TLS recommendations subsection",
      "url": "https://github.com/httpwg/http2-spec/issues/579",
      "state": "CLOSED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"9.2 Use of TLS Features\nImplementations of HTTP/2 MUST support TLS 1.2 [TLS12] for HTTP/2 over TLS. The general TLS usage guidance in [TLSBCP](https://tools.ietf.org/html/draft-sheffer-tls-bcp-02) SHOULD be followed, with some additional restrictions that are specific to HTTP/2.\"\n\nA significant majority of this reference is superseded by more strict requirements in the HTTP/2 spec itself. These recommendations would be more clear if this line were replaced with a new section \"9.2.3 TLS Security Recommendations\". (and the ref link at the bottom also removed) It looks like the portions that are still applicable are:\n\n1) List of other recommended ciphers\n2) Additionally recommended curve(s) & supported curves extension\n3) Certificate recommendations\n4) Session resumption recommendations\n\nExplicitly listing these recommendations in the HTTP/2 spec would make things far more clear. Of note, listing additionally recommended ciphers in the spec rather than just the single mandatory to implement cipher could help to insure that HTTP/2 is less likely to rely on a single available cipher.\n",
      "createdAt": "2014-08-04T05:19:25Z",
      "updatedAt": "2014-08-04T17:28:44Z",
      "closedAt": "2014-08-04T17:28:44Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We explicitly decided not to do this for a couple of reasons:\n1. we don't want to duplicate the BCP text\n2. we don't want to duplicate text where there is a chance that the text could change\n3. we don't want to gate HTTP/2 publication on the availability of the BCP (hence the informational reference)\n\nFeel free to bring this up on the list if you disagree.\n",
          "createdAt": "2014-08-04T17:28:44Z",
          "updatedAt": "2014-08-04T17:28:44Z"
        }
      ]
    },
    {
      "number": 584,
      "id": "MDU6SXNzdWUzOTY2NjA5Nw==",
      "title": "Outline Wording in hpack-09",
      "url": "https://github.com/httpwg/http2-spec/issues/584",
      "state": "CLOSED",
      "author": "RobbySimpson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "(Editorial)\n\n2.1 states: \"The HTTP header field encoding defined in this document is based on a header table that maps name-value pairs to index values.  The header table is incrementally updated as new values are encoded or decoded.\"\n\nFor clarity, I suggest changing \"as new values\" to \"as new name-value pairs\".\n\nNote: this is my first attempt to make an editorial suggestion via a Github issue, please let me know if you prefer I do something different.  Trying to make the editors' lives easier!  :)\n",
      "createdAt": "2014-08-06T21:06:49Z",
      "updatedAt": "2014-08-28T15:25:36Z",
      "closedAt": "2014-08-28T15:25:36Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Pull requests are even better :)\n",
          "createdAt": "2014-08-06T21:51:22Z",
          "updatedAt": "2014-08-06T21:51:22Z"
        },
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "Will do from now on\n",
          "createdAt": "2014-08-07T13:06:33Z",
          "updatedAt": "2014-08-07T13:06:33Z"
        }
      ]
    },
    {
      "number": 585,
      "id": "MDU6SXNzdWUzOTY2NjYyNA==",
      "title": "Minor hpack-09 editorials",
      "url": "https://github.com/httpwg/http2-spec/issues/585",
      "state": "CLOSED",
      "author": "RobbySimpson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "(Editorials)\n\nIn 8.1.2, \"created an particular value\" should be \"created _a_ particular value\".\n\nAt the beginning of Appendix D, \"and with and without Huffman coding\" -- remove first \"and\".\n",
      "createdAt": "2014-08-06T21:12:06Z",
      "updatedAt": "2014-08-28T15:25:36Z",
      "closedAt": "2014-08-28T15:25:36Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "You can create a pull request by viewing the XML file online and editing it directly for simple stuff like this.\n",
          "createdAt": "2014-08-06T21:52:08Z",
          "updatedAt": "2014-08-06T21:52:08Z"
        },
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "Will do from now on\n",
          "createdAt": "2014-08-07T13:06:59Z",
          "updatedAt": "2014-08-07T13:06:59Z"
        }
      ]
    },
    {
      "number": 586,
      "id": "MDU6SXNzdWUzOTc3ODM2OA==",
      "title": "Transfer-Encoding: chunked",
      "url": "https://github.com/httpwg/http2-spec/issues/586",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Forbid it more explicitly.\n",
      "createdAt": "2014-08-07T23:21:31Z",
      "updatedAt": "2014-09-23T12:24:55Z",
      "closedAt": "2014-09-23T12:24:55Z",
      "comments": []
    },
    {
      "number": 587,
      "id": "MDU6SXNzdWUzOTc4NjY4Ng==",
      "title": "Hpack optimization",
      "url": "https://github.com/httpwg/http2-spec/issues/587",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "header compression",
        "non-blocking",
        "revisit-upon-change"
      ],
      "body": "Greg did some testing based on our small sample data and found that adding values to the static table improve compression a little.\n\n\"accept-ranges\",\"bytes\"\n\"accept\",\"*/*\"\n\"age\",\"0\"\n\"allow\",\"GET\"\n\"cache-control\",\"no-cache\"\n\"content-disposition\",\"attachment\"\n\"content-encoding\",\"gzip\"\n\"content-length\",\"0\"\n\"content-type\",\"application/x-javascript\"\n\"vary\",\"Accept-Encoding\"\n\nThis achieved 0.9% saving.\n",
      "createdAt": "2014-08-08T02:35:24Z",
      "updatedAt": "2014-10-23T13:37:56Z",
      "closedAt": "2014-10-07T06:04:22Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that this saving isn't much, nor is it well supported by data, and it's therefore only worth considering if we need to make other breaking changes in the protocol.\n",
          "createdAt": "2014-08-08T02:36:38Z",
          "updatedAt": "2014-08-08T02:36:38Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "Note that the \"accept\",\"/\"  should be \"accept\",\"*/*\"\n",
          "createdAt": "2014-08-08T04:13:40Z",
          "updatedAt": "2014-08-08T04:13:40Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "application/x-javascript is non-standard; I don't think we want to encourage that. \n\ntext/html; charset=utf8 might be more the go.\n\nA few more:\n- If we're going to include expect, why not 100-continue?\n- If we're going to include access-control-allow-origin, it'd be nice to confirm with the W3C that this is going to stick (they've had a few tries at CORS), and that there's not anything else on the horizon.\n- If-Unmodified-Since? Really?\n- Max-Forwards? Considering we're no longer hop-by-hop, that's a good trick.\n- Refresh is non-standard, and badly interoperable. Shouldn't be encouraged.\n- Uhhhhh, we don't allow Transfer-Encoding; why is it in the static table?\n",
          "createdAt": "2014-08-13T07:22:58Z",
          "updatedAt": "2014-08-13T07:22:58Z"
        },
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "I support fixing this (as many have mentioned, there is no reason to have empty values in the static table unless it just doesn't make sense semantically).\n\nAlso, I mentioned on the list that \"allow\" is out-of-order lexically.  Should this be a separate issue or can we track here as part of \"breaking\" hpack changes?\n",
          "createdAt": "2014-09-26T16:19:23Z",
          "updatedAt": "2014-09-26T16:19:23Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closing for now; labeled revisit-upon-change to allow reopening when there are more substantial changes justified.\n",
          "createdAt": "2014-10-07T06:04:22Z",
          "updatedAt": "2014-10-07T06:04:22Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Possibly extraneous values:\n- transfer-encoding (not in http/2)\n- retry-after\n- proxy-authenticate (only sent as a challenge)\n- www-authenticate (only sent as a challenge)\n- max-forwards\n- if-unmodified-since\n- if-match\n- from (huffman codes to 23 bits; not common)\n- content-disposition (sent rarely)\n- :status 204\n- :status 206\n- :status 400 (errors are exceptional, and usually stop conditions anyway)\n- :status 404 (ditto)\n- :status 500 (ditto)\n- :scheme http\n- :path /index.html\n- :method POST  (when used, the request is big anyway)\n- accept-charset (not commonly used any more)\n- access-control-allow-origin (it's wordy, but it's a response header, and only one of many CORS headers)\n- date (huffman codes to 21 bits; is response-oriented)\n- etag (huffman codes to 21 bits; is response-oriented)\n- if-range\n- link (huffman codes to 24 bits; is response-oriented)\n- refresh (not standard, not evenly supported)\n- via (it's already short; huffman codes to 17 bits)\n\nThat's 25 more slots for dynamic headers (if all are removed from the static table)\n\nNote: bias is against response headers, since request have more \"punch\" for performance. Also against headers that are only sent once (e.g., as a challenge). Focus of the static table should be getting the first few requests going, nothing more.\n",
          "createdAt": "2014-10-13T00:45:46Z",
          "updatedAt": "2014-10-13T00:45:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, if the intent is to trim this down; this is a good list.  I would probably keep Date, because it's in every response, and one isn't going to hurt that much.  I'm also somewhat inclined to keep If-Unmodified-Since, though I can't substantiate that, other than to note that I see it lots.\n",
          "createdAt": "2014-10-13T17:06:42Z",
          "updatedAt": "2014-10-13T17:06:42Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "What UAs do you see If-Unmodified-Since from?\n",
          "createdAt": "2014-10-13T23:19:29Z",
          "updatedAt": "2014-10-13T23:19:29Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@hruellan it'd be interesting to see numbers on how removing those affects overall performance (hint, hint)...\n",
          "createdAt": "2014-10-13T23:20:33Z",
          "updatedAt": "2014-10-13T23:20:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Why would you assume that it's a UA.  I'm talking clients.  Though If-None-Match is certainly far more commonplace there.\n",
          "createdAt": "2014-10-13T23:32:07Z",
          "updatedAt": "2014-10-13T23:32:07Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "So you're saying intermediaries are generating it? So, what are the Via headers, then?\n",
          "createdAt": "2014-10-13T23:46:27Z",
          "updatedAt": "2014-10-13T23:46:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I inferred UA == browser.  I meant embedded clients of other forms, not intermediaries.\n",
          "createdAt": "2014-10-13T23:50:19Z",
          "updatedAt": "2014-10-13T23:50:19Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Ah, you've been infected by the browser ppl. RTFM - http://httpwg.github.io/specs/rfc7230.html#operation\n\n:)\n",
          "createdAt": "2014-10-14T00:03:02Z",
          "updatedAt": "2014-10-14T00:03:02Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've never understood that distinction to be relevant.  And the idea that a client acts for a user (i.e., is a user agent) in the general sense is a bit off too.\n",
          "createdAt": "2014-10-14T00:12:28Z",
          "updatedAt": "2014-10-14T00:12:28Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I started doing some tests.\nBasically, reducing the static table decrease compression when the dynamic table is small, but improves it when the dynamic table is large. The turning point is between 4K and 8K.\nMostly the compression changes are small (1.5% increase or decrease).\nHowever for the HR test suite, the size increase for requests with a 1K table is greater than 5%. I'd like to understand the reason and I'm going to investigate more on this point.\n",
          "createdAt": "2014-10-14T10:25:15Z",
          "updatedAt": "2014-10-14T10:25:15Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I dug a bit deeper, and found the following.\nFor requests, the negative impact comes from removing:\n- :scheme: http\n- accept-charset\n  The removal of \":scheme:http\" has a large impact for a 1K table (~4% increase in size) and a small impact for a 2K table (~.5% increase in size).\n  The removal of \"accept-charset\" has some impact for a 1K table (~1.5% increase in size) and a small impact for a 2K table (~.25% increase in size).\n\nFor responses, the negative impact comes from removing:\n- date\n- via\n  The removal of these two header names mostly impact the compaction when the dynamic table size is 1K (~1% increase in size) or 2K (~.5% increase in size). The relative impact should be roughly the same.\n\nI think that \":scheme:http\" and \"accept-charset\" should be removed from the static table.\nFor \"date\" and \"via\", I think it depends on the tradeoff we want to make.\n",
          "createdAt": "2014-10-15T11:00:15Z",
          "updatedAt": "2014-10-15T11:00:15Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd think that we might make some sort of value-judgment regarding some of these.  The judgment implicit in removing \":scheme: http\" might be a little strong for me to take on, but I hope that \"via\" and \"accept-charset\" are relatively uncontroversial.  I think that \"date\" is worth keeping though.\n",
          "createdAt": "2014-10-15T22:50:46Z",
          "updatedAt": "2014-10-15T22:50:46Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And of course, none of this needs removal if we switch the indexing back.\n\nOn Wed, Oct 15, 2014 at 3:50 PM, Martin Thomson notifications@github.com\nwrote:\n\n> I'd think that we might make some sort of value-judgment regarding some of\n> these. The judgment implicit in removing \":scheme: http\" might be a little\n> strong for me to take on, but I hope that \"via\" and \"accept-charset\" are\n> relatively uncontroversial. I think that \"date\" is worth keeping though.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/issues/587#issuecomment-59289492.\n",
          "createdAt": "2014-10-15T23:59:07Z",
          "updatedAt": "2014-10-15T23:59:07Z"
        },
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "I completely agree w Martin here.\n\nSent from my iPhone - thus the tpyos and brvty\n\nOn Oct 16, 2014, at 12:50 AM, \"Martin Thomson\" <notifications@github.com<mailto:notifications@github.com>> wrote:\n\nI'd think that we might make some sort of value-judgment regarding some of these. The judgment implicit in removing \":scheme: http\" might be a little strong for me to take on, but I hope that \"via\" and \"accept-charset\" are relatively uncontroversial. I think that \"date\" is worth keeping though.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/587#issuecomment-59289492.\n",
          "createdAt": "2014-10-16T00:47:03Z",
          "updatedAt": "2014-10-16T00:47:03Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "Here is a proposal for a trimmed static table that:\n- Is only 31 entries, so that 31 single byte encodings are available for dynamic fields and field names removes most of the fields nominated in #587 as unneccesary\n- adds the values suggest in #597 and some more\n- The first 14 slots are used for the most frequent field names with variable values that are unlikely to be indexed, so they can be encoded as 1 byte in a literal with a 4+ name index.\n- Adds the most frequent value to all fields where it makes sense.\n- Adds some possible useful values where it makes sense\n\n| Index | Header | Value |\n| --- | --- | --- |\n| 1 | :authority | localhost |\n| 2 | :path | / |\n| 3 | authorization |  |\n| 4 | content-length | 0 |\n| 5 | content-type | application/x-javascript |\n| 6 | date | Thu, 01 Jan 1970 00:00:00 GMT |\n| 7 | etag |  |\n| 8 | expires | Thu, 01 Jan 1970 00:00:00 GMT |\n| 9 | if-match |  |\n| 10 | if-modified-since | Thu, 01 Jan 1970 00:00:00 GMT |\n| 11 | last-modified | Thu, 01 Jan 1970 00:00:00 GMT |\n| 12 | location |  |\n| 13 | referer |  |\n| 14 | www-authenticate |  |\n| 15 | :method | GET |\n| 16 | :scheme | https |\n| 17 | :status | 200 |\n| 18 | accept | */* |\n| 19 | accept-encoding | gzip, deflate |\n| 20 | accept-language |  |\n| 21 | accept-ranges | bytes |\n| 22 | allow | GET |\n| 23 | cache-control | no-cache |\n| 24 | content-encoding | gzip |\n| 25 | content-language |  |\n| 26 | cookie |  |\n| 27 | range |  |\n| 28 | server |  |\n| 29 | set-cookie |  |\n| 30 | user-agent |  |\n| 31 | vary | accept-encoding |\n",
          "createdAt": "2014-10-23T00:08:41Z",
          "updatedAt": "2014-10-23T00:08:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see any value in the dates, unless you want to put expires at 2050 or something like that.  I can see servers exploiting the limits that clients put on caches.\n\nSome numbers based on this table would be interesting.\n",
          "createdAt": "2014-10-23T04:13:40Z",
          "updatedAt": "2014-10-23T04:13:40Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Where does the information that \"application/x-javascript\" is the most frequent type come from?\n",
          "createdAt": "2014-10-23T05:57:23Z",
          "updatedAt": "2014-10-23T05:57:23Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "Martin & Julian,\n\nThese values have not been rigorously determined as I don't have a good\nrepresentative data set to work from.    They are a best guess from data I\nhad at hand and gut feel.\n\nI agree that the date values are probably marginally useful, but I have\nseen 1 Jan 1970 as a moderately frequent value in some circumstances.\nPerhaps 2050 for some might be better?       Probably not going to get huge\nbenefit out of these as any common value can cheaply be put in the dynamic\ntable - so unless there is popular outcry for 1 Jan 1970, I'm happy to\nblank.\n\nDitto for the javascript value.  I think in the circumstance this can most\nhelp with it is either going to be css of js files are sent early in a\nconversation.  Images also, but there are too many values there.      So I\npicked js as something that at least will do no harm, but happy to null it\nif it appears a bit arbitrary (which it is :)\n\nI think most benefits from the table refactor is reducing size so that\ndynamic headers get a go and moving the known names to early in the table\nso they get 1 byte name indexes.\n\ncheers\n\ncheers\n\nOn 23 October 2014 16:57, reschke notifications@github.com wrote:\n\n> Where does the information that \"application/x-javascript\" is the most\n> frequent type come from?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/issues/587#issuecomment-60195864.\n\n## \n\nGreg Wilkins gregw@intalio.com  @  Webtide - _an Intalio subsidiary_\nhttp://eclipse.org/jetty HTTP, SPDY, Websocket server and client that scales\nhttp://www.webtide.com  advice and support for jetty and cometd.\n",
          "createdAt": "2014-10-23T06:28:50Z",
          "updatedAt": "2014-10-23T06:28:50Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I can see two ways of justifying these: run some compression tests and show some improvement (it probably won't be much, but statistical significance would be nice); or, find some information on relative frequency.\n",
          "createdAt": "2014-10-23T06:54:56Z",
          "updatedAt": "2014-10-23T06:54:56Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My main concern with x-javascript is that it creates an incentive to use an unregistered media type.\n",
          "createdAt": "2014-10-23T08:41:24Z",
          "updatedAt": "2014-10-23T08:41:24Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "On 23 October 2014 19:41, reschke notifications@github.com wrote:\n\n> My main concern with x-javascript is that it creates an incentive to use\n> an unregistered media type.\n\nSo \"text/html; charset=UTF8\" ?   Probably not the most frequent, but\nregistered and is at least not uncommon.\nor no value?\n\nFor the dates, I note that a lot of google sites are using \"Fri, 01 Jan\n1990 00:00:00 GMT\" as an already expired date.  But many other sites are\nusing expired: -1.   So perhaps no date value.... and that will encourage a\nbinary date extension.\n\ncheers\n\n## \n\nGreg Wilkins gregw@intalio.com  @  Webtide - _an Intalio subsidiary_\nhttp://eclipse.org/jetty HTTP, SPDY, Websocket server and client that scales\nhttp://www.webtide.com  advice and support for jetty and cometd.\n",
          "createdAt": "2014-10-23T09:10:40Z",
          "updatedAt": "2014-10-23T09:10:40Z"
        },
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "I've got some spare cycles (long flight coming up) and would not mind doing some frequency analysis (ideally, weighted by compression).  Where are some good traces for me to use?  I looked in https://github.com/http2/http_samples \u2014 is there a particular set we've been using in the past?\n\nFrom: Martin Thomson <notifications@github.com<mailto:notifications@github.com>>\nReply-To: http2/http2-spec <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Thursday, October 23, 2014 at 2:55 AM\nTo: http2/http2-spec <http2-spec@noreply.github.com<mailto:http2-spec@noreply.github.com>>\nCc: Charles Simpson <Robby.Simpson@GE.com<mailto:Robby.Simpson@GE.com>>\nSubject: Re: [http2-spec] Hpack optimization (#587)\n\nI can see two ways of justifying these: run some compression tests and show some improvement (it probably won't be much, but statistical significance would be nice); or, find some information on relative frequency.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/587#issuecomment-60199478.\n",
          "createdAt": "2014-10-23T13:37:56Z",
          "updatedAt": "2014-10-23T13:37:56Z"
        }
      ]
    },
    {
      "number": 591,
      "id": "MDU6SXNzdWU0MDAwNTU1MA==",
      "title": "Permissible states for extension frames",
      "url": "https://github.com/httpwg/http2-spec/issues/591",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "frame semantics",
        "has-proposal"
      ],
      "body": "We don't really say this, but the implication is that an extension frame can appear anywhere, for any stream.  Worst case, you can have frames appearing with any stream number at any time.\n\nAre we OK with this?\n\nOr... do we want to limit the sending of extension frames on streams somehow.  Note that the most permissibly constrained frame type is `PRIORITY`, which can appear in any state other than \"idle\".  A similar constraint would be relatively easy to enact.\n\nA tighter scope, like just \"open\" and the sending-permitted \"half-closed\" variant, would be even easier to enact, but might reduce the utility of extension frames.\n",
      "createdAt": "2014-08-11T22:02:23Z",
      "updatedAt": "2014-09-30T16:53:11Z",
      "closedAt": "2014-09-30T16:53:11Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See ec57ba8\n",
          "createdAt": "2014-08-25T00:19:36Z",
          "updatedAt": "2014-08-25T00:19:36Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mark's commit covers the only prohibited scenario that bothers me, or that seemed to bother most people on the list.  I'm in favor of closing with that fix.\n",
          "createdAt": "2014-09-19T22:32:02Z",
          "updatedAt": "2014-09-19T22:32:02Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closing as fixed.\n",
          "createdAt": "2014-09-30T16:53:11Z",
          "updatedAt": "2014-09-30T16:53:11Z"
        }
      ]
    },
    {
      "number": 592,
      "id": "MDU6SXNzdWU0MDEyNzExMA==",
      "title": "0x for hex",
      "url": "https://github.com/httpwg/http2-spec/issues/592",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "2.2 Conventions says that \"Hexidecimal literals are prefixed with 0x to distinguish them from decimal literals.\" \n\nHowever, this notation appears exactly once in the document -- right above a huge table full of hex literals, without any prefix.\n\nI'd say add the prefix to the table, if there's room (looks like it); if not, drop this phrase, as it's misleading.\n",
      "createdAt": "2014-08-13T06:41:10Z",
      "updatedAt": "2014-08-28T15:25:36Z",
      "closedAt": "2014-08-28T15:25:36Z",
      "comments": []
    },
    {
      "number": 593,
      "id": "MDU6SXNzdWU0MDEyNzg5NA==",
      "title": "Header List Ordering requirements",
      "url": "https://github.com/httpwg/http2-spec/issues/593",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "In 3.1 Header List Ordering, there are two SHOULD requirements about ordering, and then a MUST about pseudo-header fields.\n\nThis is icky. When can an implementation violate those SHOULDs and maintain interop? Why is stuff about pseudo-headers here, when historically we've agreed to keep it in the HTTP/2 doc?\n\nI'd suggest dropping the pseudo-header language and upgrading the other two to MUST; otherwise, the SHOULDs need some explanation.\n",
      "createdAt": "2014-08-13T06:57:48Z",
      "updatedAt": "2014-08-28T15:25:36Z",
      "closedAt": "2014-08-28T15:25:36Z",
      "comments": [
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I completely agree.  HPACK should be as mechanical as possible.\n",
          "createdAt": "2014-08-14T15:30:14Z",
          "updatedAt": "2014-08-14T15:30:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that this could be made editorial.  The intent is there and largely correct, but the implementation of it is a little faulty, that's all.\n",
          "createdAt": "2014-08-20T02:32:29Z",
          "updatedAt": "2014-08-20T02:32:29Z"
        }
      ]
    },
    {
      "number": 594,
      "id": "MDU6SXNzdWU0MDEyODM3OA==",
      "title": "5.1 Maximum Table Size",
      "url": "https://github.com/httpwg/http2-spec/issues/594",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal",
        "header compression"
      ],
      "body": "This section feels very... intertwingled... with HTTP/2. Can we more cleanly separate it? I realise there are limits to what you can do here.\n",
      "createdAt": "2014-08-13T07:08:03Z",
      "updatedAt": "2014-09-29T16:22:17Z",
      "closedAt": "2014-09-29T16:22:17Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@hruellan can you have a look at my PR?\n",
          "createdAt": "2014-09-26T15:51:08Z",
          "updatedAt": "2014-09-26T15:51:08Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson pulled and merged.\nClosed with ab728082a0e1946c70df2e3eb6663aca3e2da5e7.\n",
          "createdAt": "2014-09-29T16:22:13Z",
          "updatedAt": "2014-09-29T16:22:13Z"
        }
      ]
    },
    {
      "number": 595,
      "id": "MDU6SXNzdWU0MDEyODU1MQ==",
      "title": "Wikipedia",
      "url": "https://github.com/httpwg/http2-spec/issues/595",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "header compression"
      ],
      "body": "... is so not going to fly as a reference in 6.1. \n",
      "createdAt": "2014-08-13T07:11:29Z",
      "updatedAt": "2014-08-29T10:53:57Z",
      "closedAt": "2014-08-29T10:53:57Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Is \"unsigned variable length integer\" sufficiently understood and clear that we can use the phrase without explanation or a reference?\n",
          "createdAt": "2014-08-28T22:05:37Z",
          "updatedAt": "2014-08-28T22:05:37Z"
        }
      ]
    },
    {
      "number": 597,
      "id": "MDU6SXNzdWU0MDUxMjExMw==",
      "title": "Message Flow clarification and example request",
      "url": "https://github.com/httpwg/http2-spec/issues/597",
      "state": "CLOSED",
      "author": "Scottmitch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Draft 14 clarified the HTTP message flow in section [8.1](http://http2.github.io/http2-spec/index.html#HttpSequence) by adding a new sequence of headers (step 1).  Can you clarify how the END_HEADERS flag is set in the situation where the server response includes steps 1 & 2 (and also 4 just for good measure)?\n\nFor example does each step (1,2,4) require a END_HEADERS flag set?  Alternatively is there only an END_HEADERS flag expected for steps (2,4)?  It may also be beneficial to include an example (or adapt and existing example) of this message flow (with all steps).\n",
      "createdAt": "2014-08-18T17:34:25Z",
      "updatedAt": "2014-10-07T16:52:50Z",
      "closedAt": "2014-10-07T16:52:50Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> For example does each step (1,2,4) require a END_HEADERS flag set?\n\nYes.  The final example in http://http2.github.io/http2-spec/#rfc.section.8.1.3 shows this.  The description of header blocks http://http2.github.io/http2-spec/#HeaderBlock also makes this clear.\n\nWe can keep adding examples, but at some point the gains become outweighed by the mass of text required to support them.\n",
          "createdAt": "2014-08-18T17:40:00Z",
          "updatedAt": "2014-08-18T17:40:00Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Thanks for clarifying.  Re-reading these two sections did not provide the clarity I hoped for.  The terminology is not consistent (see below).  Also the END_STREAM flag is discussed in the message flow section but the END_HEADERS flag is not. Both of these flags impact the state transitions defined in this section.\nI agree that many examples may be counter productive, in this case I think we have an opportunity to reduce the number of response examples while still demonstrating the same points.  For example the last 2 stubs in http://http2.github.io/http2-spec/#rfc.section.8.1.3 can be merged into 1 (by introducing a request with an Expect: 100-continue header and the first response into a status: 100).  This also provides an example for a 2 phase request/response that is not covered in the other examples.\n\n**Terminology Inconsistency**\nThe [header block](http://http2.github.io/http2-spec/#HeaderBlock) section defines a complete \"header block\" as:\n\n> A complete header block consists of either:\n> a single HEADERS or PUSH_PROMISE frame, with the END_HEADERS flag set, or\n> a HEADERS or PUSH_PROMISE frame with the END_HEADERS flag cleared and one or more CONTINUATION frames, where the last CONTINUATION frame has the END_HEADERS flag set.\n\nThis section also mentions the last frame in a \"header stream\":\n\n> The last frame in a sequence of HEADERS or CONTINUATION frames MUST have the END_HEADERS flag set. The last frame in a sequence of PUSH_PROMISE or CONTINUATION frames MUST have the END_HEADERS flag set. This allows a header block to be logically equivalent to a single frame.\n\nWhile the [http sequence](http://http2.github.io/http2-spec/#HttpSequence) section talks in terms of frames (with no mention of the END_HEADERS flag):\n\n> for a response only, zero or more HEADERS frames (each followed by zero or more CONTINUATION frames) containing the message headers of informational (1xx) HTTP responses (see [RFC7230], Section 3.2 and [RFC7231], Section 6.2), and\n> one HEADERS frame (followed by zero or more CONTINUATION frames) containing the message headers (see [RFC7230], Section 3.2), and\n",
          "createdAt": "2014-08-18T18:16:34Z",
          "updatedAt": "2014-08-18T18:17:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've reordered the example as suggested.\n\nI don't see any inconsistency in the terminology.  Note that the http sequence section refers to frames because that is more specific than the general \"header block\" term, which also covers PUSH_PROMISE.\n\n(I couldn't find any occurrences of \"header stream\" in the document, or the quoted text.)\n",
          "createdAt": "2014-10-07T16:52:18Z",
          "updatedAt": "2014-10-07T16:52:18Z"
        }
      ]
    },
    {
      "number": 601,
      "id": "MDU6SXNzdWU0MTc4MjU3NQ==",
      "title": "HTTP2-Settings field name",
      "url": "https://github.com/httpwg/http2-spec/issues/601",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "upgrade"
      ],
      "body": "Roy Fielding asks:\n\n> Why use a 14 character required field-name to provide options for a supposedly faster protocol?  Just call it \"H2\".\n\nin http://www.w3.org/mid/689826F0-979D-44CD-85BB-2BE14DCB0E1C@gbiv.com\n",
      "createdAt": "2014-09-03T05:22:35Z",
      "updatedAt": "2014-09-30T16:52:38Z",
      "closedAt": "2014-09-30T16:52:38Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closed as WONTFIX.\n",
          "createdAt": "2014-09-30T16:52:37Z",
          "updatedAt": "2014-09-30T16:52:37Z"
        }
      ]
    },
    {
      "number": 602,
      "id": "MDU6SXNzdWU0MTc4Mjg4Ng==",
      "title": "Forcing padding to be sent as zeros",
      "url": "https://github.com/httpwg/http2-spec/issues/602",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics",
        "has-proposal"
      ],
      "body": "Roy comments:\n\n> Forcing padding to zero makes it less random and causes it to be compressed to nothing if a higher layer compresses the stream.  A requirement on senders cannot prevent bad actors from sending non-zeros (assuming this is to prevent smuggling of data).\n\nin http://www.w3.org/mid/EAE7AB0B-FCC1-44A0-B7DF-4E1466700866@gbiv.com\n",
      "createdAt": "2014-09-03T05:31:07Z",
      "updatedAt": "2014-09-26T15:43:27Z",
      "closedAt": "2014-09-26T15:43:27Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We could, as a largely editorial measure (hence my comment here as opposed to the list), address this by forcing receivers to reject non-zero padding.\n",
          "createdAt": "2014-09-03T22:06:53Z",
          "updatedAt": "2014-09-03T22:06:53Z"
        }
      ]
    },
    {
      "number": 603,
      "id": "MDU6SXNzdWU0MTc4NTE1NQ==",
      "title": "Frame layout",
      "url": "https://github.com/httpwg/http2-spec/issues/603",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "frame layout",
        "revisit-upon-change"
      ],
      "body": "Roy would like to see the frame layout changed;\n1. To reduce the number of bits in flags and frame_type\n2. To put streamID first\n3. To align on 64 bits\n\nFrom http://www.w3.org/mid/25E37A5F-6120-4D84-A1EC-2830C0B41537@gbiv.com\n",
      "createdAt": "2014-09-03T06:17:05Z",
      "updatedAt": "2014-10-07T06:03:28Z",
      "closedAt": "2014-10-07T06:03:28Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "No agreement to make this change without other breaking changes that are justified upon their own.\n",
          "createdAt": "2014-10-07T06:03:28Z",
          "updatedAt": "2014-10-07T06:03:28Z"
        }
      ]
    },
    {
      "number": 604,
      "id": "MDU6SXNzdWU0MTc4NjMzNw==",
      "title": "Encapsulation attack requirements",
      "url": "https://github.com/httpwg/http2-spec/issues/604",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "editorial",
        "has-proposal"
      ],
      "body": "Roy points out that we're re-stating some requirements from HTTP/1, when we should defer to it. See http://www.w3.org/mid/BCBC0D56-0CC1-49D9-B2AC-FA2A524C609A@gbiv.com\n",
      "createdAt": "2014-09-03T06:44:51Z",
      "updatedAt": "2014-09-26T15:49:32Z",
      "closedAt": "2014-09-26T15:49:32Z",
      "comments": []
    },
    {
      "number": 607,
      "id": "MDU6SXNzdWU0MTg1Nzg4NQ==",
      "title": "Rename Not Authoritative status code",
      "url": "https://github.com/httpwg/http2-spec/issues/607",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "editorial"
      ],
      "body": "Roy proposes \"Misdirected Request\", which sounds reasonable.\n",
      "createdAt": "2014-09-03T19:45:10Z",
      "updatedAt": "2014-09-24T08:14:39Z",
      "closedAt": "2014-09-24T08:14:39Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed with https://github.com/http2/http2-spec/commit/7027e7a0c122609f4cfca084d3869f8c36f6aa9e\n",
          "createdAt": "2014-09-24T08:14:39Z",
          "updatedAt": "2014-09-24T08:14:39Z"
        }
      ]
    },
    {
      "number": 609,
      "id": "MDU6SXNzdWU0Mjg5MTM1OA==",
      "title": "broken spec links",
      "url": "https://github.com/httpwg/http2-spec/issues/609",
      "state": "CLOSED",
      "author": "bradfitz",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "These links in the Table of Contents (at http://http2.github.io/http2-spec/) are bad:\n\nFigures\nFigure 1: Frame Layout\nFigure 2: Stream States\n\nFigure 1 is actually linking to the Stream States.\nAnd that Figure 2 link is a dead link to a non-existent fragment http://http2.github.io/http2-spec/#rfc.figure.2\n",
      "createdAt": "2014-09-16T14:55:02Z",
      "updatedAt": "2014-09-23T10:53:51Z",
      "closedAt": "2014-09-23T10:53:51Z",
      "comments": []
    },
    {
      "number": 610,
      "id": "MDU6SXNzdWU0MjkwMzk4Mw==",
      "title": "off-by-one in data padding notes",
      "url": "https://github.com/httpwg/http2-spec/issues/610",
      "state": "CLOSED",
      "author": "bradfitz",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In section 6.1 about DATA frames, it says:\n\n\"If the length of the padding is greater than the length of the frame payload, the recipient MUST treat this as a connection error\"\n\nBut it seems like there's an off-by-one here, or a case not described: what about a 1 byte frame payload with the the PADDED flag set? That would imply a data size of -1 bytes (1 byte payload - 1 byte padded length - 1 byte pad (which can't fit) == -1 bytes left for the data octets). Is that valid or not? I assume that's also a connection error.\n",
      "createdAt": "2014-09-16T16:41:45Z",
      "updatedAt": "2014-09-23T10:58:20Z",
      "closedAt": "2014-09-23T10:58:20Z",
      "comments": []
    },
    {
      "number": 611,
      "id": "MDU6SXNzdWU0MjkwNTMwMA==",
      "title": "How should we handle over-long frame payloads?",
      "url": "https://github.com/httpwg/http2-spec/issues/611",
      "state": "CLOSED",
      "author": "bradfitz",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal"
      ],
      "body": "If an http2 implementation receives a frame with an unexpectedly large size, what should it do?\n\nAs one example, a WINDOW_UPDATE should be 4 bytes.  Or should it be at least 4 bytes?\n\nThe Extending HTTP/2 notes at http://http2.github.io/http2-spec/#rfc.section.5.5 aren't clear about whether an unexpectedly long frame is okay.\n\nThe closest I can find is:\n\n\"Implementations MUST ignore unknown or unsupported values in all extensible protocol elements. \"\n\nBut I can't find a definition of an \"extensible protocol element\".\n\nIt seems that the spirit of Section 5.5 would be to permit overly long frames.\n",
      "createdAt": "2014-09-16T16:54:02Z",
      "updatedAt": "2014-09-26T15:49:47Z",
      "closedAt": "2014-09-26T15:49:47Z",
      "comments": [
        {
          "author": "bradfitz",
          "authorAssociation": "NONE",
          "body": "I forgot to mention: there is FRAME_SIZE_ERROR, but it only says:\n\n\"If a frame size exceeds any defined limit, or is too small to contain mandatory frame data, the endpoint MUST send a FRAME_SIZE_ERROR error.\"\n\nBut only PING and SETTINGS mention it or a limit.\n\nWhat is the intended behavior for PRIORITY, RST_STREAM and WINDOW_UPDATE?\n",
          "createdAt": "2014-09-16T17:24:25Z",
          "updatedAt": "2014-09-16T17:24:25Z"
        }
      ]
    },
    {
      "number": 612,
      "id": "MDU6SXNzdWU0Mjk0OTU4OQ==",
      "title": "9.2.2 requires ALPN capabilities beyond RFC7301",
      "url": "https://github.com/httpwg/http2-spec/issues/612",
      "state": "CLOSED",
      "author": "gregw",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "has-proposal",
        "writeup"
      ],
      "body": "Section 9.2.2 places restrictions on the ciphers that are acceptable for a http/2 connection that are different to the acceptable ciphers for a https connection that may be offered over the same handshake.\n\nTo comply with 9.2.2, as server accepting an ALPN connection must either: a) influence the cipher selection to ensure an acceptable h2 cipher is selected;  b) be informed of the cipher selected and if it is not acceptable then select http/1.1 instead of h2  as the protocol.\n\nNeither of these capabilities are required of a RFC7301 compliant implementation.  Specifically there is no requirement for an ALPN extension to be able to influence cipher selection, nor is there a requirement for an ALPN to make the cipher that will be selected available to the protocol selection.\n",
      "createdAt": "2014-09-17T00:28:32Z",
      "updatedAt": "2014-12-04T23:52:37Z",
      "closedAt": "2014-11-25T19:11:16Z",
      "comments": [
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "Even if ALPN does allow arbitrary selection of cipher/protocol pair, it is impossible for a server to select an acceptable cipher/protocol pair because clients interpretations of 9.2.2 will vary over time and available ciphers.   \n\nIf a server selects a cipher/protocol pair that it believes is h2 acceptable, but the client disagrees, then communication failure results.    Thus the moment there are different interpretations of 9.2.2 in the client population it will be impossible for a single h2 server to accept connections from 100% of the population.\n",
          "createdAt": "2014-09-18T04:26:19Z",
          "updatedAt": "2014-09-18T04:26:19Z"
        },
        {
          "author": "agl",
          "authorAssociation": "NONE",
          "body": "The server need only support the minimum requirements in 9.2.2 at the TLS layer, i.e. enable TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 overall and make it a suitably high preference.\n\nIf the 9.2.2 requirements are increased in the future, then that requires an ALPN bump too and thus it can be deployed without worry.\n",
          "createdAt": "2014-10-02T03:07:01Z",
          "updatedAt": "2014-10-02T03:07:01Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "Note that I think discussion on this topic has moved beyond the specific concerns raised in this issue.     This issue should probably be decomposed into:\n1. Should we be restricting TLS ciphers within the application protocol draft document\n2. The usage of the ALPN handshake is fragile as any differing interpretations of 9.2.2 against future ciphers can result in communication failure.\n3. The ALPN RFC does not require that a ALPN implementation provide functionality needed to implement 9.2.2, specifically either to  a) use protocol selection to influence the cipher selection;  or b) be informed of the cipher selected to influence protocol selection.\n",
          "createdAt": "2014-10-03T05:00:48Z",
          "updatedAt": "2014-10-03T05:00:48Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ideally, no, the HTTP/2 spec should not be setting TLS details. HTTP/2 should simply require TLS 1.3, or at least a 1.2.1 with the required improvements done in the relevant spec. This, however, requires a level of coordination between working groups that isn't currently available. This section is just a hack to make a TLS 1.2-h2 variant that's the best that's currently attainable. It's a transitional spec until TLS 1.3 is eventually complete some time in the indeterminate future, just as HTTP/2 is likely to be a transitional spec until HTTP/3 gets written.\n\nThe cleanest route would be to cut out sections 9.2.1 & 9.2.2 and make a new TLS 1.2.1 spec that satisfies those requirements, then separately publish that and require its usage here. (though, you'd have to come up with some way to handle the minor version number; maybe implement TLS 1.2.1 entirely as an extension) It's probably too late in the HTTP/2 development process to do this, unfortunately, though it would be a cleaner spec with less fiddly bits that can break interoperability.\n",
          "createdAt": "2014-10-03T20:33:24Z",
          "updatedAt": "2014-10-03T20:33:24Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discuss on-list, please.\n",
          "createdAt": "2014-10-05T19:38:56Z",
          "updatedAt": "2014-10-05T19:38:56Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Actually, it's about ethics in game journalism.\n",
          "createdAt": "2014-10-30T21:56:56Z",
          "updatedAt": "2014-10-30T21:56:56Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Consensus to adopt #644.\n",
          "createdAt": "2014-11-24T23:26:25Z",
          "updatedAt": "2014-11-24T23:26:25Z"
        }
      ]
    },
    {
      "number": 613,
      "id": "MDU6SXNzdWU0MzA5NDc5NQ==",
      "title": "Why https://github.com/fex-team/http2-spec is trending?",
      "url": "https://github.com/httpwg/http2-spec/issues/613",
      "state": "CLOSED",
      "author": "flycatr",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The forked version (https://github.com/fex-team/http2-spec) is now trending in Github. The main repo(this repo) is more active and more commits, this is the one that should be trending.\n\nMust be something wrong with Github algorithm.\n",
      "createdAt": "2014-09-18T05:12:24Z",
      "updatedAt": "2014-09-18T11:06:58Z",
      "closedAt": "2014-09-18T11:06:58Z",
      "comments": []
    },
    {
      "number": 614,
      "id": "MDU6SXNzdWU0MzMxNjEzNQ==",
      "title": "Expect/Continue",
      "url": "https://github.com/httpwg/http2-spec/issues/614",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "editorial"
      ],
      "body": "Since we re-added 1xx, the spec doesn't say _anything_ about Expect/Continue. Implementers can find that surprising, so it's probably worth a sentence or two.\n",
      "createdAt": "2014-09-20T18:12:32Z",
      "updatedAt": "2014-09-26T12:51:17Z",
      "closedAt": "2014-09-26T12:51:17Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm struggling to find a home for this, and I just can't justify the addition of a new section for it.  We also don't mention OPTIONS *.  I make no secret of the fact that I'd rather these features didn't exist.\n\nIt doesn't directly mention it, but it does mention informational responses, and it's the only one left after 101 is removed.  How about I just say that if a pull request appears that seems reasonable, I'll take it.\n",
          "createdAt": "2014-09-23T10:46:25Z",
          "updatedAt": "2014-09-23T10:46:25Z"
        },
        {
          "author": "EugeneChung",
          "authorAssociation": "NONE",
          "body": "I think it may be helpful to add it as an example like 103. (8.1.3)\n",
          "createdAt": "2014-09-26T06:59:44Z",
          "updatedAt": "2014-09-26T06:59:44Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@mnot, would changing the example from 103 to 100 be sufficient?\n",
          "createdAt": "2014-09-26T07:03:05Z",
          "updatedAt": "2014-09-26T07:03:05Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Sure, why not.\n",
          "createdAt": "2014-09-26T09:36:48Z",
          "updatedAt": "2014-09-26T09:36:48Z"
        }
      ]
    },
    {
      "number": 618,
      "id": "MDU6SXNzdWU0MzY2ODI1NQ==",
      "title": "Clarify handling of RST_STREAM in HTTP mapping.",
      "url": "https://github.com/httpwg/http2-spec/issues/618",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "has-proposal",
        "streams"
      ],
      "body": "In HTTP/1.1 the server may respond to a request without completely reading the message body. As an example, consider returning 403 Forbidden to a large POST request. If the server does not wish to continue reading the body, it can simply close the TCP connection.\n\nIn HTTP/2, the server would send a HEADERS frame containing the 403 response with the END_STREAM flag set, leaving the stream in the half-closed (local) state.\n\nIf the server wishes to close the stream without waiting for the client to send the rest of the request body or close the stream itself (and not tear down the entire connection), its only option is to send a RST_STREAM (most likely with error code NO_ERROR).\n\nThe RST_STREAM text state that the frame is for \"abnormal termination\" of a stream and that as a receiver it is to indicate rejection, cancellation, or an error.\n\nI propose that the text around RST_STREAM be clarified that from something like \"abnormal termination\" to \"abrupt termination\" and that this case be called out as an example in the HTTP mapping section to make sure implementors treat the HTTP response as valid.\n",
      "createdAt": "2014-09-23T18:51:29Z",
      "updatedAt": "2014-10-27T23:52:38Z",
      "closedAt": "2014-10-27T23:52:38Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Consensus to adopt #624.\n",
          "createdAt": "2014-10-27T21:06:43Z",
          "updatedAt": "2014-10-27T21:06:43Z"
        }
      ]
    },
    {
      "number": 621,
      "id": "MDU6SXNzdWU0NDExNzYxMw==",
      "title": "No way to disable server push for a single request",
      "url": "https://github.com/httpwg/http2-spec/issues/621",
      "state": "CLOSED",
      "author": "stuartwdouglas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "At the moment the protocol does not allow for server push to be disabled for a single request, instead it is controlled at a connection level. This is probably fine for browsers, however it is less than idea for the load balancer case where a balancer may be dealing with HTTP1 and HTTP2 clients. In this case the balancer can either disable push for the connection, preventing its HTTP2 clients form using push, or enable it and RST_STREAM all push requests that are destined for a HTTP1 client, which wastes bandwidth and server resources. \n\nIdeally in this scenario it would be possible to disable push on a per request basis, so requests from a HTTP2 client can still use push, while requests from a HTTP1 client do not. \n\nThere are three ways I can think of to deal with this, in order or niceness:\n- Adding a new flag to the HEADERS frame to disable push for the request\n- Defining a standard header to disable push for a request\n- Use a non standard header and hope that everyone who runs into this problem uses the same one\n",
      "createdAt": "2014-09-27T00:12:32Z",
      "updatedAt": "2014-09-27T10:28:41Z",
      "closedAt": "2014-09-27T10:28:41Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "We're now beyond working group last call, and are only discussing issues with direct impact upon security and/or interoperability. Closing.\n",
          "createdAt": "2014-09-27T10:28:41Z",
          "updatedAt": "2014-09-27T10:28:41Z"
        }
      ]
    },
    {
      "number": 622,
      "id": "MDU6SXNzdWU0NDQ3MDEzMA==",
      "title": "CONTINUATION wording",
      "url": "https://github.com/httpwg/http2-spec/issues/622",
      "state": "CLOSED",
      "author": "RobbySimpson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "From the latest editors' spec:\n\"Any number of CONTINUATION frames can be sent on an existing stream, as long as the preceding frame is on the same stream and is a HEADERS, PUSH_PROMISE or CONTINUATION frame without the END_HEADERS flag set.\"\nand\n\"A CONTINUATION frame MUST be preceded by a HEADERS, PUSH_PROMISE or CONTINUATION frame without the END_HEADERS flag set.\"\n\nTo me, this could be read that the immediately preceding frame must be a HEADERS, PUSH_PROMISE, or CONTINUATION frame without the END_HEADERS flag set.  In other words, no interleaving with frames for other streams.  Is this intended?  If not, I would suggest changing to:\n\"Any number of CONTINUATION frames can be sent on an existing stream, as long as the preceding frame on the same stream is a HEADERS, PUSH_PROMISE or CONTINUATION frame without the END_HEADERS flag set.\"\nand\n\"A CONTINUATION frame MUST be preceded on the same stream by a HEADERS, PUSH_PROMISE or CONTINUATION frame without the END_HEADERS flag set.\"\n",
      "createdAt": "2014-09-30T16:44:23Z",
      "updatedAt": "2014-09-30T17:48:00Z",
      "closedAt": "2014-09-30T17:09:45Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Interleaving is not permitted.\n\n> Each header block is processed as a discrete unit. Header blocks MUST be transmitted as a contiguous sequence of frames, with no interleaved frames of any other type or from any other stream.\n\n-- https://http2.github.io/http2-spec/#HeaderBlock\n",
          "createdAt": "2014-09-30T17:09:45Z",
          "updatedAt": "2014-09-30T17:09:45Z"
        },
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "Well that was easy!  :-)\n\nOut of curiosity, why?  Bounding the memory?\n\nFrom: Martin Thomson <notifications@github.com<mailto:notifications@github.com>>\nReply-To: http2/http2-spec <reply@reply.github.com<mailto:reply@reply.github.com>>\nDate: Tuesday, September 30, 2014 at 1:09 PM\nTo: http2/http2-spec <http2-spec@noreply.github.com<mailto:http2-spec@noreply.github.com>>\nCc: Charles Simpson <Robby.Simpson@GE.com<mailto:Robby.Simpson@GE.com>>\nSubject: Re: [http2-spec] CONTINUATION wording (#622)\n\nInterleaving is not permitted.\n\nEach header block is processed as a discrete unit. Header blocks MUST be transmitted as a contiguous sequence of frames, with no interleaved frames of any other type or from any other stream.\n\n-- https://http2.github.io/http2-spec/#HeaderBlock\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/622#issuecomment-57347667.\n",
          "createdAt": "2014-09-30T17:25:59Z",
          "updatedAt": "2014-09-30T17:25:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> Out of curiosity, why? Bounding the memory?\n\nYes, and simplicity.\n",
          "createdAt": "2014-09-30T17:48:00Z",
          "updatedAt": "2014-09-30T17:48:00Z"
        }
      ]
    },
    {
      "number": 623,
      "id": "MDU6SXNzdWU0NDQ3MDM2Mg==",
      "title": "Empty HEADERS and CONTINUATION",
      "url": "https://github.com/httpwg/http2-spec/issues/623",
      "state": "CLOSED",
      "author": "RobbySimpson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "frame semantics"
      ],
      "body": "What happens if a HEADERS or CONTINUATION frame is received with a length of 0?  Is this allowed (I could not find any text either way)?\nFor DATA, I see:\n\"Frames with zero length with the END_STREAM flag set (that is, an empty DATA frame) MAY be sent if there is no available space in either flow control window.\"\nPerhaps this could be clarified one way or the other.\n",
      "createdAt": "2014-09-30T16:46:37Z",
      "updatedAt": "2014-10-07T16:54:54Z",
      "closedAt": "2014-10-07T16:45:17Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There is no restriction on size that would prevent an empty frame from being sent.  However, saying that it is valid risks suggesting that it is useful, which is not the case.  I have noted that an empty CONTINUATION might be sent at the end of a stream.  But I'd rather not talk about empty header block fragments in general: they are a DoS vector more than a legitimate construct.\n\nThe text that is cited relates to the flow control window, for which HEADERS and CONTINUATION don't apply.\n",
          "createdAt": "2014-10-07T16:42:26Z",
          "updatedAt": "2014-10-07T16:44:31Z"
        },
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "I agree (and just wasn't certain if there was a legitimate use). It seems best to explicitly forbid empty HEADERS and CONTINUATION frames (FRAME_SIZE_ERROR).\n\nSent from my iPhone - thus the tpyos and brvty\n\nOn Oct 7, 2014, at 12:42 PM, \"Martin Thomson\" <notifications@github.com<mailto:notifications@github.com>> wrote:\n\nThere is no restriction on size that would prevent an empty frame from being sent. However, saying that it is valid risks suggesting that it is useful, which is not the case. The text that is cited relates to the flow control window, for which HEADERS and CONTINUATION don't apply.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/issues/623#issuecomment-58215593.\n",
          "createdAt": "2014-10-07T16:54:54Z",
          "updatedAt": "2014-10-07T16:54:54Z"
        }
      ]
    },
    {
      "number": 633,
      "id": "MDU6SXNzdWU0NjY2ODgzNQ==",
      "title": "inconsistency re: sending window_update in reserved (remote) ",
      "url": "https://github.com/httpwg/http2-spec/issues/633",
      "state": "CLOSED",
      "author": "mcmanus",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "from the list\ni All.\n\nFirefox receives a PUSH_PROMISE  from node-http2 (speaking -14). That puts Firefox into reserved-remote and node into reserved-local.\n\nFirefox sends a WINDOW_UPDATE on that stream and node replies with GOAWAY Protocol-Error\n\nSection 5.1 of -14 has this to say:\n\nreserved (local): [..]\n\n```\nA PRIORITY frame MAY be received in this state. Receiving any type of frame other than RST_STREAM or PRIORITY on a stream in this state MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR. \n```\n\npoint to node! However it also has this to say:\n\nreserved (remote): [..]\n\n```\nAn endpoint MAY send a PRIORITY frame in this state to reprioritize the reserved stream. An endpoint MUST NOT send any type of frame other than RST_STREAM, WINDOW_UPDATE, or PRIORITY in this state. \n```\n\npoint to firefox! We're all winners here.\n\nWhich state should be changed?\n",
      "createdAt": "2014-10-23T19:54:37Z",
      "updatedAt": "2014-10-24T01:39:08Z",
      "closedAt": "2014-10-24T01:39:08Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Duplicate (#634 is easier to read, so...)\n",
          "createdAt": "2014-10-24T01:39:08Z",
          "updatedAt": "2014-10-24T01:39:08Z"
        }
      ]
    },
    {
      "number": 634,
      "id": "MDU6SXNzdWU0NjY5MTk2OQ==",
      "title": "Valid frames when in reserved state",
      "url": "https://github.com/httpwg/http2-spec/issues/634",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics",
        "has-proposal"
      ],
      "body": "_From http://www.w3.org/mid/CAOdDvNq0Wfo-VxYx47agrRAh7YnmEkbacB7HZ6pOuFNB1k_Dtg@mail.gmail.com_\n\nFirefox receives a PUSH_PROMISE  from node-http2 (speaking -14). That puts Firefox into reserved-remote and node into reserved-local.\n\nFirefox sends a WINDOW_UPDATE on that stream and node replies with GOAWAY Protocol-Error\n\nSection 5.1 of -14 has this to say:\n\n> reserved (local): [..]\n> A PRIORITY frame MAY be received in this state. Receiving any type of frame other than RST_STREAM or PRIORITY on a stream in this state MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.\n\npoint to node! However it also has this to say:\n\n> reserved (remote): [..]\n> An endpoint MAY send a PRIORITY frame in this state to reprioritize the reserved stream. An endpoint MUST NOT send any type of frame other than RST_STREAM, WINDOW_UPDATE, or PRIORITY in this state.\n\npoint to firefox! We're all winners here.\n\nWhich state should be changed?\n",
      "createdAt": "2014-10-24T00:06:56Z",
      "updatedAt": "2014-10-27T21:19:55Z",
      "closedAt": "2014-10-27T21:19:55Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Consensus to adopt #635.\n",
          "createdAt": "2014-10-27T21:08:49Z",
          "updatedAt": "2014-10-27T21:08:49Z"
        }
      ]
    },
    {
      "number": 636,
      "id": "MDU6SXNzdWU0Njc3Mzk3OA==",
      "title": "Rework Huffman tables to drop '\\0' ",
      "url": "https://github.com/httpwg/http2-spec/issues/636",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "header compression",
        "revisit-upon-change"
      ],
      "body": "'\\0' is an illegal character in header fields.  But it was permitted as a delimiter when we needed to maintain ordering in the presence of the reference set.  It isn't needed any more.\n\nIf we are making breaking changes, we could use the frequency data that Google provided, but reduce the frequency of '\\0' to zero.\n\nWe could also use '\\0' as a terminating character, but that might be too disruptive.  It would make some code easier to write, but it's not without risk.\n\n(BTW, I'm closing this immediately, in line with other revisit-upon-change issues.)\n",
      "createdAt": "2014-10-24T19:19:32Z",
      "updatedAt": "2014-10-24T19:19:34Z",
      "closedAt": "2014-10-24T19:19:34Z",
      "comments": []
    },
    {
      "number": 637,
      "id": "MDU6SXNzdWU0Njk2MzU2NQ==",
      "title": "RFC1323 -> RFC7323",
      "url": "https://github.com/httpwg/http2-spec/issues/637",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "obsoleted\n",
      "createdAt": "2014-10-27T21:43:59Z",
      "updatedAt": "2014-10-27T23:00:08Z",
      "closedAt": "2014-10-27T23:00:08Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/http2/http2-spec/commit/c834efe55e2c775ae26c1b054d1fa65bb7b0cf58\n",
          "createdAt": "2014-10-27T23:00:08Z",
          "updatedAt": "2014-10-27T23:00:08Z"
        }
      ]
    },
    {
      "number": 642,
      "id": "MDU6SXNzdWU0NzkwODYxNA==",
      "title": "Allow PRIORITY on stream in any state",
      "url": "https://github.com/httpwg/http2-spec/issues/642",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "prioritisation"
      ],
      "body": " Make it so that PRIORITY can be sent on a stream in ANY state.  i.e., change so that PRIORITY is permitted in the \"idle\" state.\n",
      "createdAt": "2014-11-06T00:27:36Z",
      "updatedAt": "2014-11-22T00:57:31Z",
      "closedAt": "2014-11-22T00:57:31Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Honolulu; seems reasonable and no objection. Take to list to confirm.\n",
          "createdAt": "2014-11-12T00:01:26Z",
          "updatedAt": "2014-11-12T00:01:26Z"
        }
      ]
    },
    {
      "number": 645,
      "id": "MDU6SXNzdWU0ODk0NjY2NQ==",
      "title": "Privacy impact of connection coalescing",
      "url": "https://github.com/httpwg/http2-spec/issues/645",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "security"
      ],
      "body": "Folks in the Tor community point out that coalescing connections is a genuinely new vector for tracking users in HTTP/2.\n\nThis should be pointed out in the Privacy Considerations subsection of Security Considerations, along with mitigations.\n\nWhile we're there, more specific text about mitigating HTTP/2-specific fingerprinting would be nice.\n",
      "createdAt": "2014-11-16T05:02:27Z",
      "updatedAt": "2014-11-25T19:35:30Z",
      "closedAt": "2014-11-25T19:35:30Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@martinthomson, I've marked this as Design, but I think we can prepare a proposal pretty easily. You want to take a crack at it, or should I do a pull?\n",
          "createdAt": "2014-11-16T05:03:09Z",
          "updatedAt": "2014-11-16T05:03:21Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm happy to take input. Since I'm basically offline this week, getting a start would help lots.\n",
          "createdAt": "2014-11-18T05:54:23Z",
          "updatedAt": "2014-11-18T05:54:23Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Marked as editor-ready; please consider list feedback.\n",
          "createdAt": "2014-11-25T04:00:44Z",
          "updatedAt": "2014-11-25T04:00:44Z"
        }
      ]
    },
    {
      "number": 646,
      "id": "MDU6SXNzdWU0ODk0Njg5OA==",
      "title": "HTML5 ref",
      "url": "https://github.com/httpwg/http2-spec/issues/646",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "in http://http2.github.io/http2-spec/#rfc.section.13.2 needs to be updated, as it's now a Recommendation.\n\nAlso, I think it'd be good to reference the @whatwg \"living standard\" as the most current, rather than /TR/html5/.\n",
      "createdAt": "2014-11-16T05:06:21Z",
      "updatedAt": "2014-11-22T01:00:53Z",
      "closedAt": "2014-11-22T01:00:53Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "ref is also missing Ian Hickson as an editor, strangely. \n",
          "createdAt": "2014-11-16T05:10:41Z",
          "updatedAt": "2014-11-16T05:10:41Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Filed http://trac.tools.ietf.org/tools/xml2rfc/trac/ticket/278 (even though I suspect that's not the correct place; they don't list where to give feedback on the bibxml).\n",
          "createdAt": "2014-11-16T05:15:16Z",
          "updatedAt": "2014-11-16T05:15:16Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ian Hickson not being listed appears to be a bug in the W3C publication database.\n\nDunno why we would to cite both specs, though. In this case (we are citing a specific section) a stable reference is good.\n",
          "createdAt": "2014-11-17T06:26:08Z",
          "updatedAt": "2014-11-17T06:26:08Z"
        },
        {
          "author": "brianraymor",
          "authorAssociation": "NONE",
          "body": "If the [HTML5] reference is changed then the Section 1.8 hyperlink would probably have to be updated as well.  Based on that, my suggestion would also be to use the stable reference.\n",
          "createdAt": "2014-11-19T21:04:46Z",
          "updatedAt": "2014-11-19T21:04:46Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It'll update automatically. The W3C is currently fixing their publication database (tr.rdf), after which we can update the reference with the proper set of authors.\n",
          "createdAt": "2014-11-19T21:25:19Z",
          "updatedAt": "2014-11-19T21:25:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Rather than have an open issue, I'm just fixing this manually.  We have a recommendation that is also relatively recent, and we don't have a hard dependency on the bibliography database, so let's leave that to others to track.\n",
          "createdAt": "2014-11-22T01:00:53Z",
          "updatedAt": "2014-11-22T01:00:53Z"
        }
      ]
    },
    {
      "number": 649,
      "id": "MDU6SXNzdWU0OTgzMTYzMg==",
      "title": "Which stream error code for violating SETTINGS_MAX_CONCURRENT_STREAMS?",
      "url": "https://github.com/httpwg/http2-spec/issues/649",
      "state": "CLOSED",
      "author": "bradfitz",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "frame semantics"
      ],
      "body": "\"5.1.2 Stream Concurrency\" says about SETTINGS_MAX_CONCURRENT_STREAMS:\n\n\"Endpoints MUST NOT exceed the limit set by their peer. An endpoint that receives a HEADERS frame that causes their advertised concurrent stream limit to be exceeded MUST treat this as a stream error (Section 5.4.2)\"\n\nBut which stream error code should be used? Almost all other references to stream errors in the spec say \"treated as a stream error of type XXX\"\n",
      "createdAt": "2014-11-23T17:13:48Z",
      "updatedAt": "2014-11-30T07:22:05Z",
      "closedAt": "2014-11-30T07:22:05Z",
      "comments": [
        {
          "author": "bradfitz",
          "authorAssociation": "NONE",
          "body": "Also, if this is a stream error, what happens if the client has a CONTINUATION already in flight right behind the current-streams-violating HEADERS frame? The server would then return a stream error to the HEADERS frame, and then see the CONTINUATION frame that's not associated with an in-progress header block.\n\nI suppose a server should maintain enough state to remember that it sent a stream error on that stream ID and simply ignore any following CONTINUATION frames instead of returning a connection error? \n",
          "createdAt": "2014-11-23T17:21:14Z",
          "updatedAt": "2014-11-23T17:21:14Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The server knows that a continuation frame is coming as it is flagged in\nthe HEADERS frame.\n\nRegardless, to ensure against corrupting the compression state, even if it\nis thrown out, all HEADERS/CONTINUATION data must go through the\ncompression context unless you're closing the connection. This is even true\nfor stream IDs that are not in a valid state (though I'd hope in those\ncases that the receiver would close the connection after immediately\nsending an error).\n\nOn Sun, Nov 23, 2014 at 9:21 AM, Brad Fitzpatrick notifications@github.com\nwrote:\n\n> Also, if this is a stream error, what happens if the client has a\n> CONTINUATION already in flight right behind the current-streams-violating\n> HEADERS frame? The server would then return a stream error to the HEADERS\n> frame, and then see the CONTINUATION frame that's not associated with an\n> in-progress header block.\n> \n> I suppose a server should maintain enough state to remember that it sent a\n> stream error on that stream ID and simply ignore any following CONTINUATION\n> frames instead of returning a connection error?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/issues/649#issuecomment-64125900.\n",
          "createdAt": "2014-11-23T19:10:15Z",
          "updatedAt": "2014-11-23T19:10:15Z"
        },
        {
          "author": "bradfitz",
          "authorAssociation": "NONE",
          "body": "@grmocg, good point. My tests don't cover the case of a CONTINUATION having valuable compression context needed for future valid streams. I will update the test suite I'm building.\n",
          "createdAt": "2014-11-23T22:06:47Z",
          "updatedAt": "2014-11-23T22:06:47Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed on-list; let's go with #652.\n",
          "createdAt": "2014-11-29T08:10:32Z",
          "updatedAt": "2014-11-29T08:10:32Z"
        }
      ]
    },
    {
      "number": 662,
      "id": "MDU6SXNzdWU1MDYxOTY2Nw==",
      "title": "Add DoS considerations around open ports, CONNECT and TIME_WAIT",
      "url": "https://github.com/httpwg/http2-spec/issues/662",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal"
      ],
      "body": "See http://lists.w3.org/Archives/Public/ietf-http-wg/2014OctDec/0819.html\n",
      "createdAt": "2014-12-02T07:21:12Z",
      "updatedAt": "2015-01-27T00:44:29Z",
      "closedAt": "2015-01-27T00:44:29Z",
      "comments": []
    },
    {
      "number": 663,
      "id": "MDU6SXNzdWU1MDYxOTg4Mg==",
      "title": "Remove priority flag from HEADERS",
      "url": "https://github.com/httpwg/http2-spec/issues/663",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "frame layout",
        "revisit-upon-change"
      ],
      "body": "Now that priority can be sent any time, there is less reason to have a flag on HEADERS for priority.  Removing the flag would streamline processing of HEADERS.\n\nA change like this would make -16 implementations incompatible with any eventual -17.\n",
      "createdAt": "2014-12-02T07:24:39Z",
      "updatedAt": "2014-12-04T04:54:15Z",
      "closedAt": "2014-12-04T04:54:15Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Failed to get universal acclaim on list; marking revisit-upon-change.\n",
          "createdAt": "2014-12-04T04:54:15Z",
          "updatedAt": "2014-12-04T04:54:15Z"
        }
      ]
    },
    {
      "number": 666,
      "id": "MDU6SXNzdWU1MDkwNDgzMA==",
      "title": "no definition of \"current stream\"",
      "url": "https://github.com/httpwg/http2-spec/issues/666",
      "state": "CLOSED",
      "author": "bradfitz",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal",
        "streams"
      ],
      "body": "Editorial problem, I hope:\n\nThe spec uses the phrase \"current stream\" in two places (both related to PRIORITY), but without any definition of what that means:\n\n1) \"5.1 Stream States: ... half closed (local) ... PRIORITY frames received in this state are used to reprioritize streams that depend on the current stream.\"\n\n2) \"6.3 Priority ... Note that this frame could arrive after processing or frame sending has completed, which would cause it to have no effect on the current stream.\"\n\nI don't have alternate wording proposals because I'm not exactly sure what those sentences are trying to say.\n\nNote that I'm only talking about \"current stream\" in the singular. I see no confusion with the  use of \"current streams\" (plural) in \"6.9.2 Initial Flow Control Window Size\".\n",
      "createdAt": "2014-12-03T22:53:49Z",
      "updatedAt": "2015-01-27T00:44:10Z",
      "closedAt": "2015-01-27T00:44:10Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "\"subject stream\" or \"identified stream\" would work effectively well.  I'll take suggestions.\n",
          "createdAt": "2014-12-04T00:26:50Z",
          "updatedAt": "2014-12-04T00:26:50Z"
        },
        {
          "author": "bradfitz",
          "authorAssociation": "NONE",
          "body": "Both sound fine, but \"identified stream\" is already used often in the spec and \"subject stream\" is never used.\n",
          "createdAt": "2014-12-04T00:58:30Z",
          "updatedAt": "2014-12-04T00:58:30Z"
        },
        {
          "author": "gbbr",
          "authorAssociation": "NONE",
          "body": "Excuse me for trolling this issue but I couldn't help but notice how evil the issue number is. \n",
          "createdAt": "2014-12-04T23:26:08Z",
          "updatedAt": "2014-12-04T23:26:08Z"
        }
      ]
    },
    {
      "number": 667,
      "id": "MDU6SXNzdWU1MTM4MjIyNg==",
      "title": "section 5.1 PRIORITY frame and idle state clarification",
      "url": "https://github.com/httpwg/http2-spec/issues/667",
      "state": "CLOSED",
      "author": "Scottmitch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal"
      ],
      "body": "[section 5.1](https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-5.1) has the following text:\n\n> idle:\n>       All streams start in the \"idle\" state.  In this state, no frames\n>       have been exchanged.\n\nIt seems like PRIORITY frames can be sent/received in the IDLE state without causing a state transition as illustrated in [figure 2](http://http2.github.io/http2-spec/#StreamStatesFigure).  If I am interpreting this correctly then the `no frames have been exchanged` statement is not necessarily correct if PRIORITY frames have been exchanged.\n",
      "createdAt": "2014-12-09T02:56:48Z",
      "updatedAt": "2015-02-11T23:30:05Z",
      "closedAt": "2015-02-11T23:30:05Z",
      "comments": [
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Any thoughts for the preferred way to clarify this?  Removing the `In this state, no frames have been exchanged.` statement will be sufficient but we may then be missing the original meaning this sentence was meant to convey.\n",
          "createdAt": "2015-01-12T18:41:14Z",
          "updatedAt": "2015-01-12T18:41:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #684\n",
          "createdAt": "2015-02-11T23:30:04Z",
          "updatedAt": "2015-02-11T23:30:04Z"
        }
      ]
    },
    {
      "number": 668,
      "id": "MDU6SXNzdWU1MTM4Njg0Nw==",
      "title": "existing stream terminology clarification",
      "url": "https://github.com/httpwg/http2-spec/issues/668",
      "state": "CLOSED",
      "author": "Scottmitch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal",
        "streams"
      ],
      "body": "[section 6.1](https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-6.3) uses some under specified `existing stream` termonlogy:\n\n> The PRIORITY frame is associated with an existing stream\n\nFor example is `existing` for a PRIORITY frame which can be sent/received in the any state the same as `existing` in the following contexts:\n\n[section-6.5.2](https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-6.5.2)\n\n> This setting affects the window size of all streams, including\n>       existing streams, see Section 6.9.2.\n\n[section-6.6](https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-6.6)\n\n> PUSH_PROMISE frames MUST be associated with an existing, peer-\n>    initiated stream.\n\n[section-6.10](https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-6.10)\n\n> Any number of CONTINUATION\n>    frames can be sent on an existing stream, as long as the preceding\n>    frame is on the same stream and is a HEADERS, PUSH_PROMISE or\n>    CONTINUATION frame without the END_HEADERS flag set.\n\nCan `existing stream` be translated to the stream's state?  For example does it roughly mean `a stream in any state where at least 1 valid frame has been sent/received`?  If so then the usage in the PRIORITY frame section is a bit more confusing because a PRIORITY frame could be the first valid frame sent/received for a stream.\n",
      "createdAt": "2014-12-09T04:28:00Z",
      "updatedAt": "2015-01-27T00:44:10Z",
      "closedAt": "2015-01-27T00:44:10Z",
      "comments": [
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "@martinthomson - Thanks for the clarification!\n",
          "createdAt": "2014-12-09T19:30:36Z",
          "updatedAt": "2014-12-09T19:30:36Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "@martinthomson - I do have a question regarding your clarifications to the SETTING frame (specifically the SETTINGS_INITIAL_WINDOW_SIZE portion).\n\n> This setting affects the window size of all streams in the \"open\" or \"half-closed (remote)\" states \n\nIt seems a bit confusing if a PRIORITY frame has been exchanged on an IDLE stream for the SETTINGS_INITIAL_WINDOW_SIZE not to apply to it. Consider the following example:\n1) Stream `A` is in the `idle` state (no frames exchanged)\n2) A PRIORITY frame for stream `A` is received.\n3) A SETTINGS frame is received to update SETTINGS_INITIAL_WINDOW_SIZE.\n...\n4) Stream `A` transitions into the `open` state.\n\nIs seems a bit counter intuitive that stream `A`'s window will be the window size prior to step 3.  Just imagine there are many more SETTINGS frames exchanged (and other events) before step 4...then stream `A`'s window will be even more difficult to understand how it got to where it is.\n",
          "createdAt": "2014-12-11T16:41:31Z",
          "updatedAt": "2014-12-11T16:43:25Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That's a fair point.  The current text is:\n\n> A SETTINGS frame can alter the initial flow control window size for all streams in the \"open\" or \"half closed (remote)\" state.\n\nFrom this, you might infer that a reserved or idle stream isn't affected.\n\nImplicit in here is that you don't actually have an active flow control window until streams are in those states.  There is no sense in performing any accounting until you are actually sending, right?  But then, it's only accounting and that 32-bit number might be allocated and used in some implementations.  So, I think that this can be clarified, rather than rely on people only accounting in those states, the text might be better saying:\n\n> A SETTINGS frame can alter the initial flow control window size for all streams.  This includes streams in the \"open\" or \"half closed (remote)\" states, where accounting for flow control is active and flow controlled frames might have been sent.\n\nDoes that make more sense?\n",
          "createdAt": "2014-12-11T18:30:16Z",
          "updatedAt": "2014-12-11T18:30:16Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "This does make more sense.\n\nOn a related note...what is the rational to prohibit WINDOW_UPDATES on the IDLE streams when PRIORITY frames have been exchanged?  It seems like if a stream is allowed to be put into the priority tree (via a PRIORITY message) and its window size controllable (via SETTINGS) then why would a WINDOW_UPDATE also not be allowed?  I look to the following statement\n\n> There is no sense in performing any accounting until you are actually sending, right?\n\nand think that accounting may already be required to track the PRIORITY and SETTINGS updates. The WINDOW_UPDATE accounting seems like it is very similar (or may be close to identical depending on the implementation).\n",
          "createdAt": "2014-12-11T18:44:26Z",
          "updatedAt": "2014-12-11T18:44:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We want to strictly limit the amount of state that is maintained for non-open streams.  Currently, that is limited to priority.  Opening that to more state isn't really necessary.  For WINDOW_UPDATE, there is only the case where you want to open the flow control window immediately after opening a stream, which currently causes a potential stall on the remote/sender side.\n\nAs specified, you can create a priority graph that is separate from the other stream state (flow control in particular).  If we allowed WINDOW_UPDATE in idle (or reserved), then you need to commit more state.  We already acknowledge that priority information needs special handling outside of the key stream states, so the risk is both accounted for, and already present.\n\nThe most important factor though is that priority is expendable.  Under DoS, you can drop priority on the floor.  You can't do the same for flow control.  Therefore, any state commitment needs to be strictly bounded for that.\n",
          "createdAt": "2014-12-11T19:07:09Z",
          "updatedAt": "2014-12-11T19:07:09Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "> For WINDOW_UPDATE, there is only the case where you want to open the flow control window immediately after opening a stream, which currently causes a potential stall on the remote/sender side.\n\nRight.  So for these cases the peer creating the stream will have to wait to expand (or shrink) the window until after the stream has transitioned out of the IDLE state. So state may not be _required_ however if a peer wants to change the window for that stream then state will be necessary to keep and act upon when the state transition occurs.\n\n> If we allowed WINDOW_UPDATE in idle (or reserved), then you need to commit more state. \n\nI\"m not sure I follow. WINDOW_UPDATE is allowed in reserved according to [section 5.1](https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-5.1).\n\n> The most important factor though is that priority is expendable. Under DoS, you can drop priority on the floor.\n\nPriority is an interesting portion of the spec.  It almost seems like you could ignore priority all together and be compliant :)\n\n[section-5.3.4](https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-5.3.4)\n\n> The amount of additional state an endpoint maintains for\n>    prioritization could be dependent on load; under high load,\n>    prioritization state can be discarded to limit resource commitments.\n>    In extreme cases, an endpoint could even discard prioritization state\n>    for active or reserved streams. If a limit is applied, endpoints\n>    SHOULD maintain state for at least as many streams as allowed by\n>    their setting for SETTINGS_MAX_CONCURRENT_STREAMS.  Implementations\n>    SHOULD also attempt to retain state for streams that are in active\n>    use in the priority tree.\n\n[section-5.3](https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-5.3)\n\n> An endpoint cannot force a peer to process concurrent\n>    streams in a particular order using priority.  Expressing priority is\n>    therefore only ever a suggestion.\n",
          "createdAt": "2014-12-11T21:05:32Z",
          "updatedAt": "2014-12-11T21:50:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> I\"m not sure I follow. WINDOW_UPDATE is allowed in reserved according to section 5.1.\n\nHmm, strange how you forget these things.  Yes, you can send WINDOW_UPDATE in \"reserved (remote)\". This allows a client to affect the flow control window of the server that has promised a push.\n\nThis is something that I know Firefox uses so that it can resume stalled pushes when it knows that they are needed.  No extra credits over the initial window size are given to pushed streams until they are recognized as necessary.\n\nYou can't send WINDOW_UPDATE in \"reserved (local)\".  After all, the other side (the client) won't be sending anything on that stream.  So none of this really affects processing of the setting :)\n",
          "createdAt": "2014-12-11T22:29:32Z",
          "updatedAt": "2014-12-11T22:29:32Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "I think I agree with you in general (it is not necessary).  I agree that minimizing state on IDLE streams seems like more of a driving force, and I also recognize that the peer can wait to send WINDOW_UPDATES until transitioning out of IDLE.\n\nI can also imaging a scenario that if an endpoint puts the node into a priority tree, it is possible they have an estimate of what they are going to be sending.  It may then follow the theme of \"a more flexible expressions of priority\" (from [section-5.3.4](https://tools.ietf.org/html/draft-ietf-httpbis-http2-16#section-5.3.4)) to also be able to control the window of those streams (at a finer granularity than the SETTINGS frame).\n\nAnyways thanks for the discussion and clarification.\n",
          "createdAt": "2014-12-11T22:53:38Z",
          "updatedAt": "2014-12-11T22:53:38Z"
        }
      ]
    },
    {
      "number": 671,
      "id": "MDU6SXNzdWU1MzMyNTAwNQ==",
      "title": "Editorial Fix \"an\" \u2013> \"and\"",
      "url": "https://github.com/httpwg/http2-spec/issues/671",
      "state": "CLOSED",
      "author": "pducks32",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hey so I have a bunch of typos I found and this is one,\n\"an\" \u2013> \"and\" in the \"Limits on Header Block Size\" section\n",
      "createdAt": "2015-01-04T04:36:15Z",
      "updatedAt": "2015-01-04T17:57:35Z",
      "closedAt": "2015-01-04T17:57:35Z",
      "comments": []
    },
    {
      "number": 673,
      "id": "MDU6SXNzdWU1MzkwNTI4NA==",
      "title": "Proposal: 'Fragment-Scope' header to control application of fragments after redirects",
      "url": "https://github.com/httpwg/http2-spec/issues/673",
      "state": "CLOSED",
      "author": "hillbrad",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "A recurring weakness with OAuth and related capability URL usages (http://www.w3.org/TR/capability-urls/) is the reapplication of URL fragments on redirects:\n\nhttp://tools.ietf.org/html/rfc7231#section-9.5\n\nThis behavior is frequently abused in combination with resources that act as open redirectors to leak sensitive information in a fragment.\n\nI would like to suggest an additional header, 'Fragment-Scope' that could be sent with a Location header on a 3xx to control the disposition of a fragment after a redirect.  Values would be 'no-redirect' which would instruct the user agent to discard the fragment on any subsequent redirect, or 'same-origin' which would discard the fragment after any non-same-origin redirect.  The scope rule, once set, would remain until the user agent terminates following redirects. (so a 'same-origin' policy could not be stripped by redirecting to a second open-redirector in the same origin, and then off-origin from there)\n",
      "createdAt": "2015-01-09T19:30:29Z",
      "updatedAt": "2015-01-09T20:05:33Z",
      "closedAt": "2015-01-09T19:37:07Z",
      "comments": [
        {
          "author": "hillbrad",
          "authorAssociation": "NONE",
          "body": "@isciurus\n",
          "createdAt": "2015-01-09T19:34:19Z",
          "updatedAt": "2015-01-09T19:34:19Z"
        },
        {
          "author": "hillbrad",
          "authorAssociation": "NONE",
          "body": "Wrong repo, sorry.\n",
          "createdAt": "2015-01-09T19:37:07Z",
          "updatedAt": "2015-01-09T19:37:07Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Brought up on-list:\n  http://www.w3.org/mid/1678D864-FFE3-447F-BC35-F5487E48123A@mnot.net\n",
          "createdAt": "2015-01-09T20:05:33Z",
          "updatedAt": "2015-01-09T20:05:33Z"
        }
      ]
    },
    {
      "number": 674,
      "id": "MDU6SXNzdWU1Mzk5MzQ0Ng==",
      "title": "augment FIPS186 citation with document link",
      "url": "https://github.com/httpwg/http2-spec/issues/674",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "<reference anchor=\"FIPS186\" target=\"http://dx.doi.org/10.6028/NIST.FIPS.186-4\">\n",
      "createdAt": "2015-01-11T14:41:22Z",
      "updatedAt": "2015-01-12T21:15:18Z",
      "closedAt": "2015-01-12T21:15:18Z",
      "comments": []
    },
    {
      "number": 676,
      "id": "MDU6SXNzdWU1NDEwODA0NA==",
      "title": "Mandate error for violation of maximum compression table size",
      "url": "https://github.com/httpwg/http2-spec/issues/676",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-proposal",
        "header compression"
      ],
      "body": "I think that this is editorial, but we need to be super careful here.\n\nSee http://www.w3.org/mid/D0D94EF7.3E28E%25Robby.Simpson@GE.com\n",
      "createdAt": "2015-01-12T21:18:17Z",
      "updatedAt": "2015-02-05T10:35:51Z",
      "closedAt": "2015-02-05T10:35:51Z",
      "comments": []
    },
    {
      "number": 677,
      "id": "MDU6SXNzdWU1NDEwOTQ3OQ==",
      "title": "Properly qualify extension section.",
      "url": "https://github.com/httpwg/http2-spec/issues/677",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal"
      ],
      "body": ">  Maybe clarify that this [extension] only applies to the extension points specific to the HTTP/2 wire format.\n\nSee http://www.w3.org/mid/54B3FB92.3010506@gmx.de\n",
      "createdAt": "2015-01-12T21:30:54Z",
      "updatedAt": "2015-01-27T00:47:59Z",
      "closedAt": "2015-01-27T00:47:59Z",
      "comments": []
    },
    {
      "number": 679,
      "id": "MDU6SXNzdWU1NDIyMjEwMw==",
      "title": "New safe methods",
      "url": "https://github.com/httpwg/http2-spec/issues/679",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal",
        "server push"
      ],
      "body": "> If a client receives a PUSH_PROMISE that does not include a complete \n> and valid set of header fields, or the :method header field identifies a \n> method that is not safe, it MUST respond with a stream error (Section \n> 5.4.2) of type PROTOCOL_ERROR.\n\nNew safe methods can be defined. Does this mean that the client needs to \nrespond with a stream error for methods _not known to be safe_?\n\nSee http://www.w3.org/mid/54B53822.2020104@gmx.de\n",
      "createdAt": "2015-01-13T17:29:31Z",
      "updatedAt": "2015-01-27T00:48:12Z",
      "closedAt": "2015-01-27T00:48:12Z",
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That would be the only logical conclusion. If the client cannot determine if the method is safe, it must assume that it is not.\n",
          "createdAt": "2015-01-13T17:41:33Z",
          "updatedAt": "2015-01-13T17:41:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Indeed.  We just need to fix it.\n",
          "createdAt": "2015-01-13T17:47:47Z",
          "updatedAt": "2015-01-13T17:47:47Z"
        }
      ]
    },
    {
      "number": 680,
      "id": "MDU6SXNzdWU1NDIyNjE1Nw==",
      "title": "Not compressing as much as we claim",
      "url": "https://github.com/httpwg/http2-spec/issues/680",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal"
      ],
      "body": "> HTTP/2 enables greater use of compression for both header fields (Section 4.3) and entity bodies.\n\nThe latter part is vestigal, from the time when gzip C-E was mandated.  Remove it.\n\n> HTTP/2 provides compression features that are more aware of context and therefore likely to be more appropriate for use for performance, security or other reasons.\n\nHere, I'm less concerned.\n",
      "createdAt": "2015-01-13T18:04:02Z",
      "updatedAt": "2015-01-27T00:48:21Z",
      "closedAt": "2015-01-27T00:48:21Z",
      "comments": []
    },
    {
      "number": 681,
      "id": "MDU6SXNzdWU1NDcxMDI4Mg==",
      "title": "Scrub for \"optional\"",
      "url": "https://github.com/httpwg/http2-spec/issues/681",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal"
      ],
      "body": "Only if it makes sense to do so.  It's a perfectly good word that has been spoiled by an unnecessary inclusion in some popular RFC (2119, I think).\n",
      "createdAt": "2015-01-18T21:10:45Z",
      "updatedAt": "2015-01-27T00:48:30Z",
      "closedAt": "2015-01-27T00:48:30Z",
      "comments": []
    },
    {
      "number": 682,
      "id": "MDU6SXNzdWU1NDcxMDM4OQ==",
      "title": "PRI is safe and idempotent",
      "url": "https://github.com/httpwg/http2-spec/issues/682",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-proposal"
      ],
      "body": "There seems to be some disagreement about this, but I think that Roy is right.  It's not critical how it is registered, since it shouldn't appear in a valid request anywhere, but it meets the criteria.\n",
      "createdAt": "2015-01-18T21:13:56Z",
      "updatedAt": "2015-01-27T00:48:37Z",
      "closedAt": "2015-01-27T00:48:37Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I really don't think it matters, so I'm fine with it either way.  Theoretically, there may be some compat value in having it listed as safe/idempotent since an intermediary may be more likely to let such methods pass.  But the time slice in which this registry has existed and HTTP/2 hasn't will be miniscule -- I expect any HTTP/2-unaware intermediary won't look at the registry values either.\n",
          "createdAt": "2015-01-19T18:10:03Z",
          "updatedAt": "2015-01-19T18:10:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "To the extent that it matters (i.e., very little, as you point out), I think that the intermediary example weakens the case for safe+idempotent.  I really don't want HTTP/2 to pass an intermediary without triggering some deliberate recognition; that has been the source of some very serious bugs in the past.\n",
          "createdAt": "2015-01-20T02:08:09Z",
          "updatedAt": "2015-01-20T02:08:09Z"
        }
      ]
    },
    {
      "number": 691,
      "id": "MDU6SXNzdWU1NDcxOTc3Mg==",
      "title": "Error code not defined for GOAWAY frames smaller than 8 octets?",
      "url": "https://github.com/httpwg/http2-spec/issues/691",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "For most frames the spec. is clear on which error code should be sent.  For example, 6.9 states:\n\n> A WINDOW_UPDATE frame with a length other than 4 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR.\n\nBut such definition does not seem to exist for GOAWAY (6.8).\n",
      "createdAt": "2015-01-19T02:07:09Z",
      "updatedAt": "2015-01-19T04:59:17Z",
      "closedAt": "2015-01-19T04:52:31Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> An endpoint MUST send a FRAME_SIZE_ERROR error if a frame exceeds the size defined in SETTINGS_MAX_FRAME_SIZE, any limit defined for the frame type, or it is too small to contain mandatory frame data.\n> -- http://http2.github.io/http2-spec/#FrameSize\n",
          "createdAt": "2015-01-19T04:52:11Z",
          "updatedAt": "2015-01-19T04:52:11Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "Thank you for the clarification.  I must have missed it.\n",
          "createdAt": "2015-01-19T04:59:17Z",
          "updatedAt": "2015-01-19T04:59:17Z"
        }
      ]
    },
    {
      "number": 695,
      "id": "MDU6SXNzdWU1NDkyOTgxMw==",
      "title": "COMPRESSION_ERROR language",
      "url": "https://github.com/httpwg/http2-spec/issues/695",
      "state": "CLOSED",
      "author": "RobbySimpson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "(Editorial)\n\ndraft-ietf-httpbis-http2 states (Section 4.3):\n\"A receiver MUST terminate the connection with a connection error (Section 5.4.1) of type COMPRESSION_ERROR if it does not decompress a header block. \"\nThis is the only real discussion of COMPRESSION_ERROR.\n\ndraft-ietf-httpbis-header-compression mentions decoding errors four times:\n(2.3.3):\n\"Indices strictly greater than the sum of the lengths of both tables MUST be treated as a decoding error.\"\n(5.1):\n\"Excessively large integer encodings - in value or octet length - MUST be treated as a decoding error.\"\n(5.2):\n\"A padding strictly longer than 7 bits MUST be treated as a decoding error. A padding not corresponding to the most significant bits of the code for the EOS symbol MUST be treated as a decoding error. A Huffman encoded string literal containing the EOS symbol MUST be treated as a decoding error.\"\n(6.1):\n\"The index value of 0 is not used. It MUST be treated as a decoding error if found in an indexed header field representation.\"\n\nSince draft-ietf-httpbis-header-compression consistently uses the phrase \"decoding error,\" I would suggest we incorporate this phrase into the language in draft-ietf-httpbis-http2 to be explicitly clear.\n\nI'll attempt a PR to suggest a (minor) edit.\n",
      "createdAt": "2015-01-20T19:47:01Z",
      "updatedAt": "2015-02-04T04:41:03Z",
      "closedAt": "2015-02-04T04:41:03Z",
      "comments": [
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "Submitted PR #696 \n",
          "createdAt": "2015-01-20T20:02:01Z",
          "updatedAt": "2015-01-20T20:02:01Z"
        },
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "BTW: This is my first PR on the spec, so go with caution and feedback is appreciated.\n",
          "createdAt": "2015-01-20T20:02:33Z",
          "updatedAt": "2015-01-20T20:02:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #699\n",
          "createdAt": "2015-02-04T04:41:03Z",
          "updatedAt": "2015-02-04T04:41:03Z"
        }
      ]
    },
    {
      "number": 713,
      "id": "MDU6SXNzdWU1NzE3MDUxMQ==",
      "title": "RFC 2119 disclaimer has an erratum",
      "url": "https://github.com/httpwg/http2-spec/issues/713",
      "state": "CLOSED",
      "author": "GPHemsley",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "http://www.rfc-editor.org/errata_search.php?eid=499\n",
      "createdAt": "2015-02-10T12:50:31Z",
      "updatedAt": "2015-02-11T11:30:29Z",
      "closedAt": "2015-02-10T14:45:02Z",
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How is this a problem of the HTTP/2 specs?\n",
          "createdAt": "2015-02-10T14:45:02Z",
          "updatedAt": "2015-02-10T14:45:02Z"
        },
        {
          "author": "GPHemsley",
          "authorAssociation": "NONE",
          "body": "https://http2.github.io/http2-spec/index.html#rfc.section.2.2\n",
          "createdAt": "2015-02-11T02:11:17Z",
          "updatedAt": "2015-02-11T02:11:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Using \"NOT RECOMMENDED\" is NOT RECOMMENDED.  I think we're OK.\n",
          "createdAt": "2015-02-11T05:28:25Z",
          "updatedAt": "2015-02-11T05:28:25Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "IDNITS is happy with it, so am I.\n",
          "createdAt": "2015-02-11T11:30:29Z",
          "updatedAt": "2015-02-11T11:30:29Z"
        }
      ]
    },
    {
      "number": 715,
      "id": "MDU6SXNzdWU1NzMzMjkwMQ==",
      "title": "Editorial Changes on httpbis-http2-16",
      "url": "https://github.com/httpwg/http2-spec/issues/715",
      "state": "CLOSED",
      "author": "edburns",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Just completed a read through of httpbis-http2-16 and have some editorial changes.\n",
      "createdAt": "2015-02-11T15:45:11Z",
      "updatedAt": "2015-02-13T03:57:28Z",
      "closedAt": "2015-02-11T23:27:32Z",
      "comments": [
        {
          "author": "edburns",
          "authorAssociation": "NONE",
          "body": "Will create pull request from branch H2-16-715-Editorial.\n",
          "createdAt": "2015-02-11T15:47:58Z",
          "updatedAt": "2015-02-11T15:47:58Z"
        },
        {
          "author": "edburns",
          "authorAssociation": "NONE",
          "body": "I have created Pull Request 08c4b13 for this.\n",
          "createdAt": "2015-02-11T19:55:18Z",
          "updatedAt": "2015-02-11T19:55:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the input.  Ordinarily, I'd take most of the changes.  The document is going to the RFC editor now, so our ability to take changes is extremely limited.  I don't see anything critical, so I'm going to close these.\n",
          "createdAt": "2015-02-11T23:27:28Z",
          "updatedAt": "2015-02-11T23:27:28Z"
        },
        {
          "author": "edburns",
          "authorAssociation": "NONE",
          "body": "Thanks for your response.  Naturally I'll abide by your ruling, but I would like to know what will become of the changes?  Will they eventually make it into the document or will the errors corrected by this pull request be in the final RFC?\n",
          "createdAt": "2015-02-12T17:34:04Z",
          "updatedAt": "2015-02-12T17:34:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I have a final chance to make some editorial changes once the RFC editor has gone through the document.  There are a few here that seem valuable, so I'll try to ensure that I get then.  Some of the changes are, I think, not necessary, but others are clearly addressing grammatical errors and the like.  In the end, it depends on what other changes the RFC editor makes as to whether they are needed.\n",
          "createdAt": "2015-02-12T23:00:27Z",
          "updatedAt": "2015-02-12T23:00:27Z"
        },
        {
          "author": "edburns",
          "authorAssociation": "NONE",
          "body": "This is great news. I have one other one in another branch. I&#39;ll file an issue and submit a pull request. I appreciate your consideration. \n\nEd\n",
          "createdAt": "2015-02-13T03:57:28Z",
          "updatedAt": "2015-02-13T03:57:28Z"
        }
      ]
    },
    {
      "number": 717,
      "id": "MDU6SXNzdWU1NzU1Njg5NQ==",
      "title": "State how the client chooses to accept the push response",
      "url": "https://github.com/httpwg/http2-spec/issues/717",
      "state": "CLOSED",
      "author": "edburns",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "There are two places in the text where I felt readability would benefit by an explicit mention of the use of RST_STREAM to cancel a response referenced by a PUSH_PROMISE frame.\n",
      "createdAt": "2015-02-13T04:07:52Z",
      "updatedAt": "2015-02-13T05:01:45Z",
      "closedAt": "2015-02-13T05:01:45Z",
      "comments": [
        {
          "author": "edburns",
          "authorAssociation": "NONE",
          "body": "I have created pull request af985e9 for this.\n",
          "createdAt": "2015-02-13T04:12:39Z",
          "updatedAt": "2015-02-13T04:12:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "It's usually enough to just open the PR.\n",
          "createdAt": "2015-02-13T05:01:45Z",
          "updatedAt": "2015-02-13T05:01:45Z"
        }
      ]
    },
    {
      "number": 721,
      "id": "MDU6SXNzdWU2MjIyNjg1MQ==",
      "title": "HEADERS in \"idle\"",
      "url": "https://github.com/httpwg/http2-spec/issues/721",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "RFC-editor"
      ],
      "body": "Minor bug that needs to be tracked...\n\n> From 6.2:\n> HEADERS frames can be sent on a stream in the \"open\" or \"half closed (remote)\" states.\n\nI assume the text in section 6.2 needs to be modified to add \"idle\"?\n",
      "createdAt": "2015-03-16T22:41:03Z",
      "updatedAt": "2015-05-04T16:30:18Z",
      "closedAt": "2015-05-04T16:30:18Z",
      "comments": []
    },
    {
      "number": 722,
      "id": "MDU6SXNzdWU2MjIyNjk1OA==",
      "title": "Reformat cipher suite list",
      "url": "https://github.com/httpwg/http2-spec/issues/722",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "RFC-editor"
      ],
      "body": "Just so I don't forget, make this a proper list rather than a comma-separated blob (the latter is hard to scan).\n",
      "createdAt": "2015-03-16T22:41:41Z",
      "updatedAt": "2015-05-04T16:30:08Z",
      "closedAt": "2015-05-04T16:30:08Z",
      "comments": []
    },
    {
      "number": 723,
      "id": "MDU6SXNzdWU2MjIzMjQ2Nw==",
      "title": "Fix padding descriptions",
      "url": "https://github.com/httpwg/http2-spec/issues/723",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "RFC-editor"
      ],
      "body": "This wasn't obvious, but all descriptions of padding reference DATA:\n\n> If the length of the padding is the length of the frame payload or greater, the recipient MUST treat this as a connection error (Section 5.4.1) of type PROTOCOL_ERROR. \n\nHowever, this is subtly wrong, as @daurnimator notes.  The actual text should be:\n\n> If the length of the padding exceeds the length of the data (for HEADERS, the header block), then the recipient MUST ...\n",
      "createdAt": "2015-03-16T23:09:41Z",
      "updatedAt": "2015-05-04T16:30:34Z",
      "closedAt": "2015-05-04T16:30:34Z",
      "comments": []
    },
    {
      "number": 726,
      "id": "MDU6SXNzdWU2MjI0MDMzOQ==",
      "title": "push_promise frame state clarification",
      "url": "https://github.com/httpwg/http2-spec/issues/726",
      "state": "CLOSED",
      "author": "Scottmitch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "RFC-editor"
      ],
      "body": "[section-6.6](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-6.6) has the following clarification added in draft 17:\n\n> PUSH_PROMISE frames MUST be associated with a peer-initiated stream\n>    that is in either the \"open\" or \"half closed (remote)\" state.\n\nShould this be `half closed (local)` instead of `half closed (remote)`?\n\nIf not I think we have an inconsistency with [section 5.1](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-5.1) which has the following for the `half closed (remote)` section:\n\n> half closed (remote):\n>       A stream that is \"half closed (remote)\" is no longer being used by\n>       the peer to send frames.  In this state, an endpoint is no longer\n>       obligated to maintain a receiver flow control window.\n> \n> If an endpoint receives additional frames for a stream that is in\n>       this state, other than WINDOW_UPDATE, PRIORITY or RST_STREAM, it\n>       MUST respond with a stream error (Section 5.4.2) of type\n>       STREAM_CLOSED.\n",
      "createdAt": "2015-03-16T23:53:14Z",
      "updatedAt": "2015-05-04T16:29:37Z",
      "closedAt": "2015-05-04T16:29:37Z",
      "comments": [
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "@martinthomson - Ping.\n",
          "createdAt": "2015-03-22T17:19:35Z",
          "updatedAt": "2015-03-22T17:19:35Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is merely a problem with perspective.  As in, there is none.  I can provide that thusly:\n\n>   PUSH_PROMISE frames MUST be sent on a peer-initiated stream\n>    that is in either the \"open\" or \"half closed (remote)\" state.\n\nDoes that work?\n",
          "createdAt": "2015-03-22T19:25:26Z",
          "updatedAt": "2015-03-22T19:25:26Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "This is an improvement. I'm not sure if we can avoid it but it is a bit confusing with respect to [section 5.1](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-5.1):\n\n> A stream that is \"half closed (remote)\" is no longer being used by\n>       the peer to send frames.\n",
          "createdAt": "2015-03-23T12:07:04Z",
          "updatedAt": "2015-03-23T12:07:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think that's a problem.  The (remote) peer isn't sending, but the (local) peer can.\n",
          "createdAt": "2015-03-23T14:18:35Z",
          "updatedAt": "2015-03-23T14:18:35Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Agreed. Ship it :) Thanks!\n",
          "createdAt": "2015-03-23T17:19:02Z",
          "updatedAt": "2015-03-23T17:19:02Z"
        }
      ]
    },
    {
      "number": 727,
      "id": "MDU6SXNzdWU2MjI3NDM5OA==",
      "title": "initial flow control window size state clarification",
      "url": "https://github.com/httpwg/http2-spec/issues/727",
      "state": "CLOSED",
      "author": "Scottmitch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "RFC-editor"
      ],
      "body": "[section 6.9.2](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-6.9.2) has the following text:\n\n> A SETTINGS frame can alter the initial flow control window size for\n>    all streams in the \"open\" or \"half closed (remote)\" state.  When the\n>    value of SETTINGS_INITIAL_WINDOW_SIZE changes, a receiver MUST adjust\n>    the size of all stream flow control windows that it maintains by the\n>    difference between the new value and the old value.\n\nDraft 17 added the changed `current streams` to `streams in the \"open\" or \"half closed (remote)\" state`.  Can someone clarify why would streams in other states be excluded?\n",
      "createdAt": "2015-03-17T03:38:58Z",
      "updatedAt": "2016-11-25T00:58:05Z",
      "closedAt": "2015-05-04T16:29:47Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Those are the only states in which data (or DATA) can be sent.\n",
          "createdAt": "2015-03-17T04:12:06Z",
          "updatedAt": "2015-03-17T04:12:06Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Does your stream have to be eligible for data to be sent to have its windows manipulated?  For example are IDLE streams intentionally excluded?  Would this mean that the initial settings frame wouldn't apply to any streams?  I think it may make sense to be able to alter window sizes of streams in other states because of dependencies/priorities and how the windows are distributed amongst the tree.\n",
          "createdAt": "2015-03-17T04:18:11Z",
          "updatedAt": "2015-03-17T04:18:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "While it is true than an idle stream is affected, the text there is to highlight the fact that streams with _active_ flow control windows (i.e., ones that might be in use) might be affected.\n",
          "createdAt": "2015-03-17T16:46:11Z",
          "updatedAt": "2015-03-17T16:46:11Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Is it possible to clarify this?  I think there are a few options:\n1. If we are going to explicitly call out states: we should call out all states where it could possibly impact streams.\n2. If we are not going to explicitly call out states: Use a description which implies stream state which is defined elsewhere in the spec.  Something like: `all future streams and any stream subject to flow control or in the flow control dependency tree.`  Note this is just an example...\n\nThe current text in the specification is in conflict with this clarification you have provided in this issue.  It seems like the following sentence in the spec may be sufficient by itself?\n",
          "createdAt": "2015-03-17T17:04:35Z",
          "updatedAt": "2015-03-17T17:05:08Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "@martinthomson - Ping.\n",
          "createdAt": "2015-03-22T17:19:39Z",
          "updatedAt": "2015-03-22T17:19:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> In addition to changing the flow control window for future streams, a SETTINGS frame can alter the initial flow control window size for streams with active flow control windows (that is, streams in the \"open\" or \"half closed (remote)\" state). \n",
          "createdAt": "2015-03-22T19:29:50Z",
          "updatedAt": "2015-03-22T19:29:50Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "The inclusion of stream state in your clerical response leads me to another question related to the priority tree, stream state, and flow control windows.  [Section 5.3.2](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-5.3.2) indicates that `Streams with the same parent SHOULD be allocated resources proportionally based on their weight`.  The flow control window is a resource which can be divided amongst nodes in the priority tree.  However the `PRIORITY` frame can be sent/received in all states, but the `WINDOW_UPDATE` frame is more restrictive in its allowed states.  This discrepancy makes controlling the resource (the window) difficult (i.e. providing a mechanism to avoid deadlock).  Is there any way to clarify or allow the resource (the window) to be controlled adequately along with priority?\n",
          "createdAt": "2015-03-23T11:49:40Z",
          "updatedAt": "2015-03-23T12:11:07Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "As far as it goes, yes, a server might allocate flow control window based on priority.  But that only applies to the logic that an implementation uses to decide how to allocate credit to flow control windows, which is intentionally (and expressly) unspecified.  I don't think that it needs a special call-out.\n",
          "createdAt": "2015-03-23T14:17:15Z",
          "updatedAt": "2015-03-23T14:17:15Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "I agree that it doesn't need to be specifically called out that the window can be treated as a resource, and that this is an implantation detail.  However calling out the stream states when referencing frames that impact the flow control window may be overly restrictive.  For example the `\"open\" or \"half closed (remote)\"` are not the only states in which a stream may be in the priority tree.\n\nHere are what I believe to be the relevant portions of the specification which relate to flow control window and stream state.\n1. [section 6.9](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-6.9) seems to be very careful about stream state and doesn't necessarily limit to just `\"open\" or \"half closed (remote)\"`\n2. [section 5.1](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-5.1) is much more restrictive and declares that `WINDOW_UPDATE` is not allowed in `idle`, or `closed`. For `closed` there is special mention that these frames must be ignored, or may be an error (if it arrives `a significant time after sending END_STREAM`).\n3. If the clarifications in this issue are applied then it seems like the `SETTINGS` impact on the flow control windows is further limited to `\"open\" or \"half closed (remote)\"`.\n",
          "createdAt": "2015-03-23T15:52:29Z",
          "updatedAt": "2015-03-23T15:52:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "BTW, I consider the state associated with having a stream in the priority tree to be necessarily separate from the state that is maintained for an \"active stream\" (i.e., one with active send or receive state).  Lumping them all together exposes you to some potential attacks.\n",
          "createdAt": "2015-03-24T21:21:27Z",
          "updatedAt": "2015-03-24T21:21:27Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Can you be more specific (particularly about the `potential attacks`)?  I guess what I'm after is two fold:\n1. Consistency amongst the sections that discuss window update and stream state.\n2. Not necessarily preventing window_update being controlled when a stream is in the priority tree, or rational as to why it makes sense to do so.\n",
          "createdAt": "2015-03-24T21:33:51Z",
          "updatedAt": "2015-03-24T21:33:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The amount of state you commit to a stream that is active is potentially large (flow control windows, primarily).  That is strictly bounded though by your value of the MAX_CONCURRENT_STREAMS setting.  If that state has to live on the same lifetime as stream priority, then it is not covered by the setting and you are potentially in a position to commit a much larger amount of state.\n\nYou can (obviously) manage this by careful management of the transition to and from the active states, but I believe that it is better to instead have separate tracking of priority.\n",
          "createdAt": "2015-03-24T21:36:54Z",
          "updatedAt": "2015-03-24T21:36:54Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "One way to implement this cleanly is to have a (small) priority state for streams that is created and managed by a garbage-collector.  Active stream state can be a separate object that maintains a reference to the priority state (that might be nullable, or you could require that only closed or idle streams be exposed to the GC).\n",
          "createdAt": "2015-03-24T21:39:03Z",
          "updatedAt": "2015-03-24T21:39:03Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "I think we are straying into implementation details a bit, and we are in agreement that the state could be managed, but in the scope of this issue....I re-read your PR and I am fine with it :)\n",
          "createdAt": "2015-03-24T22:24:48Z",
          "updatedAt": "2015-03-24T22:24:48Z"
        },
        {
          "author": "laike9m",
          "authorAssociation": "NONE",
          "body": "@martinthomson Does \"old value\" here means the old initial window size?",
          "createdAt": "2016-11-24T15:42:52Z",
          "updatedAt": "2016-11-24T15:42:52Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes",
          "createdAt": "2016-11-25T00:58:05Z",
          "updatedAt": "2016-11-25T00:58:05Z"
        }
      ]
    },
    {
      "number": 728,
      "id": "MDU6SXNzdWU2MjQxMjI2OA==",
      "title": "Dynamic Table size update clarification",
      "url": "https://github.com/httpwg/http2-spec/issues/728",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Current text in 6.3 Dynamic Table Size Update may induce to think that the maximum size of the dynamic table can only be allowed to decrease:\n\n> The new maximum size MUST be lower than or equal to the last value of the maximum size of the dynamic table.\n",
      "createdAt": "2015-03-17T14:25:55Z",
      "updatedAt": "2020-10-28T06:48:54Z",
      "closedAt": "2020-10-28T06:48:54Z",
      "comments": [
        {
          "author": "ahmetb",
          "authorAssociation": "NONE",
          "body": "@hruellan close now?\n",
          "createdAt": "2015-11-30T23:14:34Z",
          "updatedAt": "2015-11-30T23:14:34Z"
        }
      ]
    },
    {
      "number": 730,
      "id": "MDU6SXNzdWU2MjczNjY4OQ==",
      "title": "padding clarification request",
      "url": "https://github.com/httpwg/http2-spec/issues/730",
      "state": "CLOSED",
      "author": "Scottmitch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Draft 17 removed the restriction that padding must be zero for headers padding in [section 6.2](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-6.2) but not for data padding in [section 6.1](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-6.1).  Why is this restriction in place for one frame type and not the other?\n\nIt seems like we are sending mixed messages.  Prior to draft 17 it seemed like the message was zero should be used perhaps because:\n1.True randomness is difficult, and you could be worse off you have bad/predictable \"randomness\".  See [section 10.7](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-10.7): `In particular, randomized padding with a predictable distribution provides very little protection`.\n2. Zero is simple...and there is no proof it is any worse than any other choice?\n\nWould it make sense to either:\n1. Require 0 everywhere...because we are confident it is the right thing to do (need justification for this)\n2. Require 0 no where, but add a blurb in section 10.7 that 0 may be a good choice and recommended default?  This should also have justification (randomness is hard/expensive, negligible returns, etc...)\n",
      "createdAt": "2015-03-18T16:35:58Z",
      "updatedAt": "2015-03-18T17:18:47Z",
      "closedAt": "2015-03-18T17:07:51Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Section 6.2 references 6.1, so that the definition is provided exactly once, that is all.  So we are really taking your option 1:\n\n> Padding fields and flags are identical to those defined for DATA frames (Section 6.1).\n\nYour rationale for why it is zero is basically correct: there is no value in random values, in fact, ignoring the padding could mask errors if padding is being applied incorrectly.  As for security, we have to assume that people have a good secure PRNG or quite a few more things fail.\n\nThe note in 10.7 refers to the length of padding, not the actual values in it.\n\n(I know that some people get excited about the possibility of using padding as a covert channel, which would require that implementations ignore padding values.  I don't find that even the slightest bit interesting: we have to assume that use of TLS is sufficient.)\n",
          "createdAt": "2015-03-18T17:07:51Z",
          "updatedAt": "2015-03-18T17:07:51Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Thanks for clarifying!  ~~I see the working group copy is still being maintained as the statement you referred to is not in draft 17.~~\n\nIs the working group copy intended to be submitted for another draft, or are RFC editors just using this to collect changes?\n",
          "createdAt": "2015-03-18T17:16:19Z",
          "updatedAt": "2015-03-18T17:17:08Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Oops...I now see the statement you referenced at the bottom of the HEADERS section...which was there prior to draft 17...makes sense to remove the redundancies.\n",
          "createdAt": "2015-03-18T17:18:47Z",
          "updatedAt": "2015-03-18T17:18:47Z"
        }
      ]
    },
    {
      "number": 731,
      "id": "MDU6SXNzdWU2MzM0MTI0OQ==",
      "title": "Some clarifications regarding GOAWAY.",
      "url": "https://github.com/httpwg/http2-spec/issues/731",
      "state": "CLOSED",
      "author": "buchgr",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "We are working on a HTTP/2 library and we are a bit confused and we would like to get it right.\n\nIs it correct that after a sender sent a `GOAWAY` frame with some `last stream identifier` to a receiver, the sender may still open new streams, even with stream identifiers higher than the `last stream identifier` sent in the `GOAWAY` frame? That is the `GOAWAY` frame and the `last stream identifier` only limit the ability of the receiver?\n\nIf this is correct, and I believe it is, then I find the following sentence in the first paragraph at `6.8 GOAWAY` confusing.\n\n> Once sent, the sender will ignore frames sent on any new streams with identifiers higher than the included last stream identifier.\n\nIn my opinion it should say something of the like \n\n> Once sent, the sender will ignore frames sent on any new streams **created by the receiver** with identifiers higher than the included last stream identifier.\n\nThanks.\n",
      "createdAt": "2015-03-21T01:00:35Z",
      "updatedAt": "2015-05-04T16:29:59Z",
      "closedAt": "2015-05-04T16:29:59Z",
      "comments": [
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "I am also intersted in getting clarity on this topic.  It seems what the \"spirit\" of the [GOAWAY section](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-6.8) is something like:\n\nEach endpoint maintains the goaway last stream id from its peer.  When a goaway is received then no local streams can be created (i.e. `IDLE` streams can only transition to `CLOSED`), and all local streams with `stream id` > `last stream id` from the goaway frame are closed (or as the spec says `can be treated as if they never existed`).  Remote streams can still be opened, and to ensure a graceful connection shutdown a goaway frame should be sent in response.\n",
          "createdAt": "2015-03-22T01:44:10Z",
          "updatedAt": "2015-03-22T01:44:10Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Not quite: Upon receipt of GOAWAY, new streams can be created, but with the following restrictions:\n1.  those with stream identifiers higher than the `last stream id` will be ignored.\n2. Those with stream identifiers lower or equal are subject to the usual risk of loss, but they _might_ be processed.  Success is determined by what happens on the stream, of course.\n",
          "createdAt": "2015-03-22T01:48:49Z",
          "updatedAt": "2015-03-22T01:48:49Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "@martinthomson - Can you clarify the following from [section 6.8](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-6.8):\n\n> Receivers of a GOAWAY frame MUST NOT open additional\n>    streams on the connection, although a new connection can be\n>    established for new streams.\n\nThis is what lead me to believe that streams can not be \"created\" after receiving a `GOAWAY`?\n",
          "createdAt": "2015-03-22T01:55:32Z",
          "updatedAt": "2015-03-22T01:55:32Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm.  I'd forgotten that.  That is in conflict with the graceful shutdown we've specified.  I think that we need to take this to the list.  This seems like a genuine bug.\n",
          "createdAt": "2015-03-22T02:00:47Z",
          "updatedAt": "2015-03-22T02:00:47Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Thanks for the quick response @martinthomson!  Would you prefer to bring the issue to the list?\n",
          "createdAt": "2015-03-22T02:03:26Z",
          "updatedAt": "2015-03-22T02:03:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm just trying to formulate something.\n",
          "createdAt": "2015-03-22T02:07:21Z",
          "updatedAt": "2015-03-22T02:07:21Z"
        },
        {
          "author": "buchgr",
          "authorAssociation": "NONE",
          "body": "hmm I see @martinthomson. As a follow up, does the `last stream identifier` in the GOAWAY have to be the identifier of a stream that actually exists or could it also just be a \"random number\"?\n",
          "createdAt": "2015-03-22T05:03:05Z",
          "updatedAt": "2015-03-22T05:05:30Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The intent was to say that the _receiver_ of a GOAWAY can't create new streams higher than the `last stream id` value in GOAWAY.  Let me check back in tomorrow; maybe fresh eyes will add perspective.\n",
          "createdAt": "2015-03-22T06:02:23Z",
          "updatedAt": "2015-03-22T06:02:23Z"
        },
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So the intention of the change is allow receiver of GOAWAY are still allowed to create stream lower or equal to received last-stream-id, accepting the fact that those streams are  ignored by peer?  As the graceful shutdown process as described in draft 17, server first sending GOAWAY with (2^31) - 1 starts to ignore any _new_ streams created by peer and after some time (this ensures that GOAWAY is reached to the client), server sends another GOAWAY with updated last-stream-id where processing has occurred already.\n",
          "createdAt": "2015-03-22T08:00:48Z",
          "updatedAt": "2015-03-22T08:00:48Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@tatsuhiro-t, the intent of the change is to not change anything :)\n\nThe process has been unclear, but the point is that if you receive GOAWAY with a last-stream-id greater than anything you have initiated, you can use what space remains for new streams.  What that means is that you can issue new requests on that connection while you take the time to create a replacement connection.  This was considered critical for #458.\n\nThat means that 2^31-1 serves only as a warning of impending closure, though in theory it need not change any behaviour for the existing connection.  I'd take steps to make a replacement connection though.\n",
          "createdAt": "2015-03-22T15:24:15Z",
          "updatedAt": "2015-03-22T15:24:15Z"
        },
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you for clarification!\n",
          "createdAt": "2015-03-22T15:57:48Z",
          "updatedAt": "2015-03-22T15:57:48Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Here is a link to @martinthomson's doc from the mailing list which provides additional clarity to this issue https://docs.google.com/presentation/d/1yGLlIUqwVy3WeVv8K9HHOSkBietWTjJPlI_pA5wqU-Q/edit#slide=id.p\n",
          "createdAt": "2015-03-22T16:35:47Z",
          "updatedAt": "2015-03-22T16:35:47Z"
        },
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Latest PR is much more comfortable to me. Thanks!\n",
          "createdAt": "2015-03-23T14:47:15Z",
          "updatedAt": "2015-03-23T14:47:15Z"
        }
      ]
    },
    {
      "number": 738,
      "id": "MDU6SXNzdWU2NjE2NTMwNQ==",
      "title": "Some questions about Stream Priority",
      "url": "https://github.com/httpwg/http2-spec/issues/738",
      "state": "CLOSED",
      "author": "appchemist",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Dear http2 members.\n\nAfter reading HTTP/2 specification, There is some curious about Stream Priority.\n\nIn First paragraph at \"5.3.4 Prioritization State Management\", \n\n> When a stream is removed from the dependency tree, its dependencies\n> can be moved to become dependent on the parent of the closed stream.\n> The weights of new dependencies are recalculated by distributing the\n> weight of the dependency of the closed stream proportionally based on\n> the weights of its dependencies.\n\nWhen a parent stream is closed, these paragraph describes that dependencies's weights are recalculated.\n\n**First Question.**\nWithout additional HEADERS or PRIORITY frame, Can a Stream's weight that is set by HEADERS or PRIORITY frame be recalculated?\nThe weight mentioned these paragraph is recalculated.\nJust look a word, The weight mentioned these paragraph are equal to a Stream's weight that is set by HEADERS or PRIORITY frame.\n\nIn Second paragraph at \"5.3.4 Prioritization State Management\", \n\n> Streams that are removed from the dependency tree cause some\n> prioritization information to be lost.  Resources are shared between\n> streams with the same parent stream, which means that if a stream in\n> that set closes or becomes blocked, any spare capacity allocated to a\n> stream is distributed to the immediate neighbors of the stream.\n\nIf \"B\" stream is in closed or blocked state, Spare capacity that was allocated to \"B\" stream is distributed to other neighbors with same parent.\nThis is my understand.\n\n**Second Question.**\n![why](https://cloud.githubusercontent.com/assets/1546031/6983712/2a91b88c-da5c-11e4-86dc-b02260be478f.png)\nThis is a drawing about a first example in \"5.3.4 Prioritization State Management\".\nWhy does \"C\" stream have a 100 resources? \n\n**Third Question.**\n![why2](https://cloud.githubusercontent.com/assets/1546031/6983961/d04d8984-da5e-11e4-8f61-6308e0e12d2b.png)\nThis is a drawing about a second example in \"5.3.4 Prioritization State Management\" For equal starting weights.\nWhy do \"B\" and \"C\" stream have a 20 resources?\nBecause \"D\" stream is block, I think that \"B\" and \"C\" stream have a 30 resources\n\n**Last Question.**\nIs \"Flow Control Window\" related to \"Stream Priority\"?\n\n**If this issue is not appropriate in Issues board, I will close or delete this Issue.**\n**With sincere thanks**\n",
      "createdAt": "2015-04-03T15:20:44Z",
      "updatedAt": "2015-04-05T14:08:59Z",
      "closedAt": "2015-04-03T17:11:26Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This isn't really the right place, but that's OK.\n\n> Without additional HEADERS or PRIORITY frame, Can a Stream's weight that is set by HEADERS or PRIORITY frame be recalculated?\n\nIf a stream is removed from the priority tree, then it's weight should be allocated to its children.  As you note, this loses some information.  The parent node's unused resources are always distributed to its children first, rather than its peers.\n\n>  Why does \"C\" stream have a 100 resources? \n\nAs above, C (and D) gets the resources that A cannot use.\n\n>  Why do \"B\" and \"C\" stream have a 20 resources?\n\n\"B\" and \"C\" should have 15 each.  And B should continue to have 30.  This is an example of how information is lost by removing A from the tree.  If A was still there, C would get an equal share to B as long as D was blocked.\n\n>  Is \"Flow Control Window\" related to \"Stream Priority\"?\n\nOnly in the sense that the connection flow control window is a resource that might need to be shared between streams.  And also because it can cause a particular stream to become blocked, thereby preventing allocation of resources to that stream.\n",
          "createdAt": "2015-04-03T17:11:25Z",
          "updatedAt": "2015-04-03T17:11:25Z"
        },
        {
          "author": "appchemist",
          "authorAssociation": "NONE",
          "body": "Thanks very much ! @martinthomson \n\nI have more question about second and third question.\n\nI think there are more principles about stream priority.\n1. if a stream that doesn't have any dependency is blocked and isn't closed. a stream's weight is not distributed to other neighbors with same parent.\na stream is in tree but these stream is blocked.\na stream's weight is only distributed to child.\n2. When a parent stream is blocked and isn't closed. if a dependency that has neighbors with same parent is blocked, a perent stream's weight is not distributed to a dependency that is blocked.\n\n**First Question**\nis above a\u200bssumption right?\n\n**Finally Question**\nAre there places that can question about HTTP/2 ?\n",
          "createdAt": "2015-04-04T02:01:54Z",
          "updatedAt": "2015-04-04T02:01:54Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "1 is right.\n\n> 1. When a parent stream is blocked and isn't closed. if a dependency that has neighbors with same parent is blocked, a perent stream's weight is not distributed to a dependency that is blocked.\n\nThink of it this way:\n- Distributing resources to a parent's dependencies is considered the same as distributing to the parent.\n- If you can't allocate resources to one stream, find another that can take them.\n\nFinally, if you want to make good progress, it's always better to complete a stream than it is to distribute resources according to priority.\n\n>  Are there places that can question about HTTP/2 ?\n\nI don't know.  StackOverflow and friends are pretty good at this sort of level of detail.\n",
          "createdAt": "2015-04-04T03:42:49Z",
          "updatedAt": "2015-04-04T03:42:49Z"
        },
        {
          "author": "appchemist",
          "authorAssociation": "NONE",
          "body": "At Your First reply, @martinthomson \n\n> \"B\" and \"C\" should have 15 each. And B should continue to have 30. This is an example of how information is lost by removing A from the tree. If A was still there, C would get an equal share to B as long as D was blocked.\n\n\"B\" and \"C\" should have 15 each => \"D\" and \"C\" shoul have 15 each\nis right?\n\nfinally, When \"A\" is removed and \"D\" is blocked, \"D\" and \"C\" shold have 15 each and \"B\" should have 30\n",
          "createdAt": "2015-04-04T04:17:33Z",
          "updatedAt": "2015-04-04T04:20:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes.  Though if D is blocked, the split goes from D:1/4-C:1/4-B:2/4 to just C:1/3-B:2/3\n",
          "createdAt": "2015-04-04T07:47:44Z",
          "updatedAt": "2015-04-04T07:47:44Z"
        },
        {
          "author": "appchemist",
          "authorAssociation": "NONE",
          "body": "@martinthomson sincerely thank you!\n",
          "createdAt": "2015-04-05T14:08:59Z",
          "updatedAt": "2015-04-05T14:08:59Z"
        }
      ]
    },
    {
      "number": 739,
      "id": "MDU6SXNzdWU2NjE3NDc5NQ==",
      "title": "HEADERS Stream Dependency State clarification",
      "url": "https://github.com/httpwg/http2-spec/issues/739",
      "state": "CLOSED",
      "author": "Scottmitch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I don't where the specification discusses the stream state of the `Stream Dependency` stream in the HEADERS frame [section 6.2](http://http2.github.io/http2-spec/index.html#rfc.section.6.2).  The priority frame can be sent on streams in any state, so does that same logic apply to the stream identified by the `Stream Dependency` in the HEADERS frame?  Or is the intention to limit the state to `OPEN`, etc... Either way it would be helpful to clarify what the intentions and expected behavior is.\n",
      "createdAt": "2015-04-03T16:03:48Z",
      "updatedAt": "2015-04-03T20:59:19Z",
      "closedAt": "2015-04-03T17:16:11Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not parsing the question very well.  Are you asking what state a stream has to be in to create a dependency on it?\n\nIf that's the case, there is no restriction on state.  We don't explicitly say this, but it is effectively covered by this statement:\n\n> All streams are initially assigned a non-exclusive dependency on stream 0x0.\n\n-- [Section 5.3.5](http://http2.github.io/http2-spec/#pri-default)\n",
          "createdAt": "2015-04-03T17:16:11Z",
          "updatedAt": "2015-04-03T17:16:11Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "@martinthomson - Sorry.  I restructured the question and should have re-read before clicking create issue...\n\nMy question can be demonstrated by a simple example:\n1. Connection has been initialized.\n2. Local endpoint receives a HEADERS frame with `Stream Id = 3` and `Stream Dependency = 5`.\n\nAt this point the `Stream ID = 3` would go through a state transition to OPEN.  The question is that is this OK for the `Stream Dependency` to refer to a stream that has not been \"created\" yet (i.e. still in IDLE and no frames exchanged)?  So in effect should this action:\n1. \"create\" the stream associated with stream id 5.\n2. return some type of error because stream id 5 has not yet been created.\n\nI think option 1 makes sense because \"PRIORITY FRAMES can be sent/received at any time\".  However this is an assumption and would be nice to see this called out in the specification to ensure consistent behavior.\n",
          "createdAt": "2015-04-03T18:25:52Z",
          "updatedAt": "2015-04-03T18:25:52Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, option 1 is what is implied by the referenced statement.  You only need to \"create\" stream 5 because you might want to track changes.  In some implementations, you could avoid any state for that, since you can fulfill any request for its priority by providing defaults.\n",
          "createdAt": "2015-04-03T18:40:17Z",
          "updatedAt": "2015-04-03T18:40:17Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "@martinthomson - So in summary you believe this behavior is clearly defined in the specification and should not be clarified any more?\n",
          "createdAt": "2015-04-03T18:43:31Z",
          "updatedAt": "2015-04-03T18:43:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh, I wouldn't say that it's perfectly clear, but my options for correcting it are exceedingly painful.  In assessing the cost-benefit, I think we'll just have to put this one in the Implementer's Guide.\n",
          "createdAt": "2015-04-03T19:59:36Z",
          "updatedAt": "2015-04-03T19:59:36Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "@martinthomson - Thanks for the clarification :).\n\nI haven't looked into it but would it be too painful to reference the PRIORITY section in the HEADERS?  Something like...\n\n```\nStream Dependency:\nA 31-bit stream.... The stream this identifies is subject to the same restrictions as if a PRIORITY frame were identifying this stream, see section 6.3\n```\n",
          "createdAt": "2015-04-03T20:05:33Z",
          "updatedAt": "2015-04-03T20:05:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Well, yes, conditional on the same pain associated with any change.  I'm not sure that it addresses your actual concern here though, which relates to states.\n\nI thought that we had text establishing that the priority info in HEADERS was equivalent to PRIORITY anyway.  5.3 only makes it a circumstantial relationship though, I see.\n",
          "createdAt": "2015-04-03T20:13:01Z",
          "updatedAt": "2015-04-03T20:13:01Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Yip I remember that too...\n\n> Prioritization information in a HEADERS frame is logically equivalent to a separate PRIORITY frame, but inclusion in HEADERS avoids the potential for churn in stream prioritization when new streams are created. Prioritization fields in HEADERS frames subsequent to the first on a stream reprioritize the stream (Section 5.3.3).\n\nI think this is sufficient.  Thanks!\n",
          "createdAt": "2015-04-03T20:59:19Z",
          "updatedAt": "2015-04-03T20:59:19Z"
        }
      ]
    },
    {
      "number": 740,
      "id": "MDU6SXNzdWU2NjQ0NTAwOQ==",
      "title": "GOAWAY + FRAME_SIZE_ERROR?",
      "url": "https://github.com/httpwg/http2-spec/issues/740",
      "state": "CLOSED",
      "author": "daurnimator",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It seems reasonable that a `GOAWAY` frame of <8 bytes should get a `FRAME_SIZE_ERROR`?\n",
      "createdAt": "2015-04-05T14:40:21Z",
      "updatedAt": "2015-04-07T00:00:55Z",
      "closedAt": "2015-04-06T16:42:01Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "An endpoint MUST send a FRAME_SIZE_ERROR error if a frame exceeds the size defined in SETTINGS_MAX_FRAME_SIZE, any limit defined for the frame type, _or it is too small to contain mandatory frame data_.\n\n-- [Section 4.2](http://http2.github.io/http2-spec/#FrameSize)\n",
          "createdAt": "2015-04-06T16:42:01Z",
          "updatedAt": "2015-04-06T16:42:01Z"
        },
        {
          "author": "daurnimator",
          "authorAssociation": "NONE",
          "body": "> or it is too small to contain mandatory frame data.\n> \n> -- Section 4.2\n\nAh-ha, I managed to miss that clause.\n",
          "createdAt": "2015-04-07T00:00:55Z",
          "updatedAt": "2015-04-07T00:00:55Z"
        }
      ]
    },
    {
      "number": 741,
      "id": "MDU6SXNzdWU2NjQ0NjI2NA==",
      "title": "Behaviour on reserved bits? ",
      "url": "https://github.com/httpwg/http2-spec/issues/741",
      "state": "CLOSED",
      "author": "daurnimator",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "What should the behaviour be if a reserved bit is set in certain types of frames? e.g. \n- `PUSH_PROMISE`\n- `WINDOW_UPDATE`\n",
      "createdAt": "2015-04-05T14:48:29Z",
      "updatedAt": "2015-04-06T23:59:31Z",
      "closedAt": "2015-04-06T16:43:19Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "A reserved 1-bit field. The semantics of this bit are undefined and the bit MUST remain unset (0x0) when sending and _MUST be ignored when receiving_. \n\n-- [Section 4.1](http://http2.github.io/http2-spec/#FrameHeader)\n",
          "createdAt": "2015-04-06T16:43:17Z",
          "updatedAt": "2015-04-06T16:43:17Z"
        },
        {
          "author": "daurnimator",
          "authorAssociation": "NONE",
          "body": "> A reserved 1-bit field. The semantics of this bit are undefined and the bit MUST remain unset (0x0) when sending and MUST be ignored when receiving.\n> \n> -- Section 4.1\n\nAs written that only applies to the reserved bit in the frame header.\n\nThis issue is about the reserved bits inside of various frames.\n",
          "createdAt": "2015-04-06T23:59:31Z",
          "updatedAt": "2015-04-06T23:59:31Z"
        }
      ]
    },
    {
      "number": 743,
      "id": "MDU6SXNzdWU2ODU0ODQ4NA==",
      "title": "Data Frame flow control vs error",
      "url": "https://github.com/httpwg/http2-spec/issues/743",
      "state": "CLOSED",
      "author": "Scottmitch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It seems like the specification is a bit inconsistent across different sections regarding which type of error should be sent when data frames are received in \"unexpected states\".  It also seems like the spec requires historical information to be kept about streams that have been closed to correctly keep flow control windows in sync.  I'm hoping this is just a misinterpretation but could someone provide clarity?\n#### Conflicting error\n\n[section 6.1](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-6.1):\n\n> DATA frames are subject to flow control and can only be sent when a\n>    stream is in the \"open\" or \"half closed (remote)\" states.... \n>    If a DATA frame is received whose\n>    stream is not in \"open\" or \"half closed (local)\" state, the recipient\n>    MUST respond with a stream error (Section 5.4.2) of type\n>    STREAM_CLOSED.\n\n[section 5.1](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-5.1):\n\n> An endpoint MUST NOT send frames other than PRIORITY on a closed\n> stream. An endpoint that receives any frame other than PRIORITY\n> after receiving a RST_STREAM MUST treat that as a stream error\n> (Section 5.4.2) of type STREAM_CLOSED. Similarly, an endpoint\n> that receives any frames after receiving a frame with the\n> END_STREAM flag set MUST treat that as a connection error\n> (Section 5.4.1) of type STREAM_CLOSED, unless the frame is\n> permitted as described below.\n\nI'm guessing the end result of these two sections is to just follow section 5.1?  Does this also imply that implementations have to keep around historical information on streams that have been closed to be able to respond correctly?\n#### Historical state required\n\n[section 5.1](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-5.1):\n\n> Flow controlled frames (i.e., DATA) received after sending\n>       RST_STREAM are counted toward the connection flow control window.\n>       Even though these frames might be ignored, because they are sent\n>       before the sender receives the RST_STREAM, the sender will\n>       consider the frames to count against the flow control window.\n\nAgain this section seems to imply that historical information must be kept (indefinitely?) to know how to handle receiving a DATA frame in an \"unexpected\" state.\n",
      "createdAt": "2015-04-15T02:02:12Z",
      "updatedAt": "2015-12-16T01:46:59Z",
      "closedAt": "2015-04-17T18:01:35Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "6.1 does seem to imply that you send STREAM_CLOSED for a stream in the idle state.  Go with 5.1 there.\n\n>  Does this also imply that implementations have to keep around historical information on streams that have been closed to be able to respond correctly?\n\nNot really, if you maintain a set of open streams, the closed streams are any stream not in that set with a number lower than the highest in the same direction.\n\nAs for flow control, you only have to account for the connection flow control window.  You are discarding the data anyway, I hope.  You can do even less accounting if you close the stream (which I encourage you to do for crazy cases like that.\n",
          "createdAt": "2015-04-15T03:30:08Z",
          "updatedAt": "2015-04-15T03:30:08Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "> Not really, if you maintain a set of open streams, the closed streams are any stream not in that set with a number lower than the highest in the same direction.\n\nThe issue is that the requirement (i.e. both are `MUST` statements) of what error to send varies based upon how the stream was closed. \nIf a RST_STREAM was used -> stream error\nIf a END_STREAM was used -> connection error\n\n> As for flow control, you only have to account for the connection flow control window.\n\nThe flow control question was also centered on the condition of when it is an error vs when it should be counted against flow control.  Can receiving a single DATA frame result in sending an error and be counted against flow control?\n",
          "createdAt": "2015-04-15T15:36:06Z",
          "updatedAt": "2015-04-15T15:37:29Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "> 6.1 does seem to imply that you send STREAM_CLOSED for a stream in the idle state. Go with 5.1 there.\n\nNot only that but they are conflicting. Say a stream is in the CLOSED state because of an END_STREAM was sent/received.  If a data frame is then received on this stream section 5.1 says this should be a stream error, but section 6.1 says this is a connection error.\n",
          "createdAt": "2015-04-15T15:46:57Z",
          "updatedAt": "2015-04-15T15:47:37Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": ">  If a RST_STREAM was used -> stream error\n> If a END_STREAM was used -> connection error\n\nIf you adopt the policy that any error is a connection error, this is not a problem :)\n",
          "createdAt": "2015-04-15T17:02:19Z",
          "updatedAt": "2015-04-15T17:02:19Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "> If you adopt the policy that any error is a connection error, this is not a problem :)\n\nOwch...getting technical on me now. Is there a \"when in doubt through connection error\" clause in the spec :)\n\n@martinthomson - What about the flow control portion of the question?\n",
          "createdAt": "2015-04-15T17:31:01Z",
          "updatedAt": "2015-04-15T17:31:01Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't quite understand where you are coming from here.  Are you concerned that a DATA frame sent on an idle stream might consume the flow control window for that stream?  I'd go back to the previous answer for that: do you really want to continue talking to a person that is crazy enough to send you DATA frames like that?  Send them a GOAWAY, with an error code of DONT_COME_BACK_UNTIL_YOUVE_SEEN_A_PSYCHIATRIST.\n",
          "createdAt": "2015-04-15T17:41:07Z",
          "updatedAt": "2015-04-15T17:41:07Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "> Are you concerned that a DATA frame sent on an idle stream might consume the flow control window for that stream\n\nI am asking for clarification on what the specification dictates must be done when a DATA frame is received on a stream that is not in the \"open\" or \"half closed (local)\" states. The specification talks about responding with an error (unclear if stream or connection error is required) and also counting against the connection flow control window (if RST_STREAM is sent). What I'm guessing (and would like clarification / confirmation for) is when a DATA frame is received it MUST be counted against the connection flow control window AND also MAY result in some type of error (depending on stream state).  The reason why I am asking if historical state is required because that is what the specification seems to be implying by imposing `MUST` clauses based on the condition of how a stream was closed.\n\n> do you really want to continue talking to a person that is crazy enough to send you DATA frames like that\n\nClearly this is not the mainstream use-case, but implementing a library requires one to handle these boundary conditions.  Sending a GO_AWAY does not prevent a peer from sending frames for stream which are `<= Last-Stream-ID` and so it is critical that the connection window be correctly updated.  The `Last-Stream-ID` could be set to 0 but this seems like it may not be semantically correct in all situations.\n",
          "createdAt": "2015-04-15T19:17:06Z",
          "updatedAt": "2015-04-15T19:17:06Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Forgot to include the \"assumption\" of updating the flow control window is not an assumption but instead a reference to [section 6.9](https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-6.9):\n\n> A receiver that receives a flow controlled frame MUST always account\n>    for its contribution against the connection flow control window,\n>    unless the receiver treats this as a connection error\n>    (Section 5.4.1).  This is necessary even if the frame is in error.\n>    Since the sender counts the frame toward the flow control window, if\n>    the receiver does not, the flow control window at sender and receiver\n>    can become different.\n\nPer our discussion above it seems like we should always keep the flow control window in sync, but this allows the peer to not update the connection window.  This section seems to overlap with and provide slightly different direction than the sections referenced from the specification above.\n",
          "createdAt": "2015-04-15T19:25:43Z",
          "updatedAt": "2015-04-15T19:26:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": ">  Sending a GO_AWAY does not prevent a peer from sending frames for stream which are <= Last-Stream-ID.\n\nTrue, if you keep the connection open.  I wouldn't.  Exercise your option to close the connection after sending a GOAWAY.  That makes the error more visible as well as reducing your corner-case-handling workload.\n\n> The reason why I am asking if historical state is required because that is what the specification seems to be implying by imposing MUST clauses based on the condition of how a stream was closed.\n\nYeah, technically, if you want to be compliant, you will need to remember why.  \n\n> this allows the peer to not update the connection window\n\nNot really.  A difference in the flow control window between two peers is _bad_.  I guess that the text assumes that this was obvious.\n",
          "createdAt": "2015-04-15T19:51:04Z",
          "updatedAt": "2015-04-15T19:51:04Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "> Yeah, technically, if you want to be compliant, you will need to remember why.\n\nKeeping history is undesirable, and based upon your response it seems that you are either implying there is a way out or recognizing most implementations won't bother?  Is it possible to clarify this to avoid the need to keep history? The spec goes through a good deal of trouble in other places to keep the required amount of state down (flow control windows, etc....). Is what the spec is trying to say something like `if a data frame is received with a stream id that is less than the next stream id to be created then return a stream error of type STREAM_CLOSED (or PROTOCOL_ERROR)`.  A connection error would be implied (from other parts of the spec) if the stream id greater than the next stream id to be used for a new stream.  Even if implementations do keep this state and send the \"correct\" error I'm not sure what value that provides. This seems like a remnant that hadn't been cleaned up as stream state and frame definitions changed.\n\n> Not really. A difference in the flow control window between two peers is bad. I guess that the text assumes that this was obvious.\n\nAgreed this is bad...hence the issue :)  The specification saying `unless the receiver treats this as a connection error (Section 5.4.1)` is misleading at the very least and possibly an error.  This allows a connection to remain open while in a state such that the connection flow control windows are out of sync.  I think I understand what is \"desired\" but I believe this portion in the specification is contradicting that meaning.\n",
          "createdAt": "2015-04-15T20:19:03Z",
          "updatedAt": "2015-04-15T20:19:03Z"
        },
        {
          "author": "ejona86",
          "authorAssociation": "NONE",
          "body": "@Scottmitch, closing the connection is part of the connection error handling (Section 5.4.1):\n\n> After sending the GOAWAY frame for an error condition, the endpoint MUST close the TCP connection.\n",
          "createdAt": "2015-04-17T17:31:47Z",
          "updatedAt": "2015-04-17T17:31:47Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "@ejona86 - +1. Thanks for pointing that out. Connection error implies we are not doing graceful shutdown (I think) so I think this may be the best option to take here.  No history needed.  @martinthomson - Sound good...if so feel free to close.\n",
          "createdAt": "2015-04-17T17:49:10Z",
          "updatedAt": "2015-04-17T17:49:10Z"
        },
        {
          "author": "EugeneChung",
          "authorAssociation": "NONE",
          "body": "I'm still not clear what I have to do for this.\n\nAs RFC 7540 says,\n\n5.1.  Stream States\nidle:\n      Receiving any frame other than HEADERS or PRIORITY on a stream in\n      this state MUST be treated as a connection error (Section 5.4.1)\n      of type PROTOCOL_ERROR.\n\n6.1.  DATA\n   If a DATA frame is received\n   whose stream is not in \"open\" or \"half-closed (local)\" state, the\n   recipient MUST respond with a stream error (Section 5.4.2) of type\n   STREAM_CLOSED.\n\nWhat MUST I have to do follow? The latter case is not considering 'idle' state, I guess?\n",
          "createdAt": "2015-06-03T01:52:38Z",
          "updatedAt": "2015-06-03T01:52:38Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "5.1 and 6.1 are speaking of two different things (idle state, and DATA frames), which have an intersection: receiving a DATA frame in the idle state.\nA connection error being \"stronger\" than a stream error, section 5.1 supersedes section 6.1 in this case. This is described in the spec: 5.4.1 states that a stream error can always be changed to a connection error.\n",
          "createdAt": "2015-06-03T07:29:42Z",
          "updatedAt": "2015-06-03T07:29:42Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "@hruellan \n\n> A connection error being \"stronger\" than a stream error, section 5.1 supersedes section 6.1 in this case. This is described in the spec: 5.4.1 states that a stream error can always be changed to a connection error.\n\nCan you please also clarify what is the correct error code that should be sent?\n- section 5.1 suggests `PROTOCOL_ERROR`\n- section 6.1 suggests `STREAM_CLOSED` (and IIUC section 5.4.1 does not allow changing the error code when promoting stream error to a connection error)\n\nFWIW to me this seems like a correction error of the specification.  Apparently in https://lists.w3.org/Archives/Public/ietf-http-wg/2013OctDec/1482.html @martinthomson changed the description in section 6.1 so that it would match the description in section 5.1 _for \"closed\" or \"half-closed (remote)\" states_.  However it is likely that the change has introduced contradicting statements for \"idle\", \"reserved (local)\", \"reserved (remote)\" states.\n",
          "createdAt": "2015-12-10T01:09:27Z",
          "updatedAt": "2015-12-10T10:40:50Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The STREAM_CLOSED error code doesn't apply when the stream hasn't been opened yet (i.e. is in the \"idle\", \"reserved (local)\", \"reserved (remote)\" states. So when receiving a DATA frame for a stream in the idle state, the PROTOCOL_ERROR error code should be used.\n",
          "createdAt": "2015-12-15T15:16:35Z",
          "updatedAt": "2015-12-15T15:16:35Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "@hruellan Thank you for the clarification!\n",
          "createdAt": "2015-12-16T01:39:02Z",
          "updatedAt": "2015-12-16T01:39:02Z"
        },
        {
          "author": "daurnimator",
          "authorAssociation": "NONE",
          "body": "> The STREAM_CLOSED error code doesn't apply when the stream hasn't been opened yet (i.e. is in the \"idle\", \"reserved (local)\", \"reserved (remote)\" states. So when receiving a DATA frame for a stream in the idle state, the PROTOCOL_ERROR error code should be used.\n\nPerhaps we can improve the copy from section 6.1?\n\n> If a DATA frame is received whose stream is not in \"open\" or \"half-closed (local)\" state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED.\n\nIt seems like many people have run into this same issue.\n",
          "createdAt": "2015-12-16T01:44:57Z",
          "updatedAt": "2015-12-16T01:46:59Z"
        }
      ]
    },
    {
      "number": 744,
      "id": "MDU6SXNzdWU3MjY2Mzg0NQ==",
      "title": "\"h2c\" not registered as HTTP Upgrade Token?",
      "url": "https://github.com/httpwg/http2-spec/issues/744",
      "state": "CLOSED",
      "author": "pyfisch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The section [Starting HTTP/2 for \"http\" URIs](http://http2.github.io/http2-spec/#rfc.section.3.2) says \" The client does so by making an HTTP/1.1 request that includes an Upgrade header field with the \"h2c\" token.\", but why should not the \"h2c\" token registered in the [Upgrade Token Registry](http://www.iana.org/assignments/http-upgrade-tokens/http-upgrade-tokens.xhtml)? I can't find any reference in the [IANA Considerations](http://http2.github.io/http2-spec/#iana) section registering the token once the RFC gets published.\n",
      "createdAt": "2015-05-02T16:00:12Z",
      "updatedAt": "2015-10-26T03:19:50Z",
      "closedAt": "2015-10-26T03:19:50Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "We'll take care of this when the RFC is final.\n",
          "createdAt": "2015-05-04T03:18:52Z",
          "updatedAt": "2015-05-04T03:18:52Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, it's in AUTH48 right now, so now is the moment to address this. I'll also have to go back to \"IANA evaluation\", because the IANA considerations changed. \n",
          "createdAt": "2015-05-04T08:26:57Z",
          "updatedAt": "2015-05-04T08:26:57Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "The registry is FCFS; the template doesn't have to be in this spec.\n\nIt may be unfortunate that it's not in there, but going back to IANA eval for something this small doesn't make sense.\n",
          "createdAt": "2015-05-04T09:16:08Z",
          "updatedAt": "2015-05-04T09:16:08Z"
        },
        {
          "author": "sprstnd",
          "authorAssociation": "NONE",
          "body": "sure it does. do it right the first time. shortcuts like this and you end up with terms within the spec not being used correctly - like opaque. Its unfortunate that you don't see the value in doing things correctly.\n",
          "createdAt": "2015-10-26T02:53:01Z",
          "updatedAt": "2015-10-26T02:55:39Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@sprstnd the spec has been published, and the token is registered, so arguing the point isn't productive now. Please keep discussion on-topic.\n",
          "createdAt": "2015-10-26T03:19:50Z",
          "updatedAt": "2015-10-26T03:19:50Z"
        }
      ]
    },
    {
      "number": 745,
      "id": "MDU6SXNzdWU3NDI4Njc3OQ==",
      "title": "N bits prefix integer encoding",
      "url": "https://github.com/httpwg/http2-spec/issues/745",
      "state": "CLOSED",
      "author": "bluealert",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "if I < 2^N - 1, encode I on N bits. \n\n\"<\" should be \"<=\" ?\n\n```\nif I < 2^N - 1, encode I on N bits\n   else\n       encode (2^N - 1) on N bits\n       I = I - (2^N - 1)\n       while I >= 128\n            encode (I % 128 + 128) on 8 bits\n            I = I / 128\n       encode I on 8 bits\n```\n",
      "createdAt": "2015-05-08T08:42:05Z",
      "updatedAt": "2015-05-08T14:31:53Z",
      "closedAt": "2015-05-08T14:31:53Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "No, if you encode `2^N-1` on N bits you get a value that is all ones.  That value is used here to signal that the number is not finished yet.\n",
          "createdAt": "2015-05-08T14:31:53Z",
          "updatedAt": "2015-05-08T14:31:53Z"
        }
      ]
    },
    {
      "number": 746,
      "id": "MDU6SXNzdWU3OTgxODc5Nw==",
      "title": "apply RFC Production Center changes to XML sources",
      "url": "https://github.com/httpwg/http2-spec/issues/746",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "reschke"
      ],
      "labels": [
        "RFC-editor"
      ],
      "body": "",
      "createdAt": "2015-05-23T11:20:42Z",
      "updatedAt": "2015-05-30T08:23:41Z",
      "closedAt": "2015-05-30T08:23:41Z",
      "comments": []
    },
    {
      "number": 747,
      "id": "MDU6SXNzdWU4Nzg3NTg3NQ==",
      "title": "\"allocate resources proportionally based on their weight\" is a source of confusion",
      "url": "https://github.com/httpwg/http2-spec/issues/747",
      "state": "CLOSED",
      "author": "igrigorik",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "https://httpwg.github.io/specs/rfc7540.html#rfc.section.5.3.2\n\n> All dependent streams are allocated an integer weight between 1 and 256 (inclusive).\n> \n> Streams with the same parent SHOULD be allocated resources proportionally based on their weight. Thus, if stream B depends on stream A with weight 4, stream C depends on stream A with weight 12, and no progress can be made on stream A, stream B ideally receives one-third of the resources allocated to stream C.\n\nThis section, more so than any others, has been a consistent source of developer confusion. E.g..\n\n> Can you further explain how \"resource A has a weight of 12, and B a weight of 4\" leads to \"A should receive two-thirds of available resources\" according to \"proportional weights.\" In my mind you'd add 12+4=16 and take the proporition out of 16, like B would receive 4/16 or one quarter of available resources. I can't really see any way you get \"thirds\" in this scenario, unless you take 4/12, but that doesn't explain A's \"thirds\" (from 12/12).\n\nCan we more clearly define this behavior? Ideally, in the spec, and if not possible at least as an FAQ entry somewhere else?\n",
      "createdAt": "2015-06-12T23:05:12Z",
      "updatedAt": "2015-08-12T00:59:47Z",
      "closedAt": "2015-08-07T01:52:23Z",
      "comments": [
        {
          "author": "igrigorik",
          "authorAssociation": "MEMBER",
          "body": "/cc @mnot \n",
          "createdAt": "2015-06-14T02:05:35Z",
          "updatedAt": "2015-06-14T02:05:35Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "@igrigorik In the RFC7540 example, B has 4 and C has 12. Thus,\n- B/C = 4/12 = 1/3 which RFC 7540 explains\n- B/total = B/(B+C) = 4 / (4 + 12) = 1/4\n\nIn your HPBN example, A has 12 and B has 4\n- A/B = 12/4 = 3\n- A/total = A/(A+B) = 12/(12+4) = 3/4\n\nSo, A should receive _three-quarters_ of available resources.\n",
          "createdAt": "2015-08-07T01:39:58Z",
          "updatedAt": "2015-08-07T01:39:58Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "Readers might want the second calculation but RFC 7540 uses the first calculation. I guess that's why readers might feel that section.5.3.2 is a little bit confusing.\n",
          "createdAt": "2015-08-07T01:42:54Z",
          "updatedAt": "2015-08-07T01:42:54Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See:\n  http://http2.github.io/faq/#is-the-priority-example-in-section-532-incorrect\n",
          "createdAt": "2015-08-07T01:52:23Z",
          "updatedAt": "2015-08-07T01:52:23Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "@igrigorik Are you satisfied with this answer? If so, please update HPBN.\n",
          "createdAt": "2015-08-11T00:51:44Z",
          "updatedAt": "2015-08-11T00:51:44Z"
        },
        {
          "author": "igrigorik",
          "authorAssociation": "MEMBER",
          "body": "Done, ptal: http://chimera.labs.oreilly.com/books/1230000000545/ch12.html#HTTP2_PRIORITIZATION - does that look correct? :)\n",
          "createdAt": "2015-08-11T16:31:12Z",
          "updatedAt": "2015-08-11T16:31:12Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM\n",
          "createdAt": "2015-08-11T17:02:28Z",
          "updatedAt": "2015-08-11T17:02:28Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": ":+1: \n",
          "createdAt": "2015-08-12T00:40:16Z",
          "updatedAt": "2015-08-12T00:40:16Z"
        },
        {
          "author": "summerwind",
          "authorAssociation": "CONTRIBUTOR",
          "body": ":+1: \n",
          "createdAt": "2015-08-12T00:59:47Z",
          "updatedAt": "2015-08-12T00:59:47Z"
        }
      ]
    },
    {
      "number": 748,
      "id": "MDU6SXNzdWUxMTE0NzUyOTk=",
      "title": "Missing Apache httpd 2.4.17 and later",
      "url": "https://github.com/httpwg/http2-spec/issues/748",
      "state": "CLOSED",
      "author": "jimjag",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Apache httpd 2.4.17 and later includes HTTP/2 support\n",
      "createdAt": "2015-10-14T19:36:03Z",
      "updatedAt": "2015-10-14T20:25:05Z",
      "closedAt": "2015-10-14T20:25:05Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Great!\n",
          "createdAt": "2015-10-14T20:25:05Z",
          "updatedAt": "2015-10-14T20:25:05Z"
        }
      ]
    },
    {
      "number": 749,
      "id": "MDU6SXNzdWUxMTMyNjk1MTE=",
      "title": "opaque",
      "url": "https://github.com/httpwg/http2-spec/issues/749",
      "state": "CLOSED",
      "author": "sprstnd",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The term opaque is being used incorrectly within rfc7540.\n",
      "createdAt": "2015-10-26T01:32:44Z",
      "updatedAt": "2020-10-28T06:51:04Z",
      "closedAt": "2020-10-28T06:51:04Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "You'll need to be more specific than that I'm afraid.\n",
          "createdAt": "2015-10-26T05:47:16Z",
          "updatedAt": "2015-10-26T05:47:16Z"
        },
        {
          "author": "emilv",
          "authorAssociation": "NONE",
          "body": "The term \"opaque\" in programming usually means we shouldn't assign any semantic meaning to the data, and so should not try to interpret it. \"Opaque data\" should be treated in its entirety as a single entity. This is sometimes called a [magic cookie](https://en.wikipedia.org/wiki/Magic_cookie) or [opaque data type](https://en.wikipedia.org/wiki/Opaque_data_type). This is also the meaning of the word in RFC7540.",
          "createdAt": "2017-01-12T10:30:06Z",
          "updatedAt": "2017-01-12T10:30:06Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Cleaning up old issues.",
          "createdAt": "2020-10-28T06:51:04Z",
          "updatedAt": "2020-10-28T06:51:04Z"
        }
      ]
    },
    {
      "number": 750,
      "id": "MDU6SXNzdWUxMjc2MzE3ODU=",
      "title": "Save initial files into cache storage instead of browser's cache",
      "url": "https://github.com/httpwg/http2-spec/issues/750",
      "state": "CLOSED",
      "author": "lewispham",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "At this time, there is no way to save intial files which are fetched at the very first HTTP request into [`CacheStorage`](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#cache-storage). I'm thinking about having a header that handles this issue.\n`Cache-Control : location=cache-storage`\nThen developers can easily retrieve those files saved in cache storage on client side.\n\n```\nCacheStrorage.open('main').then(cache => {\n    cache.match('/path/to/initFile').then(response => {\n        console.log('File exists in cache storage');\n    });\n});\n```\n",
      "createdAt": "2016-01-20T08:45:21Z",
      "updatedAt": "2016-01-20T09:04:19Z",
      "closedAt": "2016-01-20T09:04:19Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This isn't the appropriate place to make that sort of request.  This is the protocol, not the API.  You might like to try slightlyoff/ServiceWorker instead.\n",
          "createdAt": "2016-01-20T09:04:19Z",
          "updatedAt": "2016-01-20T09:04:19Z"
        }
      ]
    },
    {
      "number": 751,
      "id": "MDU6SXNzdWUxMzc3OTYzNTY=",
      "title": "Swoole already supports http2, please add to the list",
      "url": "https://github.com/httpwg/http2-spec/issues/751",
      "state": "CLOSED",
      "author": "matyhtf",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Swoole is an event-driven asynchronous & concurrent networking engine with high performance for PHP.\nhttps://github.com/swoole/swoole-src\n\nSwoole is already support http2 in the version 1.8.22.\nhttps://github.com/swoole/swoole-src/releases/tag/swoole-1.8.2-stable\n\nname: swoole\nlanguage: php\nrole(s): server\nnegotiation(s): ALPN, NPN\nprotocol id(s): h2\n## sample\n\n``` php\n$ssl_dir = realpath('../../tests/ssl');\n$serv = new swoole_http_server(\"0.0.0.0\", 9501, SWOOLE_BASE, SWOOLE_SOCK_TCP | SWOOLE_SSL);\n$serv->set([\n    'ssl_cert_file' => $ssl_dir . '/ssl.crt',\n    'ssl_key_file' => $ssl_dir . '/ssl.key',\n    'open_http2_protocol' => true,\n]);\n\n$serv->on('Request', function(swoole_http_request $request, swoole_http_response $response) {\n    $response->end(\"<h1>Hello Swoole!</h1>\\n\");\n});\n\n$serv->start();\n```\n",
      "createdAt": "2016-03-02T07:27:24Z",
      "updatedAt": "2016-03-02T08:02:49Z",
      "closedAt": "2016-03-02T07:49:22Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This isn't the appropriate place to record implementations; see the wiki:\n  https://github.com/http2/http2-spec/wiki/Implementations\n",
          "createdAt": "2016-03-02T07:49:22Z",
          "updatedAt": "2016-03-02T07:49:22Z"
        },
        {
          "author": "matyhtf",
          "authorAssociation": "NONE",
          "body": "OK, thanks.\n",
          "createdAt": "2016-03-02T08:02:49Z",
          "updatedAt": "2016-03-02T08:02:49Z"
        }
      ]
    },
    {
      "number": 752,
      "id": "MDU6SXNzdWUxNTA3MTAyMTI=",
      "title": "delete",
      "url": "https://github.com/httpwg/http2-spec/issues/752",
      "state": "CLOSED",
      "author": "bahador",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2016-04-24T22:52:18Z",
      "updatedAt": "2016-04-27T18:21:13Z",
      "closedAt": "2016-04-27T18:21:13Z",
      "comments": []
    },
    {
      "number": 754,
      "id": "MDU6SXNzdWUxNTYzMTM2MjA=",
      "title": "Invalidate already-stored responses with Last-Modified header",
      "url": "https://github.com/httpwg/http2-spec/issues/754",
      "state": "CLOSED",
      "author": "lewispham",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "[Section 4 of RFC 7234](https://tools.ietf.org/html/rfc7234#section-4) has this paragraph:\n\n> When more than one suitable response is stored, a cache MUST use the most recent response (as determined by the Date header field). It can also forward the request with \"Cache-Control: max-age=0\" or \"Cache-Control: no-cache\" to disambiguate which response to use.\n\nIt mentioned about invalidating already-stored responses with `Date` or `Cache-Control` headers.\n\nWhat's about the `Last-Modified` header? Can I use it for the same purpose?\n",
      "createdAt": "2016-05-23T16:42:51Z",
      "updatedAt": "2016-05-23T17:06:04Z",
      "closedAt": "2016-05-23T17:06:04Z",
      "comments": []
    },
    {
      "number": 755,
      "id": "MDU6SXNzdWUxNTcyNzg5MjM=",
      "title": "Suggestion: add recommended NGINX server configuration to wiki",
      "url": "https://github.com/httpwg/http2-spec/issues/755",
      "state": "CLOSED",
      "author": "rundowncreator",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "We've been using SPDY in production for a while now, and with Ubuntu 16.04/Nginx 1.10.0 out, we were hoping to transition to HTTP/2.  But, we've been having a hard time deploying it (and might just scrap it for now) because of its strict cipher requirements.\n\nWe have `ssl_prefer_server_ciphers` set to `on` for security reasons.  With NGINX, `ssl_ciphers` defaults to `HIGH:!aNULL:!MD5`, but that causes a `ERR_SPDY_INADEQUATE_TRANSPORT_SECURITY` error in Chrome when used with HTTP/2.\n\nI've seen the spec's [ciphers blacklist](http://http2.github.io/http2-spec/index.html#BadCipherSuites), but as a developer and not a cryptographic expert, this stuff makes me feel like my head is going to explode.\n\nI've tried Googling what to specify for `ssl_ciphers` when using HTTP/2, but everyone recommends something different, so it's hard to know what's right and what's wrong.\n\nAnyways, I would like to humbly suggest you add some recommended NGINX (and maybe Apache) server config files to the wiki, that would work on popular OSes with the latest version of OpenSSL.  It would make it a lot easier for people like me to deploy HTTP/2.\n\nThanks for all of your hard work.\n\n-Jeff\n",
      "createdAt": "2016-05-27T19:49:49Z",
      "updatedAt": "2016-05-31T00:40:03Z",
      "closedAt": "2016-05-30T00:16:49Z",
      "comments": [
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Seems like it would be more appropriate to reach out to the NGINX team for support.\n",
          "createdAt": "2016-05-28T22:17:17Z",
          "updatedAt": "2016-05-28T22:17:17Z"
        },
        {
          "author": "rundowncreator",
          "authorAssociation": "NONE",
          "body": "I agree that it would be ideal if NGINX's default value for `ssl_ciphers` were compatible with the HTTP/2 spec.  I've reported [the issue](https://trac.nginx.org/nginx/ticket/987#ticket) to the NGINX team.\n\n`<two_cents>`\nThat said, I still think the HTTP/2 wiki would benefit greatly from a section on recommended ciphers.  If you're going to take a stand on ciphers by blacklisting 276 of them, why not recommend some ciphers to use instead too?  Because saying \"don't do this\" is not as useful as saying \"don't do this, do this instead.\"\n`</two_cents>`\n\n-Jeff\n",
          "createdAt": "2016-05-28T23:49:28Z",
          "updatedAt": "2016-05-28T23:51:07Z"
        },
        {
          "author": "HansVanEijsden",
          "authorAssociation": "NONE",
          "body": "I know it depends on the SSL version, but the directives on https://cipherli.st are giving me an A+ on SSLLabs (with OpenSSL 1.0.2h). Yes, I think It would be great if NGINX could change the default ciphers. The more A or A+, the better imho.\n",
          "createdAt": "2016-05-29T13:58:45Z",
          "updatedAt": "2016-05-29T13:58:45Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "The WG chose to document a blacklist rather than a whitelist because it allows future (and presumably better) ciphers. It's not appropriate to recommend specific ciphers or configurations, because we don't have consensus to do that, and that sort of information is likely to go out of date quickly.\n\nThis really needs to come from your implementation.\n",
          "createdAt": "2016-05-30T00:16:49Z",
          "updatedAt": "2016-05-30T00:16:49Z"
        },
        {
          "author": "rundowncreator",
          "authorAssociation": "NONE",
          "body": "Well, then perhaps just adding some links to the the wiki would be a good compromise?  Maybe https://cipherli.st/ and https://www.ssllabs.com/ssltest/, or whatever else you guys think are good resources.\n\nRight now, NGINX's default config is not compatible with HTTP/2.  I've reported the issue to them, and I hope they fix it, but in the mean time, something as simple as a few links on the wiki could really make deploying a lot easier for other developers/sysadmins who aren't crypto experts.\n",
          "createdAt": "2016-05-30T18:27:28Z",
          "updatedAt": "2016-05-30T18:27:28Z"
        },
        {
          "author": "daurnimator",
          "authorAssociation": "NONE",
          "body": "This repository is for the _standard_, a \"permanent\" document it provide minimum security standards set at the time the standard was released. As time goes on new vulnerabilities will be discovered, and computers will get more powerful. Things currently considered secure will no longer be secure. In 10 years, nginx may not even exist, but this standard will remain unchanged. It's a bad idea to put any such specific advice into it.\n\n> Right now, NGINX's default config is not compatible with HTTP/2. I've reported the issue to them, and I hope they fix it\n\nThey should.\n\n> in the mean time\n\nAs noted above, this is not a place for temporary/\"mean time\" solutions.\n\n> on the wiki could really make deploying a lot easier for other developers/sysadmins who aren't crypto experts.\n\nPersonally I'm not sure why a sysadmin would ever really find their way here. This repository is mainly for implementors of http2 servers/clients/tools.\n\n---\n\nThat said, https://mozilla.github.io/server-side-tls/ssl-config-generator/ is (currently) a great link for generating secure TLS configurations for popular webservers. I recommend you bookmark it for your own purposes :)\n",
          "createdAt": "2016-05-31T00:31:03Z",
          "updatedAt": "2016-05-31T00:31:03Z"
        }
      ]
    },
    {
      "number": 756,
      "id": "MDU6SXNzdWUxNzYyMjE0OTY=",
      "title": "Invalid link in \"What does HTTP/2 do to improve security?\" section in FAQs",
      "url": "https://github.com/httpwg/http2-spec/issues/756",
      "state": "CLOSED",
      "author": "ipeychev",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hello,\n\nThere is an invalid link (returns 404) in \"What does HTTP/2 do to improve security?\" section in FAQs. The link is supposed to navigate to the draft about \"opportunistic encryption\".\n\nThanks,\n",
      "createdAt": "2016-09-11T05:21:27Z",
      "updatedAt": "2016-09-28T06:29:27Z",
      "closedAt": "2016-09-28T06:29:27Z",
      "comments": [
        {
          "author": "ipeychev",
          "authorAssociation": "NONE",
          "body": "The right repository seems to be [this](https://github.com/http2/http2.github.io/tree/master/faq) one, but there is no \"issues\" section. Please feel free to close this issue if opening in this way is agains the policies.\n\nThanks,\n",
          "createdAt": "2016-09-11T18:54:24Z",
          "updatedAt": "2016-09-11T18:54:24Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Fixed, thanks!\n",
          "createdAt": "2016-09-28T06:29:27Z",
          "updatedAt": "2016-09-28T06:29:27Z"
        }
      ]
    },
    {
      "number": 757,
      "id": "MDU6SXNzdWUxODcwNzA4MDQ=",
      "title": "Implementations: Chromium removed NPN",
      "url": "https://github.com/httpwg/http2-spec/issues/757",
      "state": "CLOSED",
      "author": "neilstuartcraig",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi\r\n\r\nI was just having a look at the implementations page and noticed that NPN is listed for Chromium. NPN was removed in July in Chromium which made it into Chrome 51. Am I OK to edit the page and either remove NPN from the Chromium listing or to note that it's <v51?\r\n\r\nSource: https://developers.google.com/web/updates/2016/04/chrome-51-deprecations#remove_tls_next_protocol_negotiation_npn\r\n\r\nCheers",
      "createdAt": "2016-11-03T14:13:08Z",
      "updatedAt": "2016-11-04T00:28:51Z",
      "closedAt": "2016-11-04T00:28:51Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, you should feel free to edit the wiki.\n\nBTW, Firefox recently removed NPN as well.\n",
          "createdAt": "2016-11-04T00:28:51Z",
          "updatedAt": "2016-11-04T00:28:51Z"
        }
      ]
    },
    {
      "number": 758,
      "id": "MDU6SXNzdWUxOTI0NTcyMzM=",
      "title": "Question about prioritization state management",
      "url": "https://github.com/httpwg/http2-spec/issues/758",
      "state": "CLOSED",
      "author": "laike9m",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I found the example in [5.3.4 Prioritization State Management](http://http2.github.io/http2-spec/index.html#priority-gc) very confusing.\r\n\r\nIn the previous paragraph, it says\r\n\r\n>Resources are shared between streams with the same parent stream, which means that if a stream in that set closes or becomes blocked, any spare capacity allocated to a stream is distributed to the immediate neighbors of the stream.\r\n\r\nAnd in the following example:\r\n\r\n>Prior to the removal of stream A, if streams A and D are unable to proceed, then stream C receives all the resources dedicated to stream A.\r\n\r\nIt seems to me a bit contradictory, since A and B are neighbors with the same parent stream, then why doesn\u2019t B share resources dedicated to A?\r\n\r\nI know this question may seem dumb, but I do hope to get answers from the experts. Thank you.",
      "createdAt": "2016-11-30T02:16:01Z",
      "updatedAt": "2018-12-11T06:15:17Z",
      "closedAt": "2018-12-11T06:15:17Z",
      "comments": [
        {
          "author": "laike9m",
          "authorAssociation": "NONE",
          "body": "Yesterday I sent an email to ietf-http-wg-request@w3.org asking the same question, but got a reply saying:\r\n\r\n> \r\n> *** NOTE: ***\r\n> \r\n>     Your message was sent from an address which is not on the list\r\n>     of people who are authorized to post to this mailing list.\r\n>     Therefore, your message has been forwarded to the list maintainer\r\n>     for manual processing.\r\n> \r\n>     If you do not see your message appear on the list or in the\r\n>     mailing list archives within a few business days, you may wish\r\n>     to contact the mailing list maintainer to investigate the delay.\r\n> \r\n>     -- W3C Postmaster\r\n>        http://www.w3.org/Mail/\r\n\r\nSo I guess people can't really asking questions that way.",
          "createdAt": "2016-11-30T02:17:38Z",
          "updatedAt": "2016-11-30T02:17:38Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The mailing list is ietf-http-wg@w3.org and you can subscribe to that list using the links here: https://lists.w3.org/Archives/Public/ietf-http-wg/  Subscribing will let you send (and receive) email.\r\n\r\nThe answer is that A and B do share resources, but they share the resources of their parent.  In the example, this node is not named, it might be the root of the tree.\r\n\r\nYou might be right about the example being confusing.  If A is blocked, then its dependents (C and D) should not proceed.  However, if A is complete, then C and D should receive any resources that would have been allocated to A.  This probably needs an erratum.\r\n",
          "createdAt": "2016-11-30T03:05:43Z",
          "updatedAt": "2016-11-30T03:05:43Z"
        },
        {
          "author": "laike9m",
          "authorAssociation": "NONE",
          "body": "Thx Martin. Here's my understanding, correct me if I'm wrong:\r\nThere are two cases:\r\n1. If A is blocked/closed but not removed from the tree, then B gets all resources that A owns.\r\n2. If A is removed from the dependency tree, then B, C, D share the resources, each get 1/3.\r\n",
          "createdAt": "2016-11-30T03:33:52Z",
          "updatedAt": "2016-11-30T03:33:52Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Three cases:\r\n1. If A is blocked, then B gets all resources that A owns.\r\n2. If A is closed but not removed from the tree, C and D gets A's share (1/4 each, assuming equal weights).\r\n3. If A is removed from the dependency tree, then B, C, D share the resources, each get 1/3 (assuming equal weighting for each).\r\n\r\nThe example talks about 2, but neglects to mention 1.\r\n",
          "createdAt": "2016-11-30T03:50:04Z",
          "updatedAt": "2016-11-30T03:59:47Z"
        },
        {
          "author": "laike9m",
          "authorAssociation": "NONE",
          "body": "case 2, Is it \"removed\" or \"not removed\"?",
          "createdAt": "2016-11-30T03:53:13Z",
          "updatedAt": "2016-11-30T03:53:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Oops, I meant not removed. Edited.",
          "createdAt": "2016-11-30T04:00:10Z",
          "updatedAt": "2016-11-30T04:00:10Z"
        },
        {
          "author": "laike9m",
          "authorAssociation": "NONE",
          "body": "Thx for this detailed explanation :+1: ",
          "createdAt": "2016-11-30T04:52:20Z",
          "updatedAt": "2016-11-30T04:52:20Z"
        }
      ]
    },
    {
      "number": 759,
      "id": "MDU6SXNzdWUyMDA3NzUxOTk=",
      "title": "Stream State and PRIORITY",
      "url": "https://github.com/httpwg/http2-spec/issues/759",
      "state": "CLOSED",
      "author": "Scottmitch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "What is the expected result in terms of stream state and any potential errors that should be generated from the following scenario:\r\n\r\n```\r\n1. Client [PRIORITY, id: 5] -> Server\r\n2. Client [HEADERS, id: 3] -> Server\r\n```\r\n\r\n## Option 1\r\nThe server accepts both frames. Stream `3` is OPEN and stream `5` remains in IDLE.\r\n\r\nThis behavior is verified in the h2spec verification tool via https://github.com/summerwind/h2spec/pull/67. Also see additional discussion there.\r\n\r\n## Option 2\r\nShould the use of stream ID `5` cause stream ID `3` (and all lower stream IDs) to be implicitly closed according to the section-5.1.1 (see [1])? This would mean after the server receives the frame from step (1) it thinks that stream ID `3` has been closed, and when the server receives the frame from step (2) it will respond with a connection error of type PROTOCOL_ERROR (see [2])?\r\n\r\n[1] https://tools.ietf.org/html/rfc7540#section-5.1.1\r\n> The first use of a new stream identifier implicitly closes all\r\n   streams in the \"idle\" state that might have been initiated by that\r\n   peer with a lower-valued stream identifier.\r\n\r\n[2] https://tools.ietf.org/html/rfc7540#section-5.1.1\r\n> An endpoint that\r\n   receives an unexpected stream identifier MUST respond with a\r\n   connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "createdAt": "2017-01-14T02:48:59Z",
      "updatedAt": "2021-02-08T21:40:11Z",
      "closedAt": "2021-02-08T21:40:11Z",
      "comments": [
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "This is being discussed on the httpbis mailing list https://lists.w3.org/Archives/Public/ietf-http-wg/2017JanMar/0046.html#start46",
          "createdAt": "2017-01-17T18:19:35Z",
          "updatedAt": "2017-01-17T18:19:35Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Leaving it open for bookkeeping.",
          "createdAt": "2017-01-18T00:20:46Z",
          "updatedAt": "2017-01-18T00:20:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Unsurprisingly, @Lukasa had what I think is [the definitive answer](https://lists.w3.org/Archives/Public/ietf-http-wg/2017JanMar/0049.html) from the thread in support of option 1 here.  We should try to clarify this further by making it clear that PRIORITY doesn't affect stream state (including for lower-numbered streams).\r\n\r\nAs this is now just editorial clarifications, I think that taking this as editorial is justified.  We can revisit if the changes start to look too scary.",
          "createdAt": "2021-01-28T09:24:15Z",
          "updatedAt": "2021-01-28T09:24:15Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe we addressed this in #813.",
          "createdAt": "2021-02-08T10:54:27Z",
          "updatedAt": "2021-02-08T10:54:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed.",
          "createdAt": "2021-02-08T21:40:11Z",
          "updatedAt": "2021-02-08T21:40:11Z"
        }
      ]
    },
    {
      "number": 760,
      "id": "MDU6SXNzdWUyMDE1MjQ2NzM=",
      "title": "How to host a rest service on HTTP 2.0?",
      "url": "https://github.com/httpwg/http2-spec/issues/760",
      "state": "CLOSED",
      "author": "himanshudave",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I have used https by modifying server.xml in tomcat8 by installing required certificates.\r\n",
      "createdAt": "2017-01-18T09:51:29Z",
      "updatedAt": "2017-01-18T23:31:03Z",
      "closedAt": "2017-01-18T23:31:03Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Ask tomcat.",
          "createdAt": "2017-01-18T23:31:03Z",
          "updatedAt": "2017-01-18T23:31:03Z"
        }
      ]
    },
    {
      "number": 761,
      "id": "MDU6SXNzdWUyMTk0OTU0OTk=",
      "title": "questions about stalled time",
      "url": "https://github.com/httpwg/http2-spec/issues/761",
      "state": "CLOSED",
      "author": "feifeipan",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I have a page include 100 images. In chrome network panel, I found stalled time and request sent time cost so much. \r\n\r\n![2017-04-05 1 26 54_1](https://cloud.githubusercontent.com/assets/2155605/24694025/e5df6862-1a12-11e7-902d-bdcb9eaee791.png)\r\n\r\n![2017-04-05 1 35 18_1](https://cloud.githubusercontent.com/assets/2155605/24694329/0f53fc48-1a14-11e7-87e2-8eedc86d1a90.png)\r\n\r\nthen i check the session detail. After sent 1.jpg_.webp, the client began to \u201c HTTP2_SESSION_RECV_DATA\u201d , when finish receiving, send \" HTTP2_SESSION_PING\" get \u201cack\", finally continue to send request.\r\n![2017-04-05 1 28 52_1](https://cloud.githubusercontent.com/assets/2155605/24694747/afbbbf80-1a15-11e7-9daa-81ce6c9c2065.png)\r\n![2017-04-05 1 29 20_1](https://cloud.githubusercontent.com/assets/2155605/24694756/b95e1f9c-1a15-11e7-853c-a430d1103ed2.png)\r\n\r\nI'm wondering if there is a limitation for client to send request. http/1.x have 6 request. what's the limitation for http/2?\r\n\r\nThanks a lot.\r\n\r\n ",
      "createdAt": "2017-04-05T07:43:50Z",
      "updatedAt": "2017-04-06T02:47:57Z",
      "closedAt": "2017-04-06T02:47:57Z",
      "comments": [
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "https://tools.ietf.org/html/rfc7540#section-5.1.2\r\n\r\n> A peer can limit the number of concurrently active streams using the\r\n   SETTINGS_MAX_CONCURRENT_STREAMS parameter (see Section 6.5.2) within\r\n   a SETTINGS frame.  The maximum concurrent streams setting is specific\r\n   to each endpoint and applies only to the peer that receives the\r\n   setting.  That is, clients specify the maximum number of concurrent\r\n   streams the server can initiate, and servers specify the maximum\r\n   number of concurrent streams the client can initiate.\r\n\r\nConsider opening an issue against the browser/server if you expect different behavior. This doesn't seem like a limitation of the spec.",
          "createdAt": "2017-04-05T21:54:04Z",
          "updatedAt": "2017-04-05T21:54:04Z"
        },
        {
          "author": "feifeipan",
          "authorAssociation": "NONE",
          "body": "Thanks. \r\n\r\nThe spec says there no limit to this value. But in my case , after only 6 request sent, the client stops sending request. After finish receiving stream 1225 and get an ack response, the client continue to send other request.\r\n\r\nthe max_concurrent setting failed? Or the client is waiting for an ack response?\r\n\r\n> SETTINGS_MAX_CONCURRENT_STREAMS (0x3):  Indicates the maximum number\r\n      of concurrent streams that the sender will allow.  This limit is\r\n      directional: it applies to the number of streams that the sender\r\n      permits the receiver to create.  Initially, there is no limit to\r\n      this value.  It is recommended that this value be no smaller than\r\n      100, so as to not unnecessarily limit parallelism.\r\n\r\n",
          "createdAt": "2017-04-06T02:40:04Z",
          "updatedAt": "2017-04-06T02:40:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "As @Scottmitch says, this is likely an issue with the browser - or server - you are using.  Please contact the developers of those products.  This isn't a specification issue.",
          "createdAt": "2017-04-06T02:47:57Z",
          "updatedAt": "2017-04-06T02:47:57Z"
        }
      ]
    },
    {
      "number": 762,
      "id": "MDU6SXNzdWUyMzcyMTg1NjE=",
      "title": "question about request payload compression",
      "url": "https://github.com/httpwg/http2-spec/issues/762",
      "state": "CLOSED",
      "author": "venkyvb",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Is there any reason why only header compression is part of the HTTP/2 spec ? I see no mention of anything around request payload compression. With a new version of HTTP this would have been a good opportunity to make this as a part of the spec as well. Is there a reason why request payload compression was not considered as a part of the spec ? ",
      "createdAt": "2017-06-20T13:57:09Z",
      "updatedAt": "2017-06-21T02:59:29Z",
      "closedAt": "2017-06-21T02:59:29Z",
      "comments": [
        {
          "author": "sebdeckers",
          "authorAssociation": "NONE",
          "body": "(Lurker here...)\r\n\r\nEffective compression of data frame payloads would be highly dependent on the nature of their content. Applying a one-size-fits-all compression (e.g. gzip) could be wasteful, or redundant at best, for many data types like media files. The `content-encoding` header handles this better IMHO.",
          "createdAt": "2017-06-20T15:02:49Z",
          "updatedAt": "2017-06-20T15:02:49Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Please ask questions on the mailing list; this is only for issues against the spec.",
          "createdAt": "2017-06-21T02:59:29Z",
          "updatedAt": "2017-06-21T02:59:29Z"
        }
      ]
    },
    {
      "number": 764,
      "id": "MDU6SXNzdWUyNDI2MzM1Njg=",
      "title": "question about  stream dependent on a not exists parent",
      "url": "https://github.com/httpwg/http2-spec/issues/764",
      "state": "CLOSED",
      "author": "byronhe",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I have question about the following paragraph in rfc 7540:\r\n\r\n> 5.3.1.  Stream Dependencies\r\n>   A stream that depends on another stream is a dependent stream.  The\r\n>    stream upon which a stream is dependent is a parent stream.  A\r\n>    dependency on a stream that is not currently in the tree -- such as a\r\n>    stream in the \"idle\" state -- results in that stream being given a\r\n>    default priority (Section 5.3.5).\r\n> \r\n\r\nwhich does ' that stream ' mean ? the stream in frame header ? or the  dependency stream in \"idle\" state ?\r\n \r\nfor example, if stream 6 in open state, but stream 7 not exist ( in idle state ). then peer send a  PRIORITY on stream 6 with dependency = 7  , weight = 100, exclusive  = true,\r\n\r\nwhich should i do ?\r\n\r\n1.  allocate a new node for stream 7 in my depenency tree ,  then do normal PRIORITY processing.\r\n2.  let stream 6 dependent on stream 0 (root),  still using weight = 100, exclusive = true.\r\n3.  let stream 6 dependent on stream 0, with default priority weight = 100, exclusive = false.\r\n4.  let stream 6 dependent on stream 0, with default priority weight = 16, exclusive = false.\r\n",
      "createdAt": "2017-07-13T09:05:47Z",
      "updatedAt": "2017-07-13T15:23:46Z",
      "closedAt": "2017-07-13T10:29:43Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"That stream\" is the parent stream in the idle state. So you should do 1.",
          "createdAt": "2017-07-13T09:17:51Z",
          "updatedAt": "2017-07-13T09:17:51Z"
        },
        {
          "author": "byronhe",
          "authorAssociation": "NONE",
          "body": "nginx choose 3  :\r\nhttps://github.com/nginx/nginx/blob/master/src/http/v2/ngx_http_v2.c#L4390\r\n\r\nand proxygen choose 2 :\r\nhttps://github.com/facebook/proxygen/blob/master/proxygen/lib/http/session/HTTP2PriorityQueue.cpp#L530\r\n\r\ntrafficserver choose 2:\r\nhttps://github.com/apache/trafficserver/blob/master/proxy/http2/Http2DependencyTree.h#L170\r\n\r\n\r\nonly nghttp2 choose 1:\r\nhttps://github.com/nghttp2/nghttp2/blob/master/lib/nghttp2_session.c#L765",
          "createdAt": "2017-07-13T09:32:40Z",
          "updatedAt": "2017-07-13T09:33:07Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If that's the case, I'd say nginx, proxygen, and trafficserver are wrong. :wink:\r\n\r\nSo, doing 2 is *clearly* wrong because asking for stream 6 to be an exclusive dependant of stream 7 is causing you to make stream 6 an exclusive dependant of the root stream. This forces *all other streams* to become dependants of stream 6, which is clearly utterly incorrect. 2 is wrong.\r\n\r\nDoing 3 is *less* wrong but it leads to overweighting of stream 6. While the other streams continue to sit in the same place in the tree, stream 6 should be being given 100% of the weight of its parent stream, stream 7, which should be the default weight. Instead, it's being given proportionally more of the weight (the proportion depends on the weights of the other streams).\r\n\r\nDoing 4 is the least wrong of the collection: it leads to the appropriate weights *at the moment*. It becomes wrong if stream 8 is immediately made a child of stream 7, where streams 6 and 8 should share the total weight of their parent stream but will instead get a bit more resources. But it's the closest to correct in the first instance.\r\n\r\nAs a note, the Python priority tree implementation also does (1).",
          "createdAt": "2017-07-13T09:39:40Z",
          "updatedAt": "2017-07-13T09:39:40Z"
        },
        {
          "author": "byronhe",
          "authorAssociation": "NONE",
          "body": "ok ,  i agree, we should do 1. \r\nthanks. ",
          "createdAt": "2017-07-13T10:29:30Z",
          "updatedAt": "2017-07-13T10:29:30Z"
        },
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "There is at least 1 discussion on this topic on the mailing list [1]. It is long but the conclusion is priority frames are not meant to change the state of a stream and in practice it the semantics are better represented if the priority state and stream state can be decoupled to account for this. Keep in mind you may want to only keep a limited amount of state for priority as it is only advisory, but this is not the case for \"active streams\" which the amount of state is limited by `SETTINGS_MAX_CONCURRENT_STREAMS`.\r\n\r\n[1] https://lists.w3.org/Archives/Public/ietf-http-wg/2017JanMar/0046.html",
          "createdAt": "2017-07-13T15:23:46Z",
          "updatedAt": "2017-07-13T15:23:46Z"
        }
      ]
    },
    {
      "number": 765,
      "id": "MDU6SXNzdWUyOTk5ODgyNzY=",
      "title": "http2 enable or not ?",
      "url": "https://github.com/httpwg/http2-spec/issues/765",
      "state": "CLOSED",
      "author": "stratege1401",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I am wondering if my server is http2 alpn enable or not ??\r\n\r\nLoadModule http2_module /usr/lib/apache2/modules/mod_http2.so CHECK\r\n\r\n```\r\nApache -V\r\n\r\nServer version: Apache/2.4.29 (Debian)\r\nServer built:   2018-01-14T11:01:58\r\nServer's Module Magic Number: 20120211:68\r\nServer loaded:  APR 1.6.3, APR-UTIL 1.6.1\r\nCompiled using: APR 1.6.3, APR-UTIL 1.6.1\r\nArchitecture:   64-bit\r\nServer MPM:\r\nServer compiled with....\r\n -D APR_HAS_SENDFILE\r\n -D APR_HAS_MMAP\r\n -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\r\n -D APR_USE_SYSVSEM_SERIALIZE\r\n -D APR_USE_PTHREAD_SERIALIZE\r\n -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\r\n -D APR_HAS_OTHER_CHILD\r\n -D AP_HAVE_RELIABLE_PIPED_LOGS\r\n -D DYNAMIC_MODULE_LIMIT=256\r\n -D HTTPD_ROOT=\"/etc/apache2\"\r\n -D SUEXEC_BIN=\"/usr/lib/apache2/suexec\"\r\n -D DEFAULT_PIDLOG=\"/var/run/apache2.pid\"\r\n -D DEFAULT_SCOREBOARD=\"logs/apache_runtime_status\"\r\n -D DEFAULT_ERRORLOG=\"logs/error_log\"\r\n -D AP_TYPES_CONFIG_FILE=\"mime.types\"\r\n -D SERVER_CONFIG_FILE=\"apache2.conf\"\r\n```\r\n\r\n\r\nmy vhost ssl conf\r\n\r\n```\r\n<IfModule mod_ssl.c>\r\n<VirtualHost *:443>\r\n        ServerAdmin webmaster@localhost\r\n        DocumentRoot /var/www/html\r\n        Protocols h2 h2c http/1.1\r\n        ErrorLog ${APACHE_LOG_DIR}/error.log\r\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\r\n        SSLCertificateFile /etc/letsencrypt/live/xxx/fullchain.pem\r\n        SSLCertificateKeyFile /etc/letsencrypt/live/xxx/privkey.pem\r\n        Include /etc/letsencrypt/options-ssl-apache.conf\r\n        ServerName xxx\r\n        Header always set Strict-Transport-Security \"max-age=15768000; includeSubDomains\"\r\n\r\n</VirtualHost>\r\nSSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1\r\nSSLCipherSuite       EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\r\nSSLHonorCipherOrder     on\r\nSSLCompression          on\r\nSSLSessionTickets       off\r\nSSLOptions +StrictRequire\r\n\r\n# OCSP Stapling, only in httpd 2.3.3 and later\r\nSSLUseStapling          on\r\nSSLStaplingResponderTimeout 5\r\nSSLStaplingReturnResponderErrors off\r\nSSLStaplingCache        shmcb:/var/run/ocsp(128000)\r\n\r\n# vim: syntax=apache ts=4 sw=4 sts=4 sr noet\r\n</IfModule>\r\n```\r\n\r\nWhen testing https://tools.keycdn.com/http2-test i get a negative response for http2 and alpn.\r\nWhen testing   https://www.ssllabs.com/ssltest/analyze.html?d=myserver i got ALPN | Yes \u00a0\u00a0http/1.1\r\n\r\nUsing a curl on my server, i get:\r\n```\r\ncurl -v --http2 https://myserver\r\n\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256\r\n* ALPN, server accepted to use http/1.1\r\n*  SSL certificate verify ok.\r\n> GET / HTTP/1.1\r\n< HTTP/1.1 200 OK\r\n< Date: Sun, 25 Feb 2018 01:05:18 GMT\r\n< Server: Apache\r\n< Strict-Transport-Security: max-age=15768000; includeSubDomains\r\n< Upgrade: h2\r\n< Connection: Upgrade\r\n< Last-Modified: Wed, 07 Feb 2018 00:37:30 GMT\r\n< ETag: \"b3-5649480136825\"\r\n< Accept-Ranges: bytes\r\n< Content-Length: 179\r\n< Vary: Accept-Encoding\r\n< Content-Type: text/html\r\n\r\n```\r\nI am a little lost here. Enable or not ??\r\n What bother me is i dont see\r\n`ALPN, server accepted to use h2`\r\n\r\nAny clue ??\r\n\r\nThank you.\r\n\r\n\r\n",
      "createdAt": "2018-02-25T01:25:10Z",
      "updatedAt": "2018-02-25T08:37:55Z",
      "closedAt": "2018-02-25T08:37:55Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This is not a support repo; please contact your vendor.",
          "createdAt": "2018-02-25T08:37:55Z",
          "updatedAt": "2018-02-25T08:37:55Z"
        }
      ]
    },
    {
      "number": 766,
      "id": "MDU6SXNzdWUzMzE0MTIzNjg=",
      "title": "[feature request] To build General Multiplexing Question/Answer Protocol(TCP)",
      "url": "https://github.com/httpwg/http2-spec/issues/766",
      "state": "CLOSED",
      "author": "diyism",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I think HTTP2 is very good about multiplexing communication based on frames.\r\n\r\nBut i think we need a standard \"General Multiplexing Question/Answer Protocol(TCP)\" that abstracted from HTTP2. I abbreviate it as GMQAP.\r\n\r\nSince HTTP is also a Question/Answer(QA) protocol, we can run any QA protocol on GMQAP, not only HTTP.\r\n\r\nIf we have built GMQAP, for example, on nginx, we can supply the same service on both HTTP and GMQAP protocols, the HTTP port accepts internet requests, the GMQAP port accepts intranet requests, but the backend is the same php-fpm. Because the two protocols are both QA protocol, we can prefix the same heads to GMQAP to transform it into HTTP data structure.",
      "createdAt": "2018-06-12T02:13:57Z",
      "updatedAt": "2018-06-12T02:43:38Z",
      "closedAt": "2018-06-12T02:43:28Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This is off-topic for this repo.",
          "createdAt": "2018-06-12T02:43:28Z",
          "updatedAt": "2018-06-12T02:43:28Z"
        }
      ]
    },
    {
      "number": 767,
      "id": "MDU6SXNzdWUzNjk4NjUwNDE=",
      "title": "HPACK Dynamic Table Size and Lazy Huffman Decoding",
      "url": "https://github.com/httpwg/http2-spec/issues/767",
      "state": "CLOSED",
      "author": "samoconnor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The [FAQ says](https://http2.github.io/faq/#why-is-there-an-eos-symbol-in-hpack) that because of the padding in HPACK\u2019s huffman encoding...\r\n> many headers can be interpreted without being Huffman decoded\r\n\r\nFollowing this logic we have implemented a lazy HPACK decoder that defers Huffman decoding until a string needs to be interpreted or compared to a non-ecoded string. In the case of comparison we only decode as many bytes as needed to find the first mismatch.\r\n\r\nHowever, it seems that we will have to huffman decode most strings anyway in order to follow the spec with regard to calculate dynamic table size.\r\n\r\n[RFC7541 4.1](https://httpwg.org/specs/rfc7541.html#rfc.section.4.1) says that headers have to be huffman decoded in order to calculate the dynamic table size:\r\n> The size of an entry is calculated using the length of its name and value without any Huffman encoding applied.\r\n\r\nIt is inefficient to have to compute a fictional \"table size\" using the decoded size +32, when our actual  Huffman encoded table size is smaller.\r\n\r\n[RFC7541 4.4](https://httpwg.org/specs/rfc7541.html#rfc.section.4.4) says that entries \"are\" evicted in certain circumstances. Note that it does not say \"MUST be\" or \"SHOULD be\":\r\n\r\n> Before a new entry is added to the dynamic table, entries **are** evicted from the end of the dynamic table until the size of the dynamic table is less than or equal to (maximum size - new entry size) or until the table is empty.\r\n\r\nMaybe this should be relaxed to say \"SHOULD be evicted\" to allow lazy implementations that might prefer to defer eviction to a later time, or use a more relaxed threshold. For example, an implementation that ueses the huffman encoded size to compute table size will never prematurely evict entries that the encoder would later rely on. Instead it will harmlessly retain some entries that the encoder would assume had been evicted.\r\n\r\nIs there any reason that a decoder MUST not leave entries in the dynamic table after the strict interpretation of the table size calculation would have evicted them?\r\n\r\nIt seems that the only way an encoder could know that a decoder was being lazy and not evicting entries is by sending a deliberately out of bounds index and checking for a decoding error.",
      "createdAt": "2018-10-14T03:55:06Z",
      "updatedAt": "2018-10-15T22:58:41Z",
      "closedAt": "2018-10-15T22:56:13Z",
      "comments": [
        {
          "author": "samoconnor",
          "authorAssociation": "NONE",
          "body": "https://tools.ietf.org/html/rfc7541#section-2.3.3\r\n> Indices strictly greater than the sum of the lengths of both tables MUST be treated as a decoding error.\r\n\r\nThis seems to imply that entries MUST be evicted according to the table size calculated exactly per [4.1](https://httpwg.org/specs/rfc7541.html#rfc.section.4.1).",
          "createdAt": "2018-10-15T04:40:11Z",
          "updatedAt": "2018-10-15T04:40:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@MikeBishop pointed out that this isn't much different than the encoder using less than the full size of the table.  Aside from the requirement in Section 2.3.3 you point out, there aren't any strong reasons to strictly evict.  In fact, as long as the encoder behaves, you should never encounter the decoding error - and few encoders will bother to check that you are generating a decoder error faithfully.\r\n\r\nThe real problem comes when the values are bigger when encoded.  If you get a lot of 0xff and friends (which aren't valid ASCII in terms of most header fields), then the Huffman-encoded string will be longer than the actual string.  That will get you into trouble because you will appear not to have space when you really should.  You could get tons of CRLF octets, which use 30 bits each, multiplying the space you use by almost 4.  You will think that you have run out of space, when the encoder thinks it still has room.\r\n\r\nYou can't assume encoders won't expand strings, sadly.\r\n\r\nSo aside from multiplying the space you have by 30/8, which is not ideal, it's probably best to look for long encodings.  All the long encodings start with 7 1s (`0xfe | ?`).  But scanning for those efficiently is tricky.  Best I can think of is a decoder pass without saving the output; I know some implementations do that to count sizes.",
          "createdAt": "2018-10-15T09:03:13Z",
          "updatedAt": "2018-10-15T09:03:13Z"
        },
        {
          "author": "samoconnor",
          "authorAssociation": "NONE",
          "body": "Thanks for taking the time to share your knowledge @martinthomson.\r\n\r\nI'm working on code for Julia, which is targeted at machines that typically have lots of RAM.\r\nMy current experiment,  following in the pattern of our [existing lazy HTTP/1.1 parser](https://github.com/JuliaWeb/HTTP.jl/blob/so/lazyprep/src/LazyHTTP.jl), is to build [a HPACK decoder that is as lazy as possible](https://github.com/JuliaWeb/HTTP.jl/blob/so/lazyprep/src/HPack.jl). Having a largish fixed size buffer for the dynamic table is fine at least for now. The plan is to eventually compare performance with various aspects of laziness turned on and off to figure the best compromises.\r\n\r\nI have to say that the scheme of computing a fictional number of bytes consumed seems convoluted and unhelpful. Surely the same intent could be achieved by using the actual on-the-wire number of bytes. The idea of a constrained table size seems to be aimed at helping IOT-type devices with constrained memory. Surely if effort is being invested in RAM efficient implementations for these small systems they would keep the table in compressed form anyway?",
          "createdAt": "2018-10-15T09:49:52Z",
          "updatedAt": "2018-10-15T09:49:52Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We debated this point at the time we decided to do this and settled on counting the decoded size; it wasn't an easy call.  The time-space trade-offs never are.\r\n\r\nClosing this, since this repo is long dead.  If you want to ask any more questions, I'd recommend going direct to the working group using email: ietf-http-wg@w3.org",
          "createdAt": "2018-10-15T22:56:13Z",
          "updatedAt": "2018-10-15T22:56:13Z"
        },
        {
          "author": "samoconnor",
          "authorAssociation": "NONE",
          "body": "Thanks @martinthomson",
          "createdAt": "2018-10-15T22:58:41Z",
          "updatedAt": "2018-10-15T22:58:41Z"
        }
      ]
    },
    {
      "number": 768,
      "id": "MDU6SXNzdWU0MjAzMDY4NjY=",
      "title": "Clarify :path format",
      "url": "https://github.com/httpwg/http2-spec/issues/768",
      "state": "CLOSED",
      "author": "daurnimator",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Is a HTTP2 `:path` allowed to contain a target of 'absolute-form'?\r\nWhat should the `:path` (and `:authority`) contain if making a request through a HTTP2 proxy?\r\n\r\nFrom HTTP1.1 spec:\r\n> When making a request to a proxy, other than a CONNECT or server-wide\r\n>  OPTIONS request (as detailed below), a client MUST send the target\r\n>  URI in absolute-form as the request-target.\r\n\r\nFrom HTTP2 spec:\r\n> The :authority pseudo-header field includes the authority portion of the target URI ([RFC3986], Section 3.2). The authority MUST NOT include the deprecated userinfo subcomponent for http or https schemed URIs.\r\n>\r\n> To ensure that the HTTP/1.1 request line can be reproduced accurately, this pseudo-header field MUST be omitted when translating from an HTTP/1.1 request that has a request target in origin or asterisk form (see [RFC7230], Section 5.3). Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field. An intermediary that converts an HTTP/2 request to HTTP/1.1 MUST create a Host header field if one is not present in a request by copying the value of the :authority pseudo-header field.\r\n>\r\n> The :path pseudo-header field includes the path and query parts of the target URI (the path-absolute production and optionally a '?' character followed by the query production (see Sections 3.3 and 3.4 of [RFC3986]). A request in asterisk form includes the value '*' for the :path pseudo-header field.\r\n\r\n\r\nRelated:\r\n  - https://github.com/daurnimator/lua-http/pull/141\r\n  - https://github.com/curl/curl/issues/3570\r\n  - https://github.com/nghttp2/nghttp2/issues/1304",
      "createdAt": "2019-03-13T04:02:06Z",
      "updatedAt": "2020-10-28T06:55:57Z",
      "closedAt": "2020-10-28T06:55:57Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "It seems pretty clear to me; `:path` contains the path and query parts of the target URI. HTTP/1.1's messaging requirements don't apply to HTTP/2.",
          "createdAt": "2019-03-13T04:33:01Z",
          "updatedAt": "2019-03-13T04:33:01Z"
        },
        {
          "author": "daurnimator",
          "authorAssociation": "NONE",
          "body": "Would it be correct to say that:\r\n\r\nHTTP/1.1 not via a proxy (preferred):\r\n```\r\nGET /path HTTP/1.1\r\nHost: foo.com\r\n```\r\n\r\nHTTP/1.1 via proxy or not (due to RFC 7230 Section 5.3.2: \"To allow for transition to the absolute-form for all requests in some future version of HTTP, a server MUST accept the absolute-form in requests, even though HTTP/1.1 clients will only send them in requests to proxies.\"):\r\n```\r\nGET http://foo.com/path HTTP/1.1\r\nHost: fieldignored.com\r\n```\r\n\r\nHTTP/2 either via a proxy or not:\r\n```\r\n:method GET\r\n:scheme http\r\n:authority foo.com\r\n:path /path\r\n```\r\n\r\ni.e. HTTP/1.1 message request serialization *needs* to know if it's going via a proxy or not as part of message construction (at least if you want to use the preferred form?)? Whereas HTTP/2 headers are invariant upon use of proxy or not?",
          "createdAt": "2019-03-13T04:56:41Z",
          "updatedAt": "2019-03-13T04:56:41Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I think so.",
          "createdAt": "2019-03-14T03:27:59Z",
          "updatedAt": "2019-03-14T03:27:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The Host header field in HTTP/2 is only for translation cases.\r\n\r\nIf you get\r\n\r\n```\r\nGET /path HTTP/1.1\r\nHost: foo.com\r\n```\r\n\r\nYou would forward as:\r\n\r\n```\r\n:method GET\r\n:scheme http\r\n:path /path\r\nhost foo.com\r\n```\r\n\r\nBut if you get the unlikely:\r\n\r\n```\r\nGET http://foo.com/path HTTP/1.1\r\nHost: fieldignored.com\r\n```\r\n\r\nThen you would forward as:\r\n\r\n```\r\n:method GET\r\n:scheme http\r\n:authority foo.com\r\n:path /path\r\nhost fieldignored.com\r\n```\r\n\r\nThat was the reasoning behind the change.  In practice, if `:authority` is there, that is what servers should use and it should be used where feasible, but there is a potential signal loss if you don't use `host` when forwarding requests.  (There is also a potential security exposure with conflicting values.)",
          "createdAt": "2019-03-14T03:46:02Z",
          "updatedAt": "2019-03-14T03:46:02Z"
        },
        {
          "author": "daurnimator",
          "authorAssociation": "NONE",
          "body": "> That was the reasoning behind the change.\r\n\r\nWhich change is that?\r\n\r\nIs there any other situation that host should be sent? Should the host header be sent in http2 even when it matches `:authority`?",
          "createdAt": "2019-03-14T03:53:11Z",
          "updatedAt": "2019-03-14T03:53:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I should have said \"design\", not \"change\".  Whether you send the host header field depends on whether you are forwarding a request or originating one.  No sense in setting it unless you are copying from another request.",
          "createdAt": "2019-03-14T10:14:17Z",
          "updatedAt": "2019-03-14T10:14:17Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Cleaning up old issues.",
          "createdAt": "2020-10-28T06:55:57Z",
          "updatedAt": "2020-10-28T06:55:57Z"
        }
      ]
    },
    {
      "number": 769,
      "id": "MDU6SXNzdWU0NDE2ODQ2MzI=",
      "title": "header with CONTINUATION and  END_STREAM.",
      "url": "https://github.com/httpwg/http2-spec/issues/769",
      "state": "CLOSED",
      "author": "CodeLife2012",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "```\r\n  GET /resource HTTP/1.1          HEADERS\r\n  Host: example.org          ==>     + END_STREAM\r\n  {empty data}                       - END_HEADERS\r\n                                       :method = GET\r\n                                       :path = /resource\r\n                                       :scheme = https\r\n                                       :host = example.org\r\n\r\n                                   CONTINUATION\r\n                                     + END_HEADERS\r\n                                       cookie = xxx\r\n```\r\n Is this a reasonable frame sequences?",
      "createdAt": "2019-05-08T11:22:06Z",
      "updatedAt": "2019-05-08T12:24:09Z",
      "closedAt": "2019-05-08T12:24:03Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This isn't a support channel.",
          "createdAt": "2019-05-08T12:24:03Z",
          "updatedAt": "2019-05-08T12:24:03Z"
        }
      ]
    },
    {
      "number": 770,
      "id": "MDU6SXNzdWU3MTA2NDcxNzY=",
      "title": "Correct handling of HTTP/2 frames with multiple errors",
      "url": "https://github.com/httpwg/http2-spec/issues/770",
      "state": "CLOSED",
      "author": "eggyal",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It's not clear to me from RFC 7540 how an endpoint should behave upon receiving a frame that is erroneous in more than one way.\r\n\r\nFor example, suppose a server receives the following frame when it has stream id 1 in half-closed (remote) state:\r\n\r\n```\r\n{\r\n\u00a0 length = 4\r\n\u00a0 type = HEADERS\r\n\u00a0 flags = PRIORITY\r\n\u00a0 stream id = 1\r\n\u00a0 E = 0\r\n\u00a0 stream dependency = 1\r\n}\r\n```\r\n\r\n- According to \u00a74.2, the frame \"MUST be treated as a connection error\" and the server \"MUST send an error code of FRAME_SIZE_ERROR\" (because the length of 4 \"is too small to contain mandatory frame data\", namely the weight and header block fragment fields);\r\n- According to \u00a75.1, the server \"MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED\" (because a frame \"other than WINDOW_UPDATE, PRIORITY, or RST_STREAM\" was received for a stream that is in \"half-closed (remote)\" state); and\r\n- According to \u00a75.3.1, the server \"MUST treat this as a stream error (Section 5.4.2) of type PROTOCOL_ERROR\" (because \"a stream cannot depend on itself\").\r\n\r\nThat is to say, according to the RFC, the server MUST (at very least) respond to this frame with one GOAWAY frame and two RST_STREAM frames. \u00a0However, sending all these frames would violate other requirements:\r\n\r\n- According to \u00a75.4.1, \"after sending the GOAWAY frame for an error condition, the endpoint MUST close the TCP connection\". \u00a0This obviously prevents other frames from being sent.\r\n- According to \u00a75.1, sending a RST_STREAM transitions the stream to closed state, in which \"an endpoint MUST NOT send frames other than PRIORITY\". \u00a0This prevents any further RST_STREAM frames from being sent for the same stream.\r\n\r\nIn this particular case, it seems reasonable to me that the frame size error should halt further processing of the frame such that neither of the stream errors are even detected: after all, an incorrect frame size may indicate corruption (in which case the rest of the frame's data must also be suspect). \u00a0But this is neither clear from the spec nor might other cases be so clear cut.\r\n\r\nI see three possibilities, with a reasonably strong leaning toward the first:\r\n\r\n1. Clarify that further processing of frames SHOULD (or MUST?) be halted upon encountering an error (I suspect this is what most implementations currently do, irrespective that the RFC says they \"MUST\" behave otherwise?).\u00a0 But then the order of processing becomes significant: is it right that this should be left as an implementation detail, or should it be specified?\u00a0 After all, the above frame might trigger a STREAM_CLOSED stream error from one server and a FRAME_SIZE_ERROR connection error from another, with very different consequences:\u00a0how might these differences impact intermediaries, caching and retries?  Better I think for the order to be specified.\r\n\r\n2. Define a precedence to errors, and mandate that that with highest precedence be sent (for example, connection errors might have higher precedence than stream errors).\u00a0 But then endpoints must continue processing frames they know to be erroneous simply to discover whether any higher precedence errors also exist (at least until an error of the\u00a0highest possible precedence is encountered).\r\n\r\n3. Permit (require?) all errors arising from a single frame to be transmitted irrespective of any other errors the frame may also have triggered.  Again, endpoints would then continue processing frames that they know to be erroneous\u2014but the peer would then be fully informed of all problems in order that it is better able to recover.",
      "createdAt": "2020-09-28T15:56:20Z",
      "updatedAt": "2021-02-22T22:48:36Z",
      "closedAt": "2021-02-22T22:48:36Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the simplest explanation is that connection errors are those that suggest there's no way to (safely) continue attempting to parse anything.  I suspect most implementations would find that this frame is not long enough to actually be a HEADERS frame and not attempt to parse it as a frame it cannot actually be.\r\n\r\nThus, while a given implementation could possibly discover one of the stream errors first (thereby sending a RST_STREAM), once you discover the connection error, you're sending the GOAWAY and throwing the connection state away.  The logical implementation is likely to find the connection error immediately and not read far enough to find the others.",
          "createdAt": "2020-09-29T18:35:19Z",
          "updatedAt": "2020-09-29T18:35:19Z"
        },
        {
          "author": "eggyal",
          "authorAssociation": "NONE",
          "body": "I agree, but this is not specified.  Is it okay to leave as an implementation detail, even if most implementations will do the \"logical thing\"?  Also this was just one example of a frame with multiple errors... others may not be so straightforward.",
          "createdAt": "2020-09-29T21:55:49Z",
          "updatedAt": "2020-09-29T21:56:29Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The question we should ask is: Is there any behavior that would change that\nwould cause it to not interoperate here?\nI suspect that, regardless of how one interprets this, processing must\nstop, and the client may or may not receive an error, thanks to the\nvagaries of packet-loss.\n\nIf this requires any clarification, I'd pick the path of asserting that any\nconnection error stops any other processing.\n\n\nOn Tue, Sep 29, 2020 at 2:56 PM eggyal <notifications@github.com> wrote:\n\n> I agree, but this is not specified. Is it okay to leave as an\n> implementation detail, even if most implementations will do the \"logical\n> thing\"?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/httpwg/http2-spec/issues/770#issuecomment-701012879>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAHV24U2QTW4K5H3JYJ4DHDSIJJXTANCNFSM4R5DCGCQ>\n> .\n>\n",
          "createdAt": "2020-09-29T22:46:47Z",
          "updatedAt": "2020-09-29T22:46:47Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Actually I also found error handling quite tricky to do, especially regarding when and what to send in GOAWAY frames. One really needs to think in terms of error severity to implement a form of funnel so that more severe errors can still be emitted after less serious ones. One example that quickly comes to mind is that we can send a GOAWAY frame to indicate a graceful shutdown of a connection yet this one is not an error and may be followed by other GOAWAY reporting protocol violations.\r\n\r\nI also faced an annoying situation related to TCP where you can't send a GOAWAY frame due to a buffer full situation, and closing after this causes a reset to be emitted due to pending incoming data. So we actually have to enter an input drain state in error situations, which further adds to the implementation complexity.",
          "createdAt": "2020-10-30T08:18:39Z",
          "updatedAt": "2020-10-30T08:18:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "QUIC has [a set of error handling principles](https://quicwg.org/base-drafts/draft-ietf-quic-transport.html#section-11-2) that I think h2 would benefit from.\r\n",
          "createdAt": "2020-10-30T08:26:43Z",
          "updatedAt": "2020-10-30T08:26:43Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See #819 for some proposed text to address this. We probably need to workshop it a bit.",
          "createdAt": "2021-02-12T17:20:36Z",
          "updatedAt": "2021-02-12T17:20:36Z"
        }
      ]
    },
    {
      "number": 771,
      "id": "MDU6SXNzdWU3MzExNzA3MDE=",
      "title": "Update HTML5 reference",
      "url": "https://github.com/httpwg/http2-spec/issues/771",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The current reference is in the WHATWG \"infra standard\": https://infra.spec.whatwg.org/#tracking-vector\r\n\r\nTo use this, we need to ask for the \"tracking-vector\" anchor to be made permanent.",
      "createdAt": "2020-10-28T07:08:02Z",
      "updatedAt": "2021-02-18T08:58:53Z",
      "closedAt": "2021-02-18T08:58:53Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/whatwg/infra/issues/349 filed.  I have changes for a pull request [staged](https://github.com/martinthomson/http2v2/pull/new/tracking-vector-ref).",
          "createdAt": "2020-12-16T01:03:56Z",
          "updatedAt": "2020-12-16T01:03:56Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I'm a bit surprised you chose infra; the fingerprinting guidance document in the W3C is much more complete. There are also _tons_ of academic references that have better descriptions; to start, Eckersley's original paper.",
          "createdAt": "2020-12-22T04:34:05Z",
          "updatedAt": "2020-12-22T04:34:05Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I was looking for a direct replacement, which is what that is.  I can cite https://w3c.github.io/fingerprinting-guidance/ if you think that is better.  Or https://www.w3.org/TR/fingerprinting-guidance/ if that makes more sense.  I never know which is better.",
          "createdAt": "2020-12-22T06:15:03Z",
          "updatedAt": "2020-12-22T06:15:03Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Probably the TR - whatever bibxml says, I'd think.",
          "createdAt": "2020-12-23T04:01:13Z",
          "updatedAt": "2020-12-23T04:01:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to go with something simpler.  RFC 6973 has an adequate definition.",
          "createdAt": "2021-02-02T05:38:40Z",
          "updatedAt": "2021-02-02T05:38:40Z"
        }
      ]
    },
    {
      "number": 772,
      "id": "MDU6SXNzdWU3MzExNzEyMTI=",
      "title": "Remove upgrade mechanism",
      "url": "https://github.com/httpwg/http2-spec/issues/772",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This has not been implemented, so can likely go.\r\n\r\nSee the discussion on https://github.com/martinthomson/http2v2/issues/2 for more context.",
      "createdAt": "2020-10-28T07:08:44Z",
      "updatedAt": "2021-05-24T07:07:54Z",
      "closedAt": "2021-05-24T07:07:54Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I\u2019m in favour of removing this. It\u2019s clear that the ecosystem has not found a use for it.",
          "createdAt": "2020-10-28T08:02:59Z",
          "updatedAt": "2020-10-28T08:02:59Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "As a co-author of this one, I agree as well. This resulted from a misunderstanding of the use of the preface that everyone happily uses in clear to distinguish between H1 and H2 (and hence serve as a much easier upgrade).",
          "createdAt": "2020-10-30T08:12:31Z",
          "updatedAt": "2020-10-30T08:12:31Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Seems to have support; does anyone have an issue with this?",
          "createdAt": "2020-11-11T01:17:33Z",
          "updatedAt": "2020-11-11T01:17:33Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "NONE",
          "body": "As stated in today's meeting, this sounds good to me, but it's worth posting on the list.",
          "createdAt": "2021-02-09T23:02:23Z",
          "updatedAt": "2021-02-09T23:02:23Z"
        }
      ]
    },
    {
      "number": 773,
      "id": "MDU6SXNzdWU3MzExNzE3MzU=",
      "title": "Consider (partial) removal of priority signaling",
      "url": "https://github.com/httpwg/http2-spec/issues/773",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This probably needs a skeleton left over so that we can avoid interoperability problems that might arise from interactions with peers that still have them. There are some MUST-level requirements around parsing that would need to be identified and marked.\r\n\r\nSee https://github.com/martinthomson/http2v2/issues/3 for more discussion.",
      "createdAt": "2020-10-28T07:09:35Z",
      "updatedAt": "2021-05-24T07:04:42Z",
      "closedAt": "2021-05-24T07:04:42Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This needs more discussion if we're going to do it; otherwise we should drop it. One thing to discuss: if we change the ALPN identifier, does this become more practical?",
          "createdAt": "2020-11-11T01:17:11Z",
          "updatedAt": "2020-11-11T01:17:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Changing ALPN makes anything possible.\r\n\r\nSo here is what I would propose concretely:\r\n\r\n1. Cut the section with the detailed explanation and replace it with some explanatory text about the importance of having prioritization in a multiplexed transport (though not necessarily signaling thereof).\r\n2. Explain that this document used to define a priority signaling scheme, but that the one that was defined was unsuccessful.\r\n3. In that section recommend against using the priority signaling scheme from RFC 7540, but explain that other endpoints that you talk to might send these frames.\r\n4. Point to the new signaling system if that is mature enough (and probably even if it is not).\r\n5. Suggest, but not recommend, that servers pay attention to priority signals using these old mechanisms in the absence of other signals.  This might take a little careful wording, but it's probably enough to caution that ignoring signals might degrade performance and some signals might be better than none. Point to RFC 7540 for the details of how the old scheme works.\r\n6. Leave the definition of the frame type intact, but cut the definitions right down to just the necessary pieces sizes, names, and any mandatory processing (error handling, sizes, ranges, the hard stuff).  This should ensure that people are able to do things like generate the right error codes and skip over the HEADERS frame pieces properly.\r\n7. Leave text about when PRIORITY can be sent in the state machine.  This is important for interoperating with endpoints that generate the frame.\r\n",
          "createdAt": "2020-11-11T08:37:39Z",
          "updatedAt": "2020-11-11T08:37:39Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "Do you have any pointers to explain \"unsuccessful\"?",
          "createdAt": "2020-12-18T04:08:01Z",
          "updatedAt": "2020-12-18T04:08:01Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This might be a little blunt, but it covers at lot of the reasons: https://datatracker.ietf.org/doc/html/draft-peon-httpbis-h2-priority-one-less-00",
          "createdAt": "2020-12-20T09:58:26Z",
          "updatedAt": "2020-12-20T09:58:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "A draft of this is included here: https://github.com/martinthomson/http2v2/compare/main...martinthomson:prioritectomy?expand=1",
          "createdAt": "2020-12-21T01:46:19Z",
          "updatedAt": "2020-12-21T01:46:19Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "@martinthomson Thanks.",
          "createdAt": "2020-12-21T04:33:03Z",
          "updatedAt": "2020-12-21T04:33:03Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I don't think this is in the scope we agreed to, which means we'll need a specific consensus call about this if you want to pursue it.",
          "createdAt": "2020-12-22T04:35:41Z",
          "updatedAt": "2020-12-22T04:35:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I guess I should have spent more of my vacation time double-checking your list then.  I think that this is worth doing, and the discussion on the list so far seems to support that view, so I hope that a formal ask is not too much to ask of the working group.",
          "createdAt": "2020-12-22T06:24:59Z",
          "updatedAt": "2020-12-22T06:24:59Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I remember people being against it, so it definitely would need discussion. I'd suggest doing so on-list. We're likely to have an interim in the new year, which might be useful if it's contentious.",
          "createdAt": "2020-12-23T04:13:59Z",
          "updatedAt": "2020-12-23T04:13:59Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "It seems like draft-ietf-httpbis-priority-03 deprecates the original priority scheme. At least, that's the language it wants to use. It seems like we should at the very least consider updating the language in the document to note that the scheme is deprecated and to direct users to draft-ietf-httpbis-priority. I'd also like to save some bytes and remove the text discussing how the scheme works and direct users to RFC 7540 but I'm open to being persuaded on that point.",
          "createdAt": "2021-02-09T21:23:31Z",
          "updatedAt": "2021-02-09T21:23:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed this at the 2021-02 interim and we'll verify on list.  People have committed to reviewing the proposed changes.\r\n\r\nWe do want to reference draft-ietf-httpbis-priority.  My current sense is that we'll be finished both at around the same time, so I am inclined to add the reference and consider taking it out if things slip rather than be scared of that possible eventuality.",
          "createdAt": "2021-02-10T00:38:53Z",
          "updatedAt": "2021-02-10T00:38:53Z"
        }
      ]
    },
    {
      "number": 774,
      "id": "MDU6SXNzdWU3MzExNzE5Njk=",
      "title": "Integrate TLS 1.3 updates",
      "url": "https://github.com/httpwg/http2-spec/issues/774",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A few small changes are included in [RFC 8740](https://tools.ietf.org/html/rfc8740), which could be integrated easily.",
      "createdAt": "2020-10-28T07:09:58Z",
      "updatedAt": "2021-02-02T03:59:25Z",
      "closedAt": "2021-02-02T03:59:25Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I won't create the pull request just yet, but here are some proposed changes: https://github.com/martinthomson/http2v2/compare/main...martinthomson:tls13?expand=1\r\n\r\n@davidben, do you think that you could review these?  I've paraphrased some of RFC 8740 and I want to make sure I haven't missed anything.",
          "createdAt": "2020-12-16T01:49:49Z",
          "updatedAt": "2020-12-17T01:16:32Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "(The GitHub link did something silly, but I'm assuming 837d46a5ff9e23a62cb719f69be7f1d10bf8da80 is the right commit and just looked at that.)\r\n\r\n>  TLS 1.3 does not permit renegotiation, so the exception permitting renegotiation before sending the preface the handshake does not apply.\r\n\r\ns/the handshake//\r\nThough I wonder if this sentence can just be omitted. I needed to address it in RFC8740 because RFC7540 didn't have a TLS version dispatch. But now the TLS 1.2 features section is explicitly mentioned as being 1.2-only, so that exception already doesn't apply.\r\n\r\nOtherwise LGTM. (I think the default values in server settings is implicit from the fact that we haven't received anything from the server yet, but whatever.)",
          "createdAt": "2020-12-16T16:34:24Z",
          "updatedAt": "2020-12-16T16:34:24Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks.  I've updated my branch to remove the renegotiation piece.  I've updated that link (which I should have checked).",
          "createdAt": "2020-12-17T01:16:47Z",
          "updatedAt": "2020-12-17T01:16:47Z"
        }
      ]
    },
    {
      "number": 775,
      "id": "MDU6SXNzdWU3MzExNzIyMjA=",
      "title": "Improve resource exhaustion attack text",
      "url": "https://github.com/httpwg/http2-spec/issues/775",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The spec includes language on this, but it turned out that many implementations failed to properly safeguard themselves. Clearer descriptions of problems based on this experience would be good.",
      "createdAt": "2020-10-28T07:10:21Z",
      "updatedAt": "2021-02-18T08:58:41Z",
      "closedAt": "2021-02-18T08:58:41Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don\u2019t think it hurts to tighten the text up here and add more examples, at least so new implementations are better able to learn from past mistakes. However, we should probably keep in mind that this cannot possibly be an exhaustive list of exhaustion attacks.",
          "createdAt": "2020-10-28T08:04:11Z",
          "updatedAt": "2020-10-28T08:04:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is the Netflix write-up, which might be a good reference: https://github.com/Netflix/security-bulletins/blob/master/advisories/third-party/2019-002.md\r\n\r\nI can only imagine citing a markdown file on GitHub will raise eyebrows, but it's not a bad summary of issues.",
          "createdAt": "2020-12-21T06:08:32Z",
          "updatedAt": "2020-12-21T06:08:32Z"
        }
      ]
    },
    {
      "number": 776,
      "id": "MDU6SXNzdWU3MzExNzI1Mzg=",
      "title": "Reserve some codepoints for greasing",
      "url": "https://github.com/httpwg/http2-spec/issues/776",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "revisit-upon-change"
      ],
      "body": "This probably is just frames and settings.  We'll have to make it clear that greased frames in particular aren't necessarily safe to send based on deployment experience.  See also [draft-bishop-httpbis-grease](https://mikebishop.github.io/http-misc-extensions/draft-bishop-httpbis-grease.html).",
      "createdAt": "2020-10-28T07:10:51Z",
      "updatedAt": "2021-09-01T00:31:24Z",
      "closedAt": "2021-09-01T00:31:24Z",
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "At the same time, having a section speaking about greasing and encouraging it will definitely help. We could for example mention that any undocumented code point is only relevant when it appears in the context of a negociated support, must be silently ignored outside of this, and that implementations must be prepared to receiving them. For example we could imagine that an agent periodically sends timestamp frames anywhere in communications (streams or connections) and that some implementations might use them and others must drop them.\r\n\r\nThe only risk is to start to see parallel protocol variations being developed with no negotiation and with implicitly assumed support for some undocumented frame numbers, just like many HTTP header fields became de-facto standard (e.g: x-forwarded-for).\r\n\r\nMaybe we should encourage implementations to recognize undocumented frames as greased ones, and add their own greasing on top of them by, for example, just changing the frame type before passing it on. This would make it harder for rogue implementations to rely on their own hard-coded variations.",
          "createdAt": "2020-10-30T08:10:27Z",
          "updatedAt": "2020-10-30T08:10:27Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This was discussed at the interim and there seemed to be support for adding grease where possible to H2. I don't think we need to go into the fine details of the greasing points / mechanisms, just have a general intent documented.",
          "createdAt": "2020-11-11T01:15:55Z",
          "updatedAt": "2020-11-11T01:15:55Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I suspect it's going to be hard to do this without a new ALPN.",
          "createdAt": "2021-02-09T22:57:40Z",
          "updatedAt": "2021-02-09T22:57:40Z"
        }
      ]
    },
    {
      "number": 777,
      "id": "MDU6SXNzdWU3MzExNzM0MDM=",
      "title": "Reference updated core specs",
      "url": "https://github.com/httpwg/http2-spec/issues/777",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The table of contents there has recently finalized, so we might benefit from doing this sooner than later.  If only to help identify any issues in those documents before they are published (as requested by @reschke).",
      "createdAt": "2020-10-28T07:12:20Z",
      "updatedAt": "2021-02-18T08:57:44Z",
      "closedAt": "2021-02-18T08:57:44Z",
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "...and potentially switch to revised terminology.",
          "createdAt": "2020-10-30T07:35:47Z",
          "updatedAt": "2020-10-30T07:35:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The terminology update is #779.",
          "createdAt": "2020-10-30T08:17:50Z",
          "updatedAt": "2020-10-30T08:17:50Z"
        }
      ]
    },
    {
      "number": 778,
      "id": "MDU6SXNzdWU3MzExNzM3MTg=",
      "title": "Clarify prohibition on use of pseudo-fields relative to extension model",
      "url": "https://github.com/httpwg/http2-spec/issues/778",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "RFC 8441 did a thing with settings that allowed it to violate a MUST-level requirement that prohibited use of pseudo-fields. This is OK (because extensions were expressly permitted to do that), but some people are uncomfortable with that.",
      "createdAt": "2020-10-28T07:12:50Z",
      "updatedAt": "2021-02-02T05:37:29Z",
      "closedAt": "2021-02-02T05:37:29Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don\u2019t know if we need to loosen the prohibition per se? It seems like we could simply add explanatory language around the MUST NOT to explicitly remind the reader that, per section whatever, negotiated extensions are entitled to change protocol semantics including all of the above MUST/MUST NOTs.",
          "createdAt": "2020-10-28T08:05:34Z",
          "updatedAt": "2020-10-28T08:05:34Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "See also https://www.rfc-editor.org/errata/eid6309",
          "createdAt": "2020-10-28T08:48:10Z",
          "updatedAt": "2020-10-28T08:48:10Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I wrote a little on this: https://github.com/martinthomson/http2v2/pull/18/files",
          "createdAt": "2020-10-30T08:24:46Z",
          "updatedAt": "2020-10-30T08:24:46Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I think this is more \"clarify how the extension model interacts with the pseudo-header requirement.\" If that's all it is, I think it's editorial; otherwise it needs more discussion.",
          "createdAt": "2020-11-11T01:14:18Z",
          "updatedAt": "2020-11-11T01:14:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on the above text, that seems right",
          "createdAt": "2020-11-11T06:27:03Z",
          "updatedAt": "2020-11-11T06:27:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #796.",
          "createdAt": "2021-02-02T05:37:29Z",
          "updatedAt": "2021-02-02T05:37:29Z"
        }
      ]
    },
    {
      "number": 779,
      "id": "MDU6SXNzdWU3MzExNzQxMTI=",
      "title": "Update field terminology",
      "url": "https://github.com/httpwg/http2-spec/issues/779",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The update to core specs uses \"fields\" generically. If we reference that, then it will get really confusing if we keep saying \"HEADERS\" or \"header fields\". We might even consider changing the name of the frame.\r\n\r\nSee https://github.com/martinthomson/http2v2/issues/9 for more discussion.",
      "createdAt": "2020-10-28T07:13:31Z",
      "updatedAt": "2021-02-18T04:22:02Z",
      "closedAt": "2021-02-18T04:22:02Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I\u2019m opposed to changing the name of the frame, but otherwise consistency is nice.",
          "createdAt": "2020-10-28T08:06:13Z",
          "updatedAt": "2020-10-28T08:06:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that we worked something out.  We can refine over time.",
          "createdAt": "2021-02-18T04:22:02Z",
          "updatedAt": "2021-02-18T04:22:02Z"
        }
      ]
    },
    {
      "number": 780,
      "id": "MDU6SXNzdWU3MzExNzQ2MDk=",
      "title": "Midders or multiple trailers",
      "url": "https://github.com/httpwg/http2-spec/issues/780",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The protocol is very cagey about the semantics of a HEADERS frame if it doesn't include the END_STREAM flag. Do something about this.  Some people have attached semantics to these, others would prefer we never did that and instead discourage the use of these.",
      "createdAt": "2020-10-28T07:14:19Z",
      "updatedAt": "2021-02-02T05:22:52Z",
      "closedAt": "2021-02-02T05:22:52Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is this description valid? The RFC is not at all cagey about the semantics of HEADERS without end stream. Consider \u00a7 8.1:\r\n\r\n```\r\n8.1.  HTTP Request/Response Exchange\r\n\r\n   A client sends an HTTP request on a new stream, using a previously\r\n   unused stream identifier (Section 5.1.1).  A server sends an HTTP\r\n   response on the same stream as the request.\r\n\r\n   An HTTP message (request or response) consists of:\r\n\r\n   1.  for a response only, zero or more HEADERS frames (each followed\r\n       by zero or more CONTINUATION frames) containing the message\r\n       headers of informational (1xx) HTTP responses (see [RFC7230],\r\n       Section 3.2 and [RFC7231], Section 6.2),\r\n\r\n   2.  one HEADERS frame (followed by zero or more CONTINUATION frames)\r\n       containing the message headers (see [RFC7230], Section 3.2),\r\n\r\n   3.  zero or more DATA frames containing the payload body (see\r\n       [RFC7230], Section 3.3), and\r\n\r\n   4.  optionally, one HEADERS frame, followed by zero or more\r\n       CONTINUATION frames containing the trailer-part, if present (see\r\n       [RFC7230], Section 4.1.2).\r\n\r\n   The last frame in the sequence bears an END_STREAM flag, noting that\r\n   a HEADERS frame bearing the END_STREAM flag can be followed by\r\n   CONTINUATION frames that carry any remaining portions of the header\r\n   block.\r\n```\r\n\r\nThis text seems extremely clear to me. Firstly, it makes it clear that HEADERS without END_STREAM is entirely semantic. They may appear both as informational response fields and as the message headers from RFC 7230 \u00a7 3.2. The message headers may _optionally_ have END_STREAM, but are not obligated to as further frames may follow.\r\n\r\nThe same section also contains two more paragraphs:\r\n\r\n```\r\n   Trailing header fields are carried in a header block that also\r\n   terminates the stream.  Such a header block is a sequence starting\r\n   with a HEADERS frame, followed by zero or more CONTINUATION frames,\r\n   where the HEADERS frame bears an END_STREAM flag.  Header blocks\r\n   after the first that do not terminate the stream are not part of an\r\n   HTTP request or response.\r\n```\r\n\r\nThis strongly implies that multiple trailers are to be ignored (\u201care not part of an HTTP request or response\u201d).\r\n\r\nAlso:\r\n\r\n```\r\n\r\n   A HEADERS frame (and associated CONTINUATION frames) can only appear\r\n   at the start or end of a stream.  An endpoint that receives a HEADERS\r\n   frame without the END_STREAM flag set after receiving a final (non-\r\n   informational) status code MUST treat the corresponding request or\r\n   response as malformed (Section 8.1.2.6).\r\n```\r\n\r\nThis seems to me to forbid midders in responses _altogether_ with a normative MUST.\r\n\r\nI don\u2019t see a compelling reason to revisit this section, and this section seems to me to explicitly forbid the concept.",
          "createdAt": "2020-10-28T08:12:08Z",
          "updatedAt": "2020-10-28T08:12:08Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Maybe we at least need to recheck whether it's possible to desynchronize the hpack state with such forbidden frames depending on implementations, and if so, make sure we always enter a connection error state and not just a stream error one.",
          "createdAt": "2020-10-30T08:03:15Z",
          "updatedAt": "2020-10-30T08:03:15Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In general I agree, though I think the rules here are straightforward: if a HEADERS frame does not trigger a CONNECTION_ERROR in your implementation, you MUST process the HPACK block within it.",
          "createdAt": "2020-10-30T08:06:34Z",
          "updatedAt": "2020-10-30T08:06:34Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that it would be safer not to permit use of HEADERS for anything but 1xx, final, and trailers.  At least by default.  An extension can enable them, but they would have to do so by negotiation.  If someone can show that there is wide-scale tolerance of additional HEADERS frames, then it might be worth documenting the possibility that others might be accepted, but no more than that.",
          "createdAt": "2020-10-30T08:23:20Z",
          "updatedAt": "2020-10-30T08:23:20Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "I agree with you Cory, and actually I think we'll need to make sure that a clear statement like you mentioned is present somewhere in the spec so that implementers understand how to proceed when facing such difficulties.\r\n\r\nMartin, I'm fine with your suggestion. I might also add a warning for implementers regarding this identified case that they need to be very careful about (i.e. not blindly replace their current request headers).",
          "createdAt": "2020-10-30T08:29:45Z",
          "updatedAt": "2020-10-30T08:29:45Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I think that it would be safer not to permit use of HEADERS for anything but 1xx, final, and trailers.\r\n\r\nI might be misunderstanding here but I think this is the status quo, isn't it? Is \u00a7 8.1 not normative?",
          "createdAt": "2020-10-30T10:01:35Z",
          "updatedAt": "2020-10-30T10:01:35Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "It sounds like this is (roughly) editorial, then - does that make sense? E.g., just make it crystal clear.",
          "createdAt": "2020-11-11T01:12:31Z",
          "updatedAt": "2020-11-11T01:12:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "A proposal is here: https://github.com/martinthomson/http2v2/compare/main...martinthomson:midders?expand=1\r\n\r\nIn reviewing this, relying more on actual text than memory, I was reminded how much more right @Lukasa is than I.  I didn't see anywhere to insert [mention of handling HPACK](https://github.com/httpwg/http2-spec/issues/780#issuecomment-719388734), but I think that [this text](https://martinthomson.github.io/http2v2/draft-thomson-httpbis-http2bis.html#section-4.3-9) is pretty clear about that.",
          "createdAt": "2020-12-17T05:29:37Z",
          "updatedAt": "2020-12-17T05:29:37Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM.",
          "createdAt": "2020-12-17T10:19:42Z",
          "updatedAt": "2020-12-17T10:19:42Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "LGTM as well. Thanks Martin!",
          "createdAt": "2020-12-17T17:28:56Z",
          "updatedAt": "2020-12-17T17:28:56Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Looks good (delta terminology issues)",
          "createdAt": "2020-12-22T04:43:42Z",
          "updatedAt": "2020-12-22T04:43:42Z"
        }
      ]
    },
    {
      "number": 781,
      "id": "MDU6SXNzdWU3MzExNzQ4Njg=",
      "title": "Design for 0-RTT",
      "url": "https://github.com/httpwg/http2-spec/issues/781",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "0-RTT is newer than h2. As it stands, when 0-RTT is used, the default settings apply because the server doesn't have any chance to send SETTINGS. That's decidedly suboptimal.\r\n\r\nSee https://github.com/martinthomson/http2v2/issues/11 for more discussion.",
      "createdAt": "2020-10-28T07:14:45Z",
      "updatedAt": "2021-02-09T22:49:16Z",
      "closedAt": "2021-02-09T22:49:16Z",
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Actually this could be a reason for rethinking what settings need to be updatable afterwards based on the server's indications. Being faster for most requests on most 0-RTT connections is important, and if on 1/100 of the requests we need to wait for a round trip it's already a nice win. Typically stuff like HPACK encoding can't be changed with 0-RTT support in mind unless a new ALPN identifier is used. But if its only suboptimal for initial requests and that future SETTINGS frames can suggest a change, that could be OK. We could for example imagine that some SETTINGS could be changed from 0 to 1 anywhere on the connection but not the other way around, then start with suboptimal settings for 0-RTT, which would still be good enough.\r\n\r\nWe could also imagine being a bit more aggressive on certain settings, like we did with the early-data draft, and have the other side gracefully reject what couldn't be handled if this happens.",
          "createdAt": "2020-10-30T07:56:32Z",
          "updatedAt": "2020-10-30T07:56:32Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "It seems like we need more information here -- in particular a concrete proposal. A bis effort isn't conducive to exploration of new mechanisms.",
          "createdAt": "2020-11-04T01:15:08Z",
          "updatedAt": "2020-11-04T01:15:08Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "I think the goal is not to explore new mechanisms but rather to retrofit some of the parts of RFC8470 related to H2 if deemed necessary.",
          "createdAt": "2020-11-04T03:27:52Z",
          "updatedAt": "2020-11-04T03:27:52Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that this would be relatively simple.  A setting that says \"you can rely on these parameters for the next connection\" in place of defaults.  And some accompanying rules about what that means for each setting.  For example, the stream limit would apply to the number of streams that can be opened in 0-RTT.  \r\n\r\nFor the most part, this would be a simple flag on each setting saying whether it should be saved or ignored.  There could be cases where saved/ignored is not sufficiently precise, so something would need to be worked out for that, if it is even possible at all.",
          "createdAt": "2020-11-04T03:57:44Z",
          "updatedAt": "2020-11-04T03:57:44Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Feb 2021 interim; close with no action.",
          "createdAt": "2021-02-09T22:49:16Z",
          "updatedAt": "2021-02-09T22:49:16Z"
        }
      ]
    },
    {
      "number": 782,
      "id": "MDU6SXNzdWU3MzExNzUyOTI=",
      "title": "Centralize the definition of frame flags",
      "url": "https://github.com/httpwg/http2-spec/issues/782",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The state machine diagram currently mentions EH/ES but each frame has its own definition which happens to always have the same value. Let's instead enumerate known flags with their values at one place, and mention for each frame which ones it supports or are forbidden. This will significantly simplify implementations and will cut the text. It might even lead to generalizing flag processing instead of repeating the text for each frame type.\r\n\r\nSuggested by @wtarreau; this is probably just editorial.",
      "createdAt": "2020-10-28T07:15:26Z",
      "updatedAt": "2021-05-24T07:24:05Z",
      "closedAt": "2021-05-24T07:24:05Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm, I looked at this a bit and I'm not sure this is editorial. [RFC 7540 \u00a7 4.1 \"Frame Format\"](https://tools.ietf.org/html/rfc7540#section-4) says:\r\n\r\n> Flags:  An 8-bit field reserved for boolean flags specific to the frame type.\r\n>\r\n> Flags are assigned semantics specific to the indicated frame type. Flags that have no defined semantics for a particular frame type MUST be ignored and MUST be left unset (0x0) when sending.\r\n\r\nThis seems to say three things, two of which make this editorial and one of which maybe doesn't. The latter paragraph makes two comments around flags having \"semantics specific to the indicated frame type\" and handling errors for flags that no semantics for a frame type.\r\n\r\nThe first paragraph, however, says \"flags specific to the frame type\". This is a bit different. It somewhat implies that the flag definitions themselves may be specific to each frame type. This reading is somewhat reinforced by [RFC 8336 (The ORIGIN HTTP/2 Frame) \u00a7 2.2 \"Processing ORIGIN Frames\"](https://tools.ietf.org/html/rfc8336#section-2.2) which says:\r\n\r\n> This specification does not define any flags for the ORIGIN frame, but future updates to this specification (through IETF consensus) might use them to change its semantics.  The first four flags (0x1, 0x2, 0x4, and 0x8) are reserved for backwards-incompatible changes; therefore, when any of them are set, the ORIGIN frame containing them MUST be ignored by clients conforming to this specification, unless the flag's semantics are understood.  The remaining flags are reserved for backwards-compatible changes and do not affect processing by clients conformant to this specification. \r\n\r\nThis is somewhat unclear but does appear to read as though ORIGIN reserves the right to use flag 0x1 for a purpose _other_ than END_STREAM (a flag that would never be meaningful on ORIGIN).\r\n\r\nDo we want to reconsider whether this is editorial?",
          "createdAt": "2021-02-17T17:28:36Z",
          "updatedAt": "2021-02-17T17:28:36Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "NONE",
          "body": "There's nothing special about `0x1` PING defines this for ACK",
          "createdAt": "2021-02-17T18:34:13Z",
          "updatedAt": "2021-02-17T18:34:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Here's what I came up with from the core spec:\r\n\r\n```\r\n01 - END_STREAM (DATA, HEADERS); ACK (SETTINGS, PING)\r\n02\r\n04 - END_HEADERS (HEADERS, PUSH_PROMISE, CONTINUATION)\r\n08 - PADDED (DATA, HEADERS, PUSH_PROMISE)\r\n10\r\n20 - PRIORITY (HEADERS)\r\n40\r\n80\r\n```\r\n\r\nIt might be worth tabulating these, but I don't see any way to avoid the definitions being attached to the frame type.  Maybe the simple tabulation is all that @wtarreau was looking for.",
          "createdAt": "2021-02-17T22:58:52Z",
          "updatedAt": "2021-02-17T22:58:52Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Should we be providing guidance that says that implementations SHOULD attempt to re-use frame definitions and bit assignment if possible, and SHOULD try to avoid using bits that are defined for other flags in the core specification? I have mixed feelings about it but seems like an idea.",
          "createdAt": "2021-02-18T07:32:20Z",
          "updatedAt": "2021-02-18T07:32:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "It's an idea, but I don't think that it's worth saying explicitly.  Any one taking due care will probably do that, but we don't need to say that.",
          "createdAt": "2021-02-18T09:00:30Z",
          "updatedAt": "2021-02-18T09:00:30Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The editors discussed this and it doesn't work out so well.  Happy to consider a pull request if someone feels strongly.",
          "createdAt": "2021-05-24T07:24:05Z",
          "updatedAt": "2021-05-24T07:24:05Z"
        }
      ]
    },
    {
      "number": 783,
      "id": "MDU6SXNzdWU3MzExNzU1NTY=",
      "title": "Try to improve the definition of the closed state",
      "url": "https://github.com/httpwg/http2-spec/issues/783",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Rules around the closed state are particularly ambigous, because we lack a \"closing\" or equivalent state and any forced local close by RST_STREAM results in incoming frames violating the rules for what is acceptable in closed state since the other end doesn't know it's closed. It used to be even more problematic with priorities since some dependencies could be completely changed. I had a proposal to improve this using a form of ACK for RST/GOAWAY using PING that would allow one side to know when the other side was notified of these frames, but with priorities gone I don't think that's needed anymore. However we still need to be careful about the MUST NOT wording around whatever involves the closed state.\r\n\r\nSuggested by @wtarreau.",
      "createdAt": "2020-10-28T07:15:52Z",
      "updatedAt": "2021-06-03T00:14:00Z",
      "closedAt": "2021-06-03T00:14:00Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed to this, I keep track with a bit of whether _we_ forcibly reset the stream or whether the remote peer did, and give the remote peer some grace if we did. Seems like this is what everyone has to do, but new text might be nice.",
          "createdAt": "2020-10-28T08:20:52Z",
          "updatedAt": "2020-10-28T08:20:52Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We *could* split the states into two.  It's a little disruptive, but there are just 14 mentions of \"closed\" in the document currently, and a change like this would definitely remove one of those.\r\n\r\nThe definition would be:\r\n* On sending RST_STREAM on a stream in the \"open\", \"half-closed (remote)\", or \"reserved (local)\" states, the stream becomes \"reset\".  In this state, you accept frames as though the stream were \"open\", but aside from PUSH_PROMISE, frames can be ignored.  PUSH_PROMISE frames in this state cause the promised stream to be reserved as normal, these have to be reset if they are not wanted.\r\n* On receiving RST_STREAM on a stream in the \"open\", \"half-closed (local)\", \"reserved (remote)\", or \"reset\" states, the stream becomes \"closed\".  Any frames received on this stream in this state are treated as being in error.\r\n\r\nSending and receiving frames with END_STREAM set don't change: they cause a transition to \"closed\" (or one of the \"half-closed\" states) as before.\r\n\r\nThe diagram gets a little ugly though...\r\n\r\n```\r\n                             +--------+\r\n                     send PP |        | recv PP\r\n                    ,--------|  idle  |--------.\r\n                   /         |        |         \\\r\n                  v          +--------+          v\r\n           +----------+          |           +----------+\r\n           |          |          | send H /  |          |-------.\r\n   ,-------| reserved |          | recv H    | reserved |       |\r\n   |       | (local)  |          |           | (remote) |-----. |\r\n   |       +----------+          v           +----------+     | |\r\n   |           |             +--------+             |         | |\r\n   |           |     recv ES |        | send ES     |         | |\r\n   |    send H |     ,-------|  open  |-------.     | recv H  | |\r\n   |           |    /        |        |        \\    |         | |\r\n   |           v   v         +--------+         v   v         | |\r\n   |       +----------+         |   |          +----------+   | |\r\n   |       |   half   |         |   |          |   half   |   | |\r\n   |       |  closed  |         |   |          |  closed  |   | |\r\n   |       | (remote) |         |   | send R   | (local)  |   | |\r\n   |       +----------+         |   v          +----------+   | |\r\n   |           |                | +-------+       |    |      | |\r\n   |           |                | |       |<------'    |      | |\r\n   |           |         recv R | | reset |  send R    |      | |\r\n   |           |                | |       |<-----------(-----'  |\r\n   |           |                | +-------+  send R    |        |\r\n   |           |                |   |                  |        |\r\n   |           |                |   | recv R           |        |\r\n   |           | recv ES /      |   |                  |        |\r\n   |           | send R /       v   v        recv ES / |        |\r\n   |           | recv R      +--------+      recv R    |        |\r\n   | recv R /  `------------>|        |<---------------'        |\r\n   | send R                  | closed |                  recv R |\r\n   `------------------------>|        |<------------------------'\r\n                             +--------+\r\n```",
          "createdAt": "2021-04-22T06:25:54Z",
          "updatedAt": "2021-04-22T06:25:54Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "This could help but an issue remains that a stream can stay forever in reset state because there's no automatic transition to close (no regular traffic, timers nor counters). One possible approach could be to state that after SETTINGS_MAX_CONCURRENT_STREAMS new streams, a reset stream automatically becomes closed. This would avoid keeping infinite amount of resources and avoid relying on a timer. Instead, each end would only keep a fixed size list of streams, and each new one would simply push the oldest reset one out so there wouldn't be any specific bookkeeping to be performed here.\r\n\r\nI don't see this change as a radical one and the diagram doesn't look more complicated to me. It would be nice to get Cory's opinion on this since he's faced similar issues.",
          "createdAt": "2021-04-22T06:34:23Z",
          "updatedAt": "2021-04-22T06:34:23Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Also, thinking about it a bit more, my initial proposal consisting in sending a PING frame after an RST to detect when it had been received is implicitly covered by this mechanism of counting streams, because for the client to initiate as many streams, it proves it has been aware of at least as many closures, hence it received the RST. So that makes the approach even more interesting than my initially proposed one because we don't need to touch anything on the wire and we can still infer the fact that the other end received our RST.\r\n\r\nSo we have everything to help implementations optionally improve if they're interested in this!",
          "createdAt": "2021-04-22T06:47:09Z",
          "updatedAt": "2021-04-22T06:47:09Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @wtarreau that the change to the state diagram and state machine is pretty minor. It doesn't add unnecessary complexity.\r\n\r\nWhat does require thought is the question of automatic transition from \"reset\" to \"closed\". Timers are a bit less than ideal, though if you've got reasonable estimates for the round-trip delay you can arrange a _very_ high fidelity timer for dropping your state.\r\n\r\nThe idea of tombstoning the streams is also pretty good. The problem with \"push the oldest reset one out\" isn't a protocol problem but an implementation problem, which is that a data structure optimised for that use-case is a bit awkward. In most cases the number of concurrent streams on any connection is low so the operation is fairly cheap but it's still not ideal.\r\n\r\nYou can make this a lot cheaper (and we do) by, when resetting a stream, dropping all stream state immediately except for the stream identifier. This lets us throw away our expensive-to-maintain state and retain just enough to ignore the inbound frames. This does expose us to a small period of time where we don't have the capacity to enforce several of the MUSTs in the RFC, but it's more important to us to preserve and minimise our state commitment than to police, say, the flow control window of a stream we don't have anymore.\r\n\r\nI think perhaps the best step is to provide a range of guidance in a \"state management\" section. We don't have this today, but it's probably useful to add. The guidance can be:\r\n\r\n1. When resetting a stream, you transition the stream to the reset state. This state requires keeping around some amount of stream data in order to identify and tolerate frames on that stream.\r\n2. You can drop this state at your own leisure, but it SHOULD last at least as long as one complete RTT, to allow the peer to process the reset.\r\n3. There are a few ways to know that this time has passed:\r\n    1. If you have access to an accurate estimate of the RTT (e.g. via PING frames) you can set a timer.\r\n    2. If you see SETTINGS_MAX_CONCURRENT_STREAMS new streams created since the reset, you can drop the stream.\r\n    3. If you send and get get a response to a PING frame you can drop the stream.\r\n    4. If you send and get a response to a SETTINGS frame you can drop the stream.\r\n    5. If you create a new stream and receive any frame on it you can drop the stream.\r\n\r\nImplementers are however free to implement this logic in whatever way is best for their implementation.\r\n\r\nHow does this seem?",
          "createdAt": "2021-04-22T07:06:01Z",
          "updatedAt": "2021-04-22T07:06:01Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "I'm pretty fine with this, and your enumeration of the various ways to infer the round trip are sound and correct, and they give good guidance to implementations.\r\n\r\n+1 for me :-)",
          "createdAt": "2021-04-22T07:10:11Z",
          "updatedAt": "2021-04-22T07:10:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that you both have a higher tolerance for complexity than I do.  That said, it's probably worth doing something in the spec to manage this more cleanly.\r\n\r\nLike Cory, I was thinking that there are plenty of ambient signals you might use to garbage collect reset streams.  Basically anything you send after the RST that has an HTTP/2-level acknowlegment would do.  The list above seems right, though the RTT thing is fraught so I'd drop that.\r\n\r\nOn the other hand, I wouldn't be surprised if many existing implementations simply ignore the set of frames that a reset stream might receive for any closed stream.  That's not a terrible response to this problem.  There is no additional state involved and it is very much simpler.  It doesn't catch people violating the spec, but we don't all have to sign up for the protocol police.\r\n\r\nMaybe the way to rephrase this is to make the lenient thing the primary thing, and then say...\r\n\r\nAn endpoint MAY close a connection if you detect a peer sending frames for a \"closed\" stream if either:\r\n1. The peer has sent a frame on the stream with the END_STREAM flag set\r\n2. The peer has sent RST_STREAM on the stream.\r\n3. This endpoint closed the stream with RST_STREAM and other signals confirm that peer has definitely received the RST_STREAM frame.  This can be detected by: \\<list the above ii..v\\>\r\n\r\n",
          "createdAt": "2021-04-23T01:28:42Z",
          "updatedAt": "2021-04-23T01:28:42Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "That would work for me, and we can add a little clause that says \"or any other appropriate signal\".",
          "createdAt": "2021-04-23T16:30:31Z",
          "updatedAt": "2021-04-23T16:30:31Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "LGTM as well. Maybe then we should suggest that during this probation period the endpoint should avoid sending RST_STREAM for each received frame of this stream, but I seem to remember there's already a paragraph suggesting to moderate the amount of RST_STREAM emitted.",
          "createdAt": "2021-04-24T04:22:46Z",
          "updatedAt": "2021-04-24T04:22:46Z"
        }
      ]
    },
    {
      "number": 784,
      "id": "MDU6SXNzdWU3MzExNzU4NDQ=",
      "title": "Speak a bit more about head-of-line blocking",
      "url": "https://github.com/httpwg/http2-spec/issues/784",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Lukasa"
      ],
      "labels": [
        "editorial"
      ],
      "body": "H2 strongly suffers from head-of-line blocking when streams do not progress at the same spead, typically when they come from coalesced connections from different clients. Per-stream flow control is generally ineffective against this as practical window sizes matching a BDP often require impractical buffering between the intermediary and the client. As such we should mention in the recommendations that intermediaries that coalesce connections either have very large buffers or try to group streams from a same client connection together on a server connection.\r\n\r\nSuggested by @wtarreau.",
      "createdAt": "2020-10-28T07:16:23Z",
      "updatedAt": "2021-06-03T00:10:41Z",
      "closedAt": "2021-06-03T00:10:41Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure that I'm following the problem statement very well, so I'm not sure what sort of recommendation would go with it.\r\n\r\nIs the problem that when aggregating requests from multiple clients you expose all of those clients - and all of the requests on the corresponding connections - to head-of-line blocking on the shared connection?  That doesn't seem quite right to me - though the requests that share that connection might suffer, the way that a stalled request on one connection might affect other requests on a different connection is limited.\r\n\r\nIf a request affects others, is it because it would consume shared resources like flow control window and connection-level flow control?  Keeping per-stream flow control relatively small relative to the connection limits would be the way to avoid that exposure, would it not?  That said, larger connection-level buffers might reduce contention, but in general more buffering just means more latency.\r\n\r\n@wtarreau, am I chasing the right idea?  Maybe you can provide a paragraph on the problem and I can try to massage it into shape for the draft.",
          "createdAt": "2021-04-22T05:43:11Z",
          "updatedAt": "2021-04-22T05:43:11Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "The issue is that the intermediary that coalesces many client connections into a single H2 connection cannot have infinite resources to buffer store the response data for these clients, yet will have to advertise a significantly large stream window to the other end to maintain an acceptable bandwidth. In practice it most often goes well because your advertised window is lower than what can be stored into system buffers. But once a client stalls, all the chain stalls, and you quickly end up in a situation where the advertised stream window is ahead of what you're really able to store.\r\n\r\nNote that looking at how TCP buffers are filled in front is not always effective. You may very well be using H2 on the front with other streams making it hard to figure how much you could really push, you could have SSL under it having its own buffers, you could be applying compression in the middle, also making it hard to figure how much the output gives you on input, etc.\r\n\r\nIn haproxy we've finally adressed this by deciding that *by default* multiple clients are not coalesced over a server-facing H2 connection. We have multiple strategies of connection reuse so this remains configurable, but this was the best compromise we could find.",
          "createdAt": "2021-04-22T06:59:12Z",
          "updatedAt": "2021-04-22T06:59:12Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Probably that we could propose something like this:\r\n```\r\nImplementations that coalesce multiple individual clients' connections over a single H2 connection should be careful to properly adjust the per-stream window so that in no situation the sudden stop of a client requesting a large object results in blocking the transfer. This means the stream windows should never be larger than the total amount of per-stream storage the implementation may allocate to extract contents from the connection's buffers. If determining a sane threshold is not possible, implementations might prefer not to coalesce multiple clients on the same connection.\r\n```\r\n\r\nAlso, please note that the same situation happens the other way around, with multiple uploads over a single H2 connection to multiple servers behind working at different speeds. It's generally less of an issue though, but the large windows necessary to permit fast POST uploads may very well block the retrieval of small objects by the same client within the same connection.",
          "createdAt": "2021-04-22T07:06:28Z",
          "updatedAt": "2021-04-22T07:06:28Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Is this just an over-commitment of flow control then?  That is, you advertise a window of N when you only really have space for M < N?\r\n\r\nWhat is interesting is the implication here that you might be forced to advertise the larger window because if you don't you can't get decent throughput, but to do so you are betting that most of that capacity will be used by in-network state (data that is on the wire or in routers and whatnot, along with all the in-system buffers you don't see).  Of course, if that stalls, all that stuff in those buffers will all be forced into your buffers.  That can affect all connections that are somehow entangled with the affected stream.  That means all requests on the same connection, but it could affect other connections.\r\n\r\nAll that said, that's much more involved than your text here.  You appear to be looking for something much simpler.\r\n\r\nWe should have advice about the connection-level flow control credit being backed by real resources.  You say stream, but the purpose of connection-level flow control is to limit resource allocation.  While the stream-level values more directly determine stream-level throughput, the general idea is that they can be set with minimal regard to resource management if there is a good connection-level limit (the main consequence of not jointly managing these is a range of complicated priority issues).\r\n\r\nThe current document is not very good about saying much about any of this.  So any addition along these lines, including a version of that text, would be worth adding.",
          "createdAt": "2021-04-22T23:55:16Z",
          "updatedAt": "2021-04-22T23:55:16Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "When flow-control is set to values that the endpoint will respect, it\nminimizes retransmits due to buffer overruns.\nMinimizing retransmits does not always guarantee highest bandwidth; The\nmore conservative one is with respect to preventing retransmits or buffer\noverruns, the more probable it is that some resources will be unused.\nThis is similar to the tradeoff space of congestion control, however the\nbuffers here are visible to the endpoints.\n\n\nOn Thu, Apr 22, 2021 at 4:55 PM Martin Thomson ***@***.***>\nwrote:\n\n> Is this just an over-commitment of flow control then? That is, you\n> advertise a window of N when you only really have space for M < N?\n>\n> What is interesting is the implication here that you might be forced to\n> advertise the larger window because if you don't you can't get decent\n> throughput, but to do so you are betting that most of that capacity will be\n> used by in-network state (data that is on the wire or in routers and\n> whatnot, along with all the in-system buffers you don't see). Of course, if\n> that stalls, all that stuff in those buffers will all be forced into your\n> buffers. That can affect all connections that are somehow entangled with\n> the affected stream. That means all requests on the same connection, but it\n> could affect other connections.\n>\n> All that said, that's much more involved than your text here. You appear\n> to be looking for something much simpler.\n>\n> We should have advice about the connection-level flow control credit being\n> backed by real resources. You say stream, but the purpose of\n> connection-level flow control is to limit resource allocation. While the\n> stream-level values more directly determine stream-level throughput, the\n> general idea is that they can be set with minimal regard to resource\n> management if there is a good connection-level limit (the main consequence\n> of not jointly managing these is a range of complicated priority issues).\n>\n> The current document is not very good about saying much about any of this.\n> So any addition along these lines, including a version of that text, would\n> be worth adding.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/httpwg/http2-spec/issues/784#issuecomment-825274188>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAHV24VU2LIUVSYK4A7H5VLTKCZPNANCNFSM4TB5NKWA>\n> .\n>\n",
          "createdAt": "2021-04-23T00:05:50Z",
          "updatedAt": "2021-04-23T00:05:50Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "The thing is that due to the window-in-window you don't even benefit from the outer buffering (including the wire) if you have too small stream windows. With a single stream (or even H1) this problem does not exist at all as TCP acks at the edge. Here it's different, the data need to be delivered to userland and wait for its turn before the window can open again. I've seen POST requests slow down to 1 Mbps where the equivalent in H1 were 20 times higher using the same buffer size and TCP stack. So users bump the advertised window to compensate for this horrible performance and face random trouble. And on the server side the issue is the same but less visible, it mostly appears when the coalescing gateway and the servers are located on different datacenters a few milliseconds apart. But even at 4 ms with 64k windows it's only 128 Mbps per stream, so you can be sure that users are quite tempted to increase this for certain use cases where they see their devices twiddling thumbs on their 10/40/100G NICs. This is where it is possible to use the whole pipe's length when it's reserved or all streams of a given connection.\r\n\r\nWhat I'm seeking is not to fix the protocol, it is how it is and we all knew about this limitation during its design, but rather to warn users against the risks and effects of not accurately calculating the advertised stream window size in case of combined streams.\r\n",
          "createdAt": "2021-04-24T04:10:42Z",
          "updatedAt": "2021-04-24T04:10:42Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "By the way, one easy trap to fall into is to advertise a window corresponding to the buffer used at the connection level, while what matters is how much you can extract from this connection to be able to immediately parse subsequent frames. And often you have no precise ideas of how much space there is outside.",
          "createdAt": "2021-04-24T04:15:40Z",
          "updatedAt": "2021-04-24T04:15:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's try to pull something in, maybe copy from QUIC: https://quicwg.org/base-drafts/rfc9000.html#name-flow-control-performance",
          "createdAt": "2021-05-24T07:28:57Z",
          "updatedAt": "2021-05-24T07:28:57Z"
        }
      ]
    },
    {
      "number": 785,
      "id": "MDU6SXNzdWU3MzExNzYwMjU=",
      "title": "Enabling remote timing attacks",
      "url": "https://github.com/httpwg/http2-spec/issues/785",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "editorial"
      ],
      "body": "https://portswigger.net/daily-swig/researchers-exploit-http-2-wpa3-protocols-to-stage-highly-efficient-timeless-timing-attacks describes how HTTP/2 can be used to remove some network-induced jitter from the timing measurements. If your server has timing side channels, then putting requests that can be compared in the same IP packet ensures that the server receives them at the same time. This doesn't help if timing differences are masked by server queuing, CDNs or load balancers, or response delivery, but it can help reduce measurement noise.\r\n\r\nConsider documenting this.",
      "createdAt": "2020-10-28T07:16:41Z",
      "updatedAt": "2021-05-26T01:20:27Z",
      "closedAt": "2021-05-26T01:20:27Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I'm reading this as editorial not normative (or at least not changing the wire protocol); seems uncontroversial.",
          "createdAt": "2020-11-04T01:13:20Z",
          "updatedAt": "2020-11-04T01:13:20Z"
        }
      ]
    },
    {
      "number": 786,
      "id": "MDU6SXNzdWU3MzExNzYzODg=",
      "title": "Cut Server Push",
      "url": "https://github.com/httpwg/http2-spec/issues/786",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "mnot"
      ],
      "labels": [],
      "body": "@ianswett says:\r\n\r\nIt's not very widely used and many implementations either don't support it at all or don't support it in a way that improves end-user performance.\r\n\r\nThis sparked a lively discussion at https://github.com/martinthomson/http2v2/issues/16.",
      "createdAt": "2020-10-28T07:17:23Z",
      "updatedAt": "2021-04-27T05:35:15Z",
      "closedAt": "2021-04-27T05:35:15Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I\u2019m open to dropping this, but I think the case needs to be be made for what the burden is. It\u2019s one of the easiest protocol features to just _ignore_: send SETTINGS_ENABLE_PUSH=0 and then you can remove all awareness of PUSH_PROMISE from your state machine altogether.",
          "createdAt": "2020-10-28T08:22:03Z",
          "updatedAt": "2020-10-28T08:22:03Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Crazy thought: what if we made `SETTINGS_ENABLE_PUSH=0` part of HTTP/2, and then factored server push into an extension?",
          "createdAt": "2020-10-28T08:24:46Z",
          "updatedAt": "2020-10-28T08:24:46Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Or what if we minted a new ALPN (#787) and flipped the default value?",
          "createdAt": "2020-10-28T08:28:38Z",
          "updatedAt": "2020-10-28T08:28:38Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Or left it as is, since it is used outside of browsers.\nThe browsers have an API problem that has not been solved, and it is\nunlikely that push will be effective there (except as a competitor to\ninlining) until that changes.\n\nOn Wed, Oct 28, 2020 at 1:28 AM Cory Benfield <notifications@github.com>\nwrote:\n\n> Or what if we minted a new ALPN (#787\n> <https://github.com/httpwg/http2-spec/issues/787>) and flipped the\n> default value?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/httpwg/http2-spec/issues/786#issuecomment-717778783>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAHV24RKH4P2UWKRFVI3BATSM7I4TANCNFSM4TB5OJ2Q>\n> .\n>\n",
          "createdAt": "2020-10-28T17:31:18Z",
          "updatedAt": "2020-10-28T17:31:18Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have no particular objection to flipping the default under a new ALPN.  Factoring it out to an extension is harder, but not impossible -- it's pretty embedded in the state machine, but we might be able to abstract that away.  Removing it entirely seems challenging for several reasons.  The purely process one is that RFC 8030 requires Server Push, and removing a feature used by a Standards Track RFC presumably requires deprecating that other RFC.",
          "createdAt": "2020-10-28T19:38:34Z",
          "updatedAt": "2020-10-28T19:38:34Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I should note that my _preferred_ outcome here is \"do nothing\". I'm just spitballing ideas.",
          "createdAt": "2020-10-28T19:42:40Z",
          "updatedAt": "2020-10-28T19:42:40Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "NONE",
          "body": "Flipping the default if we mint a new alpn seems sensible based on the comments above.  This would also align with HTTP/3.\r\n\r\nMoving it to an extension is probably more work than it's worth, I'll admit.\r\n\r\nI wasn't aware of RFC 8030.  Is that an actively used RFC?",
          "createdAt": "2020-10-28T20:41:21Z",
          "updatedAt": "2020-10-28T20:41:21Z"
        },
        {
          "author": "bagder",
          "authorAssociation": "NONE",
          "body": "Push *is* being used outside of browsers (curl supports it, once implemented for a particular company that uses/used it pretty widely across the globe), although I suspect that outside of browsers we also have no real means of figuring out exactly how much or little.\r\n\r\nSaying \"do it in extension\" will probably equal killing it, but I also think that removing it from the spec is more work than its worth and just toggling the default seems like the best middle ground. ",
          "createdAt": "2020-10-28T22:17:36Z",
          "updatedAt": "2020-10-28T22:19:21Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We may want to be a bit relaxed about flipping the default. As the setting is client-only the default value never really exists on a connection: the client\u2019s SETTINGS are the first frame it sends. The reason to flip the default is to save 6 bytes on all connections. This is not nothing, but it\u2019s not a huge win either.",
          "createdAt": "2020-10-29T08:11:05Z",
          "updatedAt": "2020-10-29T08:11:05Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "I agree that it's not worth changing anything here, except if we want to be sure to cause some confusion between implementations. The first frame sent is the one indicating support (or lack thereof) by the client.\r\n\r\nMaybe we should just add a paragraph in the PUSH section mentioning that 5 years after the relerase, PUSH has still got very low adoption among implementations and should not be assumed as a granted feature for protocols sitting on top of H2.",
          "createdAt": "2020-10-30T07:45:15Z",
          "updatedAt": "2020-10-30T07:45:15Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "NONE",
          "body": "I think @wtarreau suggestion of adding a note about deployment and not expecting wide support would be very helpful.  My biggest concern with keeping it in the spec is that people will expect it's widely supported and its use is recommended for most use cases.",
          "createdAt": "2020-10-30T13:44:23Z",
          "updatedAt": "2020-10-30T13:44:23Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Feeling here seems to be supportive of no normative changes, but possibly some editorial additions clarifying the status of push. If you feel otherwise, please say so soon.",
          "createdAt": "2020-11-04T01:12:35Z",
          "updatedAt": "2020-11-04T01:12:35Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "NONE",
          "body": "SGTM.\r\n\r\nFYI, Chrome is expected to drop support for HTTP/2 server push in the= near future and has never implemented push for HTTP/3.",
          "createdAt": "2020-11-10T00:37:07Z",
          "updatedAt": "2020-11-10T00:37:07Z"
        },
        {
          "author": "GregoireHebert",
          "authorAssociation": "NONE",
          "body": "@ianswett has it been announced somewhere? I can't find it.",
          "createdAt": "2020-11-11T12:02:05Z",
          "updatedAt": "2020-11-11T12:02:05Z"
        },
        {
          "author": "dunglas",
          "authorAssociation": "NONE",
          "body": "Several popular web frameworks actively use Server Push including [Symfony](https://symfony.com/doc/current/web_link.html) (mostly for assets) and [API Platform](https://api-platform.com/docs/core/push-relations/) (for API relations). Server Push is also (currently) supported by most browsers as well as by NGINX, Apache and Caddy. \r\n\r\nOn the APIs field, [the Vulcain spec](https://vulcain.rocks), which aims to replace GraphQL-like document compounding is also gaining adoption, and rely on Server Push (even if it can fallback on preload Link headers and Early Hints too).\r\n\r\nI just published a benchmark showing how useful Server Push is for the specific use case of web APIs.\r\nUnder certain conditions, relying on it can be 4x times faster than using compound documents: https://github.com/dunglas/api-parallelism-benchmark\r\n\r\nAs pointed in martinthomson/http2v2#16, for these use cases, Server Push could be replaced by Early Hints or maybe by something using WebTransport, but these specs aren't currently implemented while Server Push is broadly available.\r\n\r\nRemoving support for Server Push in Chrome will hurt all this use case.\r\n\r\nWhat's really missing with HTTP/2 Server Push is a way to prevent pushing resources already stored by the client. [Cache Digests for HTTP/2](https://tools.ietf.org/html/draft-ietf-httpbis-cache-digest-05) could have been a solution, but the work on it looks stopped.\r\n\r\n",
          "createdAt": "2020-11-11T14:49:11Z",
          "updatedAt": "2020-11-11T15:16:09Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "NONE",
          "body": "https://groups.google.com/a/chromium.org/d/msg/blink-dev/K3rYLvmQUBY/vOWBKZGoAQAJ",
          "createdAt": "2020-11-11T22:23:10Z",
          "updatedAt": "2020-11-11T22:23:10Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ianswett suggested calling out the current status: lack of support in browser APIs for push, pointy edges in the usage, and the limitations in the spread of its usage. I think this is a reasonable editorial change.",
          "createdAt": "2021-02-09T22:35:20Z",
          "updatedAt": "2021-02-09T22:35:20Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mnot to draft a document to encourage users to set the value to 0 by default and move on.",
          "createdAt": "2021-02-09T22:37:25Z",
          "updatedAt": "2021-02-09T22:37:25Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at Feb 2021 interim; intent to document concerns / caveats, recommend sending setting = 0. @mnot to PR.",
          "createdAt": "2021-02-09T22:37:49Z",
          "updatedAt": "2021-02-09T22:37:49Z"
        }
      ]
    },
    {
      "number": 787,
      "id": "MDU6SXNzdWU3MzExNzY3NzU=",
      "title": "New ALPN protocol identifier for the revised protocol",
      "url": "https://github.com/httpwg/http2-spec/issues/787",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "revisit-upon-change"
      ],
      "body": "@ianswett suggests:\r\n\r\nA substantial number of deployed clients and servers do not support the extensibility of SETTINGs or frames in HTTP/2. It may be preferable to mint a new alpn for HTTP2v2 rather than trying to exclude all these peers based on user-agent or other fingerprinting.\r\n\r\nFor existing implementations, this has relatively low cost and greatly reduces deployment risk. At some point, they can drop support for the old h2 alpn and let clients fall back to HTTP 1.1, just like many did when SPDY support was removed.\r\n\r\nMore discussion at https://github.com/martinthomson/http2v2/issues/17",
      "createdAt": "2020-10-28T07:18:06Z",
      "updatedAt": "2021-09-01T00:31:24Z",
      "closedAt": "2021-09-01T00:31:24Z",
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "The ALPN string can land in user-visible configuration so that's not always transparent. Another option would be to maintain a backwards compatibility for the first round trip. E.g. see RFC8441, the client will not try to send WS before seeing explicit support for `:protocol`. Sure we can't upgrade everything and certain improvements will require a new ALPN. But if we find a way without this it's better, and our task it to spend a bit more brain time and efforts to save much hassle for implementations and end users.",
          "createdAt": "2020-10-30T07:39:07Z",
          "updatedAt": "2020-10-30T07:39:07Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "`h2.1`?",
          "createdAt": "2020-10-30T18:20:40Z",
          "updatedAt": "2020-10-30T18:20:40Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "It doesn't appear we have the will to remove Server Push or Priorities (so far), so the only thing that _might_ motivate a new ALPN identifier is if we believe that `h2` has ossified enough to justify one (in order to introduce grease).\r\n\r\nWe don't necessarily need to make a final decision about this now, but it seems like we're leaning towards starting h2bis with the idea that we won't be introducing a new ALPN identifier. Does that make sense?",
          "createdAt": "2020-11-11T01:20:46Z",
          "updatedAt": "2020-11-11T01:20:46Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "NONE",
          "body": "I'd like to gather as much data as possible about how ossified we are at the moment before making a call.  Can others provide data in addition to the data Bence shared on the list?\r\n\r\nOT: Can someone add Bence to this Github, I can't seem to link to him.",
          "createdAt": "2020-11-11T01:30:11Z",
          "updatedAt": "2020-11-11T01:30:11Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "\"ossified\" as in \"explicitly added by users in configuration files\", sure, but then we'd really cause breaking changes annoying users just for the purpose of telling them \"we wanted to be sure you were able to change this entry in your file\".  For me changing the ALPN identifier is needed only if we want to make important protocol changes that are not compatible with the waste of a round trip to learn them via settings.",
          "createdAt": "2020-11-11T05:07:40Z",
          "updatedAt": "2020-11-11T05:07:40Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "NONE",
          "body": "I meant \"ossified\" as in every time we try to deploy a new SETTING or frame server-side it breaks a substantial fraction of users and we have to roll it back.  This is the reality I live in today.",
          "createdAt": "2020-11-11T09:47:40Z",
          "updatedAt": "2020-11-11T09:47:40Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What does changing the ALPN ID mean for something like https://tools.ietf.org/html/rfc8164? Would a server have to start adverting both versions?",
          "createdAt": "2020-11-11T10:26:16Z",
          "updatedAt": "2020-11-11T10:26:16Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, the effect is that Alt-Svc would need extra entries, whether it is for shifting load or opportunistic upgrade.",
          "createdAt": "2020-11-11T21:40:23Z",
          "updatedAt": "2020-11-11T21:40:23Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Feb 2021 interim; bar is still high, waiting for a reason to do this to gain consensus.",
          "createdAt": "2021-02-09T22:31:06Z",
          "updatedAt": "2021-02-09T22:31:06Z"
        }
      ]
    },
    {
      "number": 788,
      "id": "MDU6SXNzdWU3MzExNzcxNzQ=",
      "title": "Update the HPACK static table",
      "url": "https://github.com/httpwg/http2-spec/issues/788",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@LPardue suggests:\r\n\r\nThe HPACK static table is a bit old. For QPACK we did some analysis and came up with a \"new\" table, which is probably quite old now itself.\r\n\r\nBecause the tables are different, they probably consume code size in implementations that provide H2 and H3 (unless people are being clever). Alignment of the tables might reduce overhead.\r\n\r\nI'm not going to push hard for doing this work. But it is worth asking the question now and answering it,\r\n\r\nSome discussion at https://github.com/martinthomson/http2v2/issues/19.",
      "createdAt": "2020-10-28T07:18:50Z",
      "updatedAt": "2021-02-09T22:29:32Z",
      "closedAt": "2021-02-09T22:29:32Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As noted at the interim, I\u2019m favour of letting RFC 7541 sit, unmodified, forever. It works. It isn\u2019t perfect, but it works fine. Certainly I don\u2019t want to move forward with updating the table unless we can find compelling data that we see meaningful improvements in doing so.\r\n\r\nIrregardless we certainly can\u2019t do this without doing #787.",
          "createdAt": "2020-10-28T08:23:23Z",
          "updatedAt": "2020-10-28T08:23:23Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Maybe this will change the day we support an improvement/replacement of HPACK as a negociable option. We'd possibly not help much but cause quite some interoperability issues by trying to address such now small issues after shipping. On-wire coding and protocol points must be well thought before a release and not change outside of a versionned update.",
          "createdAt": "2020-10-30T07:31:25Z",
          "updatedAt": "2020-10-30T07:31:25Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "By the way, we won't save code size by replacing HPACK's table because all interoperable implementations will need to keep the old one forever. So actually we'll inflate all implementations by supporting a new one. Better think about an hpack re-encoding or replacement if we want to go through the hassle of dealing with an alternate form.",
          "createdAt": "2020-10-30T07:34:07Z",
          "updatedAt": "2020-10-30T07:34:07Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "When we have a mechanism that guarantees the presence of SETTINGS before any application data (including 0-RTT), we could reasonably approach this generally.  If we change the ALPN, we might be able to include this as one of the changes that ALPN token implies.  I'm not really gung-ho about making the change in an existing protocol.",
          "createdAt": "2020-10-30T18:19:40Z",
          "updatedAt": "2020-10-30T18:19:40Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "NONE",
          "body": "I'm agreeing with all the well articulated points on this issue.",
          "createdAt": "2020-10-30T18:21:25Z",
          "updatedAt": "2020-10-30T18:21:25Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Feeling here seems to be to NOT update the HPACK static table; if anyone feels strongly otherwise please articulate why.",
          "createdAt": "2020-11-04T01:10:09Z",
          "updatedAt": "2020-11-04T01:10:09Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at Feb 2021 interim; no (will confirm on list).",
          "createdAt": "2021-02-09T22:29:32Z",
          "updatedAt": "2021-02-09T22:29:32Z"
        }
      ]
    },
    {
      "number": 789,
      "id": "MDU6SXNzdWU3MzY0OTgwNTA=",
      "title": "Consider loosening requirement for clients to reject connection-specific header fields",
      "url": "https://github.com/httpwg/http2-spec/issues/789",
      "state": "CLOSED",
      "author": "jyasskin",
      "authorAssociation": "NONE",
      "assignees": [
        "Lukasa"
      ],
      "labels": [],
      "body": "I have no personal knowledge of this issue, but it came up on the #whatwg IRC channel. https://megamorf.gitlab.io/2019/08/27/safari-nsposixerrordomain-100-error-with-nginx-and-apache/ describes Safari rejecting responses that contain the `upgrade` header field, while other browsers accept it. It'd be good to converge the major clients on a single behavior and, if that's not the behavior currently specified, update the spec to match.",
      "createdAt": "2020-11-04T23:47:08Z",
      "updatedAt": "2021-05-26T01:16:57Z",
      "closedAt": "2021-05-26T01:16:57Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "To be clear, that's nginx being spectacularly broken by forwarding the `Upgrade` header field. \r\n\r\nI'd characterise the philosophy of H2 as being strict with errors that endanger the whole connection -- and counts the server asking for an upgrade in a context where it doesn't make sense as qualifying as such. \r\n\r\nWhile I'd be surprised if folks wanted to relax the former (the strictness is a net win for H2), the latter might be worth revisiting, not because nginx is broken, but because H1's use of headers for connection-level mechanisms turned out to be so broken. \r\n\r\nI'm also not sure that aligning all clients to be so permissive is such a great idea; accommodating brokenness like this is a race to the bottom, and while it might be the only practical path when you have to interoperate with a large and extremely diverse pool of existing deployment (HTML), there aren't *that* many HTTP implementations that can move the needle. Interop might be better served by holding the line and forcing broken servers to address their problems.",
          "createdAt": "2020-11-04T23:58:25Z",
          "updatedAt": "2020-11-04T23:58:25Z"
        },
        {
          "author": "hsivonen",
          "authorAssociation": "NONE",
          "body": "> To be clear, that's nginx being spectacularly broken by forwarding the `Upgrade` header field.\r\n\r\nAdditionally, it seems broken for Apache to send the `Upgrade` header when the connection between nginx and Apache is over TLS.",
          "createdAt": "2020-11-05T07:05:09Z",
          "updatedAt": "2020-11-05T07:05:09Z"
        },
        {
          "author": "hsivonen",
          "authorAssociation": "NONE",
          "body": "Filed [nginx bug](https://trac.nginx.org/nginx/ticket/2078).",
          "createdAt": "2020-11-05T08:12:20Z",
          "updatedAt": "2020-11-05T08:12:20Z"
        },
        {
          "author": "hsivonen",
          "authorAssociation": "NONE",
          "body": "[Looks like](https://bz.apache.org/bugzilla/show_bug.cgi?id=59311#c9) Apache treats the effects of sending `Upgrade` over TLS as a UA-side bug. :-(",
          "createdAt": "2020-11-05T08:18:11Z",
          "updatedAt": "2020-11-05T08:18:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, this looks bad.  The spec is fairly unambiguous about the requirement to ignore Upgrade in one place.  \r\n\r\n> A server MUST ignore an \"h2\" token in an Upgrade header field. Presence of a token with \"h2\" implies HTTP/2 over TLS, which is instead negotiated as described in Section 3.3.\r\n\r\nBut it also prohibits the use of Connection, which implies that you can't use Upgrade.\r\n\r\nI think that we should fix this, potentially along with #772.  I hope that we are able to convince @icing to change Apache here.  There is no value in sending this value.",
          "createdAt": "2020-11-05T08:49:15Z",
          "updatedAt": "2020-11-05T08:50:24Z"
        },
        {
          "author": "bazzadp",
          "authorAssociation": "NONE",
          "body": "FYI analysis, [I undertook of this last year](https://almanac.httparchive.org/en/2019/http2#http2-issues)\r\n\r\n> 108 sites use HTTP/2 while they also suggest upgrading to HTTP/2 in the upgrade header. A further 12,767 sites on desktop (15,235 on mobile) suggest upgrading an HTTP/1.1 connection delivered over HTTPS to HTTP/2 when it's clear this was not available, or it would have been used already. These are a small minority of the 4.3 million sites crawled on desktop and 5.3 million sites crawled on mobile, but it shows that this is still an issue affecting a number of sites out there. Browsers handle this inconsistently, with Safari in particular attempting to upgrade and then getting itself in a mess and refusing to display the site at all.\r\n",
          "createdAt": "2020-11-05T08:59:37Z",
          "updatedAt": "2020-11-05T08:59:37Z"
        }
      ]
    },
    {
      "number": 790,
      "id": "MDU6SXNzdWU3NDA2NjQyOTY=",
      "title": "Consider guidance for new field design wrt compression",
      "url": "https://github.com/httpwg/http2-spec/issues/790",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mnot"
      ],
      "labels": [
        "editorial"
      ],
      "body": "This request is motivated by reading RFC 7540 and remembering there's a section all about cookie crumbling.\r\n\r\nIs there an opportunity to borrow some of the words from https://www.mnot.net/blog/2018/11/27/header_compression?",
      "createdAt": "2020-11-11T10:44:04Z",
      "updatedAt": "2021-07-07T12:14:30Z",
      "closedAt": "2021-07-07T12:14:30Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@mnot to try to condense into something appropriate and then we'll figure out where it might live.",
          "createdAt": "2021-02-09T22:41:51Z",
          "updatedAt": "2021-02-09T22:41:51Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Upon reflection, I don't think it's a good idea to put advice for new headers into a specific version of the protocol -- it's not an appropriate place. The cookie crumbing text in h2 is a one-off hack to accommodate a specific situation; I don't think we're contemplating any more of that.\r\n\r\nSo from my perspective this can be closed without action.",
          "createdAt": "2021-07-07T07:04:38Z",
          "updatedAt": "2021-07-07T07:04:38Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That there is excellent rationale.  Unless @LPardue objects, I'm happy to close this as a BCP-56 or HTTP-core type of problem.",
          "createdAt": "2021-07-07T07:14:29Z",
          "updatedAt": "2021-07-07T07:14:29Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No objection, let's close. ",
          "createdAt": "2021-07-07T10:49:26Z",
          "updatedAt": "2021-07-07T10:49:26Z"
        }
      ]
    },
    {
      "number": 791,
      "id": "MDU6SXNzdWU3NjgzNTAwNzE=",
      "title": "Use Unicode for names",
      "url": "https://github.com/httpwg/http2-spec/issues/791",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "There are a number of places where we made some awkward compromises when it came to representing names.  We can undo those now.",
      "createdAt": "2020-12-16T00:59:31Z",
      "updatedAt": "2021-02-22T22:48:13Z",
      "closedAt": "2021-02-22T22:48:13Z",
      "comments": []
    },
    {
      "number": 792,
      "id": "MDU6SXNzdWU3NjgzNTg1ODM=",
      "title": "The requirement to use SNI is not possible always",
      "url": "https://github.com/httpwg/http2-spec/issues/792",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "SNI contains a domain name.  Clients connecting to an host in order to make requests for a URL with an IP address authority don't include SNI.  We addressed this better in HTTP/3.\r\n\r\n> If the server is identified by a DNS name, clients MUST send the Server Name Indication (SNI; [RFC6066]) TLS extension unless an alternative mechanism to indicate the target host is used.\r\n\r\n-- https://quicwg.org/base-drafts/draft-ietf-quic-http.html#section-3.2-2\r\n\r\nI believe that in practice the requirement is being ignored.  Aligning the spec with reality seems best.",
      "createdAt": "2020-12-16T01:17:20Z",
      "updatedAt": "2021-02-02T05:21:26Z",
      "closedAt": "2021-02-02T05:21:26Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This proposal uses the QUIC text almost verbatim: https://github.com/martinthomson/http2v2/compare/main...martinthomson:sni-maybe?expand=1\r\n\r\nNote that this text comes with two exclusions, which might not be immediately obvious:\r\n\r\n1. if the authority is not a domain name, there is no signaling requirement; if you use NetBIOS for name resolution, then we don't mandate anything\r\n2. you don't have to use SNI if you have something better; [ECH](https://tools.ietf.org/html/draft-ietf-tls-esni) is one possibility, but this is deliberately non-specific",
          "createdAt": "2020-12-17T05:38:18Z",
          "updatedAt": "2020-12-17T05:38:18Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is it worth providing a non-exhaustive list of examples to help clarify?",
          "createdAt": "2020-12-17T10:21:50Z",
          "updatedAt": "2020-12-17T10:21:50Z"
        }
      ]
    },
    {
      "number": 793,
      "id": "MDU6SXNzdWU3Njg0NDc5ODA=",
      "title": "ENABLE_PUSH from clients",
      "url": "https://github.com/httpwg/http2-spec/issues/793",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The definition of ENABLE_PUSH implies that it can be set to 0 by a server, but the effect of that is meaningless as it results in treating PUSH_PROMISE as an error.  PUSH_PROMISE can't be sent by a client.\r\n\r\nShould we update the definition?",
      "createdAt": "2020-12-16T04:51:48Z",
      "updatedAt": "2021-04-22T04:13:19Z",
      "closedAt": "2021-04-22T04:13:19Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think it's a good idea to start forbidding ENABLE_PUSH = 0 from servers. It's clearly acceptable from the perspective of the RFC, and while it's a silly waste of bytes it doesn't introduce any protocol ambiguity.\r\n\r\nI do think we should clean up the text in \u00a7 6.5.2, which currently reads:\r\n\r\n> The initial value is 1, which indicates that server push is permitted.  Any value other than 0 or 1 MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.\r\n\r\nHowever, Section 8.2 implies the default value for servers is 0:\r\n\r\n> Clients MUST reject any attempt to change the SETTINGS_ENABLE_PUSH setting to a value other than 0 by treating the message as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.\r\n\r\nArguably these two sections should be reconciled. In principle we could simply say that the value of ENABLE_PUSH has no effect for servers, as the protocol forbids servers from pushing _anyway_, and remove the requirement that clients error.\r\n",
          "createdAt": "2020-12-16T07:52:18Z",
          "updatedAt": "2020-12-16T07:52:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that you mean clients are forbidden from pushing, but otherwise I would agree.\r\n\r\nThe initial value for ENABLE_PUSH is defined as 1, which muddies things further.  I think that we can change the definition to say that the setting has no effect when sent by a server and drop the connection error requirement.",
          "createdAt": "2020-12-17T06:27:03Z",
          "updatedAt": "2020-12-17T06:27:03Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Would we leave the connection error as an option?",
          "createdAt": "2020-12-17T10:22:43Z",
          "updatedAt": "2020-12-17T10:22:43Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm inclined to remove it as being inconsistent with reality.  Though we might have to note that some implementations might do that (because they haven't updated) and so advise strongly against servers sending any value for this setting.",
          "createdAt": "2020-12-18T03:03:23Z",
          "updatedAt": "2020-12-18T03:03:23Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is it inconsistent with reality? Presumably some implementations actually do police the MUST here.",
          "createdAt": "2020-12-20T10:45:24Z",
          "updatedAt": "2020-12-20T10:45:24Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Two things are in tension:\r\n\r\n1. policing probably happens in the sense that if a server sends ENABLE_PUSH with any value (especially 1) a client might choke on it\r\n2. the initial value is 1, so those clients should probably choke on a connection preface from the server as well\r\n\r\nRemoving the requirement that ENABLE_PUSH result in an error avoids the second, but you need to keep a recommendation not to send it or you hit the first.",
          "createdAt": "2020-12-20T23:12:28Z",
          "updatedAt": "2020-12-20T23:12:28Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I suspect most implementations treat initial values somewhat specially, and while they enforce that they cannot _receive_ a value of 1 from a server, they don\u2019t prevent the server\u2019s setting value having the value of 1.",
          "createdAt": "2020-12-21T10:29:23Z",
          "updatedAt": "2020-12-21T10:29:23Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This might be one worth circulating with the WG tbh, if only to get a sense of what existing clients actually do. We can also investigate putting together a test suite.",
          "createdAt": "2020-12-23T10:51:44Z",
          "updatedAt": "2020-12-23T10:51:44Z"
        }
      ]
    },
    {
      "number": 794,
      "id": "MDU6SXNzdWU3Njk1Mzc4MjM=",
      "title": "Malformed requests might have been processed",
      "url": "https://github.com/httpwg/http2-spec/issues/794",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The language [here](https://martinthomson.github.io/http2v2/draft-thomson-httpbis-http2bis.html#section-8.1.2.6-3) doesn't properly acknowledge the possibility that some processing might have been performed before an error is detected.  This could use some tweaking.",
      "createdAt": "2020-12-17T05:31:25Z",
      "updatedAt": "2021-05-24T07:14:04Z",
      "closedAt": "2021-05-24T07:14:04Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposal here: https://github.com/martinthomson/http2v2/compare/main...martinthomson:malformed-partial?expand=1",
          "createdAt": "2020-12-17T05:32:28Z",
          "updatedAt": "2020-12-17T05:32:28Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems like a reasonable change.",
          "createdAt": "2020-12-17T10:20:57Z",
          "updatedAt": "2020-12-17T10:20:57Z"
        }
      ]
    },
    {
      "number": 802,
      "id": "MDU6SXNzdWU3Nzc3NTE1NDY=",
      "title": "Defer to core HTTP for 421 status code",
      "url": "https://github.com/httpwg/http2-spec/issues/802",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/httpwg/http-core/pull/624 added the definition of 421 (Misdirected Request) to the core HTTP specification.  We don't need to replicate that definition any more, it is only necessary to keep pointers.",
      "createdAt": "2021-01-04T00:48:27Z",
      "updatedAt": "2021-02-02T03:54:32Z",
      "closedAt": "2021-02-02T03:54:32Z",
      "comments": []
    },
    {
      "number": 803,
      "id": "MDU6SXNzdWU3ODE3ODIwNDE=",
      "title": "\"Payload\" is too heavily overloaded",
      "url": "https://github.com/httpwg/http2-spec/issues/803",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See https://github.com/httpwg/http-core/issues/654",
      "createdAt": "2021-01-08T01:56:02Z",
      "updatedAt": "2021-02-02T03:51:05Z",
      "closedAt": "2021-02-02T03:51:05Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we'll be editorialising here about what exactly we use instead of \"payload body\": that's for the core spec to choose and we'll follow. However, it would be beneficial to reconcile our uses of the word \"payload\" in preparation for swapping over to whatever the new terms are. A quick skim through the document reveals that RFC 7540 is at least fairly consistent with its use of the word payload. It's not perfect, but it's close.\r\n\r\nThe word \"payload\" appears 57 times in the current `main` revision. The first instance notes that the term \"payload body\" is defined in RFC 7230, which is nice. The other major usage forms are either \"frame payload\" or the composite phrase \"payload of a * frame\". We can treat that as another distinct item. We should consider whether the composite phrase \"payload of a * frame\" should be comprehensively rewritten to be \"frame payload of a * frame\".\r\n\r\nExcluding those, there are only a few instances that need to be placed into one of these two buckets:\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L310\r\n\r\n- This should probably be \"HTTP/2 SETTINGS frame payload\"\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L510\r\n\r\n- Should be \"frame payload\"\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L595\r\n\r\n- Should be \"frame payload data\"\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L1538-L1540\r\n\r\n- Should be \"request or response payload bodies\" not \"request or response payloads\"\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L2191\r\n\r\n- Should be \"frame payload\"\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L2195-L2197\r\n\r\n- Should be \"with an identical frame payload\"\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L2380-L2381\r\n\r\n- Should be \"frame payload\"\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L2725\r\n\r\n- Probably the most egregious, given that we defined the term earlier, should be \"payload bodies\"\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L2960\r\n\r\n- This citation uses \"payload body\" in the same paragraph, which is annoyingly inconsistent. Should be \"a response that is defined to have no payload body\".\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L3016\r\n\r\n- Should be \"payload body\", not \"payload data\"\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L3047\r\n\r\n- Should be \"payload body\", not \"payload data\"\r\n\r\nhttps://github.com/httpwg/http2-spec/blob/0277adffeb4dfa0b02608a1b88f0825e9a39feb7/draft-thomson-httpbis-http2bis.xml#L3789-L3795\r\n\r\n- Payload appears twice here: should be \"frame payload\".",
          "createdAt": "2021-01-08T13:26:56Z",
          "updatedAt": "2021-01-08T13:26:56Z"
        }
      ]
    },
    {
      "number": 804,
      "id": "MDU6SXNzdWU3ODkzNzgxNjQ=",
      "title": "Connection headers and proxies",
      "url": "https://github.com/httpwg/http2-spec/issues/804",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We have generation rules\r\n> An endpoint MUST NOT generate an HTTP/2 message containing connection-specific header fields; any message containing connection-specific header fields MUST be treated as malformed (Section 8.1.2.6).\r\n\r\nAnd we have forwarding rules:\r\n> This means that an intermediary transforming an HTTP/1.x message to HTTP/2 will need to remove any header fields nominated by the Connection header field, along with the Connection header field itself.  Such intermediaries SHOULD also remove other connection-specific header fields, such as Keep-Alive, Proxy-Connection, Transfer-Encoding, and Upgrade, even if they are not nominated by the Connection header field.\r\n\r\nIn https://github.com/quicwg/base-drafts/pull/4747 for HTTP/3, we are discussing a requirement to remove Transfer-Encoding.  But the \"will need to\" for the proxy is what seems most strange.  Should this be a MUST instead?",
      "createdAt": "2021-01-19T21:17:38Z",
      "updatedAt": "2021-02-02T03:53:48Z",
      "closedAt": "2021-02-02T03:53:48Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "The forwarding rules are now subsumed by HTTP-core, i think; you could get by with a reference to [them](https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#field.connection).",
          "createdAt": "2021-01-20T01:16:02Z",
          "updatedAt": "2021-01-20T01:16:02Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given the reference to HTTP-core it seems clear that \u201cwill need to\u201d should be MUST.\r\n\r\nI\u2019m less confident about just x-refing to HTTP-core: HTTP-core tells you to take the Connection field off, so I guess we can X-ref to HTTP-core for removal and then note that intermediaries need to remember that they may not add connection-specific fields to the H2 side of the connection. That should likely be clear enough?\r\n\r\nSomething like:\r\n\r\n> An intermediary transforming an HTTP/1.x message to HTTP/2 will need to remove connection-specific header fields as discussed in [HTTP-core \u00a7 7.6.1], or their messages will be treated by other HTTP/2 endpoints as malformed (Section 8.1.2.6).",
          "createdAt": "2021-01-20T07:59:34Z",
          "updatedAt": "2021-01-20T07:59:34Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That text sounds great.",
          "createdAt": "2021-01-20T22:59:36Z",
          "updatedAt": "2021-01-20T22:59:36Z"
        }
      ]
    },
    {
      "number": 810,
      "id": "MDU6SXNzdWU3OTg5MDUwMTA=",
      "title": "A wide diagram might be made narrower",
      "url": "https://github.com/httpwg/http2-spec/issues/810",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": ".../draft-ietf-httpbis-http2bis.xml(311): Warning: Artwork too wide, reducing indentation from 3 to 1\r\n\r\nMight be worth trying to fix.",
      "createdAt": "2021-02-02T04:01:00Z",
      "updatedAt": "2021-02-03T23:31:58Z",
      "closedAt": "2021-02-03T23:31:58Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that diagram is this one:\r\n\r\n```\r\n<artwork type=\"message/http; msgtype=&quot;request&quot;\"><![CDATA[\r\n  GET / HTTP/1.1\r\n  Host: server.example.com\r\n  Connection: Upgrade, HTTP2-Settings\r\n  Upgrade: h2c\r\n  HTTP2-Settings: <base64url encoding of HTTP/2 SETTINGS frame payload>\r\n\r\n]]></artwork>\r\n```\r\n\r\nMight be a pain to rewrite that one to be smaller. Careful wordsmithing?",
          "createdAt": "2021-02-03T16:50:17Z",
          "updatedAt": "2021-02-03T16:50:25Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that has to be the one. It's 72 characters wide at its widest. The next-widest artwork in the RFC is 67 characters, so if we can save 5 characters we'd be fine.",
          "createdAt": "2021-02-03T16:54:11Z",
          "updatedAt": "2021-02-03T16:54:11Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just say something like:\r\n\r\n  HTTP2-Settings: <encoded-settings>\r\n\r\nand then in the prose say that \"encoded-settings\" is \"base64url encoding of HTTP/2 SETTINGS frame payload\"",
          "createdAt": "2021-02-03T16:56:33Z",
          "updatedAt": "2021-02-03T16:56:33Z"
        }
      ]
    },
    {
      "number": 812,
      "id": "MDU6SXNzdWU3OTg5Nzg2MzQ=",
      "title": "Interim responses are messages",
      "url": "https://github.com/httpwg/http2-spec/issues/812",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The framing in HTTP/2 always treated informational status codes and the associated header section as part of the response, but the updated core specifications clearly make interim responses independent messages (which makes complete sense).  This requires a little different treatment than what we currently have.",
      "createdAt": "2021-02-02T06:32:56Z",
      "updatedAt": "2021-02-18T00:59:22Z",
      "closedAt": "2021-02-18T00:59:22Z",
      "comments": []
    },
    {
      "number": 815,
      "id": "MDU6SXNzdWU4MDE5NjY4ODE=",
      "title": "characters allowed in field values",
      "url": "https://github.com/httpwg/http2-spec/issues/815",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [],
      "body": "<https://tools.ietf.org/html/rfc7540#section-10.3>:\r\n\r\n>  Similarly, HTTP/2 allows header field values that are not valid.\r\n   While most of the values that can be encoded will not alter header\r\n   field parsing, carriage return (CR, ASCII 0xd), line feed (LF, ASCII\r\n   0xa), and the zero character (NUL, ASCII 0x0) might be exploited by\r\n   an attacker if they are translated verbatim.  Any request or response\r\n   that contains a character not permitted in a header field value MUST\r\n   be treated as malformed (Section 8.1.2.6).  Valid characters are\r\n   defined by the \"field-content\" ABNF rule in Section 3.2 of [RFC7230].\r\n\r\nThere are multiple issues here:\r\n\r\n- it's confusing to say \"HTTP/2 allows\" when next they are actually forbidden with a MUST requirement; it might be better to say something like that the wire protocol in theory enables the transmission of these forbidden characters\r\n- this puts a normative requirement on top of the base spec; but so does the revision of the core specs (see https://github.com/httpwg/http-core/issues/683). We need to make sure that there are no conflicting requirements. It also should be checked whether the currently present requirements are actually implemented in UAs (and if they are not, what could be done about it)",
      "createdAt": "2021-02-05T08:34:52Z",
      "updatedAt": "2021-06-03T00:25:30Z",
      "closedAt": "2021-06-03T00:25:30Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "It would presumably be more accurate to say that \"HPACK allows\", right?",
          "createdAt": "2021-02-05T14:04:23Z",
          "updatedAt": "2021-02-05T14:04:23Z"
        },
        {
          "author": "afrind",
          "authorAssociation": "NONE",
          "body": "HPACK also allows encoding a field line with an empty name.  I'm not sure this needs to be mentioned explicitly or not.",
          "createdAt": "2021-02-05T16:41:52Z",
          "updatedAt": "2021-02-05T16:41:52Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> HPACK also allows encoding a field line with an empty name.\r\n\r\nWell, that's consistent with HTTP/1.1 :-)",
          "createdAt": "2021-02-05T16:48:11Z",
          "updatedAt": "2021-02-05T16:48:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I hate having to do this, but what is possible and what is permissible need to be more clearly separated.",
          "createdAt": "2021-02-08T01:07:33Z",
          "updatedAt": "2021-02-08T01:07:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to tag this as editorial: the possible/permissible split is clearly editorial.  And we've decided to depend on the core docs, and whether or not it was clear before what was allowed or not, this is now very crisp in the core semantics.  I want to wait until we get #811 in before doing this though.",
          "createdAt": "2021-02-08T05:41:14Z",
          "updatedAt": "2021-02-08T05:41:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in the context of leading and trailing whitespace in -semantics.  I think that we should be clearer here about a few things:\r\n\r\n1. CRLF and NUL are strictly prohibited\r\n2. leading and trailing WS are strictly prohibited\r\n3. Maybe loosen the requirement a little so that it is less strict about adherence to the ABNF\r\n\r\nThat makes this non-editorial, I think.",
          "createdAt": "2021-02-11T22:06:05Z",
          "updatedAt": "2021-02-11T22:06:05Z"
        }
      ]
    },
    {
      "number": 817,
      "id": "MDU6SXNzdWU4MDMxODI5NjE=",
      "title": "Fix URL on repo",
      "url": "https://github.com/httpwg/http2-spec/issues/817",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "mnot",
        "tfpauly"
      ],
      "labels": [
        "editorial"
      ],
      "body": "This currently still points at http2.github.io, which is badly out of date.  Referencing the spec is probably the best thing now.  @mnot or @tfpauly are probably the only ones with the necessary privileges.",
      "createdAt": "2021-02-08T04:53:52Z",
      "updatedAt": "2021-02-08T05:12:58Z",
      "closedAt": "2021-02-08T05:12:58Z",
      "comments": []
    },
    {
      "number": 824,
      "id": "MDU6SXNzdWU4MTM5MzE5MzQ=",
      "title": "Any appropriate error code, including generic ones",
      "url": "https://github.com/httpwg/http2-spec/issues/824",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [],
      "body": "QUIC includes the following statement:\r\n\r\n>  In particular, an endpoint MAY use any applicable error code when it detects an error condition; a generic error code (such as PROTOCOL_VIOLATION or INTERNAL_ERROR) can always be used in place of specific error codes.\r\n\r\nI like this.  (No accident.  I wrote it.)\r\n\r\nShould HTTP/2 include a similar statement?  We have PROTOCOL_ERROR, which has a definition compatible with this statement, so I guess we're already there on as far as allowing a generic code goes.  Any sense in saying it explicitly?",
      "createdAt": "2021-02-22T22:52:01Z",
      "updatedAt": "2021-05-24T22:51:01Z",
      "closedAt": "2021-05-24T22:51:00Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, I think this is sensible text to include.",
          "createdAt": "2021-02-23T08:08:35Z",
          "updatedAt": "2021-02-23T08:08:35Z"
        }
      ]
    },
    {
      "number": 826,
      "id": "MDU6SXNzdWU4MjE3NDM3NDc=",
      "title": "Tweaking registry policies",
      "url": "https://github.com/httpwg/http2-spec/issues/826",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "martinthomson",
        "mnot"
      ],
      "labels": [],
      "body": "There's currently a slight divergence in IANA policies between h2 and h3:\r\n\r\n- Frame Types: IETF Review, Experimental Use (h2) / Standards Action, Specification Required (h3)\r\n- Settings: Expert Review, Experimental Use / Standards Action, Specification Required\r\n- Error Codes: Expert Review / Standards Action, Specification Required\r\n\r\nIf we can align these with low pain, it might be worthwhile; e.g., can we get rid of the experimental use areas and upgrade Expert Review to Specification Required?",
      "createdAt": "2021-03-04T04:36:24Z",
      "updatedAt": "2021-07-07T07:15:44Z",
      "closedAt": "2021-07-07T07:15:44Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "h3 requires only Expert Review for provisional registrations, which makes the two basically the same.  Do we want to add provisional registrations to h2?\r\n\r\nThe experimental space can go, I think, but it might pay to check if anyone is using it first.",
          "createdAt": "2021-03-04T05:45:52Z",
          "updatedAt": "2021-03-04T05:45:52Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "+1, I think we can advertise in the WG and maybe one or two other places and that'd be sufficient, absent pushback.",
          "createdAt": "2021-03-04T06:01:22Z",
          "updatedAt": "2021-03-04T06:01:22Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There are two potential changes here: dropping experimental use and adding provisional registrations.  I think that I prefer doing just the former.  The registration policies we have are loose enough that we don't really gain much from provisional registrations, nor does it really change how things work in practice.\r\n\r\nQUIC has the notion that we might claw back provisional registrations, but that only really exists so that we can maybe reclaim the short codepoints in the small 0x00-0x3f range, which people are already camping out in as if they own them.  HTTP/2 has a flat space, which means we probably don't need to worry as much.  Frame types are scarce, but we can maybe use settings to overload those as necessary.  And the existence of HTTP/3 should relieve a lot of pressure on HTTP/2 anyway.",
          "createdAt": "2021-05-24T10:26:45Z",
          "updatedAt": "2021-05-24T10:26:45Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I think I agree. Happy to close with the PR above already merged.",
          "createdAt": "2021-07-07T07:01:29Z",
          "updatedAt": "2021-07-07T07:01:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "\\o/ thanks.",
          "createdAt": "2021-07-07T07:15:44Z",
          "updatedAt": "2021-07-07T07:15:44Z"
        }
      ]
    },
    {
      "number": 827,
      "id": "MDU6SXNzdWU4MjQ0NTM4MjE=",
      "title": "TRACE response format",
      "url": "https://github.com/httpwg/http2-spec/issues/827",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "With the resolution of https://github.com/httpwg/http-core/issues/690, http wire formats can use a response format other than \"message/http\".\r\n\r\nHowever, the SHOULD-level requirement:\r\n\r\n> The final recipient of the request SHOULD reflect the message received, excluding some fields described below, back to the client as the content of a 200 (OK) response.\r\n\r\nis still present. What response format should an h2 server use? ",
      "createdAt": "2021-03-08T11:08:26Z",
      "updatedAt": "2021-04-22T08:06:00Z",
      "closedAt": "2021-04-22T08:06:00Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the SHOULD remains applicable here. We don't have a sensible alternative format to recommend for h2. If the WG wishes to work on one, we can update the document in future, but for now we inherit the -semantics SHOULD.",
          "createdAt": "2021-03-08T13:20:16Z",
          "updatedAt": "2021-03-08T13:20:16Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, you're not supposed to override a requirement from the core spec in any case.\r\n\r\nWhat I was trying to say is that, when looking at this pedantically, you currently can't have a conforming H2 server with TRACE support.  \r\n\r\nYou *could*:\r\n\r\n- state that TRACE does not work in H2, or\r\n- define how to map a received H2 message onto message/http (things to look for obviously are protocol version numbers, and how to map pseudo header fields back to the HTTP/1.1 message format)",
          "createdAt": "2021-03-08T14:18:42Z",
          "updatedAt": "2021-03-08T14:18:42Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Both of those sound unfortunate. Stating that TRACE doesn't work in h2 rather defeats the point of having TRACE in -semantics to begin with. Defining a mapping back to message/http, or alternatively defining a new mapping, is probably more work than we really wanted to take on with this revision.\r\n\r\nWould it be sufficient to simply say that in response to a TRACE request a conforming H2 implementation MAY translate to message/http in whatever way it sees fit, or alternatively MAY refuse to serve the response?",
          "createdAt": "2021-03-08T16:11:49Z",
          "updatedAt": "2021-03-08T16:11:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Not wanting to [toot my own horn](https://unicorn-wg.github.io/oblivious-http/draft-thomson-http-binary-message.html), but there could be other options.  I would prefer message/http over it not working in h2.  But the point here is that ANY format can work.  As this has a media type, we should be comfortable with any of the usual vagueness that exists around formats in HTTP.  Suggesting message/http doesn't mean you take a normative dependency on it.",
          "createdAt": "2021-03-08T18:14:07Z",
          "updatedAt": "2021-03-08T18:14:07Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So do we just say \"Yes, TRACE works, message/http is a SHOULD but we won't tell you how to convert it because Martin isn't done yet\"? (We may editorialise the last bit of that sentence)",
          "createdAt": "2021-03-09T09:05:33Z",
          "updatedAt": "2021-03-09T09:05:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I would prefer \"Can use any format.  By the way, message/http exists.\"",
          "createdAt": "2021-03-09T12:04:02Z",
          "updatedAt": "2021-03-09T12:04:02Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Given [the text in -semantics](https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#rfc.section.9.3.8.p.1):\r\n\r\n> The final recipient of the request SHOULD reflect the message received, excluding some fields described below, back to the client as the content of a 200 (OK) response. The \"message/http\" (Section 10.1 of [Messaging]) format is one way to do so.\r\n\r\nI was going to write something, then realized that I was just repeating that text.  As HTTP/2 is not defining a new stand-alone message format that replaces \"message/http\", there is nothing to add other than repetition.\r\n\r\nI think that we simply close this one with no change.  @reschke, is there any specific action you think we should take?",
          "createdAt": "2021-04-22T05:02:56Z",
          "updatedAt": "2021-04-22T05:02:56Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unless we want to define a new formar, or a mapping to message/http, there's nothing that can be done here (I think).\r\n\r\n(Writing a separate doc describing the mapping would be good; it would probably help identifying other open issues, should they exist)",
          "createdAt": "2021-04-22T07:56:13Z",
          "updatedAt": "2021-04-22T07:56:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There's a bunch of stuff in HTTP/2 that describes the mapping to HTTP/1.1; it's piecemeal and awkward and it would be great if it didn't exist, but I don't know if it would be a good idea to excise.  I do want to change that to use the generic abstractions from -semantics, but I'm not confident that that will work until it is tried out.\r\n\r\nClosing this one and I will open an issue to track the 1.1 dependency.",
          "createdAt": "2021-04-22T08:05:58Z",
          "updatedAt": "2021-04-22T08:05:58Z"
        }
      ]
    },
    {
      "number": 828,
      "id": "MDU6SXNzdWU4MjkyMjg5Njg=",
      "title": "incorrect requirements for pseudo header field mapping for asterisk form",
      "url": "https://github.com/httpwg/http2-spec/issues/828",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I'm struggling with <https://greenbytes.de/tech/webdav/rfc7540.html#HttpRequest>:\r\n\r\n> The :authority pseudo-header field includes the authority portion of the target URI ([RFC3986], Section 3.2). The authority MUST NOT include the deprecated userinfo subcomponent for http or https schemed URIs.\r\n>\r\n> To ensure that the HTTP/1.1 request line can be reproduced accurately, this pseudo-header field MUST be omitted when translating from an HTTP/1.1 request that has a request target in origin or asterisk form (see [RFC7230], Section 5.3).\r\n\r\nIf I have\r\n\r\n~~~\r\n  OPTIONS * HTTP/1.1\r\n  Host: example.com\r\n~~~\r\n\r\nand wanted to map this to H2, why would I omit \":authority\" here?\r\n\r\nWild guess: the spec should say \"origin or authority form\", not \"origin or asterisk form\"? ",
      "createdAt": "2021-03-11T14:54:59Z",
      "updatedAt": "2021-04-22T04:10:34Z",
      "closedAt": "2021-04-22T04:10:34Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It definitely shouldn't say \"origin or authority form\". Authority form is well-covered by the spec: the `:path` pseudo-header absolutely may not contain the authority component of the target URI, so if it isn't put into the `:authority` pseudo-header it has nowhere to go and would be lost.\r\n\r\nFor asterisk form though I'm as much guessing as you are, but I can provide two alternative theories. The first is predicated on the use of the phrase \"target URI\". An OPTIONS request with a request target of `*` does not really _have_ a target URI for the `:authority` pseudo-header to carry the authority portion _of_. However, that's not terribly compelling, given that -semantics fairly heavily implies that `:authority` should just have whatever is in `Host` (which it cannot do for CONNECT requests and so we probably need to reword that text in -semantics?).\r\n\r\nThe _better_ argument is that `OPTIONS *` doesn't meaningfully act on a host at all. From -semantics 9.3.7:\r\n\r\n> An OPTIONS request with an asterisk (\"*\") as the request target (Section 7.1) applies to the server in general rather than to a specific resource.\r\n\r\nThe word here is \"server\", not \"origin\". It isn't clear that the -semantics specification envisages the possibility that a server may care what the value of the `Host` header is when responding to this request.\r\n\r\nWith that said, I do think we need to clarify, perhaps with the WG, whether the Host: header is expected to be meaningful for `OPTIONS *`. If it is, we clearly need to either allow it in the `:authority` pseudo-header or provide guidance that you should put it in `Host` (for some weird reason).",
          "createdAt": "2021-03-11T16:03:18Z",
          "updatedAt": "2021-03-11T16:03:18Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"OPTIONS *\" indeed is weird, and it would be great if we could get rid of it. But we can't.\r\n\r\nThe core spec does not state that \"OPTIONS *\" can not vary on \"Host\", so there may be cases where it does. So I believe H2 needs to describe the mapping for that case.",
          "createdAt": "2021-03-11T16:22:26Z",
          "updatedAt": "2021-03-11T16:22:26Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think if we're happy with the idea that `OPTIONS *` can vary on `Host` then the obvious change is to just delete \"or asterisk\" from the text cited in the original post.",
          "createdAt": "2021-03-11T16:38:21Z",
          "updatedAt": "2021-03-11T16:38:21Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Awesome :-)",
          "createdAt": "2021-03-11T17:40:31Z",
          "updatedAt": "2021-03-11T17:40:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think that would be the best outcome.  Using `:authority` is consistent with other h2 usage.\r\n\r\nThough as @mnot noted privately, the fact that this question has not arisen might be evidence that `OPTIONS *` is less widely implemented than we thought.",
          "createdAt": "2021-03-12T04:55:51Z",
          "updatedAt": "2021-03-12T04:55:51Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hang on hang on hang on. When I was writing the patch I went to double-check the citations and got very confused. The current text reads:\r\n\r\n> To ensure that the HTTP/1.1 request line can be reproduced accurately, this pseudo-header field MUST be omitted when translating from an HTTP/1.1 request that has a request target in origin or asterisk form (see [RFC7230], Section 5.3).\r\n\r\nReproducing from the current -messaging draft, here are the definitions of the request target forms:\r\n\r\n> The most common form of request-target is the origin-form.\r\n>\r\n>     origin-form    = absolute-path [ \"?\" query ]\r\n\r\n> When making a request to a proxy, other than a CONNECT or server-wide OPTIONS request (as detailed below), a client must send the target URI in absolute-form as the request-target.\r\n>\r\n>     absolute-form  = absolute-URI\r\n\r\n> The authority-form of request-target is only used for CONNECT requests (Section 9.3.6 of [Semantics]).\r\n>\r\n>     authority-form = authority\r\n\r\n> The asterisk-form of request-target is only used for a server-wide OPTIONS request (Section 9.3.7 of [Semantics]).\r\n>\r\n>    asterisk-form  = \"*\"\r\n\r\nThe original draft says that you should only produce an `:authority` pseudo-header field _when forwarding a HTTP/1.1 request_ in the cases where the _request target_ normally had an authority within it, either in the absolute-form case or the authority-form case.\r\n\r\nI think then the original text is right, just confusing, and made more confusing by the fact that it's followed by a line talking about clients that generate HTTP/2 requests directly that makes no sense.\r\n\r\nWhat the original text is trying to say, I think, is that in HTTP/1.1 the maximum number of authorities that may be present in control data is two: one in the request target and one in the (mandatory) Host header. This can only happen for requests which use absolute-form or authority-form: for requests that use origin-form or asterisk-form they will only have had one in the Host header.\r\n\r\nThe implication here then is that there is nothing wrong with sending `:authority` for an `OPTIONS *` request, but only if you started out speaking HTTP/2. If you were forwarding a HTTP/1.1 request then you should leave the authority in the Host component. This is intended to make it easier to reconstruct the request at the end: you don't have to look at the `:method` and `:path` to decode it appropriately.\r\n\r\nWhat makes this awkward is that the defensiveness is partially unnecessary. -messaging says:\r\n\r\n> A client MUST send a Host header field in all HTTP/1.1 request messages. If the target URI includes an authority component, then a client MUST send a field value for Host that is identical to that authority component, excluding any userinfo subcomponent and its \"@\" delimiter (Section 4.2.1 of [Semantics]).\r\n\r\nThis means that in the case of `authority-form` the `:authority` and `Host` headers MUST be identical (the `authority-form` also forbids the userinfo subcomponent). The restriction doesn't really make sense here: we could have absolutely collapsed this into `:authority`.\r\n\r\nUnfortunately, -messaging does still leave an out in the case of `absolute-form` request targets, where everyone is required to ignore the Host header field. This probably justifies leaving that case at the very least.\r\n\r\nTo sum up then, I think the text is right, but may want clarification.",
          "createdAt": "2021-03-12T09:12:10Z",
          "updatedAt": "2021-03-12T09:12:10Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hmmm.\r\n\r\nWe have 1.:\r\n\r\n> To ensure that the HTTP/1.1 request line can be reproduced accurately, this pseudo-header field MUST be omitted when translating from an HTTP/1.1 request that has a request target in origin or asterisk form (see [RFC7230], Section 5.3). \r\n\r\nand 2.:\r\n\r\n> All HTTP/2 requests MUST include exactly one valid value for the :method, :scheme, and :path pseudo-header fields, unless it is a CONNECT request (Section 8.3).\r\n\r\nAren't these two in conflict for \"OPTIONS *\"?",
          "createdAt": "2021-03-12T09:38:21Z",
          "updatedAt": "2021-03-12T09:38:21Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So as @Lukasa says, the important qualification here is that this applies only to translation from HTTP/1.1.  I missed that important point.  If you are newly creating an HTTP/2 request then you can use :authority.\r\n\r\nWhat is awkward here is that we don't really say what to do about :scheme for asterisk form requests.  It would be reasonable to assume that it takes on the default value (https) from a translated request and that it is also set to the same (https) when the h2 request is created directly.  But it doesn't really *say* that directly.  Clarification on this point would be welcome.",
          "createdAt": "2021-03-12T10:28:41Z",
          "updatedAt": "2021-03-12T10:28:41Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@reschke I think 2. is flat out wrong and should be amended, it is not in line with the rest of the spec.",
          "createdAt": "2021-03-19T18:22:11Z",
          "updatedAt": "2021-03-19T18:22:11Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Nope, it isn't wrong, it's fine. 1. discusses `:authority`, 2. discusses `:method`, `:path`, and `:scheme`.",
          "createdAt": "2021-03-19T18:29:52Z",
          "updatedAt": "2021-03-19T18:29:52Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> What is awkward here is that we don't really say what to do about :scheme for asterisk form requests. It would be reasonable to assume that it takes on the default value (https) from a translated request and that it is also set to the same (https) when the h2 request is created directly. But it doesn't really say that directly. Clarification on this point would be welcome.\r\n\r\nAfter trying to construct wording for this I came to the conclusion that this is harder than it might seem. What actually _is_ the scheme for a request in asterisk form? Not in HTTP/2, but what answer would we give if we were writing this for -semantics? I think this is the lens through which I want to word this in the spec, and I don't know that I have a good answer.",
          "createdAt": "2021-03-19T18:45:43Z",
          "updatedAt": "2021-03-19T18:45:43Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I was going to say that for `:scheme` we open an issue on -semantics, but conclude that the scheme was `https`.  Nothing else really makes sense.  \r\n\r\n`CONNECT` is funny in a deliberate fashion (as Erik Nygren points out, the target of a `CONNECT` isn't a resource that is controlled by the thing that serves the request, which makes for all sorts of awkward).  So maybe it gets a pass for being old and strange.\r\n\r\nOn the other hand, I don't see why `OPTIONS *` needs to be exempt from this; it's just a request for an HTTP resource that can't be identified with a URI because it doesn't have a path component (or query, or fragment).",
          "createdAt": "2021-03-21T23:05:30Z",
          "updatedAt": "2021-03-21T23:05:30Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Just popping up a level -- h2bis should describe whatever it needs to here in terms of Semantics, not Messaging. If it needs to refer to 1.1 specifically, something's broken.",
          "createdAt": "2021-03-31T23:32:58Z",
          "updatedAt": "2021-03-31T23:32:58Z"
        }
      ]
    },
    {
      "number": 829,
      "id": "MDU6SXNzdWU4MzMyNTc4NDk=",
      "title": "\"Parameters\" in IANA registries",
      "url": "https://github.com/httpwg/http2-spec/issues/829",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "From IANA:\r\n\r\n> In recent years we've suggested omitting the word \"Parameters\" when creating a set of registries, but because the name of the HTTP/2 group uses it, we'll leave it in place unless you prefer otherwise.\r\n\r\nAs we have the patient open already, it might be OK to change the registry name to follow modern conventions.",
      "createdAt": "2021-03-16T22:58:58Z",
      "updatedAt": "2021-04-23T06:31:44Z",
      "closedAt": "2021-04-23T06:31:43Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To clarify, IANA would like us to delete the word \"Parameters\" from the following text?\r\n\r\n> These new registries appear in the new \"Hypertext\r\n>  Transfer Protocol version 2 (HTTP/2) Parameters\" section.\r\n",
          "createdAt": "2021-03-19T18:48:56Z",
          "updatedAt": "2021-03-19T18:48:56Z"
        }
      ]
    },
    {
      "number": 831,
      "id": "MDU6SXNzdWU4MzczMjcwOTA=",
      "title": "Setting :scheme for OPTIONS *",
      "url": "https://github.com/httpwg/http2-spec/issues/831",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See the discussion in #828 and httpwg/http-core#801.\r\n\r\nWe need to explain what to put here.  We never said anything before.",
      "createdAt": "2021-03-22T05:21:59Z",
      "updatedAt": "2021-04-23T06:31:25Z",
      "closedAt": "2021-04-23T06:31:25Z",
      "comments": []
    },
    {
      "number": 834,
      "id": "MDU6SXNzdWU4MzkyMzcxODU=",
      "title": "Use subsections not bullets for pseudo-header field descriptions",
      "url": "https://github.com/httpwg/http2-spec/issues/834",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "These are getting a little unwieldy as list items, so it is probably time to consider an addressable section for each.  See #830.",
      "createdAt": "2021-03-24T00:41:42Z",
      "updatedAt": "2021-07-07T07:17:29Z",
      "closedAt": "2021-07-07T07:17:29Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "On reviewing this one, I don't want to add a level 5 heading.  It's bad enough that we have so much hidden at level 4 already.  A more substantial restructuring would be the only acceptable answer without that and that isn't going to happen.",
          "createdAt": "2021-07-07T07:17:29Z",
          "updatedAt": "2021-07-07T07:17:29Z"
        }
      ]
    },
    {
      "number": 841,
      "id": "MDU6SXNzdWU4NjQ2NjcxODE=",
      "title": "Tweak HTTP/1.1 dependencies",
      "url": "https://github.com/httpwg/http2-spec/issues/841",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Right now, we have a lot of 1.1-specific language.  In theory, it should be possible to remove 1.1 references and use core HTTP semantics to describe the protocol elements.  That would be much cleaner, but it could be tricky.",
      "createdAt": "2021-04-22T08:06:53Z",
      "updatedAt": "2021-05-24T05:37:39Z",
      "closedAt": "2021-05-24T05:37:39Z",
      "comments": []
    },
    {
      "number": 842,
      "id": "MDU6SXNzdWU4NjQ3MDQ5NjQ=",
      "title": "should reference RFCs 7540 and 8740",
      "url": "https://github.com/httpwg/http2-spec/issues/842",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "informatively, as they are obsoleted by this spec",
      "createdAt": "2021-04-22T08:49:24Z",
      "updatedAt": "2021-04-27T02:46:46Z",
      "closedAt": "2021-04-27T02:46:46Z",
      "comments": []
    },
    {
      "number": 843,
      "id": "MDU6SXNzdWU4NjQ3MDc2NzM=",
      "title": "HTTP2-Settings Header Field Registration needs update",
      "url": "https://github.com/httpwg/http2-spec/issues/843",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "martinthomson"
      ],
      "labels": [
        "editorial"
      ],
      "body": "new registry for fields; see <https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#field.name.registration>",
      "createdAt": "2021-04-22T08:52:29Z",
      "updatedAt": "2021-07-12T06:13:15Z",
      "closedAt": "2021-07-12T06:13:15Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@reschke, #820 removed upgrade and changed the registration of this header field to:\r\n\r\n> This section marks the `HTTP2-Settings` header field registered in Section 11.5 of [RFC7540] as obsoleted.\r\n\r\nIs that OK?  Or would you prefer a complete registration update, as in:\r\n\r\nField Name: HTTP2-Settings\r\nStatus: Standard\r\nRef.: Section 11.5 of RFC 7540\r\nComments: This field is obsoleted (this document).\r\n",
          "createdAt": "2021-05-24T09:16:39Z",
          "updatedAt": "2021-05-24T09:16:39Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That should be fine.",
          "createdAt": "2021-05-25T07:18:16Z",
          "updatedAt": "2021-05-25T07:18:16Z"
        }
      ]
    },
    {
      "number": 849,
      "id": "MDU6SXNzdWU4OTY2NzczMDg=",
      "title": "Is Content-Length acceptable on CONNECT request?",
      "url": "https://github.com/httpwg/http2-spec/issues/849",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "Lukasa"
      ],
      "labels": [],
      "body": "Up-to-date HTTP core specs say in https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#rfc.section.9.3.6.p.12\r\n\r\n> A server MUST NOT send any Transfer-Encoding or Content-Length header fields in a 2xx (Successful) response to CONNECT. A client MUST ignore any Content-Length or Transfer-Encoding header fields received in a successful response to CONNECT.\r\n> \r\n> A CONNECT request message does not have content. The interpretation of and allowability of data sent after the header section of the CONNECT request message is specific to the version of HTTP in use.\r\n\r\nBut https://datatracker.ietf.org/doc/html/rfc7540#section-8.3 makes it difficult to see if Content-Length is allowed on request.\r\n\r\nIt's clear that RFC7540 considers CONNECT requests to have no content. And it's clear that for normal request that if the sum of DATA frames don't match the sum Content-Length then its an error. But it is unclear if the server should quickly reject CONNECT requests that contain \"Content-Length: N\" (for N > 0), or how they should deal with \"Content-Length: 0\".",
      "createdAt": "2021-05-20T11:24:27Z",
      "updatedAt": "2021-07-07T11:14:12Z",
      "closedAt": "2021-07-07T11:14:12Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we need to make any changes here.\r\n\r\nAs you quote, CONNECT requests are defined to not have content. This means that they're covered by Semantics \u00a7 8.6 (https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#rfc.section.8.6) which reads:\r\n\r\n> A user agent SHOULD NOT send a Content-Length header field when the request message does not contain content and the method semantics do not anticipate such data.\r\n\r\nNo behaviour is specified for a peer that receives such a message, but one assumes that it has the same rough behaviour as, say, sending a Content-Length header field on GET: the semantics are unspecified and so not interoperable. You get what you get. Essentially, implementations are free to do whatever they want when they receive the Content-Length header field on a CONNECT request: they may apply the H2's strict Content-Length policing semantics (in which case any non-zero value should fail), or they may error immediately, or they may ignore the value.\r\n\r\nIn this instance I don't think there is any value in H2 specifying any additional behaviour above-and-beyond what semantics requires, as the fundamental problem is common across all HTTP messaging formats.",
          "createdAt": "2021-05-24T11:06:45Z",
          "updatedAt": "2021-05-24T11:07:00Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with your points, let's close this.",
          "createdAt": "2021-07-07T10:35:59Z",
          "updatedAt": "2021-07-07T10:35:59Z"
        }
      ]
    },
    {
      "number": 851,
      "id": "MDU6SXNzdWU4OTkzODEyMjc=",
      "title": "Intermediaries and connection-specific headers",
      "url": "https://github.com/httpwg/http2-spec/issues/851",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Lukasa"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Upgrade, Transfer-Encoding, Content-Length, Connection, and anything listed in Connection MUST NOT be forwarded without modification.  See also #789.",
      "createdAt": "2021-05-24T07:35:02Z",
      "updatedAt": "2021-05-26T01:16:57Z",
      "closedAt": "2021-05-26T01:16:57Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that this probably goes in [Section 10.3](https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#name-intermediary-encapsulation-)",
          "createdAt": "2021-05-24T07:35:43Z",
          "updatedAt": "2021-05-24T07:35:43Z"
        }
      ]
    },
    {
      "number": 852,
      "id": "MDU6SXNzdWU4OTk0MDE2NTE=",
      "title": "Make sure the change log is correct",
      "url": "https://github.com/httpwg/http2-spec/issues/852",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Before we ship.",
      "createdAt": "2021-05-24T07:55:27Z",
      "updatedAt": "2021-07-12T06:12:55Z",
      "closedAt": "2021-07-12T06:12:55Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need to include a description of #815?  That didn't include a change log item, but it might be sensible to include one.",
          "createdAt": "2021-06-03T01:41:04Z",
          "updatedAt": "2021-06-03T01:41:04Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Probably, yeah.",
          "createdAt": "2021-06-03T06:30:40Z",
          "updatedAt": "2021-06-03T06:30:40Z"
        }
      ]
    },
    {
      "number": 862,
      "id": "MDU6SXNzdWU5MTAwMjAzNjM=",
      "title": "Revise acknowledgments",
      "url": "https://github.com/httpwg/http2-spec/issues/862",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I don't know what the convention is here, but the acknowledgments seem a little off.  For instance, we acknowledge people for mechanisms that were removed in this revision.\r\n\r\nWe might be able to remove these entirely; we could simplify (which would avoid problems like the above); or we might just mark these as applying to RFC 7540.  Ideas sought.",
      "createdAt": "2021-06-03T01:56:51Z",
      "updatedAt": "2021-07-12T06:13:19Z",
      "closedAt": "2021-07-12T06:13:19Z",
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Or maybe just change this to \"the participants of the IETF HTTP Working Group\" and be done with it, since overall it's the reality, especially for 7540 where lots of discussion happened on the list and it's even possible that a number of participants were never acknowledged.",
          "createdAt": "2021-06-03T02:53:28Z",
          "updatedAt": "2021-06-03T02:53:28Z"
        }
      ]
    },
    {
      "number": 863,
      "id": "MDU6SXNzdWU5MTAwNTg5NzE=",
      "title": "Minimum value setting mechanism of HTTP2.0 Window and Window_update",
      "url": "https://github.com/httpwg/http2-spec/issues/863",
      "state": "CLOSED",
      "author": "Maisy-ML",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "RFC 7540 just Specifies the maximum value of Window and the Window  Size Increment, But there is no obvious rule about minimum values.  In the current network, there is no standard minimum setting, which  leads to the inconsistency of message processing between  communication parties, may led to the situation that the  message will be determined as an attack by the recipient, actually  frequent window_UPDATE frames can result in a denial of service.\r\nwe  proposed the minimum value setting mechanism of HTTP2.0   Window and Window_update, and a window_update frame sending  mechanism.",
      "createdAt": "2021-06-03T03:28:06Z",
      "updatedAt": "2021-07-07T07:04:03Z",
      "closedAt": "2021-07-07T07:04:03Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for raising the issue @Maisy-ML.\r\n\r\nThe current draft describes small updates as a possible attack in [Section 10.5](https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#section-10.5-4.1.2.1).  What else do you think we need to say on the subject?\r\n\r\nI'm not sure that it will be possible to set a minimum for the size of updates.  Even the smallest increment might be justified under some conditions.",
          "createdAt": "2021-06-03T04:12:47Z",
          "updatedAt": "2021-06-03T04:12:47Z"
        },
        {
          "author": "Maisy-ML",
          "authorAssociation": "NONE",
          "body": "Hi martin, I have reviewed section 10.5, NFLX-2019-002 already contains the CVEs related to DoS, I think there is one more case can be added: Window_update frame can also be abused with small window size increment, may even appear window is updated very samll at a time, not only does it consume link resources and processing resources, When both of them are less than some value, it can also lead to misjudgment of active defense mechanisms.",
          "createdAt": "2021-06-04T03:23:16Z",
          "updatedAt": "2021-06-04T03:23:16Z"
        },
        {
          "author": "Maisy-ML",
          "authorAssociation": "NONE",
          "body": "I have a question,  what cases will there be a small update, what is the range of updates for the smallest increment?",
          "createdAt": "2021-06-04T03:28:13Z",
          "updatedAt": "2021-06-04T03:28:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think that we have specific advice on the minimum size of an update, nor do I think that is appropriate as it will depend on the structure of implementations.  As noted, we only talk about the need to recognize the potential for multiple small updates to cause DoS.  However, small updates are valid in some circumstances.\r\n\r\nWe discussed this at the last interim and the working group agreed that no change to the document was necessary.  As always, if you think that a specific change would improve the document, proposing a change using a pull request is preferred.",
          "createdAt": "2021-07-07T07:04:03Z",
          "updatedAt": "2021-07-07T07:04:03Z"
        }
      ]
    },
    {
      "number": 865,
      "id": "MDU6SXNzdWU5MjE4NDI0NDQ=",
      "title": "Errors at the border of framing and semantics",
      "url": "https://github.com/httpwg/http2-spec/issues/865",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "mnot"
      ],
      "labels": [
        "has-proposal"
      ],
      "body": "Validating fields for characters has raised a concern where we don't have a clear delineation between framing and semantics.  So the way that endpoints handle those cases is unclear.  For requests in particular, the choice between resetting a stream and sending a 4xx response is unclear.\r\n\r\nIt would be good if we could have more consistent overall behaviour here, but we have seen from the character composition issue (see #815) that different implementations will enforce the rules at different layers.  We probably need to allow for some flexibility.\r\n\r\n@mnot has volunteered to help us navigate this somewhat nuanced issue. ",
      "createdAt": "2021-06-15T22:07:23Z",
      "updatedAt": "2021-07-07T07:11:40Z",
      "closedAt": "2021-07-07T07:11:40Z",
      "comments": []
    },
    {
      "number": 867,
      "id": "MDU6SXNzdWU5MjM1MTAxOTY=",
      "title": "Target URIs",
      "url": "https://github.com/httpwg/http2-spec/issues/867",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "mnot"
      ],
      "labels": [],
      "body": "The `Request Pseudo-Header Fields` section talks about how to generate the various pseudo-header fields from a message, but not not how to create a message from the abstract constructs in HTTP semantics, such as the target URI.\r\n\r\nThis includes security considerations around trusting the contents of `:scheme`.\r\n\r\nI'm happy to do a PR for this.\r\n\r\nAlso, this is a weird paragraph:\r\n\r\n> HTTP/2 uses the \"http\" and \"https\" URI schemes defined in <xref target=\"HTTP\" section=\"4.2\"/>. HTTP/2 shares the same default port numbers: 80 for \"http\" URIs and 443 for \"https\" URIs.  As a result, implementations processing requests for target resource URIs like <tt>http://example.org/foo</tt> or <tt>https://example.com/bar</tt> are required to first discover whether the upstream server (the immediate peer to which the client wishes to establish a connection) supports HTTP/2.\r\n\r\n\"HTTP/2 shares the same default port numbers\" implies that it could choose to do otherwise; while that might have been an open question pre-core, I think this needs to be re-worded. Likewise, \"requests for target resource URIs\" is odd; is this meant to be \"requests with target URIs\"?",
      "createdAt": "2021-06-17T06:26:33Z",
      "updatedAt": "2021-07-12T23:52:12Z",
      "closedAt": "2021-07-12T23:52:12Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, most of this is just OLD.  For instance, the \"discovery\" aspect really only relates to the need to use ALPN, but we have a better nomenclature now.\r\n\r\nIf you are happy to do a PR, I'm more than happy to review rather than write.\r\n\r\n",
          "createdAt": "2021-06-17T07:03:05Z",
          "updatedAt": "2021-06-17T07:03:05Z"
        }
      ]
    },
    {
      "number": 878,
      "id": "MDU6SXNzdWU5NTYzMDg1Nzk=",
      "title": "Unpromised Push",
      "url": "https://github.com/httpwg/http2-spec/issues/878",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As a corollary to https://github.com/quicwg/base-drafts/issues/4930, I cannot find anything in RFC 7540 that explicitly prohibits the server sending a response on a stream that hasn't been promised.  The closest is the state machine, where a push stream is supposed to go from idle to reserved to half-closed.  The statement that it can go from idle to open upon sending a HEADERS frame is clearly oriented at the client, but is endpoint-agnostic:  `Sending or receiving a HEADERS frame causes the stream to become \"open\".`",
      "createdAt": "2021-07-30T00:51:44Z",
      "updatedAt": "2021-08-23T01:41:56Z",
      "closedAt": "2021-08-23T01:41:56Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm, I haven't found much explicit either. \u00a7 5.1.1 of the editors draft says:\r\n\r\n> A HEADERS frame will transition the client-initiated stream identified by the stream identifier in the frame header from \"idle\" to \"open\". A PUSH_PROMISE frame will transition the server-initiated stream identified by the \"Promised Stream ID\" field in the frame payload from \"idle\" to \"reserved\".\r\n\r\nThis _implies_ that only clients can use HEADERS frames, but isn't exactly emphatic.\r\n\r\nHowever, I think the actual prohibition comes from the fact that we import the HTTP semantics nearly wholesale in \u00a7 8, with several bits of text in \u00a7 8.1 implying that servers can't do this:\r\n\r\n> A client sends an HTTP request on a new stream, using a previously unused stream identifier (Section 5.1.1). A server sends an HTTP response on the same stream as the request.\r\n\r\n> An HTTP request/response exchange fully consumes a single stream. A request starts with the HEADERS frame that puts the stream into an \"open\" state.\r\n\r\nWith all of that said, I don't think it would be a bad idea to add text that explicitly prohibits servers from sending unsolicited responses.",
          "createdAt": "2021-07-30T06:30:09Z",
          "updatedAt": "2021-07-30T06:30:09Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I think this is solved simply by saying that if the client receives any frame on an idle server-initiated stream (i.e. one that hasn't yet been reserved), it's an error.  In the process, the statement about HEADERS in the stream state machine should be made client-specific.",
          "createdAt": "2021-07-30T18:25:06Z",
          "updatedAt": "2021-07-30T18:25:06Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In reading the doc, I note that 5.1 is similarly vague about clients sending / servers receiving PUSH_PROMISE.  That's addressed elsewhere more explicitly, since PUSH_PROMISE is only sent by servers, but I wonder if we should use the same language around them in this section that we are for HEADERS in #879.",
          "createdAt": "2021-08-19T20:04:16Z",
          "updatedAt": "2021-08-19T20:04:16Z"
        }
      ]
    },
    {
      "number": 880,
      "id": "MDU6SXNzdWU5NjIxNjAxMzE=",
      "title": "Priorities in the Introduction",
      "url": "https://github.com/httpwg/http2-spec/issues/880",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The Priorities section itself has been replaced with a discussion of why priorities aren't there, which is all well and good (#795).  So I found this still being in the introduction a bit odd:\r\n\r\n> Flow control and prioritization ensure that it is possible to efficiently use multiplexed streams. Flow control (Section 5.2) helps to ensure that only data that can be used by a receiver is transmitted. Prioritization (Section 5.3) ensures that limited resources can be directed to the most important streams first.\r\n\r\nIf we're talking about the structure of the protocol, I'd think either we don't talk about a feature that's no longer in the protocol, or we explicitly mention it's been cut out.",
      "createdAt": "2021-08-05T20:11:15Z",
      "updatedAt": "2021-08-23T01:41:10Z",
      "closedAt": "2021-08-23T01:41:10Z",
      "comments": []
    },
    {
      "number": 881,
      "id": "MDU6SXNzdWU5NjIxNjU5NTk=",
      "title": "http-scheme without out-of-band",
      "url": "https://github.com/httpwg/http2-spec/issues/881",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Should there be a reference to RFC 8164 in the discussion about using HTTP/2 with \"http://\" URLs?  We have defined a way to do that which doesn't rely on out-of-band knowledge, after all.",
      "createdAt": "2021-08-05T20:19:26Z",
      "updatedAt": "2021-08-23T11:49:40Z",
      "closedAt": "2021-08-23T11:49:40Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that the experiment has concluded in the negative, so I don't really want to reference that.  We already mention (in general) that HTTP is able to carry URLs for other schemes; so that spec can join all the other non-https schemes.",
          "createdAt": "2021-08-06T00:29:11Z",
          "updatedAt": "2021-08-06T00:29:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I propose that we leave this unaddressed.  @Lukasa, WDYT?",
          "createdAt": "2021-08-23T04:11:44Z",
          "updatedAt": "2021-08-23T04:11:44Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed",
          "createdAt": "2021-08-23T11:49:39Z",
          "updatedAt": "2021-08-23T11:49:39Z"
        }
      ]
    },
    {
      "number": 883,
      "id": "MDU6SXNzdWU5NjMwNjg1Nzg=",
      "title": "Prohibit multiple :authority pseudo-headers",
      "url": "https://github.com/httpwg/http2-spec/issues/883",
      "state": "CLOSED",
      "author": "nharper",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the context of https://lists.w3.org/Archives/Public/ietf-http-wg/2021JulSep/0149.html, I noticed that there's no prohibition on a request having multiple `:authority` pseudo-headers. Such a request should be treated as malformed.",
      "createdAt": "2021-08-06T21:55:41Z",
      "updatedAt": "2021-08-23T04:12:04Z",
      "closedAt": "2021-08-23T04:12:03Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #884.",
          "createdAt": "2021-08-23T04:12:03Z",
          "updatedAt": "2021-08-23T04:12:03Z"
        }
      ]
    },
    {
      "number": 885,
      "id": "MDU6SXNzdWU5NjcwMTkzMTE=",
      "title": "Introduction should ref HTTP spec",
      "url": "https://github.com/httpwg/http2-spec/issues/885",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "First sentence in introduction should actually reference the HTTP (== Semantics) spec.",
      "createdAt": "2021-08-11T16:19:36Z",
      "updatedAt": "2021-08-19T14:25:09Z",
      "closedAt": "2021-08-19T14:25:09Z",
      "comments": []
    },
    {
      "number": 886,
      "id": "MDU6SXNzdWU5NjcwMjE5NjA=",
      "title": "introduction: \"fields\" instead of \"header fields\"",
      "url": "https://github.com/httpwg/http2-spec/issues/886",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "> HTTP/2 addresses these issues by defining an optimized mapping of HTTP's semantics to an underlying connection. Specifically, it allows interleaving of request and response messages on the same connection and uses an efficient coding for HTTP header fields. It also allows prioritization of requests, letting more important requests complete more quickly, further improving performance.\r\n\r\ns/header fields/fields/",
      "createdAt": "2021-08-11T16:21:18Z",
      "updatedAt": "2021-08-12T12:25:16Z",
      "closedAt": "2021-08-12T12:25:16Z",
      "comments": []
    },
    {
      "number": 887,
      "id": "MDU6SXNzdWU5NjcwNTA2ODc=",
      "title": "conventions: cite [RFC8174]",
      "url": "https://github.com/httpwg/http2-spec/issues/887",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "...I believe this is de facto mandatory nowadays...",
      "createdAt": "2021-08-11T16:39:32Z",
      "updatedAt": "2021-08-11T22:20:07Z",
      "closedAt": "2021-08-11T22:20:07Z",
      "comments": []
    },
    {
      "number": 889,
      "id": "MDU6SXNzdWU5Njk4NDk2NDg=",
      "title": "Do you still need to state HTTP semantics remain unchanged?",
      "url": "https://github.com/httpwg/http2-spec/issues/889",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The abstract says\r\n\r\n> This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax. HTTP's existing semantics remain unchanged.\r\n\r\nThis is taken directly from RFC 7540, and seems a bit old hat given where we are at now.",
      "createdAt": "2021-08-13T00:55:03Z",
      "updatedAt": "2021-08-13T07:17:17Z",
      "closedAt": "2021-08-13T07:17:17Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, probably not needed any more.  Propose text?",
          "createdAt": "2021-08-13T01:07:28Z",
          "updatedAt": "2021-08-13T01:07:28Z"
        }
      ]
    },
    {
      "number": 890,
      "id": "MDU6SXNzdWU5Njk4Njk2ODY=",
      "title": "The reports of HTTP/1.1's negative performance are possibly exaggerated",
      "url": "https://github.com/httpwg/http2-spec/issues/890",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "...  and HTTP/2's positives too!\r\n\r\n>    The Hypertext Transfer Protocol (HTTP) is a wildly successful\r\n   protocol.  However, the way HTTP/1.1 uses the underlying transport\r\n   ([RFC7230], Section 6) has several characteristics that have a\r\n   negative overall effect on application performance today.\r\n\r\n >  In particular, HTTP/1.0 allowed only one request to be outstanding at\r\n   a time on a given TCP connection.  HTTP/1.1 added request pipelining,\r\n   but this only partially addressed request concurrency and still\r\n   suffers from head-of-line blocking.  Therefore, HTTP/1.0 and HTTP/1.1\r\n   clients that need to make many requests use multiple connections to a\r\n   server in order to achieve concurrency and thereby reduce latency.\r\n\r\nI think time has shown these claims to not be great. How about cutting cruft and saying\r\n\r\n```\r\nThe performance of application using the Hypertext Transfer Protocol (HTTP) is\r\nlinked to how each version of HTTP uses the underlying transport, and the\r\nconditions under which the transport operates.\r\n\r\nIn particular, HTTP message concurrency can reduce latency and improve\r\napplication performance. HTTP/1.0 allowed only one request to be outstanding at\r\na time on a given TCP connection. HTTP/1.1 added request pipelining, but this\r\nonly partially addressed request concurrency and still suffers from\r\napplication-layer head-of-line blocking. Therefore, HTTP/1.0 and HTTP/1.1\r\nclients that need to make many requests use multiple connections to a server in\r\norder to achieve concurrency.\r\n```\r\n\r\nand then a tweak to a later paragraph in the intro to state that no one is perfect\r\n\r\n```\r\nThe resulting protocol is more friendly to the network because fewer TCP\r\nconnections can be used in comparison to HTTP/1.x. This means less competition\r\nwith other flows and longer-lived connections, which in turn lead to better\r\nutilization of available network capacity. Note, however, that TCP head-of-line\r\nblocking cannot be addressed by this protocol.\r\n```\r\n",
      "createdAt": "2021-08-13T01:12:42Z",
      "updatedAt": "2021-08-16T15:08:53Z",
      "closedAt": "2021-08-16T15:08:53Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks like you have a pull request that is dressed up as an issue :)",
          "createdAt": "2021-08-13T01:23:07Z",
          "updatedAt": "2021-08-13T01:23:07Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you're receptive to change, I am willing to try and edit horrible XML",
          "createdAt": "2021-08-13T01:29:02Z",
          "updatedAt": "2021-08-13T01:29:02Z"
        }
      ]
    },
    {
      "number": 892,
      "id": "MDU6SXNzdWU5Njk4ODU5Nzg=",
      "title": "nit: is h2c spec'd or not",
      "url": "https://github.com/httpwg/http2-spec/issues/892",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Maybe a hangover from trying to tear up the photos of the \"http\" URI and upgrade dance. But this seems to read oddly. \r\n\r\nOn one hand:\r\n\r\n> This usage was never widely deployed, and is no longer specified in this document.\r\n\r\non the other:\r\n\r\n> Negotiating \"h2\" or \"h2c\" implies the use of the transport, security, framing, and message semantics described in this document.\r\n\r\nI don't have a solid suggestion to improve things.",
      "createdAt": "2021-08-13T01:27:33Z",
      "updatedAt": "2021-08-23T11:53:38Z",
      "closedAt": "2021-08-23T11:53:38Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "How about we just remove \"h2c\" from the latter statement.",
          "createdAt": "2021-08-13T01:31:28Z",
          "updatedAt": "2021-08-13T01:31:28Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, that isn't going to fly.  I just tried it.  Pulling that string is unwise.\r\n\r\nWe agreed to keep \"prior knowledge\" in the document, and the \"h2c\" ALPN token is part of that.  The \"h2c\" upgrade token has been removed already.  (Too subtle?  Probably.)",
          "createdAt": "2021-08-13T01:36:54Z",
          "updatedAt": "2021-08-13T01:36:54Z"
        }
      ]
    },
    {
      "number": 896,
      "id": "MDU6SXNzdWU5Njk5NjA3MTc=",
      "title": "Does the HEADERS Padding field have the same requirements as DATA?",
      "url": "https://github.com/httpwg/http2-spec/issues/896",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I just realised RFC 7540 was always this way, but it doesn't seem right to me.\r\n\r\nThe DATA frame definition includes normative requirements on sender and receiver using the `Padding` field. I presume the HEADERS frame `padding` is supposed the treat padding the same but it isn't written down.\r\n\r\nedit: plus PUSH_PROMISE",
      "createdAt": "2021-08-13T02:32:41Z",
      "updatedAt": "2021-08-16T01:18:52Z",
      "closedAt": "2021-08-16T01:18:52Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, it's stated in a separate paragraph at the end of each frame definition section. That's annoying but I guess its fine.",
          "createdAt": "2021-08-13T02:35:47Z",
          "updatedAt": "2021-08-13T02:35:47Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, so the short answer there is that they behave differently in some ways (at least with respect to flow control). If you think there\u2019s a better way to structure the section I think you\u2019re welcome to take a crack at it.",
          "createdAt": "2021-08-13T07:14:51Z",
          "updatedAt": "2021-08-13T07:14:51Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I didn't actually make the leap to flow control, that makes me more inclined to avoid the cross reference to DATA frames. I made #898 to just make everything explicit at the cost of a few more lines of text.",
          "createdAt": "2021-08-13T10:44:59Z",
          "updatedAt": "2021-08-13T10:45:13Z"
        }
      ]
    },
    {
      "number": 897,
      "id": "MDU6SXNzdWU5Njk5OTA0MTU=",
      "title": "Was the cipher suite list re-assembled?",
      "url": "https://github.com/httpwg/http2-spec/issues/897",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There's a note that says \r\n\r\n> Note: This list was assembled from the set of registered TLS cipher suites at the time of writing.\r\n\r\nWould be be more accurate to say this was assembled for RFC 7540, or is it fresh?",
      "createdAt": "2021-08-13T02:58:10Z",
      "updatedAt": "2021-08-24T11:17:59Z",
      "closedAt": "2021-08-24T11:17:59Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "s/of writing// ?",
          "createdAt": "2021-08-13T04:01:26Z",
          "updatedAt": "2021-08-13T04:01:26Z"
        }
      ]
    },
    {
      "number": 900,
      "id": "MDU6SXNzdWU5NzIxNTc2MTY=",
      "title": "Consistency in HTTP Message Framing",
      "url": "https://github.com/httpwg/http2-spec/issues/900",
      "state": "CLOSED",
      "author": "royfielding",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This text is a bit ambiguous about what is containing the trailer part:\r\n\r\n> An HTTP message (request or response) consists of:\r\n>   1. one HEADERS frame (followed by zero or more CONTINUATION frames) containing the header section (see Section 6.3 of [HTTP]),\r\n>   2. zero or more DATA frames containing the message content (see Section 6.4 of [HTTP]), and\r\n>   3. optionally, one HEADERS frame, followed by zero or more CONTINUATION frames containing the trailer-part, if present (see Section 6.5 of [HTTP]).\r\n\r\nI think it would be better to format 3 in the same way as 1:\r\n\r\n>   3. optionally, one HEADERS frame (followed by zero or more CONTINUATION frames) containing the trailer section, if present (see Section 6.5 of [HTTP]).",
      "createdAt": "2021-08-16T22:55:29Z",
      "updatedAt": "2021-08-17T12:45:43Z",
      "closedAt": "2021-08-17T12:45:43Z",
      "comments": [
        {
          "author": "royfielding",
          "authorAssociation": "MEMBER",
          "body": "Oh, and it isn't called trailer-part now -- we changed it to trailer section.",
          "createdAt": "2021-08-16T22:58:47Z",
          "updatedAt": "2021-08-16T22:58:47Z"
        }
      ]
    },
    {
      "number": 902,
      "id": "MDU6SXNzdWU5NzI4NzE3OTY=",
      "title": "Field validity and field names containing token delimiters",
      "url": "https://github.com/httpwg/http2-spec/issues/902",
      "state": "CLOSED",
      "author": "royfielding",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "HTTP has always forbidden token delimiters in field names. It seems very odd that they are not forbidden in HTTP/2, aside from the specific restriction on colon. The token delimiters are DQUOTE and \"(),/:;<=>?@[\\]{}\". We really don't want those allowed in a field name because back-end gateways like CGI assume they have been blocked, and it would mean adding an impossible conversion step when forwarding h2 to h1.\r\n\r\nAlso, it would be easier to read the Field Validity section if it first referenced what is valid for an HTTP field-name, then exclude uppercase because of lowercasing and permit the special-purpose colon for pseudo-fields, and finally list specific requirements on handling invalid characters because the length-delimited protocol elements might be used to carry invalid characters.\r\n\r\nLikewise, separating the error handling for field-name from that of field-value is useful because they are two different algorithms that are usually implemented separately.",
      "createdAt": "2021-08-17T16:35:23Z",
      "updatedAt": "2021-09-01T12:15:25Z",
      "closedAt": "2021-09-01T12:15:25Z",
      "comments": []
    },
    {
      "number": 903,
      "id": "MDU6SXNzdWU5NzMwMTQ4Mzc=",
      "title": "Alt-Svc reference for Prior Knowledge",
      "url": "https://github.com/httpwg/http2-spec/issues/903",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 3.3 says the following about cleartext HTTP/2:\r\n\r\n> A client can learn that a particular server supports HTTP/2 by other means. For example, [ALT-SVC] describes a mechanism for advertising this capability.\r\n\r\nI had previously conceived of Alt-Svc as requiring a certificate and TLS, but that's not strictly true.  RFC 7838 says that a client MUST have reasonable assurances, and a TLS cert is one way to do that.  It also says that the connection must have equal or better security properties, which implies you can't go from TLS to non-TLS.\r\n\r\nThis statement suggests that it's valid to offer `Alt-Svc: h2c=:80` on an http:// URI if your server can accept direct-to-H2 connections, but doesn't explicitly say so.  Is that the intended reading here?\r\n\r\nBut RFC 7838 says:\r\n\r\n> However, if either is offered with the \"h2c\" protocol, the client cannot use it, because there is no mechanism (at the time of the publication of this specification) in that protocol to establish the relationship between the origin and the alternative.\r\n\r\nPerhaps that doesn't apply, because the alternative is the same server on the same TCP port.  Still, I feel like this waves at Alt-Svc for a use which is, at best, under-specified; at worst, not actually possible.",
      "createdAt": "2021-08-17T19:52:19Z",
      "updatedAt": "2021-08-23T11:52:32Z",
      "closedAt": "2021-08-23T11:52:32Z",
      "comments": []
    },
    {
      "number": 904,
      "id": "MDU6SXNzdWU5NzQwMjMxOTQ=",
      "title": "Previous version*s*",
      "url": "https://github.com/httpwg/http2-spec/issues/904",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "At two points in the document, it refers to \"previous version**s** of this document,\" which I take to mean RFC 7540, since we don't discuss differences from previous drafts when we publish the RFC.  Is there a reason not to simply say \"RFC 7540\" in these places, similar to the discussion in 5.3?",
      "createdAt": "2021-08-18T20:17:04Z",
      "updatedAt": "2021-08-20T06:59:03Z",
      "closedAt": "2021-08-20T06:59:03Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Probably not.",
          "createdAt": "2021-08-19T10:12:53Z",
          "updatedAt": "2021-08-19T10:12:53Z"
        }
      ]
    },
    {
      "number": 905,
      "id": "MDU6SXNzdWU5NzQzMTIzMjU=",
      "title": "Remaining corner cases between Host and :authority",
      "url": "https://github.com/httpwg/http2-spec/issues/905",
      "state": "CLOSED",
      "author": "wtarreau",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Adding here the link to my yesterdays report to help with tracking:\r\n\r\nhttps://lists.w3.org/Archives/Public/ietf-http-wg/2021JulSep/0237.html\r\n\r\nI can also paste the contents and/or open one or more issues if needed, though I don't think it is needed for now.",
      "createdAt": "2021-08-19T06:17:10Z",
      "updatedAt": "2021-09-24T02:34:14Z",
      "closedAt": "2021-09-24T02:34:14Z",
      "comments": [
        {
          "author": "daurnimator",
          "authorAssociation": "NONE",
          "body": "I think #768 is related.",
          "createdAt": "2021-08-19T06:20:54Z",
          "updatedAt": "2021-08-19T06:20:54Z"
        },
        {
          "author": "icing",
          "authorAssociation": "NONE",
          "body": "In hindsight, it is easy to see that we need an \"HTTP info set\", e.g. the pure semantics, and from that derive protocol version serializations. As things went, implementations are now seeking ways to make their own  internal representation of semantics. As @wtarreau describes for haproxy.\r\n\r\nThe same is happening in httpd, where one carefully tries to disect the cases that apply in general from the ones specific to a version. This is tricky for backward compatible releases.\r\n\r\nThe worst, to me, seem to be rules in standards to specify \"from another http version\". That seems to imply an \"older, existing\" version. Will it apply to a future http version? Who knows? \r\n\r\nBut this question needs an answer soon, as implementations will need to cope with QUIC traffic incoming and forwarding it to another  H2 server. I believe implementations will need to \r\n\r\n * define their own internal representation of HTTP semantics\r\n * how to map incoming traffic to it\r\n * sift through the rules in the standard and determine which can be applied safely to the generic semantics and which need to stay at \"if this was originally from version x.y\"\r\n\r\nStandard revisions could help here with clarifying the \"from other httpd versions\" to either apply in general to http semantics or specifically to a range of HTTP versions. It's probably not easy.",
          "createdAt": "2021-08-23T08:02:11Z",
          "updatedAt": "2021-08-23T08:02:11Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Willy, we need to be careful here -- this is a pretty broad issue, touching many points and a fair amount of history. We can't reopen HTTP-core right now, so we're constrained in how well we can integrate things here.\r\n\r\nLooking at what you bring up, I think we can make some editorial improvements here; I've suggested some in #961. There's a very fine line to walk here between respecting the abstraction that semantics provides and making it useful to implementers.\r\n\r\nThe other thing that might be worth discussing is this requirement:\r\n\r\n> An intermediary that forwards a request to HTTP/2 MUST retain any Host header field, even if an authority is part of control data.\r\n\r\nMy recollection is that this was advocated as helping in the reconstruction of the request-line, for purposes like bot detection, debugging, etc.; it gives fidelity to what can be put on the wire in HTTP/1 (although whether that's a good goal is another discussion -- as I've complained elsewhere, h1, Host and authority are not necessarily... sane).\r\n\r\nIn retrospect, that MUST could be too strong; given that h2 is effectively always-encrypted, most intermediaries who participate in the protocol do so on behalf of the origin server, so they can coordinate if this information is necessary (as is wide practice for other bits like this, in various ad hoc headers). Also, it creates a (fallacious) expectation in servers that they can rely on Host being there.\r\n\r\nFor those reasons, I'd (personally) be open to considering dropping this MUST down to a MAY... but if we saw pushback (even mildly so), I'd be concerned enough to back down; I don't think it's important enough to spend too much time on. Regardless of how that ended up, we might add a few words to explain why there's a requirement here.\r\n\r\nThoughts? ",
          "createdAt": "2021-09-01T07:31:35Z",
          "updatedAt": "2021-09-01T07:31:35Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "I understand your points. But right now my point is that this maintains a real security issue. Routing has been made on Host for 2 decades now. It's hard-coded everywhere in applications and components. In HTTP/1 it was usual to make sure that Host and authority would exactly match or reject the request (and it's in HTTP/1.1 messaging#3.2).\r\n\r\nThere's no such rule in H2, resulting in two possibly different authorities being present and used differently along the chain. I would be fine keeping it as-is if we enforce the same rule as in H1, which is that if both are present, they MUST match according to RFC3986's rules on scheme-based normalization. But being allowed to have diverging Host and :authority in H2 is a serious concern to me.\r\n",
          "createdAt": "2021-09-01T13:26:35Z",
          "updatedAt": "2021-09-01T13:26:35Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "BTW your update in 961 looks way better to me (aside the point being discussed above of course).\r\n",
          "createdAt": "2021-09-01T13:27:11Z",
          "updatedAt": "2021-09-01T13:27:11Z"
        }
      ]
    },
    {
      "number": 906,
      "id": "MDU6SXNzdWU5NzQzMTU0OTY=",
      "title": ":path ought to be HTTP's absolute-path, not RFC3986's path-absolute",
      "url": "https://github.com/httpwg/http2-spec/issues/906",
      "state": "CLOSED",
      "author": "wtarreau",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "There is currently an incompatibility between HTTP/1 and HTTP semantics definition of absolute-path and H2's use of RFC3986's path-absolute, which prevents paths from starting with `//`. I described it there but can paste it here if required for ease ofreading:\r\n\r\nhttps://lists.w3.org/Archives/Public/ietf-http-wg/2021JulSep/0245.html\r\n\r\nMy feeling is that it was an unintentional mistake introduced between http2 drafts 4 and 5 given that it breaks sites and doesn't even look respected by H2 agents (i.e. curl, apache, varnish, firefox happily process // in h2).\r\n",
      "createdAt": "2021-08-19T06:22:50Z",
      "updatedAt": "2021-08-19T14:20:59Z",
      "closedAt": "2021-08-19T14:20:59Z",
      "comments": []
    },
    {
      "number": 912,
      "id": "MDU6SXNzdWU5NzQ2NjI4NzM=",
      "title": "Redundancy in :authority translation text",
      "url": "https://github.com/httpwg/http2-spec/issues/912",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@wtarreau says\r\n\r\nThere's also some redundancy here which looks a bit confusing:\r\n\r\n> An intermediary that translates a request to HTTP/2 from another\r\n> HTTP version MUST translate any authority information from the\r\n> request into an :authority pseudo-header field.\r\n\r\nand:\r\n\r\n> If the control data in the original request contains authority\r\n> information, an intermediary MUST include a :authority pseudo-header\r\n> field.",
      "createdAt": "2021-08-19T13:26:09Z",
      "updatedAt": "2021-08-23T11:49:11Z",
      "closedAt": "2021-08-23T11:49:11Z",
      "comments": []
    },
    {
      "number": 913,
      "id": "MDU6SXNzdWU5NzQ2NjQ5NjE=",
      "title": "\"from another HTTP version\"",
      "url": "https://github.com/httpwg/http2-spec/issues/913",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "@wtarreau points to some stuff from RFC 7540 that might be cleaned up in terms of \"control data\" and so forth.\r\n\r\nIn addition in this paragraph at several places it's mentioned \"from\r\nanother HTTP version\", but as soon as you have to deal with multiple\r\nversions on each side of an intermediary, you don't deal with versions,\r\nin fact you're using an \"HTTP\" internal representation which relies on\r\nsemantics and in this case it becomes strange to make an exception for\r\nthe case where the other side is using exactly the same version. Given\r\nthat we're now having a version-agnostic spec for the semantics, I\r\nwould suggest that we avoid speaking about versions in the H2 spec and\r\ninstead strictly rely on semantics. This is even more important when\r\nthe text mentions what to do to convert towards other versions, as this\r\njob usually is in fact to be done on the other side (from the semantic\r\nlayer to the other version), and is highly likely to be missed.\r\n\r\nFor example, it's mentioned:\r\n\r\n> For reference, an HTTP/1.1 Section 3.2 of request target [HTTP11] in\r\n> authority-form always includes authority, a request target in absolute-form\r\n> includes authority if the target URI includes authority, and request\r\n> targets in origin- or asterisk-form do not include authority.\r\n\r\nJust having this starts to preclude rules on how to parse an HTTP/1\r\nrequest that dangerously overlap with [messaging].",
      "createdAt": "2021-08-19T13:28:33Z",
      "updatedAt": "2021-08-25T12:18:58Z",
      "closedAt": "2021-08-25T12:18:58Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "... @wtarreau continues\r\n\r\nI could suggest to simplify this part like this (don't take it word\r\nfor word, I'm trying to illustrate):\r\n\r\n> An intermediary that forwards a request to HTTP/2 MUST translate\r\n> any authority information from the request into an :authority\r\n> pseudo-header field. If the original request does not contain\r\n> authority information, the intermediary MUST NOT add an :authority\r\n> pseudo-header field. Please note that the presence of a Host header\r\n> field does not necessarily imply presence of an authority; refer\r\n> to [semantics] for details.",
          "createdAt": "2021-08-19T13:29:25Z",
          "updatedAt": "2021-08-19T13:29:25Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson, I don't believe #907 attempts to address this issue.",
          "createdAt": "2021-08-19T21:01:48Z",
          "updatedAt": "2021-08-19T21:01:48Z"
        }
      ]
    },
    {
      "number": 915,
      "id": "MDU6SXNzdWU5NzUwMDc2NTU=",
      "title": "Stream State Machine and Extension Frames",
      "url": "https://github.com/httpwg/http2-spec/issues/915",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed in [Erratum 6309](https://www.rfc-editor.org/errata/eid6309), the current language of 5.1 prohibits *all* frames on closed streams other than the ones indicated.  It is not clear whether the requirement in Section 5.5 constitutes \"more specific guidance.\"  My suggestion in the erratum was to scope \"any frame\" to \"any frame defined in this document\" where we might allow an extension frame to appear, since that was the minimal change to the RFC 7540 text, but the editors might choose a broader rewording.",
      "createdAt": "2021-08-19T20:09:26Z",
      "updatedAt": "2021-08-23T02:05:06Z",
      "closedAt": "2021-08-23T01:28:27Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So the text already says: \"Frames of unknown types are ignored.\" right next to the guidance you refer to.  Maybe we just need to be more direct about this.",
          "createdAt": "2021-08-20T00:30:09Z",
          "updatedAt": "2021-08-20T00:30:09Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Be careful Martin, you removed the sentence \"Frames of unknown types are ignored\" so I think we're losing one piece of information when looking at the patch. I should re-read it withiin its context to make sure we don't miss anything, but I preferred to warn.",
          "createdAt": "2021-08-20T10:09:17Z",
          "updatedAt": "2021-08-20T10:09:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@wtarreau, yes, that was a deliberate change.  I replaced that text with a complete paragraph and a reference to the extensibility section, which already covers the rules for unknown frames clearly: \"Implementations MUST discard frames that have unknown or unsupported types.\"",
          "createdAt": "2021-08-23T02:05:06Z",
          "updatedAt": "2021-08-23T02:05:06Z"
        }
      ]
    },
    {
      "number": 916,
      "id": "MDU6SXNzdWU5NzUwMjA5NzU=",
      "title": "Frame \"contains\" an END_STREAM flag",
      "url": "https://github.com/httpwg/http2-spec/issues/916",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "MikeBishop"
      ],
      "labels": [],
      "body": "(Warning, I may have reached peak pedantry.)\r\n\r\nIn Section 5.1, there are two references to frames which \"contain\" an END_STREAM flag. All HEADERS, CONTINUATION, and DATA frames contain this flag, which might be set or not.  Most other references in the document are to the flag being set, which is more precise.\r\n\r\nThere are also two references to frames \"bearing\" END_STREAM, which could be taken either way.",
      "createdAt": "2021-08-19T20:25:02Z",
      "updatedAt": "2021-08-23T01:28:11Z",
      "closedAt": "2021-08-23T01:28:11Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "If you care enough to write the issue, maybe you also care enough to offer a pull request.",
          "createdAt": "2021-08-20T00:31:10Z",
          "updatedAt": "2021-08-20T00:31:10Z"
        }
      ]
    },
    {
      "number": 917,
      "id": "MDU6SXNzdWU5NzUwMzAxNzM=",
      "title": "Inconsistent capitalization of \"Flag(s)\"",
      "url": "https://github.com/httpwg/http2-spec/issues/917",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In various cases, the term \"Flag\" is capitalized, e.g.:\r\n\r\n>When set, the PRIORITY Flag indicates that the Exclusive, Stream Dependency, and Weight fields are present.\r\n\r\nIn others, it's not:\r\n\r\n>A HEADERS frame without the END_HEADERS flag set....\r\n\r\nI can't identify a consistent rationale for when it is capitalized and when not.",
      "createdAt": "2021-08-19T20:38:20Z",
      "updatedAt": "2021-08-20T10:17:41Z",
      "closedAt": "2021-08-20T10:17:41Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't know if it is just the limitations of my search, but I just searched for `/[A-Z]+ flag/` and `/[A-Z]+ Flag/` and I found just one of the former.  That is the one case you found.\r\n\r\nAs in QUIC, I think we can refer to the fields in the frame layouts in the Title Case form in which they are presented.  That is also the minimal change.",
          "createdAt": "2021-08-20T00:19:41Z",
          "updatedAt": "2021-08-20T00:19:41Z"
        }
      ]
    },
    {
      "number": 927,
      "id": "MDU6SXNzdWU5NzU4NDc1MzE=",
      "title": "Padding constraint on HEADERS",
      "url": "https://github.com/httpwg/http2-spec/issues/927",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "[Section 6.2](https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#name-headers) says:\r\n\r\n> The total number of padding octets is determined by the value of the Pad Length field. Padding that exceeds the size remaining for the field block fragment MUST be treated as a PROTOCOL_ERROR.\r\n\r\nI think the intended reading is that when the parser reaches the point that only the FBF and the Padding remain, the length of Padding is given by Pad Length and the fragment is the balance.  If Pad Length exceeds the remaining length of the frame, it's an error.\r\n\r\nThere is a less-likely reading also allowed by the current phrasing, that Pad Length can't be more than half the remaining bytes (else Padding would exceed the size of the field block fragment).  That's very unlikely to be the intended reading, but we should be clear here.\r\n\r\nI'd suggest simply taking the note from the end of DATA and putting it here verbatim.",
      "createdAt": "2021-08-20T18:57:09Z",
      "updatedAt": "2021-08-23T01:24:31Z",
      "closedAt": "2021-08-23T01:24:31Z",
      "comments": []
    },
    {
      "number": 929,
      "id": "MDU6SXNzdWU5NzU4OTgwNzY=",
      "title": "Request control data and header section?",
      "url": "https://github.com/httpwg/http2-spec/issues/929",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In PUSH_PROMISE, it says:\r\n\r\n> Field Block Fragment:\r\n> A field block fragment (Section 4.3) containing request control data and header section.\r\n\r\nIt contains the request header section, but what is request control data?",
      "createdAt": "2021-08-20T20:22:42Z",
      "updatedAt": "2021-08-20T20:24:11Z",
      "closedAt": "2021-08-20T20:24:11Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, I see -- this is a reference to Section 8.3, which uses that term to encompass the pseudo-header fields.",
          "createdAt": "2021-08-20T20:24:11Z",
          "updatedAt": "2021-08-20T20:24:11Z"
        }
      ]
    },
    {
      "number": 938,
      "id": "MDU6SXNzdWU5NzcyNDgyNDE=",
      "title": "Are transfer codings allowed for HTTP/2?",
      "url": "https://github.com/httpwg/http2-spec/issues/938",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "HTTP/2 prohibits `chunked` Transfer-Encoding, but doesn't actually prohibit other values:\r\n\r\n> The chunked transfer encoding defined in Section 7.1 of [HTTP11] cannot be used in HTTP/2.\r\n\r\nHTTP/3 broadened this language to cover all transfer codings:\r\n\r\n> Transfer codings (see Section 6.1 of [HTTP11]) are not defined for HTTP/3; the Transfer-Encoding header field MUST NOT be used.\r\n\r\nShould H2bis follow suit?",
      "createdAt": "2021-08-23T17:14:39Z",
      "updatedAt": "2021-08-24T11:03:41Z",
      "closedAt": "2021-08-24T11:03:41Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you take this to the list Mike?  It seems like the only sensible answer, but I'd like to double-check.",
          "createdAt": "2021-08-24T01:44:07Z",
          "updatedAt": "2021-08-24T01:44:07Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "In my mind, I was relying on Section 8.2.2:\r\n\r\n> An endpoint MUST NOT generate an HTTP/2 message containing connection-specific header fields; any message containing connection-specific header fields MUST be treated as malformed\r\n\r\nHowever, that probably isn't linked well enough to the [current text in core](https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#field.connection). Unfortunately, there isn't a term we can just lift out; perhaps something like this:\r\n\r\n> An endpoint MUST NOT generate an HTTP/2 message containing hop-by-hop header fields, including those listed in Section 7.6.1 of [HTTP]; a received message containing such fields MUST be treated as malformed\r\n\r\n",
          "createdAt": "2021-08-24T02:17:49Z",
          "updatedAt": "2021-08-24T02:17:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "On review with full context, the text that Mike cites is fine.  It's an informational note.  Mark's note here about the linkage to -semantics is good though.  I will float this on the list to see if I messed up (again).",
          "createdAt": "2021-08-24T03:44:42Z",
          "updatedAt": "2021-08-24T03:50:01Z"
        }
      ]
    },
    {
      "number": 941,
      "id": "MDU6SXNzdWU5NzcyNzgzNTY=",
      "title": "Reference to Extended CONNECT?",
      "url": "https://github.com/httpwg/http2-spec/issues/941",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the aside about HTTP/2 deliberately not supporting Upgrade, it feels worth mentioning that we later partially reversed ourselves and brought back a moral equivalent of Upgrade with a less obvious name.  Reference to RFC8441 appropriate here?",
      "createdAt": "2021-08-23T17:54:14Z",
      "updatedAt": "2021-08-25T12:15:58Z",
      "closedAt": "2021-08-25T12:15:58Z",
      "comments": []
    },
    {
      "number": 942,
      "id": "MDU6SXNzdWU5NzcyOTQzNjI=",
      "title": "No :path for CONNECT",
      "url": "https://github.com/httpwg/http2-spec/issues/942",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 8.5 says:\r\n\r\n> The :scheme and :path pseudo-header fields MUST be omitted.\r\n\r\nSection 8.3.1 says of :scheme:\r\n\r\n> Scheme is omitted for CONNECT requests (Section 8.5).\r\n\r\nHowever, it doesn't mention anything about CONNECT in the discussion of :path.",
      "createdAt": "2021-08-23T18:14:01Z",
      "updatedAt": "2021-08-24T11:21:38Z",
      "closedAt": "2021-08-24T11:21:37Z",
      "comments": []
    },
    {
      "number": 944,
      "id": "MDU6SXNzdWU5Nzc0MDY4OTU=",
      "title": "Example 5 mismatch",
      "url": "https://github.com/httpwg/http2-spec/issues/944",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Both the HTTP/1.1 and HTTP/2 versions of Example 5 are valid in their respective versions, but including a Content-Length header in the HTTP/2 version where the HTTP/1.1 version is chunked isn't necessarily comparable.  I would suggest dropping the C-L header from the HTTP/2 example to reflect that Content-Length can be omitted when translating a chunked message.",
      "createdAt": "2021-08-23T20:27:11Z",
      "updatedAt": "2021-08-24T11:21:04Z",
      "closedAt": "2021-08-24T11:21:04Z",
      "comments": []
    },
    {
      "number": 948,
      "id": "MDU6SXNzdWU5NzgzNTc3NDA=",
      "title": "Rendering of links in IANA",
      "url": "https://github.com/httpwg/http2-spec/issues/948",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The code for the IANA policies in Section 11.1 looks like this:\r\n\r\n        <t>\r\n          This document establishes a registry for HTTP/2 frame type codes.  The \"HTTP/2 Frame Type\"\r\n          registry manages an 8-bit space.  The \"HTTP/2 Frame Type\" registry operates under either\r\n          of the <xref target=\"RFC8126\" section=\"4.8\">\"IETF Review\"</xref> or <xref target=\"RFC8126\" section=\"4.10\">\"IESG Approval\"</xref> policies.\r\n        </t>\r\n\r\nThat would be fine if that rendered as I would expect, as:\r\n\r\n> This document establishes a registry for HTTP/2 frame type codes.  The \"HTTP/2 Frame Type\" registry manages an 8-bit space.  The \"HTTP/2 Frame Type\" registry operates under either of the \"IETF Review\" (Section 4.8 of [RFC8126]) or \"IESG Approval\" (Section 4.10 of [RFC8126]) policies.\r\n\r\nInstead, it renders this way:\r\n\r\n> This document establishes a registry for HTTP/2 frame type codes. The \"HTTP/2 Frame Type\" registry manages an 8-bit space. The \"HTTP/2 Frame Type\" registry operates under either of the Section 4.8 of \"IETF Review\" [RFC8126] or Section 4.10 of \"IESG Approval\" [RFC8126] policies.\r\n\r\nThat word ordering doesn't make sense.  I'm not sure exactly what XML magic would be needed to produce the expected sentence order.   Same thing occurs in Sections 11.2-4.",
      "createdAt": "2021-08-24T18:10:53Z",
      "updatedAt": "2021-08-30T12:12:24Z",
      "closedAt": "2021-08-30T12:12:24Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Same thing occurs in Sections 11.2-4.\r\n\r\n#953 appears to fix only Section 11.1.",
          "createdAt": "2021-08-28T02:53:51Z",
          "updatedAt": "2021-08-28T02:53:51Z"
        }
      ]
    },
    {
      "number": 949,
      "id": "MDU6SXNzdWU5NzgzODQ3MDY=",
      "title": "References for Obsolete IANA elements",
      "url": "https://github.com/httpwg/http2-spec/issues/949",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The HTTP2-Settings header field and the h2c Upgrade token are both obsolete in the same way for the same reason, but it's rendered differently in their respective IANA sections.\r\n\r\n- HTTP2-Settings is marked as Obsolete in the registry, with a reference back to the IANA Considerations of this document\r\n- h2c gives no instructions to IANA, but includes explanatory text that the capability is removed and refers to Section 3.1.\r\n\r\nI would suggest that these should be aligned and combined, such that each one does two things:\r\n\r\n- Instructs IANA to mark the entry as Obsolete\r\n- Add a note that the element was used for Upgrade and reference Section 3.1 for more detail on Upgrade's removal",
      "createdAt": "2021-08-24T18:47:15Z",
      "updatedAt": "2021-09-02T18:29:52Z",
      "closedAt": "2021-09-02T18:29:52Z",
      "comments": []
    },
    {
      "number": 960,
      "id": "MDU6SXNzdWU5ODQ0NTQ1OTY=",
      "title": "IANA requests seem to be incorrect for a -bis",
      "url": "https://github.com/httpwg/http2-spec/issues/960",
      "state": "CLOSED",
      "author": "tfpauly",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current IANA Considerations for H2 bis has several requests to IANA that seem to be appropriate for the original document, but not a bis now that the registries are already filled out. Shouldn't these be reworded to say \"this document updates...\" or explain that the references for registries should point to this document, rather than the old RFC?\r\n\r\n`This document establishes a registry for HTTP/2 frame type codes.`",
      "createdAt": "2021-09-01T00:16:58Z",
      "updatedAt": "2021-09-24T02:34:37Z",
      "closedAt": "2021-09-24T02:34:37Z",
      "comments": []
    },
    {
      "number": 962,
      "id": "MDU6SXNzdWU5ODQ4NTc2NTg=",
      "title": "mandatory header fields?",
      "url": "https://github.com/httpwg/http2-spec/issues/962",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> A malformed request or response is one that is an otherwise valid\r\nsequence of HTTP/2 frames but is invalid due to the presence of\r\nextraneous frames, prohibited fields or pseudo-header fields, the\r\nabsence of mandatory fields or pseudo-header fields, the inclusion of\r\nuppercase field names, or invalid field names and/or values (in certain\r\ncircumstances; see Section 8.2). \r\n\r\nAre there any mandatory fields that are not pseudo-header fields? ",
      "createdAt": "2021-09-01T08:20:56Z",
      "updatedAt": "2021-09-02T18:25:55Z",
      "closedAt": "2021-09-02T18:25:55Z",
      "comments": []
    },
    {
      "number": 963,
      "id": "MDU6SXNzdWU5ODQ4NTgyOTY=",
      "title": "lowercase field names: movivation vs requirement",
      "url": "https://github.com/httpwg/http2-spec/issues/963",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> To improve efficiency and interoperability, field names MUST be\r\nconverted to lowercase when constructing an HTTP/2 message. \r\n\r\nI think this is somewhat misleading, it just provides the motivation\r\nwhy the lowercase format was introduced initially. I would just remove\r\nthe sentence and potentially insert a note about lower-casing into the\r\nfield name validity statements. ",
      "createdAt": "2021-09-01T08:21:40Z",
      "updatedAt": "2021-09-02T18:27:10Z",
      "closedAt": "2021-09-02T18:27:10Z",
      "comments": []
    },
    {
      "number": 974,
      "id": "I_kwDOAHsHi84-mpa9",
      "title": "AD review of draft-ietf-httpbis-http2bis-05",
      "url": "https://github.com/httpwg/http2-spec/issues/974",
      "state": "CLOSED",
      "author": "fpalombini",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- [x] 1. -----\r\n\r\nFP: Is the working group aware that RFC 793bis is in IESG evaluation (https://datatracker.ietf.org/doc/draft-ietf-tcpm-rfc793bis/) ? Was the choice of having a normative reference to 793 conscious, in order to avoid any delay that might come from publication of draft-ietf-tcpm-rfc793bis? (Just checking this was considered)\r\n\r\n- [x] 2. -----\r\n\r\n   for HTTP/2 over TLS.  The general TLS usage guidance in [TLSBCP]\r\n   SHOULD be followed, with some additional restrictions that are\r\n   specific to HTTP/2.\r\n\r\nFP: Given this requirement, I would have expected to see [TLSBCP] normatively referenced, rather than informatively.\r\n\r\n- [x] 3. -----\r\n\r\n   layer.  The frame and stream layers are tailored to the needs of the\r\n   HTTP protocol and server push.\r\n\r\nFP: I would think the server push is part of the HTTP protocol, which makes this formulation \"HTTP protocol and server push\" confusing.\r\n\r\n- [x] 4. -----\r\n\r\n   Type:  The 8-bit type of the frame.  The frame type determines the\r\n\r\n   Flags:  An 8-bit field reserved for boolean flags specific to the\r\n\r\nFP: I would find a reference to the IANA registry useful.\r\n\r\n- [x] 5. -----\r\n\r\n   implementation of flow control can be difficult.  When using flow\r\n   control, the receiver MUST read from the TCP receive buffer in a\r\n   timely fashion.  Failure to do so could lead to a deadlock when\r\n\r\nFP: \"When using flow control\" might be rephrased to indicate \"when flow control limits are lower than the maximum\" (or something of the sort), since if I understand correctly the capability is always used, it is just the window size that changes (effectively implementing control of flow). Also \"timely fashion\" - I know that it is probably hard, but it would be nice to have a more precise qualification, or at least a hint of what is timely.\r\n\r\n- [x] 6. -----\r\n\r\n   stream that it successfully received from its peer.  The GOAWAY frame\r\n   includes an error code that indicates why the connection is\r\n\r\nFP: \"error code\" - here as well I would have liked a reference to the IANA registry.\r\n\r\n- [x] 7. -----\r\n\r\n   Exclusive:  A single-bit flag.  This field is only present if the\r\n      PRIORITY flag is set.\r\n\r\n   Stream Dependency:  A 31-bit stream identifier.  This field is only\r\n      present if the PRIORITY flag is set.\r\n\r\n   Weight:  An unsigned 8-bit integer.  This field is only present if\r\n      the PRIORITY flag is set.\r\n\r\nFP: I would have expected to see some definition of how the fields are used. If this is defined somewhere else, a reference would be good.\r\n\r\n- [x] 8. -----\r\n\r\n   SETTINGS Frame {\r\n     Length (24),\r\n     Type (8) = 4,\r\n\r\n     Unused Flags (7),\r\n     ACK Flag (1),\r\n\r\n     Reserved (1),\r\n     Stream Identifier (31),\r\n\r\n     Setting (48) ...,\r\n   }\r\n\r\n   Setting {\r\n     Identifier (16),\r\n     Value (32),\r\n   }\r\n\r\nFP: Is there any reason why the Stream Identifier line is not:\r\n     Stream Identifier (31) = 0,\r\n\r\n- [x] 9. -----\r\n\r\n      a server does include a value it MUST be 0.  A client MUST treat\r\n      receipt of a SETTINGS frame with SETTINGS_ENABLE_PUSH set to 1 as\r\n      a connection error (Section 5.4.1) of type PROTOCOL_ERROR.\r\n\r\nFP: This is just my curiosity: what is the reason for this stronger requirement - I would think it shouldn't be a problem for the sender if it wants to advertise that it would permit/support server push. What am I missing? \r\n\r\n- [x] 10. -----\r\n\r\n      A value of 0 for SETTINGS_MAX_CONCURRENT_STREAMS SHOULD NOT be\r\n      treated as special by endpoints.  A zero value does prevent the\r\n\r\nFP: When is it ok that the 0 value is treated as special?\r\n\r\n- [x] 11. -----\r\n\r\n   set.  Upon receiving a SETTINGS frame with the ACK flag set, the\r\n   sender of the altered settings can rely on the value having been\r\n   applied.\r\n\r\nFP: nit s/value/values. Also I believe this could be misunderstood - can it be made more precise on the fact that only the values that are present in the received frame with the ACK flag set (and not those that might have been ignored because not understood) have been applied.\r\n\r\n- [x] 12. -----\r\n\r\n   A receiver MUST treat the receipt of a WINDOW_UPDATE frame with an\r\n   flow-control window increment of 0 as a stream error (Section 5.4.2)\r\n\r\nFP: nit s/an/a\r\n\r\n- [x] 13. -----\r\n\r\n   FLOW_CONTROL_ERROR (0x3):  The endpoint detected that its peer\r\n      violated the flow-control protocol.\r\n\r\n   STREAM_CLOSED (0x5):  The endpoint received a frame after a stream\r\n      was half-closed.\r\n\r\nFP: would be good to add a reference to the relevant sections.\r\n\r\n- [x] 14. -----\r\n\r\n   set after receiving the HEADERS frame that opens a request or after\r\n   receiving a final (non-informational) status code MUST treat the\r\n\r\nFP: Where is a \"non-informational status code\" defined?\r\n\r\n- [x] 15. -----\r\n\r\nFP: Are the following two sentences in Section 8.1.1. in contraddiction?\r\n\r\n   request or response.  Malformed requests or responses that are\r\n   detected MUST be treated as a stream error (Section 5.4.2) of type\r\n   PROTOCOL_ERROR.\r\n\r\n   on the remainder of the request being correct.  A server or\r\n   intermediary MAY use RST_STREAM -- with a code other than\r\n   REFUSED_STREAM -- to abort a stream if a malformed request or\r\n   response is received.\r\n\r\nFP: In section 5.4.2. I read:\r\n\r\n   An endpoint that detects a stream error sends a RST_STREAM frame\r\n\r\nSo the first sentence above implies RST_STREAM MUST be sent, while the second sentence states RST_STREAM MAY be sent.\r\n\r\n- [x] 16. -----\r\n\r\n   their definitions in Sections Section 5.1 of [5.1] and Section 5.5 of\r\n   [5.5] of [HTTP] respectively and treat messages that contain\r\n\r\nFP: References need fixing.\r\n\r\n- [x] 17. -----\r\n\r\n     from the control data of the original request, unless the the\r\n\r\nFP: nit Remove one \"the\"\r\n\r\n- [x] 18. -----\r\n\r\n      Note that request targets for CONNECT or asterisk-form OPTIONS\r\n      requests never include authority information.\r\n\r\nFP: Please add a reference to 7.1 of [HTTP] as this is the first time \"asterisk-form OPTION\" appear in this document.\r\n\r\n- [x] 19. -----\r\n\r\n   Advertising a SETTINGS_MAX_CONCURRENT_STREAMS value of zero disables\r\n   server push by preventing the server from creating the necessary\r\n   streams.  This does not prohibit a server from sending PUSH_PROMISE\r\n   frames; clients need to reset any promised streams that are not\r\n   wanted.\r\n\r\nFP: Do these two sentences contradict each other? In the first sentence I am reading that the server can't create the necessary stream to send the PUSH_PROMISE frame, in the second sentence I read that it can?\r\n\r\n- [x] 20. -----\r\n\r\n   on a DATA frame is treated as being equivalent to the TCP FIN bit.  A\r\n\r\nFP: Can a reference be added to the section where the TCP FIN bit is defined?\r\n\r\n- [x] 21. -----\r\n\r\n     Content-Type: image/jpeg   ==>     - END_STREAM\r\n     Content-Length: 123                + END_HEADERS\r\n\r\nFP: I think it would be good to add a sentence about the meaning of - and + (which I understand to be flag set or not set) in section 2.2.\r\n\r\n- [x] 22. -----\r\n\r\n   treated as delimiters in other HTTP versions.  An intermediary that\r\n   translates an HTTP/2 request or response MUST validate fields\r\n   according to the rules in Section 8.2 roles before translating a\r\n   message to another HTTP version.  Translating a field that includes\r\n\r\nFP: is \"roles\" supposed to be there?\r\n\r\n- [x] 23. -----\r\n\r\n   The CONNECT method can be used to create disproportionate load on an\r\n   proxy, since stream creation is relatively inexpensive when compared\r\n\r\nFP: nit s/an/a\r\n\r\n- [x] 24. -----\r\n\r\nFP: I think it would be good to keep the 3rd paragraph in Section 11 instead of asking the RFC Editor to remove it, just to keep a trace of the registries that have been defined in 7540, since those registries will now reference this document, but this document does not contain all the definitions of the different fields.\r\n\r\n- [x] 25. ----\r\n\r\n   Comments:  Obsolete; see Section 11.1\r\n\r\nFP: I would suggest to be explicit and add \"of this document\" (unless links can be maintained in IANA registries Comments fields).",
      "createdAt": "2021-11-10T21:18:32Z",
      "updatedAt": "2021-12-24T01:03:15Z",
      "closedAt": "2021-12-24T01:03:15Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "All done, closing.",
          "createdAt": "2021-12-24T01:03:13Z",
          "updatedAt": "2021-12-24T01:03:13Z"
        }
      ]
    },
    {
      "number": 990,
      "id": "I_kwDOAHsHi84_gfi_",
      "title": "tsvart review from J\u00f6rg Ott",
      "url": "https://github.com/httpwg/http2-spec/issues/990",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- [x] Section 5.1.1., 3rd para:\r\n\r\n    When a stream transitions out of\r\nthe \"idle\" state, all streams that might have been initiated by that\r\npeer with a lower-valued stream identifier are implicitly\r\ntransitioned to \"closed\". \r\n\r\n    Should one say \"that might have been but were not initiated by that peers\"\r\nto make clear that this applies only to un-used streams?\r\n\r\n- [x] Section 5.3.1\r\nMaybe update the section heading to read\r\n\"Background on Priority in HTTP/2 as per RFC7540\"?\r\n\r\n- [x] Section 6.5:\r\nThe document implies that SETTINGS frames are ACKed in the order they are sent.\r\nShould one make this explicit?\r\n\r\n- [x] Last para of 6.5, top of page 37:\r\n\"If the sender of a SETTINGS frame does not receive an acknowledgement\r\nwithin a reasonable amount of time, it MAY issue a connection error\r\n(Section 5.4.1) of type SETTINGS_TIMEOUT.\"\r\n\r\n    Should one provide some intuition on what \"reasonable\" could mean? An example?\r\nIt seems, an HTTP/2 sender of a SETTINGS frame could know when this was passed\r\nto the TCP layer and may have some insights on application layer RTTs.\r\n\r\n- [x] Section 6.9.1: Concerning flow control, should one say something about avoiding\r\nsilly windows?\r\n\r\n- [x] Section 8.1.1, p52 1st para: Probably just me, but I am mildly confused by the\r\nstatement about messages having a non-zero content-length field but still no\r\ndata in the data frames. The reference section 6.4 of the HTTP semantics draft\r\ndidn't resolve that. \r\n\r\n- [x] Section 8.2.1, p53: parse error?\r\n\"When a request message violates one of these requirements, an\r\nimplementation SHOULD generate a Section 15.5.1 of 400 (Bad Request)\r\nstatus code [HTTP], [...]\"\r\n\r\n- [x] Section 8.4.2, 4th para:\r\n\"A client can use the SETTINGS_MAX_CONCURRENT_STREAMS setting to limit\r\nthe number of responses that can be concurrently pushed by a server.\r\nAdvertising a SETTINGS_MAX_CONCURRENT_STREAMS value of zero disables\r\nserver push by preventing the server from creating the necessary\r\nstreams.  This does not prohibit a server from sending PUSH_PROMISE\r\nframes; clients need to reset any promised streams that are not\r\nwanted. \r\n\r\n    Confused: it disables server push, but the server can send PUSH_PROMISE frames\r\nand then the client is supposed to reset a stream it wasn't willing to accept or\r\ncapable of accepting? Which stream number would the server legitimately put\r\ninto the PUSH_PROMISE?\r\n\r\n- [ ] There are a few cases where I am wondering if normative language should be used.\r\nExamples include\r\n    - [ ] -- 5.4.2, 2nd para, \"sends an RST_STREAM frame\"\r\n    - [x] -- 6.8, p43, 1st para, \"the server can send another GOAWAY\"\r\n    - [ ] -- 6.8, p43, 2nd para, \"the sender can discard frames\"\r\n    - [ ] -- 9.1, 3rd para, \"clients can create\"\r\n    - [ ] There may be further occurrences of \"can\" or similar.",
      "createdAt": "2021-11-29T00:21:17Z",
      "updatedAt": "2021-12-24T00:39:35Z",
      "closedAt": "2021-12-24T00:39:34Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "FYI @martinthomson I've updated this post to have a list of checkboxes for \"addressed\".",
          "createdAt": "2021-11-29T07:00:24Z",
          "updatedAt": "2021-11-29T07:00:24Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've reviewed the changes here and I'm happy with 9/14.  The others I don't think need to be addressed.",
          "createdAt": "2021-12-24T00:39:34Z",
          "updatedAt": "2021-12-24T00:39:34Z"
        }
      ]
    },
    {
      "number": 1000,
      "id": "I_kwDOAHsHi84_lE3V",
      "title": "Were RFC 7540 priority signals ever supposed to be bidirectional?",
      "url": "https://github.com/httpwg/http2-spec/issues/1000",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Apologies for raising this here and now but here we go.\r\n\r\nBased on feedback from our AD and now directorate reviews of draft-ietf-httpbis-priority, it seems that RFC 7540 and 7540bis are ambiguos about whether priority signals are supposed to be sent and processed in the client-to-server only, or whether they can also be in the server-to-client direction. Bob says this question was unanswered in his original review of RFC 7540 - https://lists.w3.org/Archives/Public/ietf-http-wg/2015JanMar/0529.html\r\n\r\nThe first para of [Section 5.3](https://datatracker.ietf.org/doc/html/rfc7540#section-5.3) says\r\n\r\n> A client can assign a priority for a new stream by including\r\n   prioritization information in the HEADERS frame (Section 6.2) that\r\n   opens the stream.  At any other time, the PRIORITY frame\r\n   (Section 6.3) can be used to change the priority of a stream.\r\n   \r\nBut beyond that there isn't really anything else. In contrast, server push is clearly server-to-client, there's the requirement\r\n\r\n> Thus, servers MUST treat the receipt of a\r\n   PUSH_PROMISE frame as a connection error (Section 5.4.1) of type\r\n   PROTOCOL_ERROR.\r\n   \r\nThe reason I'm asking is because we wrote draft-ietf-httpbis-priority assuming that signals were client-to-server only, and that is causing a few sharp edges that are hard to resolve without a conclusive answer. FWIW, I've never heard of active use of signals in the server-to-client direction.\r\n\r\n",
      "createdAt": "2021-11-30T01:30:10Z",
      "updatedAt": "2021-12-09T00:19:10Z",
      "closedAt": "2021-12-08T23:19:14Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I think your assessment is right: RFC 7540 allows both peers to send PRIORITY frames and leaves it entirely unspecified what that might mean. Servers reprioritising streams is not terribly useful, so no-one did. There's no contradictions here: RFC 7540 makes it clear that prioritisation is advisory and peers can choose what they do with it, and in all cases clients have effectively chosen to ignore prioritisation signals from servers. I believe this is reasonable.\r\n\r\nFor my part, I don't see any value in _keeping_ this functionality, not least because it never did anything sensible anyway.",
          "createdAt": "2021-11-30T10:42:04Z",
          "updatedAt": "2021-11-30T10:42:04Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So I think it's fair to say the wire format allows server-to-client priority signals but they, to our collective knowledge, were never applied to anything. RFC 7540 does a poor job of explaining what such signals would apply to, so its little surprise.\r\n\r\n7540bis leaves details of applying stream priority to RFC 7540. That seems fine.\r\n\r\nSo perhaps what we could do is in RFC 7540bis is add some text around https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#section-5.3.1-2 like \"priority signals from server to client were supported but implementations did not use this feature\".",
          "createdAt": "2021-12-06T15:21:03Z",
          "updatedAt": "2021-12-06T15:21:03Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure we should add any text at all. I don't think we need to list every way in which 7540 priority failed: it did, and we have removed all the relevant text relating to it. It seems a bit strange to try to provide guidance on how to use a feature we're asking implementers not to use.",
          "createdAt": "2021-12-06T17:49:09Z",
          "updatedAt": "2021-12-06T17:49:09Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's up to you as editors. What I can say though is that this quirk exists and we've had several rounds of review of priorities that asked us to stop casting shade on HTTP/2 so we can't talk about it in draft-ietf-httpbis-priority :wink: . Because you've chosen to eliminate the text about how to act on the signals (deferring back to RFC 7540) then there is no other way to address that quirk, and I'll just have to point people at this issue in future.",
          "createdAt": "2021-12-06T18:57:40Z",
          "updatedAt": "2021-12-06T18:58:22Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "For my part I think it's fine to leave this quirk unaddressed. We don't need to add text to revisions of a spec to address all possible behaviours in no-longer-specified protocol features. In RFC 7540, priority signals from servers to clients were unspecified. In 7540-bis, they're still unspecified, and so are 7540-style priority signals from clients to servers. Arguably we've harmonised things \ud83d\ude09 ",
          "createdAt": "2021-12-08T19:11:05Z",
          "updatedAt": "2021-12-08T19:11:05Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can live with this outcome, close at your discretion.",
          "createdAt": "2021-12-08T19:20:29Z",
          "updatedAt": "2021-12-08T19:20:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I share Cory's view.  We're moving on.\r\n\r\nThere is some cause to talk about the value of server-to-intermediary signals, but I think that the priority draft does that well.  Much better than RFC 7540 did.",
          "createdAt": "2021-12-08T23:19:14Z",
          "updatedAt": "2021-12-08T23:19:14Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "I agree to the consensus.\r\n\r\nFWIW, it is my understanding that RFC 7540 explicitly _allows_ servers send PRIORITY_UPDATE frames. Quoting from section 5.1:\r\n* _(in reserved (local)), an endpoint MUST NOT send any type of frame other than HEADERS, RST_STREAM, or PRIORITY_\r\n* _In the absence of more specific guidance elsewhere in this document, implementations SHOULD treat the receipt of a frame that is not expressly permitted in the description of a state as a connection error (Section 5.4.1) of type PROTOCOL_ERROR. Note that PRIORITY can be sent and received in any stream state._\r\n\r\nTo maintain wire compatibility with RFC 7540, the only path forward, as we seem to agree, is to continue allowing servers send PRIORITY frames.",
          "createdAt": "2021-12-09T00:19:10Z",
          "updatedAt": "2021-12-09T00:19:10Z"
        }
      ]
    },
    {
      "number": 1004,
      "id": "I_kwDOAHsHi85A2kY1",
      "title": "Excess use of Dynamic Table Size Update introduced in #1003",
      "url": "https://github.com/httpwg/http2-spec/issues/1004",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Opening a new issue as I notice that #1003 has been merged already.\r\n\r\nText added by #1003 states: _An encoder sends a Dynamic Table Size Update instruction after acknowledging a change of SETTINGS_HEADER_TABLE_SIZE even if it is not changing the size of the dynamic table or an increase to the maximum size is subsequently reverted before the field block is sent_.\r\n\r\nI am not sure if this correct interpretation of RFC 7541, and also am concerned that this text might cause new interoperability issues.\r\n\r\n[RFC 7541 section 4.2](https://httpwg.org/specs/rfc7541.html#maximum.table.size) states: _A change in the maximum size of the dynamic table is signaled via a dynamic table size update (see Section 6.3). This dynamic table size update MUST occur at the beginning of the first header block following the change to the dynamic table size. In HTTP/2, this follows a settings acknowledgment (see Section 6.5.3 of [HTTP2])._\r\n\r\nAs can be seen, this paragraph of RFC 7541 starts \"a change.\" When an HTTP/2 endpoint is using an HPACK encoder with a dynamic table of size 4,096 (the default) and receives SETTINGS_MAX_HEADER_LIST_SIZE of 4096, it is not changing the size of the dynamic table. My interpretation of RFC 7541 would be that it does not require Dynamic Table Update Size to be sent when the table size remains the same.\r\n\r\nInteroperability-wise, do existing servers respond with a Dynamic Table Update Size instruction when the client sends SETTINGS_MAX_HEADER_LIST_SIZE no less than 4096? It seems to me that this newly added text suggest such behavior is required, but I'm not sure if many servers behave as such. #1003 added text indicating that endpoints MAY error-close the connection when not seeing such behavior. Even if we are to agree that Dynamic Table Size Update MUST be sent in all cases, I'm concerned that we might see more interoperability issues by suggesting that endpoints can error-close.",
      "createdAt": "2021-12-23T23:45:09Z",
      "updatedAt": "2022-01-19T21:53:37Z",
      "closedAt": "2022-01-19T21:53:37Z",
      "comments": []
    },
    {
      "number": 1008,
      "id": "I_kwDOAHsHi85BM6nY",
      "title": "editorial consistency of \"in octets\" and \"in units of octets\"",
      "url": "https://github.com/httpwg/http2-spec/issues/1008",
      "state": "CLOSED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We have a handful of places in http2bis that say \"in units of octets\" (3) and another handful (5) that just use \"in octets\".  Do we want to pick one and be consistent?",
      "createdAt": "2022-01-05T01:58:00Z",
      "updatedAt": "2022-01-07T18:50:06Z",
      "closedAt": "2022-01-07T18:50:06Z",
      "comments": []
    },
    {
      "number": 1015,
      "id": "I_kwDOAHsHi85BkFBL",
      "title": "pseudo-header stricter validation",
      "url": "https://github.com/httpwg/http2-spec/issues/1015",
      "state": "CLOSED",
      "author": "wtarreau",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Before we definitely forget about it, could we please have a consideration for that one:\r\n\r\n   https://github.com/httpwg/http2-spec/pull/936#issuecomment-910260086\r\n\r\nThere is nothing in H2 that prevents pseudo headers from being abused, and it's suggested that they have to be reassembled to make the whole request line, that is usually parsed later to extract the relevant parts, leading to the trouble reported in the portswigger article. And semantics only apply to the recomposed parts, which is too late.\r\n\r\nI would really like that we suggest controls there so that future implementations do not get caught by this uncovered area, and the comment above proposes the minimalist controls that protect against such attacks.\r\n",
      "createdAt": "2022-01-12T07:31:23Z",
      "updatedAt": "2022-01-13T09:11:01Z",
      "closedAt": "2022-01-13T09:11:01Z",
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Willy, this document is now through IESG evaluation and is about to go to the RFC Editor. Adding substantial new text with requirements would require going back to the working group.",
          "createdAt": "2022-01-13T01:34:59Z",
          "updatedAt": "2022-01-13T01:34:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry for letting that comment pass at the time @wtarreau.  It's a reasonable request, but I don't think that we can go as far as specifying specific validation rules.  URIs are just too complicated for that.\r\n\r\nI suggest that we add a special note to [Section 10.3](https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#section-10.3) which already talks about how intermediaries might be forced to pass on bad stuff.  See #1017.",
          "createdAt": "2022-01-13T01:52:39Z",
          "updatedAt": "2022-01-13T01:52:39Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson I understand and your approach looks reasonable, many thanks! I've added a tiny comment so that we don't forget to mention \":method\" that was also severely abused there, and it's OK for me. @mnot I'm not trying to perform substantial changes but have been trying to reload that one over the last 6 months so that we don't miss it. It has been the main cause of generalized vulnerabilities coming from word-for-word implementation of the spec into code, the least we can do is warn implementers.",
          "createdAt": "2022-01-13T04:20:08Z",
          "updatedAt": "2022-01-13T04:20:08Z"
        }
      ]
    },
    {
      "number": 1027,
      "id": "I_kwDOAHsHi85GG4dg",
      "title": "RFC Editor comment 1",
      "url": "https://github.com/httpwg/http2-spec/issues/1027",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "Please note that, per the rest of this cluster of\ndocuments, \"[HTTP11]\" has been changed to \"[HTTP/1.1]\".  Please\nlet us know any objections. ",
      "createdAt": "2022-03-22T03:15:05Z",
      "updatedAt": "2022-03-22T11:28:19Z",
      "closedAt": "2022-03-22T11:28:18Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "No objection from me.",
          "createdAt": "2022-03-22T08:22:57Z",
          "updatedAt": "2022-03-22T08:22:57Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Already done locally with #1026.",
          "createdAt": "2022-03-22T11:28:18Z",
          "updatedAt": "2022-03-22T11:28:18Z"
        }
      ]
    },
    {
      "number": 1028,
      "id": "I_kwDOAHsHi85GG4d2",
      "title": "Sections 2.1 and 9 (comment 2)",
      "url": "https://github.com/httpwg/http2-spec/issues/1028",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Sections 2.1](https://www.rfc-editor.org/authors/rfc9113.html#section-2.1) and 9:  To avoid the appearance of \"of the\nHypertext Transfer Protocol protocol\", should these two instances of\n\"of the HTTP protocol\" be \"of HTTP\" (or perhaps, in the case of\n[Section 9](https://www.rfc-editor.org/authors/rfc9113.html#section-9), \"HTTP attributes\" instead of \"attributes of the HTTP\nprotocol\")?\n\nOriginal:\n\n     The frame and stream layers are tailored to the needs of the\n     HTTP protocol.\n    ...\n     This section outlines attributes of the HTTP protocol that improve\n     interoperability, reduce exposure to known security vulnerabilities,\n     or reduce the potential for implementation variation. ",
      "createdAt": "2022-03-22T03:15:06Z",
      "updatedAt": "2022-03-22T12:46:57Z",
      "closedAt": "2022-03-22T12:46:57Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, \"of HTTP\" is probably best here.",
          "createdAt": "2022-03-22T08:23:14Z",
          "updatedAt": "2022-03-22T08:23:14Z"
        }
      ]
    },
    {
      "number": 1029,
      "id": "I_kwDOAHsHi85GG4eD",
      "title": "RFC Editor comment 3",
      "url": "https://github.com/httpwg/http2-spec/issues/1029",
      "state": "OPEN",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "Please review the \"type\" attribute of each artwork\nelement.  Should any of them be tagged as sourcecode?  If yes, please\nspecify the type (e.g., perhaps \"http-message\" for the illustrations\nin [Sections 8.8.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.8.1) through 8.8.5).\n\nIf the current list of preferred values for \"type\"\n(https://www.rfc-editor.org/materials/sourcecode-types.txt)\ndoes not contain an applicable type, please let us know. ",
      "createdAt": "2022-03-22T03:15:07Z",
      "updatedAt": "2022-03-22T12:46:23Z",
      "closedAt": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "`<artwork>` is correct for each of these.  For better or worse, these are pictures and not messages.  Propose no action.",
          "createdAt": "2022-03-22T11:27:41Z",
          "updatedAt": "2022-03-22T11:27:41Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree.",
          "createdAt": "2022-03-22T12:46:22Z",
          "updatedAt": "2022-03-22T12:46:22Z"
        }
      ]
    },
    {
      "number": 1030,
      "id": "I_kwDOAHsHi85GG4eM",
      "title": "Section 4.2 (comment 4)",
      "url": "https://github.com/httpwg/http2-spec/issues/1030",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 4.2](https://www.rfc-editor.org/authors/rfc9113.html#section-4.2):  We had trouble parsing this sentence.\nIs a word missing?  If neither suggestion below is correct, please\nclarify what \"any frame carrying ... SETTINGS\" refers to.\n\nOriginal:\n\n     A frame size error in a frame that could alter\n     the state of the entire connection MUST be treated as a connection\n     error ([Section 5.4.1](https://www.rfc-editor.org/authors/rfc9113.html#section-5.4.1)); this includes any frame carrying a field block\n     ([Section 4.3](https://www.rfc-editor.org/authors/rfc9113.html#section-4.3)) (that is, HEADERS, PUSH_PROMISE, and CONTINUATION),\n     SETTINGS, and any frame with a stream identifier of 0.\n\nSuggestion #1 (... and a SETTINGS frame):\n A frame size error in a frame that could alter\n the state of the entire connection MUST be treated as a connection\n error ([Section 5.4.1](https://www.rfc-editor.org/authors/rfc9113.html#section-5.4.1)); this includes any frame carrying a field block\n ([Section 4.3](https://www.rfc-editor.org/authors/rfc9113.html#section-4.3)) (that is, HEADERS, PUSH_PROMISE, and CONTINUATION) and\n a SETTINGS frame, and any frame with a stream identifier of 0.\n\nSuggestion #2 (... or a SETTINGS frame):\n A frame size error in a frame that could alter\n the state of the entire connection MUST be treated as a connection\n error ([Section 5.4.1](https://www.rfc-editor.org/authors/rfc9113.html#section-5.4.1)); this includes any frame carrying a field block\n ([Section 4.3](https://www.rfc-editor.org/authors/rfc9113.html#section-4.3)) (that is, HEADERS, PUSH_PROMISE, and CONTINUATION) or\n a SETTINGS frame, and any frame with a stream identifier of 0. ",
      "createdAt": "2022-03-22T03:15:08Z",
      "updatedAt": "2022-03-22T12:50:05Z",
      "closedAt": "2022-03-22T12:50:05Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggestion 1 is correct.",
          "createdAt": "2022-03-22T08:24:30Z",
          "updatedAt": "2022-03-22T08:24:30Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that the list structure is supposed to be... includes:\r\n\r\n* any frame carrying a field block (...),\r\n* a SETTINGS frame, and\r\n* any frame with a stream identifier of 0.\r\n\r\nWhich suggests option 3, in my PR.",
          "createdAt": "2022-03-22T11:34:13Z",
          "updatedAt": "2022-03-22T11:34:13Z"
        }
      ]
    },
    {
      "number": 1031,
      "id": "I_kwDOAHsHi85GG4ed",
      "title": "Section 5.1 (comment 5)",
      "url": "https://github.com/httpwg/http2-spec/issues/1031",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 5.1](https://www.rfc-editor.org/authors/rfc9113.html#section-5.1):  The punctuation in this sentence was\ndifficult to follow.  We updated it as noted below.  If this is\nincorrect, please provide alternative text.\n\nOriginal (\"the content ... count\" has also been corrected):\n This means updating header compression state for HEADERS\n and PUSH_PROMISE frames; PUSH_PROMISE frames also cause the\n promised stream to become \"reserved\", even when the PUSH_PROMISE\n frame is received on a closed stream; and, the content of DATA\n frames count toward the connection flow-control window.\n\nCurrently:\n\n     This means updating header compression state for HEADERS\n     and PUSH_PROMISE frames.  PUSH_PROMISE frames also cause the\n     promised stream to become \"reserved\", even when the PUSH_PROMISE\n     frame is received on a closed stream.  Additionally, the content\n     of DATA frames counts toward the connection flow-control window. ",
      "createdAt": "2022-03-22T03:15:10Z",
      "updatedAt": "2022-03-22T12:50:47Z",
      "closedAt": "2022-03-22T12:50:47Z",
      "comments": []
    },
    {
      "number": 1032,
      "id": "I_kwDOAHsHi85GG4ek",
      "title": "Sections 5.2.2 and 5.2.3 (comment 6)",
      "url": "https://github.com/httpwg/http2-spec/issues/1032",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Sections 5.2.2](https://www.rfc-editor.org/authors/rfc9113.html#section-5.2.2) and 5.2.3:  Should \"bandwidth-delay\nproduct\" be written as \"bandwidth * delay product\" per RFC 7323?\n\nOriginal:\n\n     Note, however, that this can lead to suboptimal use of available\n     network resources if flow control is enabled without knowledge of the\n     bandwidth-delay product (see [RFC7323]).\n\n Even with full awareness of the current bandwidth-delay product,\n implementation of flow control can be difficult.\n...\n If an endpoint cannot ensure that its peer always has available flow\n control window space that is greater than the peer's bandwidth-delay\n product on this connection, its receive throughput will be limited by\n HTTP/2 flow control. ",
      "createdAt": "2022-03-22T03:15:11Z",
      "updatedAt": "2022-03-22T12:53:12Z",
      "closedAt": "2022-03-22T12:53:12Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I think \"bandwidth-delay product\" is the standard representation of the term. It's not a term specific to this document but a broader term of art. I recommend not taking this suggestion.",
          "createdAt": "2022-03-22T08:26:00Z",
          "updatedAt": "2022-03-22T08:26:00Z"
        }
      ]
    },
    {
      "number": 1033,
      "id": "I_kwDOAHsHi85GG4ex",
      "title": "Section 5.2.3 (comment 7)",
      "url": "https://github.com/httpwg/http2-spec/issues/1033",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 5.2.3](https://www.rfc-editor.org/authors/rfc9113.html#section-5.2.3):  We changed \"Flow Control Performance\" to\n\"Flow-Control Performance\" per the title of [Section 5.2.1](https://www.rfc-editor.org/authors/rfc9113.html#section-5.2.1) \n(\"Flow-Control Principles\").  Please let us know any concerns.\n\nOriginal:\n\n     5.2.3.  Flow Control Performance\n\nCurrently:\n\n     5.2.3.  Flow-Control Performance ",
      "createdAt": "2022-03-22T03:15:12Z",
      "updatedAt": "2022-03-22T12:53:13Z",
      "closedAt": "2022-03-22T12:53:13Z",
      "comments": []
    },
    {
      "number": 1034,
      "id": "I_kwDOAHsHi85GG4fB",
      "title": "Section 6.1 (comment 8)",
      "url": "https://github.com/httpwg/http2-spec/issues/1034",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 6.1](https://www.rfc-editor.org/authors/rfc9113.html#section-6.1):  It appears that \"as\" in this sentence\nmeans \"because\" instead of \"while\", so we added a comma after\n\"trailers\".  Please let us know if this is incorrect.\n\nOriginal:\n\n     This is\n     only possible if the endpoint does not send trailers as the\n     END_STREAM flag appears on a HEADERS frame in that case; see\n     [Section 8.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.1)\n\nCurrently:\n\n     |  ...  This is\n     |  only possible if the endpoint does not send trailers, as the\n     |  END_STREAM flag appears on a HEADERS frame in that case; see\n     |  [Section 8.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.1) ",
      "createdAt": "2022-03-22T03:15:13Z",
      "updatedAt": "2022-03-22T12:55:23Z",
      "closedAt": "2022-03-22T12:55:23Z",
      "comments": []
    },
    {
      "number": 1035,
      "id": "I_kwDOAHsHi85GG4fN",
      "title": "Section 6.5.2 (comment 9)",
      "url": "https://github.com/httpwg/http2-spec/issues/1035",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 6.5.2](https://www.rfc-editor.org/authors/rfc9113.html#section-6.5.2):  As compared to other parameter\ndefinitions in this document, this text reads oddly and is a bit\nconfusing at first: the first sentence defines behavior when the\nparameter is unset, where most or all of the other parameter\ndefinitions appear to define behavior when set.  Would it help to\nupdate as suggested?\n\nOriginal:\n\n     SETTINGS_ENABLE_PUSH (0x2):  This setting can be used to disable\n        server push ([Section 8.4](https://www.rfc-editor.org/authors/rfc9113.html#section-8.4)).  A server MUST NOT send a PUSH_PROMISE\n        frame if it receives this parameter set to a value of 0.\n\nSuggested:\n\n     SETTINGS_ENABLE_PUSH (0x2):  This setting can be used to enable or\n        disable server push.  A server MUST NOT send a PUSH_PROMISE frame\n        if it receives this parameter set to a value of 0 ([Section 8.4](https://www.rfc-editor.org/authors/rfc9113.html#section-8.4)). ",
      "createdAt": "2022-03-22T03:15:14Z",
      "updatedAt": "2022-03-22T12:55:58Z",
      "closedAt": "2022-03-22T12:55:58Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Probably fine. We could nitpick the wording a bit, but I think the suggestion is reasonable.",
          "createdAt": "2022-03-22T08:27:18Z",
          "updatedAt": "2022-03-22T08:27:18Z"
        }
      ]
    },
    {
      "number": 1036,
      "id": "I_kwDOAHsHi85GG4fd",
      "title": "Section 6.6 (comment 10)",
      "url": "https://github.com/httpwg/http2-spec/issues/1036",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 6.6](https://www.rfc-editor.org/authors/rfc9113.html#section-6.6):  Is this \"Reserved:\" paragraph needed here\n(after Figure 8) as an \"additional\" field description, when it\nappears to be already defined in [Section 4](https://www.rfc-editor.org/authors/rfc9113.html#section-4)?  Also, we do not see a\n\"Reserved:\" paragraph after Figures 10 and 11, which also show two\n\"Reserved (1),\" entries each.\n\nOriginal:\n\n                      Figure 8: PUSH_PROMISE Frame Format\n\n The Length, Type, Unused Flag(s), Reserved, and Stream Identifier\n fields are described in [Section 4](https://www.rfc-editor.org/authors/rfc9113.html#section-4)  The PUSH_PROMISE frame payload\n has the following additional fields:\n\n Pad Length:  An 8-bit field containing the length of the frame\n    padding in units of octets.  This field is only present if the\n    PADDED flag is set.\n\n Reserved:  A single reserved bit.\n\n Promised Stream ID:  An unsigned 31-bit integer that identifies the\n...\n\nPossibly:\n\n                      Figure 8: PUSH_PROMISE Frame Format\n\n The Length, Type, Unused Flag(s), Reserved, and Stream Identifier\n fields are described in [Section 4](https://www.rfc-editor.org/authors/rfc9113.html#section-4)  The PUSH_PROMISE frame payload\n has the following additional fields:\n\n Pad Length:  An 8-bit field containing the length of the frame\n    padding in units of octets.  This field is only present if the\n    PADDED flag is set.\n\n Promised Stream ID:  An unsigned 31-bit integer that identifies the\n ... ",
      "createdAt": "2022-03-22T03:15:16Z",
      "updatedAt": "2022-03-22T12:56:13Z",
      "closedAt": "2022-03-22T12:56:13Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Good spot, the `reserved` comment there is unnecessary.",
          "createdAt": "2022-03-22T08:28:34Z",
          "updatedAt": "2022-03-22T08:28:34Z"
        }
      ]
    },
    {
      "number": 1037,
      "id": "I_kwDOAHsHi85GG4ft",
      "title": "Section 6.6 (comment 11)",
      "url": "https://github.com/httpwg/http2-spec/issues/1037",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 6.6](https://www.rfc-editor.org/authors/rfc9113.html#section-6.6):  Should \"containing request control data\nand header section\" be \"containing request control data and a header\nsection\" or \"containing request control data and header sections\"?\n\nOriginal:\n\n     Field Block Fragment:  A field block fragment ([Section 4.3](https://www.rfc-editor.org/authors/rfc9113.html#section-4.3))\n        containing request control data and header section. ",
      "createdAt": "2022-03-22T03:15:17Z",
      "updatedAt": "2022-03-22T13:06:30Z",
      "closedAt": "2022-03-22T13:06:30Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm. I think neither. Perhaps \"containing the request control data and header section\"?",
          "createdAt": "2022-03-22T08:30:21Z",
          "updatedAt": "2022-03-22T08:30:21Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've implemented that, but do we need to say \"*a* header section\" ?",
          "createdAt": "2022-03-22T11:51:39Z",
          "updatedAt": "2022-03-22T11:51:39Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Ye~es, probably. We only have bad language for this but I think that's the closest to right.",
          "createdAt": "2022-03-22T12:57:02Z",
          "updatedAt": "2022-03-22T12:57:02Z"
        }
      ]
    },
    {
      "number": 1038,
      "id": "I_kwDOAHsHi85GG4f4",
      "title": "Section 6.8 (comment 12)",
      "url": "https://github.com/httpwg/http2-spec/issues/1038",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 6.8](https://www.rfc-editor.org/authors/rfc9113.html#section-6.8):  As this sentence seemed to indicate that\nthe sender itself was sent, we updated the text to clarify that the\nGOAWAY is sent.  Please let us know if this update is incorrect.\n\nOriginal:\n\n     Once sent, the sender will ignore frames sent on streams initiated by\n     the receiver if the stream has an identifier higher than the included\n     last stream identifier.\n\nCurrently:\n\n     Once the GOAWAY is sent, the sender will ignore frames sent on\n     streams initiated by the receiver if the stream has an identifier\n     higher than the included last stream identifier. ",
      "createdAt": "2022-03-22T03:15:18Z",
      "updatedAt": "2022-03-22T12:58:09Z",
      "closedAt": "2022-03-22T12:58:09Z",
      "comments": []
    },
    {
      "number": 1039,
      "id": "I_kwDOAHsHi85GG4gH",
      "title": "Section 8.2.3 (comment 13)",
      "url": "https://github.com/httpwg/http2-spec/issues/1039",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 8.2.3](https://www.rfc-editor.org/authors/rfc9113.html#section-8.2.3):  We had trouble parsing this sentence.\nIf the suggested text is not correct, please clarify what prevents\ncookie-pairs from being sent on multiple field lines.\n\nOriginal:\n\n     This header field contains multiple\n     values, but does not use a COMMA (\",\") as a separator, which prevents\n     cookie-pairs from being sent on multiple field lines (see Section 5.2 of [HTTP]).\n\nSuggested:\n\n     This header field contains multiple\n     values but does not use a COMMA (\",\") as a separator, thereby\n     preventing cookie-pairs from being sent on multiple field lines (see\n     Section 5.2 of [HTTP]). ",
      "createdAt": "2022-03-22T03:15:19Z",
      "updatedAt": "2022-03-22T12:58:53Z",
      "closedAt": "2022-03-22T12:58:53Z",
      "comments": []
    },
    {
      "number": 1040,
      "id": "I_kwDOAHsHi85GG4ga",
      "title": "Sections 8.3.1 and subsequent (comment 14)",
      "url": "https://github.com/httpwg/http2-spec/issues/1040",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Sections 8.3.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.3.1) and subsequent:  Please note that, per\nthe rest of this cluster of documents, we have placed the terms\nbeginning with a colon (\":method\", \":scheme\", etc.) in double quotes\nwhere they appear in running text.  Please review, and let us know\nany objections. ",
      "createdAt": "2022-03-22T03:15:20Z",
      "updatedAt": "2022-03-22T13:00:10Z",
      "closedAt": "2022-03-22T13:00:10Z",
      "comments": []
    },
    {
      "number": 1041,
      "id": "I_kwDOAHsHi85GG4gj",
      "title": "Section 8.3.1 (comment 15)",
      "url": "https://github.com/httpwg/http2-spec/issues/1041",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 8.3.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.3.1):  We made quoting consistent around\nlowercase instances of \"http\" and \"https\" when describing URIs or\nschemed URIs, per quoted instances in [Sections 3](https://www.rfc-editor.org/authors/rfc9113.html#section-3), 3.2, and 10.1.\nPlease let us know any objections.\n\nOriginal:\n\n     http and https schemed URIs\n     http or https schemed URIs\n     http or https URIs\n\nCurrently:\n\n     \"http\" and \"https\" schemed URIs\n     \"http\" or \"https\" schemed URIs\n     \"http\" or \"https\" URIs ",
      "createdAt": "2022-03-22T03:15:22Z",
      "updatedAt": "2022-03-22T13:06:38Z",
      "closedAt": "2022-03-22T13:06:38Z",
      "comments": []
    },
    {
      "number": 1042,
      "id": "I_kwDOAHsHi85GG4gv",
      "title": "Section 8.3.1 (comment 16)",
      "url": "https://github.com/httpwg/http2-spec/issues/1042",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 8.3.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.3.1):  Please confirm that [Section 7.1](https://www.rfc-editor.org/authors/rfc9113.html#section-7.1)\n(\"Determining the Target Resource\") of [HTTP] and not [Section 7.2](https://www.rfc-editor.org/authors/rfc9113.html#section-7.2)\n(\"Host and :authority\") of [HTTP] is intended in these sentences.\nWould it be appropriate to cite both sections?  We ask because we do\nnot see \"authority\" mentioned in Section 7.1 of [HTTP].\n\nOriginal:\n\n      Note that request targets for CONNECT or asterisk-form OPTIONS\n      requests never include authority information; see Section 7.1 of [HTTP].\n    ...\n     Note that request targets for CONNECT or asterisk-form OPTIONS\n     requests never include authority information; see Section 7.1 of [HTTP]. ",
      "createdAt": "2022-03-22T03:15:23Z",
      "updatedAt": "2022-03-22T13:00:39Z",
      "closedAt": "2022-03-22T13:00:39Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should reference both sections: the reference to Section 7.1 is for the request targets, and 7.2 is for the authority information citation.",
          "createdAt": "2022-03-22T08:33:49Z",
          "updatedAt": "2022-03-22T08:33:49Z"
        }
      ]
    },
    {
      "number": 1043,
      "id": "I_kwDOAHsHi85GG4g6",
      "title": "Section 8.3.1 (comment 17)",
      "url": "https://github.com/httpwg/http2-spec/issues/1043",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 8.3.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.3.1):  We had trouble following \"a different\nentity to\" in this sentence.  Does it mean \"an entity different from\"\n(per \"Host header field that differs from\" in the previous sentence),\n\"a different entity for\", or something else?\n\nOriginal (the previous sentence is included for context):\n Clients MUST NOT generate a request with a Host header field that\n differs from the :authority pseudo-header field.  A server SHOULD\n treat a request as malformed if it contains a Host header field\n that identifies a different entity to the :authority pseudo-header\n field. ",
      "createdAt": "2022-03-22T03:15:24Z",
      "updatedAt": "2022-03-22T13:02:57Z",
      "closedAt": "2022-03-22T13:02:57Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "It means \"an entity different from\": that is, the request is in error if it contains a Host header field and an \":authority\" pseudo-header field, and the two field values differ.",
          "createdAt": "2022-03-22T08:35:08Z",
          "updatedAt": "2022-03-22T08:35:08Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We have to be careful not to catch differences in representation (\"example.com\" vs. \"Example.com\").",
          "createdAt": "2022-03-22T12:14:29Z",
          "updatedAt": "2022-03-22T12:14:29Z"
        }
      ]
    },
    {
      "number": 1044,
      "id": "I_kwDOAHsHi85GG4hG",
      "title": "Section 8.4.2 (comment 18)",
      "url": "https://github.com/httpwg/http2-spec/issues/1044",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 8.4.2](https://www.rfc-editor.org/authors/rfc9113.html#section-8.4.2):  Does \"the same sequence of frames as\ndefined in [Section 8.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.1)\" mean \"the same sequence of frames as that\ndefined in [Section 8.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.1)\" or \"the same sequence of frames, as defined\nin [Section 8.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.1)\"?  It appears to us that it means \"...as that defined\nin [Section 8.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.1)\", but please advise.\n\nOriginal:\n\n     The\n     server uses this stream to transmit an HTTP response, using the same\n     sequence of frames as defined in [Section 8.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.1) ",
      "createdAt": "2022-03-22T03:15:25Z",
      "updatedAt": "2022-03-22T13:03:32Z",
      "closedAt": "2022-03-22T13:03:32Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "It means \"as that defined in Section 8.1\".",
          "createdAt": "2022-03-22T08:35:38Z",
          "updatedAt": "2022-03-22T08:35:38Z"
        }
      ]
    },
    {
      "number": 1045,
      "id": "I_kwDOAHsHi85GG4hW",
      "title": "Sections 8.5 and 9.1.1 (comment 19)",
      "url": "https://github.com/httpwg/http2-spec/issues/1045",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Sections 8.5](https://www.rfc-editor.org/authors/rfc9113.html#section-8.5) and 9.1.1:  We quoted \"https\" where\npreceded by \"resources\".  Please let us know if this is incorrect.\n\nOriginal:\n\n     CONNECT is primarily\n     used with HTTP proxies to establish a TLS session with an origin\n     server for the purposes of interacting with https resources.\n    ...\n     For https resources, connection reuse additionally depends on having\n     a certificate that is valid for the host in the URI.\n\nCurrently (best viewed in the .html or .pdf output):\n CONNECT is primarily\n used with HTTP proxies to establish a TLS session with an origin\n server for the purposes of interacting with \"https\" resources.\n...\n For \"https\" resources, connection reuse additionally depends on\n having a certificate that is valid for the host in the URI. ",
      "createdAt": "2022-03-22T03:15:27Z",
      "updatedAt": "2022-03-22T13:06:38Z",
      "closedAt": "2022-03-22T13:06:38Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Folded into #1085.",
          "createdAt": "2022-03-22T12:40:04Z",
          "updatedAt": "2022-03-22T12:40:04Z"
        }
      ]
    },
    {
      "number": 1046,
      "id": "I_kwDOAHsHi85GG4hj",
      "title": "Section 8.7 (comment 20)",
      "url": "https://github.com/httpwg/http2-spec/issues/1046",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 8.7](https://www.rfc-editor.org/authors/rfc9113.html#section-8.7):  Does \"as\" mean \"while\" or \"because\" in\nthis sentence?\n\nOriginal:\n\n     Connections that remain idle can\n     become broken as some middleboxes (for instance, network address\n     translators or load balancers) silently discard connection bindings. ",
      "createdAt": "2022-03-22T03:15:28Z",
      "updatedAt": "2022-03-22T13:07:13Z",
      "closedAt": "2022-03-22T13:07:13Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "\"As\" means \"because\" in this sentence.",
          "createdAt": "2022-03-22T08:36:10Z",
          "updatedAt": "2022-03-22T08:36:10Z"
        }
      ]
    },
    {
      "number": 1057,
      "id": "I_kwDOAHsHi85GG7vY",
      "title": "Sections 8.8.3 and 8.8.4 (comment 21)",
      "url": "https://github.com/httpwg/http2-spec/issues/1057",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Sections 8.8.3](https://www.rfc-editor.org/authors/rfc9113.html#section-8.8.3) and 8.8.4:  Because \"control data and a\nrequest header and message content\" reads a bit oddly, we changed it\nto \"control data and a request header with message content\" per\n\"control data and a request header with no message content\" in\n[Section 8.1.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.1.1)  Please let us know if this is incorrect.\n\nOriginal:\n\n     An HTTP POST request that includes control data and a request header\n     and message content is transmitted as one HEADERS frame, followed by\n     zero or more CONTINUATION frames containing the request header,\n     followed by one or more DATA frames, with the last CONTINUATION (or\n     HEADERS) frame having the END_HEADERS flag set and the final DATA\n     frame having the END_STREAM flag set:\n    ...\n     A response that includes control data and a response header and\n     message content is transmitted as a HEADERS frame, followed by zero\n     or more CONTINUATION frames, followed by one or more DATA frames,\n     with the last DATA frame in the sequence having the END_STREAM flag\n     set:\n\nCurrently:\n\n     An HTTP POST request that includes control data and a request header\n     with message content is transmitted as one HEADERS frame, followed by\n     zero or more CONTINUATION frames containing the request header,\n     followed by one or more DATA frames, with the last CONTINUATION (or\n     HEADERS) frame having the END_HEADERS flag set and the final DATA\n     frame having the END_STREAM flag set:\n    ...\n     A response that includes control data and a response header with\n     message content is transmitted as a HEADERS frame, followed by zero\n     or more CONTINUATION frames, followed by one or more DATA frames,\n     with the last DATA frame in the sequence having the END_STREAM flag\n     set: ",
      "createdAt": "2022-03-22T03:37:55Z",
      "updatedAt": "2022-03-22T13:08:57Z",
      "closedAt": "2022-03-22T13:08:57Z",
      "comments": []
    },
    {
      "number": 1058,
      "id": "I_kwDOAHsHi85GG7vp",
      "title": "Sections 9.1.1 and 9.2 (comment 22)",
      "url": "https://github.com/httpwg/http2-spec/issues/1058",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Sections 9.1.1](https://www.rfc-editor.org/authors/rfc9113.html#section-9.1.1) and 9.2:  \"SNI\" is not used in [TLS-EXT]\n(RFC 6066) or elsewhere in this document.  Also, this abbreviation\nwasn't used in [Section 9.1](https://www.rfc-editor.org/authors/rfc9113.html#section-9.1), Paragraph 4.  Is it necessary?\n\nWe also see one instance of \"SNI\" in RFC-to-be 9114; the abbreviation\ndoesn't appear to serve any specific purpose:\nServer Name Indication (SNI; [RFC6066])\n\nOriginal:\n\n     For\n     example, TLS termination might be performed by a middlebox that uses\n     the TLS Server Name Indication (SNI) [TLS-EXT] extension to select an\n     origin server.\n    ...\n     The TLS implementation MUST support the Server Name Indication (SNI)\n     [TLS-EXT] extension to TLS. ",
      "createdAt": "2022-03-22T03:37:57Z",
      "updatedAt": "2022-03-22T13:08:26Z",
      "closedAt": "2022-03-22T13:08:26Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "We can safely remove it.",
          "createdAt": "2022-03-22T08:37:20Z",
          "updatedAt": "2022-03-22T08:37:20Z"
        }
      ]
    },
    {
      "number": 1059,
      "id": "I_kwDOAHsHi85GG7v2",
      "title": "Section 9.2.2 (comment 23)",
      "url": "https://github.com/httpwg/http2-spec/issues/1059",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 9.2.2](https://www.rfc-editor.org/authors/rfc9113.html#section-9.2.2):  This sentence reads oddly.  As it\nappears that the problem in question causes TLS handshake failures,\nwe updated accordingly.  Please let us know if this is incorrect.\n\nOriginal:\n\n     To avoid this\n     problem causing TLS handshake failures, deployments of HTTP/2 that\n     use TLS 1.2 MUST support TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n     [TLS-ECDHE] with the P-256 elliptic curve [RFC8422].\n\nCurrently:\n\n     To avoid this\n     problem, which causes TLS handshake failures, deployments of HTTP/2\n     that use TLS 1.2 MUST support TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n     [TLS-ECDHE] with the P-256 elliptic curve [RFC8422]. ",
      "createdAt": "2022-03-22T03:37:58Z",
      "updatedAt": "2022-03-22T13:09:39Z",
      "closedAt": "2022-03-22T13:09:39Z",
      "comments": []
    },
    {
      "number": 1060,
      "id": "I_kwDOAHsHi85GG7wD",
      "title": "Section 10.3 (comment 24)",
      "url": "https://github.com/httpwg/http2-spec/issues/1060",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 10.3](https://www.rfc-editor.org/authors/rfc9113.html#section-10.3):  Should \"Content-Length\" be enclosed in\r\n\"`<tt>`\" elements in the XML file?  We ask because we see three\r\ninstances of \"`<tt>content-length</tt>` header field\" in the XML for\r\n[Section 8.1.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.1.1)\r\n\r\nOriginal:\r\n\r\n> Additionally, intermediaries\r\n>  should take care when forwarding messages containing Content-Length\r\n> fields to ensure that the message is well-formed ([Section 8.1.1](https://www.rfc-editor.org/authors/rfc9113.html#section-8.1.1)). ",
      "createdAt": "2022-03-22T03:37:59Z",
      "updatedAt": "2022-03-22T13:14:53Z",
      "closedAt": "2022-03-22T13:14:53Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Probably, yes.",
          "createdAt": "2022-03-22T08:48:28Z",
          "updatedAt": "2022-03-22T08:48:28Z"
        }
      ]
    },
    {
      "number": 1061,
      "id": "I_kwDOAHsHi85GG7wM",
      "title": "Section 10.5 (comment 25)",
      "url": "https://github.com/httpwg/http2-spec/issues/1061",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 10.5](https://www.rfc-editor.org/authors/rfc9113.html#section-10.5):  We had trouble parsing this sentence.\nDoes \"The use of field section compression and flow control depend\"\nmean \"The use of (1) field section compression and (2) flow control\ndepends\", or does it mean \"Flow control and the use of field section\ncompression depend\"?\n\nOriginal:\n\n     The use of field section\n     compression and flow control depend on a commitment of resources for\n     storing a greater amount of state.\n\nPossibly (\"Using ... depends\"):\n Using field section\n compression and flow control depends on a commitment of resources\n for storing a greater amount of state. ",
      "createdAt": "2022-03-22T03:38:00Z",
      "updatedAt": "2022-03-22T13:15:31Z",
      "closedAt": "2022-03-22T13:15:31Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "The former is the correct variant, I think.",
          "createdAt": "2022-03-22T08:49:16Z",
          "updatedAt": "2022-03-22T08:49:16Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggesting instead:\r\n\r\n> Both field section compression and flow control depend on a commitment of a greater amount of state.",
          "createdAt": "2022-03-22T12:31:56Z",
          "updatedAt": "2022-03-22T12:31:56Z"
        }
      ]
    },
    {
      "number": 1062,
      "id": "I_kwDOAHsHi85GG7wU",
      "title": "Section 10.5 (comment 26)",
      "url": "https://github.com/httpwg/http2-spec/issues/1062",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 10.5](https://www.rfc-editor.org/authors/rfc9113.html#section-10.5):  \"offers some opportunities to waste\"\nreads oddly.  Are some words missing?\n\nOriginal:\n\n     *  Field section compression also offers some opportunities to waste\n        processing resources; see Section 7 of [COMPRESSION] for more\n        details on potential abuses.\n\nPossibly:\n\n     *  Field section compression also provides opportunities for an\n        attacker to waste processing resources; see Section 7 of [COMPRESSION] for more details on potential abuses. ",
      "createdAt": "2022-03-22T03:38:01Z",
      "updatedAt": "2022-03-22T13:15:59Z",
      "closedAt": "2022-03-22T13:15:59Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "The suggestion is a good one, it communicates the intended meaning.",
          "createdAt": "2022-03-22T08:49:39Z",
          "updatedAt": "2022-03-22T08:49:39Z"
        }
      ]
    },
    {
      "number": 1063,
      "id": "I_kwDOAHsHi85GG7we",
      "title": "Section 10.5 (comment 27)",
      "url": "https://github.com/httpwg/http2-spec/issues/1063",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Section 10.5](https://www.rfc-editor.org/authors/rfc9113.html#section-10.5):  Please confirm that \"i.e.,\" is\ncorrect here (in which case \"SETTINGS changes, small frames, field\nsection compression\" should be \"SETTINGS changes, small frames, and\nfield section compression\") instead of \"e.g.,\".\n\nOriginal:\n\n     Most of the features that might be exploited for denial of service -\n     i.e., SETTINGS changes, small frames, field section compression -\n     have legitimate uses. ",
      "createdAt": "2022-03-22T03:38:02Z",
      "updatedAt": "2022-03-22T13:17:24Z",
      "closedAt": "2022-03-22T13:17:24Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that this should probably e.g., not i.e.",
          "createdAt": "2022-03-22T08:50:09Z",
          "updatedAt": "2022-03-22T08:50:09Z"
        }
      ]
    },
    {
      "number": 1064,
      "id": "I_kwDOAHsHi85GG7wl",
      "title": "Sections 10.8 and 10.9 (comment 28)",
      "url": "https://github.com/httpwg/http2-spec/issues/1064",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "[Sections 10.8](https://www.rfc-editor.org/authors/rfc9113.html#section-10.8) and 10.9:  Please confirm that these\ninstances of \"value\" should not be \"values\".\n\nOriginal:\n\n     These\n     include the value of settings, the manner in which flow-control\n     windows are managed, the way priorities are allocated to streams, the\n     timing of reactions to stimulus, and the handling of any features\n     that are controlled by settings.\n    ...\n     Ensuring that processing time is not dependent on the value of\n     secrets is the best defense against any form of timing attack.\n\nPossibly:\n\n     These\n     include the values of settings, the manner in which flow-control\n     windows are managed, the way priorities are allocated to streams, the\n     timing of reactions to stimulus, and the handling of any features\n     that are controlled by settings.\n    ...\n     Ensuring that processing time is not dependent on secret values is\n     the best defense against any form of timing attack. ",
      "createdAt": "2022-03-22T03:38:04Z",
      "updatedAt": "2022-03-22T13:19:56Z",
      "closedAt": "2022-03-22T13:19:56Z",
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "These should both be \"values\".",
          "createdAt": "2022-03-22T10:28:13Z",
          "updatedAt": "2022-03-22T10:28:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Values is correct in the first case, but the second should be \"a value\"\r\nby which it means \"any value\".",
          "createdAt": "2022-03-22T12:39:31Z",
          "updatedAt": "2022-03-22T12:39:31Z"
        }
      ]
    },
    {
      "number": 1065,
      "id": "I_kwDOAHsHi85GG7wu",
      "title": "The Status of HTTP2-Settings at\n     https (comment 29)",
      "url": "https://github.com/httpwg/http2-spec/issues/1065",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "The Status of HTTP2-Settings at\n     https://www.iana.org/assignments/http-fields/http-fields.xhtml is\n     listed as \"obsoleted\".  However, it was listed as \"Standard\" in\n     [Section 11.1](https://www.rfc-editor.org/authors/rfc9113.html#section-11.1) of this document.  We have update this to match the\n     registry per this note from IANA:\n\n\"NOTE: the authors will update the status field in the document to\nmatch the status entry below.\"\n\nIANA:\nField Name: HTTP2-Settings\nStatus: obsoleted\nReference: RFC 7540, [Section 3.2.1](https://www.rfc-editor.org/authors/rfc9113.html#section-3.2.1)\nComments: Obsolete; see [Section 11.1](https://www.rfc-editor.org/authors/rfc9113.html#section-11.1) of [this document].\n\n\nThis doc originally had:\n   Field Name:  HTTP2-Settings\n   Status:  Standard\n   Reference:  [Section 3.2.1](https://rfc-editor.org/rfc/rfc7540.html#section-3.2.1) of [RFC7540](https://rfc-editor.org/rfc/rfc7540.html)\n   Comments:  Obsolete; see [Section 11.1](https://www.rfc-editor.org/authors/rfc9113.html#section-11.1) of this document.\n\n",
      "createdAt": "2022-03-22T03:38:05Z",
      "updatedAt": "2022-03-22T12:41:27Z",
      "closedAt": "2022-03-22T12:41:26Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #1021 already.",
          "createdAt": "2022-03-22T12:41:26Z",
          "updatedAt": "2022-03-22T12:41:26Z"
        }
      ]
    },
    {
      "number": 1066,
      "id": "I_kwDOAHsHi85GG7w6",
      "title": "RFC Editor comment 30",
      "url": "https://github.com/httpwg/http2-spec/issues/1066",
      "state": "OPEN",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "Please review if \"(OBSOLETE)\" should be added to this\n     document to match the IANA registry at\n     https://www.iana.org/assignments/http-upgrade-tokens/http-upgrade-tokens.xhtml.\n\nIANA:\nDescription: Hypertext Transfer Protocol version 2 (HTTP/2) (OBSOLETE) \t\n\nThis doc:\nDescription:  Hypertext Transfer Protocol version 2 (HTTP/2)\n\n\n",
      "createdAt": "2022-03-22T03:38:06Z",
      "updatedAt": "2022-03-22T14:08:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "In our copy as \"(OBSOLETE) Hypertext Transfer Protocol version 2 (HTTP/2)\", which I prefer as it doesn't accidentally mean \"HTTP/2 is obsolete\".",
          "createdAt": "2022-03-22T12:43:35Z",
          "updatedAt": "2022-03-22T12:43:35Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree.",
          "createdAt": "2022-03-22T14:08:46Z",
          "updatedAt": "2022-03-22T14:08:46Z"
        }
      ]
    },
    {
      "number": 1067,
      "id": "I_kwDOAHsHi85GG7xD",
      "title": "Informative References (comment 31)",
      "url": "https://github.com/httpwg/http2-spec/issues/1067",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "Informative References:  We have labeled the document\n\"Extensible Prioritization Scheme for HTTP\" as [HTTP-PRIORITY]\nfor now.  Please let us know if you prefer a different citation\nstring for this new RFC-to-be.\n\nNote:  If [HTTP-PRIORITY] is not ready for publication when this\ndocument is published, we will revert the listing to the\n\"draft-ietf-httpbis-priority\" format. ",
      "createdAt": "2022-03-22T03:38:07Z",
      "updatedAt": "2022-03-22T13:22:55Z",
      "closedAt": "2022-03-22T13:22:55Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We'll need to sort this out; we're currently using `<xi:include>`, which I don't like.",
          "createdAt": "2022-03-22T12:46:44Z",
          "updatedAt": "2022-03-22T12:46:44Z"
        }
      ]
    },
    {
      "number": 1068,
      "id": "I_kwDOAHsHi85GG7xK",
      "title": "Title of Appendix B (comment 32)",
      "url": "https://github.com/httpwg/http2-spec/issues/1068",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "Title of Appendix B:  The first bullet in this section\nmentions RFC 8740.  Should \"Changes from RFC 7540\" be \"Changes from\nRFC 7540 and RFC 8740\"?  Also, should the first bullet be moved to\nthe end of the bullet list?\n\nOriginal:\n\n     Appendix B.  Changes from RFC 7540 ",
      "createdAt": "2022-03-22T03:38:08Z",
      "updatedAt": "2022-03-22T13:23:48Z",
      "closedAt": "2022-03-22T13:23:48Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I would prefer not to change anything here.",
          "createdAt": "2022-03-22T12:48:03Z",
          "updatedAt": "2022-03-22T12:48:03Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree.",
          "createdAt": "2022-03-22T13:23:48Z",
          "updatedAt": "2022-03-22T13:23:48Z"
        }
      ]
    },
    {
      "number": 1069,
      "id": "I_kwDOAHsHi85GG7xP",
      "title": "Appendix B (comment 33)",
      "url": "https://github.com/httpwg/http2-spec/issues/1069",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "Appendix B:  Will \"successor signaling\" be clear to\nreaders?  We don't see \"successor signaling\" in\ndraft-ietf-httpbis-priority or any published RFC, and we don't see\nthe word \"successor\" in draft-ietf-httpbis-priority.\n\nOriginal:\n\n     Using\n     the simpler successor signaling [I-D.ietf-httpbis-priority] is\n     recommended. ",
      "createdAt": "2022-03-22T03:38:09Z",
      "updatedAt": "2022-03-22T13:24:27Z",
      "closedAt": "2022-03-22T13:24:27Z",
      "comments": []
    },
    {
      "number": 1070,
      "id": "I_kwDOAHsHi85GG7xU",
      "title": "Please confirm that the following erratum reports have\nbeen addressed (comment 34)",
      "url": "https://github.com/httpwg/http2-spec/issues/1070",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "Please confirm that the following erratum reports have\nbeen addressed:\n\n<https://www.rfc-editor.org/errata/eid4535>\n  (updates to Figure 2)\n<https://www.rfc-editor.org/errata/eid6309>\n  (the \"Frames of unknown types are ignored.\" sentence)\n<https://www.rfc-editor.org/errata/eid4925>\n  (We could not determine whether or not the listed updates\n  were made.) ",
      "createdAt": "2022-03-22T03:38:10Z",
      "updatedAt": "2022-03-22T13:26:25Z",
      "closedAt": "2022-03-22T13:26:25Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Confirmed.  These are in the pre-history of the document.",
          "createdAt": "2022-03-22T12:50:29Z",
          "updatedAt": "2022-03-22T12:50:29Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I've also double checked: these are all applied.",
          "createdAt": "2022-03-22T13:26:25Z",
          "updatedAt": "2022-03-22T13:26:25Z"
        }
      ]
    },
    {
      "number": 1071,
      "id": "I_kwDOAHsHi85GG7xc",
      "title": "RFC Editor comment 35",
      "url": "https://github.com/httpwg/http2-spec/issues/1071",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "Please review the \"Inclusive Language\" portion of the\nonline Style Guide at\n<https://www.rfc-editor.org/styleguide/part2/#inclusive_language>,\nand let us know if any changes are needed.  For example, could\n'an ASCII whitespace character' be changed to 'an ASCII\n\"empty space\" character' or 'an ASCII \"space\" character'? ",
      "createdAt": "2022-03-22T03:38:11Z",
      "updatedAt": "2022-03-28T06:23:09Z",
      "closedAt": "2022-03-28T06:23:09Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Use of \"whitespace\" is necessary to distinguish from \"space\" (which means 0x20).  I don't regard this as a problematic usage.\r\n\r\nPart of the reason for this revision is to address this; so care has been taken to avoid use of problematic language.\r\n\r\nAlso, it would be really helpful to have a list somewhere.  The IESG managed to destroy the useful parts of their guidance by referring to NIST.",
          "createdAt": "2022-03-22T12:54:16Z",
          "updatedAt": "2022-03-22T12:54:16Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed on all counts.\r\n\r\nSpecifically, the NIST document calls out the problematical use of \"white\" as being in the context of using the word \"white\" to mean something positive or less harmful. The phrase \"whitespace\" does not carry a positive or negative connotation, and there exists nothing else to which whitespace is being compared.",
          "createdAt": "2022-03-22T14:11:19Z",
          "updatedAt": "2022-03-22T14:11:19Z"
        }
      ]
    },
    {
      "number": 1072,
      "id": "I_kwDOAHsHi85GG7xn",
      "title": "Please let us know if any changes are needed for the\nfollowing (comment 36)",
      "url": "https://github.com/httpwg/http2-spec/issues/1072",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "Please let us know if any changes are needed for the\nfollowing:\n\na) The following terms were used inconsistently in this document.\nWe chose to use the latter forms.  Please let us know any objections.\n\n flow control credit / flow-control credit\n   (We also changed \"flow control signal\" to \"flow-control signal\".)\n\n flow control window (1 instance in [Section 5.2.3](https://www.rfc-editor.org/authors/rfc9113.html#section-5.2.3)) / \n   flow-control window (approx. 45 instances)\n\n HTTP 1.1 (1 instance) / HTTP/1.1 (22 instances)\n\n \"Promised Stream ID\" field / Promised Stream ID field\n   (There was only one quoted field name in this document.)\n\n stream identifier field (6 instances) /\n   Stream Identifier field (10 instances)\n\n Upgrade token / upgrade token (per RFC 7540 and companion\n   document RFC 9110)\n\nb) The following terms appear to be used inconsistently in this\ndocument.  Please let us know which form is preferred.\n\n closed stream (or closed streams) (5 instances) /\n   \"closed\" stream (1 instance)\n\n idle stream (5 instances) / \"idle\" streams (1 instance)\n\n reserved stream (or reserved streams) (4 instances) /\n   \"reserved\" streams (1 instance) ",
      "createdAt": "2022-03-22T03:38:13Z",
      "updatedAt": "2022-03-22T16:37:21Z",
      "closedAt": "2022-03-22T16:37:21Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "For stream states, I think we have a convention.  We talk about a stream in the \"idle\" state or we talk about an idle stream.  I think that's OK.\r\n\r\n@Lukasa, you will have to double check the pull request I have for this as there were a few inconsistencies about our use of \"reserved\".  These carry over from the previous version and were not very precise.",
          "createdAt": "2022-03-22T13:04:14Z",
          "updatedAt": "2022-03-22T13:04:14Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 11,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA1NDU5MQ==",
      "title": "I adjusted the XSLT reference in the spec XML document",
      "url": "https://github.com/httpwg/http2-spec/pull/11",
      "state": "MERGED",
      "author": "michael-koeller",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adjust XSLT reference\n",
      "createdAt": "2013-02-08T11:58:06Z",
      "updatedAt": "2014-06-16T22:21:10Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "891af53364e15d84d630e8a9e9d50f990783a94a",
      "headRepository": "michael-koeller/http2-spec",
      "headRefName": "master",
      "headRefOid": "6a6286ffc211d2662e6a1ab08796a4be8b677282",
      "closedAt": "2013-02-09T01:25:47Z",
      "mergedAt": "2013-02-09T01:25:47Z",
      "mergedBy": "mnot",
      "mergeCommit": {
        "oid": "408c6dfc119e99eef1053b0421aae45be246726e"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Thanks.\n",
          "createdAt": "2013-02-09T01:26:05Z",
          "updatedAt": "2013-02-09T01:26:05Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 32,
      "id": "MDExOlB1bGxSZXF1ZXN0NDIyMDM5Mw==",
      "title": "MaxNumConcurrentStreams: Update proposed clarification text in all documents.",
      "url": "https://github.com/httpwg/http2-spec/pull/32",
      "state": "MERGED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This updates the concurrent streams in the XML and updates the HTML too (which picked up some other changes).\n",
      "createdAt": "2013-02-19T22:52:05Z",
      "updatedAt": "2014-06-13T03:01:10Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "3018b81662cd11ec969a3028ca8879fcf4a6eeed",
      "headRepository": null,
      "headRefName": "MaxNumConcurrentStreams",
      "headRefOid": "2fc3db01fd32bd8f20d1f01b3091c513eb40bde6",
      "closedAt": "2013-02-19T23:10:45Z",
      "mergedAt": "2013-02-19T23:10:45Z",
      "mergedBy": "mnot",
      "mergeCommit": {
        "oid": "fdab6ad8d61a7c414b259470805f1b753d8280d9"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "\"For implementors it is recommended that this value be no smaller than 100\" - what is the significance of \"for implementers\" here? \n\nI'm concerned this language is ambiguous enough to cause trouble. E.g., some may read it as pure advice; others might take away that values smaller than 100 can be assumed to be 100. Best way to specify is with MUST/SHOULD/MAY, identifying who it applies to (sender / recipient), and ideally specifying what should happen on both ends of the wire (when generating and receiving).\n",
          "createdAt": "2013-02-19T22:58:25Z",
          "updatedAt": "2013-02-19T22:58:25Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree this is ambiguous. I snuck in a short explanation there. I feel like we should take this back to the working group mailing list. I propose we either commit as is, as my extra explanatory clause is innocuous, and open an issue to resolve the ambiguity. Or I can withdraw this pull request for now, go back to the mailing list, and proceed with the flow control pull request first.\n",
          "createdAt": "2013-02-19T23:03:08Z",
          "updatedAt": "2013-02-19T23:03:08Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I'm happy to merge now and note an issue; just trying to minimise the number of such edits we cause with each change, as they have a tendency to stack up.\n",
          "createdAt": "2013-02-19T23:08:18Z",
          "updatedAt": "2013-02-19T23:08:18Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 34,
      "id": "MDExOlB1bGxSZXF1ZXN0NDIyMTE1MQ==",
      "title": "Add Session Window Flow Control Text",
      "url": "https://github.com/httpwg/http2-spec/pull/34",
      "state": "CLOSED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-02-19T23:34:56Z",
      "updatedAt": "2013-02-20T20:04:52Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "c2c03cc245abc5b95f4a41f2efb78bd375937f91",
      "headRepository": null,
      "headRefName": "FlowControl",
      "headRefOid": "fffa3b06b053e50793afe71f49b0ab34325ab38d",
      "closedAt": "2013-02-20T20:04:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This no longer merges properly.  I will make the change manually.\n\n(The reformat means that I can actually properly review diffs, this one is hard to review.)\n",
          "createdAt": "2013-02-20T17:46:35Z",
          "updatedAt": "2013-02-20T17:46:35Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds good. Sorry, I thought I had updated it so it would merge properly =/\n\nOn Wed, Feb 20, 2013 at 9:46 AM, martinthomson notifications@github.comwrote:\n\n> This no longer merges properly. I will make the change manually.\n> \n> (The reformat means that I can actually properly review diffs, this one is\n> hard to review.)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/pull/34#issuecomment-13845712.\n",
          "createdAt": "2013-02-20T17:47:58Z",
          "updatedAt": "2013-02-20T17:47:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I went through and made a few formatting changes based on what Mark, Alexey and I were discussing in parallel.  It's my bad, so I'll wear the cost of the change.  I'll go through and make some editorial changes at the same time.\n",
          "createdAt": "2013-02-20T19:46:51Z",
          "updatedAt": "2013-02-20T19:46:51Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, sounds good to me. I'm closing this pull request.\n",
          "createdAt": "2013-02-20T20:04:52Z",
          "updatedAt": "2013-02-20T20:04:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 53,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc2NjczMg==",
      "title": "Frame description improvements",
      "url": "https://github.com/httpwg/http2-spec/pull/53",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Corrected the description of GOAWAY.\nAdded some details for WINDOW_UPDATE processing\n",
      "createdAt": "2013-03-22T16:49:50Z",
      "updatedAt": "2013-07-02T16:24:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "f5fe80d426d2355822b05d1786bba8729e1872de",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "master",
      "headRefOid": "f1a2642566724a735cd8e8bcd02b38483d829cb6",
      "closedAt": "2013-03-25T14:08:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Ah, sorry - didn't apply fast enough. We can either give it to the editors to incorporate manually, or you can resubmit - what's your preference?\n",
          "createdAt": "2013-03-25T05:22:07Z",
          "updatedAt": "2013-03-25T05:22:07Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I will resubmit.\n",
          "createdAt": "2013-03-25T14:08:23Z",
          "updatedAt": "2013-03-25T14:08:23Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 54,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc5MzYwNg==",
      "title": "Corrected description of GOAWAY. Updated description of WINDOW_UPDATE",
      "url": "https://github.com/httpwg/http2-spec/pull/54",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-03-25T14:09:28Z",
      "updatedAt": "2013-03-25T15:36:43Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0c3920efbdc2645ac7c936e38a03c17f6b45628e",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "frames",
      "headRefOid": "71646a9b45f908519b98a231bdc901515cc5abf1",
      "closedAt": "2013-03-25T15:36:43Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 55,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc5NTgyOQ==",
      "title": "Corrected description of GOAWAY. Updated description of WINDOW_UPDATE.",
      "url": "https://github.com/httpwg/http2-spec/pull/55",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Should be correct this time.\n",
      "createdAt": "2013-03-25T15:38:22Z",
      "updatedAt": "2013-07-02T16:24:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0c3920efbdc2645ac7c936e38a03c17f6b45628e",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "master",
      "headRefOid": "f1a2642566724a735cd8e8bcd02b38483d829cb6",
      "closedAt": "2013-03-25T16:51:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This patch wont apply cleanly.  Have you tried a `git rebase` ?\n",
          "createdAt": "2013-03-25T15:49:01Z",
          "updatedAt": "2013-03-25T15:49:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 56,
      "id": "MDExOlB1bGxSZXF1ZXN0NDc5NzcxMg==",
      "title": "Corrected description of GOAWAY. Updated description of WINDOW_UPDATE.",
      "url": "https://github.com/httpwg/http2-spec/pull/56",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Did a rebase.\n",
      "createdAt": "2013-03-25T16:53:27Z",
      "updatedAt": "2014-06-15T22:34:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0c3920efbdc2645ac7c936e38a03c17f6b45628e",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "frames",
      "headRefOid": "3c302d992e123737a4528613bfe07977d69b3ed9",
      "closedAt": "2013-03-25T17:43:03Z",
      "mergedAt": "2013-03-25T17:43:03Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8c804ee2666cf8d29ef8a430812de77cf9f1a148"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 64,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEyNTAwOA==",
      "title": "Various proposed edits",
      "url": "https://github.com/httpwg/http2-spec/pull/64",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [
        "martinthomson"
      ],
      "labels": [],
      "body": "Did a quick pass through the document, a few things I picked up. Please take a look through and accept if you're OK with it; if not, comments on the commits works. \n\nP.S. See commit history for some of the rearranging changes; it makes things easier to see.\n",
      "createdAt": "2013-04-12T07:31:44Z",
      "updatedAt": "2014-07-12T07:59:49Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0a6b21b62e82e2dddcd224fdc2b15f1852e78131",
      "headRepository": null,
      "headRefName": "edits",
      "headRefOid": "7eeae2a7f37303f718e72d143ed65d9a9d943c11",
      "closedAt": "2013-04-12T23:40:47Z",
      "mergedAt": "2013-04-12T23:40:47Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0040b511b9c16bae6a5194cab72460b158421e72"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 71,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM1MTE1MA==",
      "title": "Multiple Editorial Commits...",
      "url": "https://github.com/httpwg/http2-spec/pull/71",
      "state": "MERGED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Multiple editorial commits....\n",
      "createdAt": "2013-04-24T19:33:15Z",
      "updatedAt": "2014-07-13T18:51:35Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "d6eefeafc362cd22a639bd608f8601b04820dc7b",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "5476a4afe96d64dfc6b36bf0745b0ee33f84add2",
      "closedAt": "2013-04-24T23:46:26Z",
      "mergedAt": "2013-04-24T23:46:26Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "02eb6ac0306040c78c147b553ae9d5b64baddc84"
      },
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just an fyi... I have additional pending editorial edits, some of which are a bit more extensive. I will hold off committing them until this pull request is processed.\n",
          "createdAt": "2013-04-24T22:36:06Z",
          "updatedAt": "2013-04-24T22:36:06Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, try now...\n",
          "createdAt": "2013-04-24T23:38:13Z",
          "updatedAt": "2013-04-24T23:38:13Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@jasnell - please don't do ANY reformatting in pull requests; we need to be able to precisely identify changes and their provenance. \n\nThanks,\n",
          "createdAt": "2013-04-24T23:59:18Z",
          "updatedAt": "2013-04-24T23:59:18Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 76,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM3MjM1Mw==",
      "title": "Another set of incremental editorial updates",
      "url": "https://github.com/httpwg/http2-spec/pull/76",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just continuing an initial pass through of the spec, updating spec prose in a few areas. Will be doing this in tagged batches so the changes are easier to review and incrementally roll in (or reject if necessary ;-) ..)\n",
      "createdAt": "2013-04-25T16:50:14Z",
      "updatedAt": "2014-07-13T23:43:02Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "693df46b5acbf691104e76bcad25111e873d3058",
      "headRepository": null,
      "headRefName": "CHECKPOINT-2013-04-25-A",
      "headRefOid": "b3c2ffc150457d19885b2d9fb4f9a5447cb6abb3",
      "closedAt": "2013-04-25T18:27:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok, I've made a few additional tweaks based on this feedback. I will close this pull request and open another with the revised edits.\n",
          "createdAt": "2013-04-25T18:27:47Z",
          "updatedAt": "2013-04-25T18:27:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 79,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM3NDc4Nw==",
      "title": "Editorial updates (revised)",
      "url": "https://github.com/httpwg/http2-spec/pull/79",
      "state": "MERGED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Same edits as before with additional tweaks based on feedback. I've adjusted the formatting on my edits to match the current styling as much as possible (must... resist... OCD... tendencies ;-) ...). Specific edits can be reviewed in the commit log.\n",
      "createdAt": "2013-04-25T18:31:50Z",
      "updatedAt": "2013-04-25T19:07:03Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "693df46b5acbf691104e76bcad25111e873d3058",
      "headRepository": null,
      "headRefName": "CHECKPOINT-2013-04-25-B",
      "headRefOid": "1bb7b12bb0cc992d5ae9ce0b854f371a27f81ef0",
      "closedAt": "2013-04-25T19:07:03Z",
      "mergedAt": "2013-04-25T19:07:03Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6797220e84c8a52024e69768ea2b8d216a33d93b"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Careful, you could end up with a new job if you keep this up.\n",
          "createdAt": "2013-04-25T19:06:56Z",
          "updatedAt": "2013-04-25T19:06:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 81,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQwNDgyNw==",
      "title": "Additional editorial cleanup",
      "url": "https://github.com/httpwg/http2-spec/pull/81",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This one is fairly extensive, it primarily addresses a variety of ambiguities in the frame definitions, specifically clarifying issues around the use of the FINAL flag, whether or not frames must be associated with streams, error conditions, handling of unknown frame types, etc.\n\nPlease review this one carefully as the edits are fairly extensive. I have tried to make sure that none of the edits would be controversial. In one initial interim commit to my local branch I had a few items that I pulled back out in a follow on commit so you may see those appear in the commit log for the pull request. Let me know if anything looks off.\n",
      "createdAt": "2013-04-26T23:50:53Z",
      "updatedAt": "2014-06-17T16:49:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "401002e4f1eafbf86f6dadf9ed8481123a623b1b",
      "headRepository": null,
      "headRefName": "CHECKPOINT-2013-04-26-A",
      "headRefOid": "3cdb535a7b16c2e604cbab6f4b2c8d3a5d509fcc",
      "closedAt": "2013-04-30T14:05:30Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Excellent review, thanks! I'll close this pull and take another pass on this either later today or tomorrow and submit a new pull request.\n",
          "createdAt": "2013-04-30T14:05:30Z",
          "updatedAt": "2013-04-30T14:05:30Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 82,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ3NDkyNg==",
      "title": "Revised edits based on feedback",
      "url": "https://github.com/httpwg/http2-spec/pull/82",
      "state": "MERGED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Revised version of previous pull request. See commit #1527cea for detail on new revisions\n",
      "createdAt": "2013-05-01T17:35:27Z",
      "updatedAt": "2013-05-06T23:32:35Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "401002e4f1eafbf86f6dadf9ed8481123a623b1b",
      "headRepository": null,
      "headRefName": "CHECKPOINT-2013-05-01-A",
      "headRefOid": "1527cea3b677a79b3c38d4da6da97009ead1f3d8",
      "closedAt": "2013-05-06T23:32:35Z",
      "mergedAt": "2013-05-06T23:32:35Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0d6a7ecb9c25d18541956a6cee0a3b2fe41ebd5d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 83,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU0MDYyMg==",
      "title": "obvious typos and simple copy-editing fixes",
      "url": "https://github.com/httpwg/http2-spec/pull/83",
      "state": "MERGED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Additionally, section 4.2.3 contains a lot of text that is similar to 4.2.2, but there may be a reason for that.\n",
      "createdAt": "2013-05-06T07:37:42Z",
      "updatedAt": "2013-06-19T21:12:32Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6f893d0d50522c8dd456dda7bc5f74f73e223345",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "960833b448ff9053262337465142eb096655f9d2",
      "closedAt": "2013-05-06T15:43:01Z",
      "mergedAt": "2013-05-06T15:43:01Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "bfc20a33525c81b2a787f1d9886e8499422e51b6"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll try to remember to fix the content-length thing.\n",
          "createdAt": "2013-05-06T15:42:38Z",
          "updatedAt": "2013-05-06T15:42:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 84,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU1NzQ0NQ==",
      "title": "Corrected \"client implementation\" for push.",
      "url": "https://github.com/httpwg/http2-spec/pull/84",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-05-06T22:45:10Z",
      "updatedAt": "2014-03-14T17:05:41Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1b329fe5222f3a8e53f7738c873043df1c974fdc",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "editorial",
      "headRefOid": "8ab776453196b069e7cf8f6e673d93fe6b815844",
      "closedAt": "2013-05-06T23:35:52Z",
      "mergedAt": "2013-05-06T23:35:52Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "517d7b58d03318a1cb0893b98c7ea4f59cdd9cef"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 85,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU1ODU5NQ==",
      "title": "Fix XML errors introduced by 5ad9395659",
      "url": "https://github.com/httpwg/http2-spec/pull/85",
      "state": "MERGED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-05-06T23:55:24Z",
      "updatedAt": "2014-06-16T03:07:19Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ccc9823b1cc623d69897d4addf721301aea853c1",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "a7b067d8bd8b07d0e6c5078970731d4908dbed7b",
      "closedAt": "2013-05-06T23:56:20Z",
      "mergedAt": "2013-05-06T23:56:19Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "997ac10758bee4a55cf4392ef4bff856e89627ee"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I need to start trusting @jasnell less.  There was a bad reference in one of the other edits too.\n",
          "createdAt": "2013-05-07T00:13:10Z",
          "updatedAt": "2013-05-07T00:13:10Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Whoops, good catch. Was obviously moving a bit too quickly through those particular edits. Sorry about that :-/\n",
          "createdAt": "2013-05-07T14:41:40Z",
          "updatedAt": "2013-05-07T14:41:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 86,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU4NjQ0Mg==",
      "title": "frame size clarifications",
      "url": "https://github.com/httpwg/http2-spec/pull/86",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "clarifications around frame size limits... 8192 min + 8 byte header, handling of connection frame size violation vs. stream frame size violation, typos fixed...\n",
      "createdAt": "2013-05-08T03:04:27Z",
      "updatedAt": "2013-05-10T15:32:10Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "117d387f35fe94a00f685eb2f373a9af3a95dc65",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "21474babc34a87a903ddf4ac1a7d9b32fd274a98",
      "closedAt": "2013-05-10T15:32:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Withdrawing this for now...\n",
          "createdAt": "2013-05-10T15:32:10Z",
          "updatedAt": "2013-05-10T15:32:10Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 89,
      "id": "MDExOlB1bGxSZXF1ZXN0NTYzMDQ4NQ==",
      "title": "Remove 0x2 bit from SETTINGS_FLOW_CONTROL_OPTIONS.",
      "url": "https://github.com/httpwg/http2-spec/pull/89",
      "state": "MERGED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It controls the connection window, but there is already a mechanism for\nthat in WINDOW_UPDATE with stream 0 and the END_FLOW_CONTROL flag,\ntherefore it is redundant.\n\nIssue #88.\nDiscussion: http://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/0709.html\n",
      "createdAt": "2013-05-09T21:29:22Z",
      "updatedAt": "2013-05-31T02:34:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "117d387f35fe94a00f685eb2f373a9af3a95dc65",
      "headRepository": null,
      "headRefName": "FLOW_CONTROL_OPTIONS",
      "headRefOid": "7e6b7dbf5d4b9e3b94e856e2fbbf9b9d1c9fb9a2",
      "closedAt": "2013-05-10T00:11:01Z",
      "mergedAt": "2013-05-10T00:11:01Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0af2b376f8c3bad994a0fb07145be7292a893286"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 90,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY0NTkzNQ==",
      "title": "Editorial Updates...",
      "url": "https://github.com/httpwg/http2-spec/pull/90",
      "state": "MERGED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Minor editorial items...\n",
      "createdAt": "2013-05-10T16:04:46Z",
      "updatedAt": "2013-06-19T05:22:04Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6047e40b2697c7326361c6ccb02468c49157ef1b",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "editorial",
      "headRefOid": "6788a6d50e91d09cd66e2e74d120cee61b662b85",
      "closedAt": "2013-05-10T16:37:23Z",
      "mergedAt": "2013-05-10T16:37:23Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "13b4ef07a834378941a572b354da756a24ad2190"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 91,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY0NjUyNw==",
      "title": "Limit Ping to 8-bytes of frame data",
      "url": "https://github.com/httpwg/http2-spec/pull/91",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the PING frame allows for up to (2^16)-1 bytes of arbitrary data.. that's just silly insane for a PING mechanism and opens the door for significant abuse (i.e. ping flood). Let's limit it to 8-bytes max.. that gives us enough room for a timestamp or a correlation ID without introducing too much risk.\n",
      "createdAt": "2013-05-10T16:30:40Z",
      "updatedAt": "2013-06-19T05:21:58Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7b2b97c5cd66d69690f5b13f4f280b401af665d6",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "ping-limit",
      "headRefOid": "648fdd9dccf6c598f103038029c49098e2c65b88",
      "closedAt": "2013-05-29T12:13:09Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "It doesn't say what a recipient should do if the payload size is larger.\n",
          "createdAt": "2013-05-20T02:28:09Z",
          "updatedAt": "2013-05-20T02:28:09Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That is covered by a separate update I have suggested.. namely, that frames that are larger than their definition explicitly defines be treated as either a connection or stream error. Specifically, there is a security risk in allowing for over-large frames (frames that contain more data than strictly necessary or specified in the frame definition).\n",
          "createdAt": "2013-05-20T16:22:18Z",
          "updatedAt": "2013-05-20T16:22:18Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Dupe of #68.\n",
          "createdAt": "2013-05-29T12:13:09Z",
          "updatedAt": "2013-05-29T12:13:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 92,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY0NzAxOQ==",
      "title": "Frame size limits",
      "url": "https://github.com/httpwg/http2-spec/pull/92",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "streams"
      ],
      "body": "As discussed on the list, proposal to relate frame sizes to flow control window sizes, smarter limits on initial frame sizes, and differentiation between connection and stream FRAME_TOO_LARGE errors.\n",
      "createdAt": "2013-05-10T16:54:13Z",
      "updatedAt": "2014-06-19T02:17:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7b2b97c5cd66d69690f5b13f4f280b401af665d6",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "frame-size",
      "headRefOid": "309b54ef9e5e089a70571cd5dcbe06e64790bfae",
      "closedAt": "2013-06-13T20:25:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed at SF Interim; decided to refuse pull request. See #6 and #28.\n",
          "createdAt": "2013-06-13T20:25:29Z",
          "updatedAt": "2013-06-13T20:25:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 93,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY1Mjg2Mg==",
      "title": "DoS Considerations for Security Considerations Section",
      "url": "https://github.com/httpwg/http2-spec/pull/93",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "security"
      ],
      "body": "Beginning of some denial of service considerations in the Security\nConsiderations section. Some of these may be mitigated in the future of\ndesign revisions, but they at least need to be captured.\n",
      "createdAt": "2013-05-10T21:17:29Z",
      "updatedAt": "2014-07-11T02:09:44Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7b2b97c5cd66d69690f5b13f4f280b401af665d6",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "editorial",
      "headRefOid": "051fb7c48b7f4d56b090b893e9d460dfc5717995",
      "closedAt": "2013-06-14T15:17:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 96,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY5MTgxMA==",
      "title": "Fix some typos",
      "url": "https://github.com/httpwg/http2-spec/pull/96",
      "state": "MERGED",
      "author": "vipulnsward",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix some typos\n",
      "createdAt": "2013-05-14T04:22:15Z",
      "updatedAt": "2013-05-14T10:07:32Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7b2b97c5cd66d69690f5b13f4f280b401af665d6",
      "headRepository": "vipulnsward/http2-spec",
      "headRefName": "typo_1",
      "headRefOid": "66342f9d97aab32c46c4394215625ed3832b40c6",
      "closedAt": "2013-05-14T09:05:28Z",
      "mergedAt": "2013-05-14T09:05:28Z",
      "mergedBy": "mnot",
      "mergeCommit": {
        "oid": "793f66285b7c49ec0101edeaf7ec29d5ebf31af8"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "\"overridden\" is the correct spelling; can you remove those changes? Thanks.\n",
          "createdAt": "2013-05-14T06:13:29Z",
          "updatedAt": "2013-05-14T06:13:29Z"
        },
        {
          "author": "vipulnsward",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mnot  it was \"overriden\", I changed it to \"overridden\". Am I missing something here? \n",
          "createdAt": "2013-05-14T08:23:59Z",
          "updatedAt": "2013-05-14T08:23:59Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "No, I just need to slow down when I read diffs :)\n\nThanks!\n",
          "createdAt": "2013-05-14T09:05:21Z",
          "updatedAt": "2013-05-14T09:05:21Z"
        },
        {
          "author": "vipulnsward",
          "authorAssociation": "CONTRIBUTOR",
          "body": ":smile: \n",
          "createdAt": "2013-05-14T10:07:27Z",
          "updatedAt": "2013-05-14T10:07:27Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 97,
      "id": "MDExOlB1bGxSZXF1ZXN0NTcxMzE1Mg==",
      "title": "Fix typo: s/does is/is/",
      "url": "https://github.com/httpwg/http2-spec/pull/97",
      "state": "MERGED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-05-14T21:55:20Z",
      "updatedAt": "2013-05-31T02:34:58Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0f609b09d7eab84e22f618cbaaa8e006a023160a",
      "headRepository": null,
      "headRefName": "TypoFix",
      "headRefOid": "ded444fca2e439ac596ef47c21326af908b319a9",
      "closedAt": "2013-05-14T23:56:43Z",
      "mergedAt": "2013-05-14T23:56:43Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9de79004c4bac6c149e1c90f24155df899e6a38f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 98,
      "id": "MDExOlB1bGxSZXF1ZXN0NTcxNTA1Nw==",
      "title": "Header frame continuations",
      "url": "https://github.com/httpwg/http2-spec/pull/98",
      "state": "MERGED",
      "author": "grmocg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Replaced 'body' with 'payload' in instances where it would be confusing.\n\nAdded a flag in the HEADERS frame for header continuations.\n\nAdded pointers in HEADERS+PRIORITY and PUSH_PROMISE which reference\nthe flags in the HEADERS frame.\n\nThis should resolve #50\n",
      "createdAt": "2013-05-14T23:31:26Z",
      "updatedAt": "2014-06-14T06:49:00Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0f609b09d7eab84e22f618cbaaa8e006a023160a",
      "headRepository": "grmocg/http2-spec",
      "headRefName": "master",
      "headRefOid": "26b668990b82e6849b9d6bc94ade40af5bba6643",
      "closedAt": "2013-05-28T05:32:54Z",
      "mergedAt": "2013-05-28T05:32:54Z",
      "mergedBy": "mnot",
      "mergeCommit": {
        "oid": "ae19ac7cc46ee3b1c6d1d535253280fe1db68573"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The continuation bit is inverted with respect to the FINAL flag.  Is HEADER_END a better choice?\n\nAlso, if an unbounded number of frames are permitted, then you need some way to place an upper bound on size.  Especially since this requires\\* that all frames be assembled before processing.  Currently, there isn't a default maximum, a setting or an error code.\n",
          "createdAt": "2013-05-14T23:56:26Z",
          "updatedAt": "2013-05-14T23:56:26Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It could be. I chose this polarity so that it was immediately compatible with what implementations do today for SPDY/2/3 (they don't know about such a bit).\n\nIf I recall correctly, there currently isn't an explicit limit on header size in HTTP. Unless we're willing to impose such, it is up to the implementation to reject things which are too large by RESETTING the stream. That case probably does need more expounding, though.\n",
          "createdAt": "2013-05-15T00:04:19Z",
          "updatedAt": "2013-05-15T00:04:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": " Let's move this discussion to the list.\n",
          "createdAt": "2013-05-15T02:52:32Z",
          "updatedAt": "2013-05-15T02:52:32Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 105,
      "id": "MDExOlB1bGxSZXF1ZXN0NjAzMzYwOQ==",
      "title": "Fix some editorials",
      "url": "https://github.com/httpwg/http2-spec/pull/105",
      "state": "MERGED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [
        "martinthomson"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2013-05-31T00:33:12Z",
      "updatedAt": "2013-05-31T02:23:17Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6cfa96f5caf799dce34c42ee79f9c1cd70ef05e8",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20130531",
      "headRefOid": "b38b8cf8623abfd6c17d3a19c5eaf028586fdb64",
      "closedAt": "2013-05-31T02:23:17Z",
      "mergedAt": "2013-05-31T02:23:17Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8dd1bc95b76090510734c84eff356d07b4795d5a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 106,
      "id": "MDExOlB1bGxSZXF1ZXN0NjA2OTI1MA==",
      "title": "change connection header magic string",
      "url": "https://github.com/httpwg/http2-spec/pull/106",
      "state": "CLOSED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If the goal of the connection header magic string is to emulate a HTTP/1.x request in a way that is both as transparent as possible (can be parsed as HTTP/1.x) and unambiguously differentiated (could NOT be understood as HTTP/1.x), I understand the criteria to be:\n\nWhen interpreted as a HTTP/1.x request:\n- the HTTP-Version must be \"HTTP/2.0\";\n- the Request-URI must be \"*\", since this message is not resource-specific;\n- the Method should not coincide with any extant HTTP/1.x methods, since a poorly-implemented device might, for example, only inspect the minor part of the HTTP-Version and misinterpret the header as a HTTP/1.0 request;\n- the Method should be exactly three or four bytes in length, since there are known implementations in the wild that have this expectation.\n\nTo fit in a 24-byte structure, using the standard pattern, we would have to use either a three-byte Method and a two-byte entity (before the final \"\\r\\n\\r\\n\"), or a four-byte Method and a one-byte entity.  I think 3-2 is better, aesthetically.\n\nI also think it's better to avoid encoding a metasyntactic variable into the standard.  \"FOO\" is universally used as a placeholder for user-supplied data, and it may be confusing for the spec to require implementers to send or expect the literal value \"FOO\".  Additionally there is a legitimate chance that there are implementations in the wild that actually use \"FOO\" as a method, e.g. for developmental purposes.\n\nI propose \"CON\" and \"go\" as the Method and message entity parts.\n\nThis was discussed on the HTTP Working Group ietf-http-wg@w3.org and essentially discarded as a minor detail, so I'm making this pull request without contacting the list so that editors and coordinators can make the final decision.\n",
      "createdAt": "2013-06-03T04:16:04Z",
      "updatedAt": "2014-07-06T01:55:12Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a9f84794131d91e20e705367d770f215718ae4c3",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "96ee48cc46a8c9c644ff49c8e5ddfdb961c01a2a",
      "closedAt": "2013-06-03T05:20:51Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Please do this as discussion on the existing issue #25, not with a pull request. Thanks,\n",
          "createdAt": "2013-06-03T05:20:51Z",
          "updatedAt": "2013-06-03T05:20:51Z"
        },
        {
          "author": "phluid61",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I completely failed to find that issue. It wasn't mentioned on the mailing list discussion.\n",
          "createdAt": "2013-06-03T05:24:22Z",
          "updatedAt": "2013-06-03T05:24:22Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "No worries. We'll try to get better about making the issues more prominent. Thanks,\n",
          "createdAt": "2013-06-03T05:25:22Z",
          "updatedAt": "2013-06-03T05:25:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 111,
      "id": "MDExOlB1bGxSZXF1ZXN0NjExMzU5Mg==",
      "title": "Priority",
      "url": "https://github.com/httpwg/http2-spec/pull/111",
      "state": "MERGED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "prioritisation"
      ],
      "body": "This addresses the feedback from http://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/0864.html which discusses Issue #99 and achieved consensus on adding a stream reprioritization frame.\n",
      "createdAt": "2013-06-04T19:09:09Z",
      "updatedAt": "2014-06-14T09:57:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a9f84794131d91e20e705367d770f215718ae4c3",
      "headRepository": null,
      "headRefName": "Priority",
      "headRefOid": "080b1318f10fedd89bcf466a341105005777f4ea",
      "closedAt": "2013-06-07T16:19:21Z",
      "mergedAt": "2013-06-07T16:19:21Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5a8700e01fdac608242945bb1e8907e8f977bf4c"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that you missed updating the IANA considerations section.  Otherwise, this looks good to go.  I'll await a go-ahead from Mark; though I'll probably commit this if that times out :)\n",
          "createdAt": "2013-06-04T19:43:08Z",
          "updatedAt": "2013-06-04T19:43:08Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I updated the IANA considerations section. I also updated the Changelog since I think this counts as a significant change.\n",
          "createdAt": "2013-06-04T19:54:52Z",
          "updatedAt": "2013-06-04T19:54:52Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Too good.  Thanks.\n",
          "createdAt": "2013-06-04T19:56:40Z",
          "updatedAt": "2013-06-04T19:56:40Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "LGTM. We should make sure to point this out during discussion in SF, since it didn't make it into -03.\n",
          "createdAt": "2013-06-05T00:36:18Z",
          "updatedAt": "2013-06-05T00:36:18Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ping?\n",
          "createdAt": "2013-06-07T01:59:23Z",
          "updatedAt": "2013-06-07T01:59:23Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 113,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIzOTY5NQ==",
      "title": "Fix error handlings on HEADERS and PRIORITY",
      "url": "https://github.com/httpwg/http2-spec/pull/113",
      "state": "MERGED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Error when stream identifier field is 0x0 is not stream error but connection error because it is impossible to send RST_STREAM of 0x0. \n",
      "createdAt": "2013-06-11T08:33:24Z",
      "updatedAt": "2013-06-11T15:49:35Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fb390237d75d5e9e991a6dffd8464d92dd1a8ba5",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20130611",
      "headRefOid": "267e5fc19c81ff0969a9ef8a08e1c967127985c0",
      "closedAt": "2013-06-11T15:49:35Z",
      "mergedAt": "2013-06-11T15:49:35Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "48ce21f336c1ba8357a60af17713000658d10fa9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 114,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIzOTczOA==",
      "title": "Separate errors on HEADER with CONTINUES into stream and connection",
      "url": "https://github.com/httpwg/http2-spec/pull/114",
      "state": "CLOSED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Error caused by other type of frames on the same stream id is stream error. I think this is editorial but if it is design issue, I will send this to ML.\n",
      "createdAt": "2013-06-11T08:35:22Z",
      "updatedAt": "2013-06-19T01:06:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fb390237d75d5e9e991a6dffd8464d92dd1a8ba5",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20130611_2",
      "headRefOid": "3a03109c3b3fcb435a16dd740d182ef0cafc9259",
      "closedAt": "2013-06-18T18:05:45Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that this is a design issue.  When we discussed this, the idea was that messing with continuations on HEADERS was a fatal sort of error.  That could be relaxed in theory, but I think that you'd need some stronger justification.\n",
          "createdAt": "2013-06-11T15:52:02Z",
          "updatedAt": "2013-06-11T15:52:02Z"
        },
        {
          "author": "shigeki",
          "authorAssociation": "NONE",
          "body": "I was not aware that it was discussed and intentional. Was the discussion https://github.com/grmocg/http2-spec/commit/26b668990b82e6849b9d6bc94ade40af5bba6643#commitcomment-3214054 ?  If so, how about adding the reason like\n\n>  A HEADERS frame that includes a CONTINUES bit MUST be followed by a HEADERS frame for the same stream **in order to maintain the compression context for the connection.**\n\nIt is more clear for readers that why it causes a fatal sort of error on the connection.\n",
          "createdAt": "2013-06-12T02:29:36Z",
          "updatedAt": "2013-06-12T02:29:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to close this off. The problem with the proposed text here is that it isn't entirely correct.  It is actually possible to send non-header-bearing frames, but we decided not to permit that.  Hopefully, when we get header compression referenced, there will be sufficient information in other parts of the specification to understand this point.\n",
          "createdAt": "2013-06-18T18:05:45Z",
          "updatedAt": "2013-06-18T18:05:45Z"
        },
        {
          "author": "shigeki",
          "authorAssociation": "NONE",
          "body": "Okay, I will be back here when the header compression spec is completed.\n",
          "createdAt": "2013-06-19T01:06:38Z",
          "updatedAt": "2013-06-19T01:06:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 115,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI2NTU1Nw==",
      "title": "Corrected description of disabling flow control",
      "url": "https://github.com/httpwg/http2-spec/pull/115",
      "state": "MERGED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Flow control can be disabled by WINDOW_UPDATE with END_FLOW_CONTROL.\n",
      "createdAt": "2013-06-12T07:39:22Z",
      "updatedAt": "2014-06-13T23:39:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "57e929ac1b10ad8cdba7aedccd548cda042b626b",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20130612",
      "headRefOid": "8a0d18fd132e24796720ef6191f2a3c02dabf00c",
      "closedAt": "2013-06-12T16:36:37Z",
      "mergedAt": "2013-06-12T16:36:37Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d7fd119461e77f7e7ec118f405050fe1b82eb707"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 116,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI2NTY4NQ==",
      "title": "Corrected description of CANCEL",
      "url": "https://github.com/httpwg/http2-spec/pull/116",
      "state": "MERGED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "3.4.1 Stream Creation says that either endpoint can send CNCEL.\n",
      "createdAt": "2013-06-12T07:49:27Z",
      "updatedAt": "2013-06-12T16:38:28Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "57e929ac1b10ad8cdba7aedccd548cda042b626b",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20130612_2",
      "headRefOid": "7f402bd5868f89e4c5196e044ae8a000f18de400",
      "closedAt": "2013-06-12T16:38:28Z",
      "mergedAt": "2013-06-12T16:38:28Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "7e60cd3bd46e01d8a03c8e05d1a77aada6d4c709"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 117,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI2NjMwMA==",
      "title": "Remove error code of INVALID_STREAM",
      "url": "https://github.com/httpwg/http2-spec/pull/117",
      "state": "MERGED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It is no longer used after d5a8faeaa605bdff7b96287d72913b4b742104cf\n",
      "createdAt": "2013-06-12T08:29:38Z",
      "updatedAt": "2013-06-18T17:58:49Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "da32fb74b1c799c6496977abb4118f6d08908c1a",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20130612_3",
      "headRefOid": "41612b7ad96ef79b06e8a5cf1dd45450b8ef4fac",
      "closedAt": "2013-06-18T17:58:49Z",
      "mergedAt": "2013-06-18T17:58:49Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b677c49f927785dfc642f40fed04015dd3901a47"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've avoided renumbering of codes when removing things.  We probably need to have a big renumber event at some point, but there is no harm in having gaps for now.\n",
          "createdAt": "2013-06-12T16:37:46Z",
          "updatedAt": "2013-06-12T16:37:46Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks Martin. It makes it easier for us on the SPDY side :)\n\nOn Wed Jun 12 2013 at 9:37:50 AM, martinthomson notifications@github.com\nwrote:\n\n> I've avoided renumbering of codes when removing things. We probably need\n> to have a big renumber event at some point, but there is no harm in having\n> gaps for now.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/pull/117#issuecomment-19338175\n> .\n",
          "createdAt": "2013-06-12T18:03:48Z",
          "updatedAt": "2013-06-12T18:03:48Z"
        },
        {
          "author": "shigeki",
          "authorAssociation": "NONE",
          "body": "@martinthomson I've updated the commit just to remove only the unused error code. Please don't forget to renumber others in the future.\n",
          "createdAt": "2013-06-13T00:44:32Z",
          "updatedAt": "2013-06-13T00:44:32Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 121,
      "id": "MDExOlB1bGxSZXF1ZXN0NjMyODY0OA==",
      "title": "8-byte ping frame as discussed in the interim",
      "url": "https://github.com/httpwg/http2-spec/pull/121",
      "state": "MERGED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed in the interim, 8-byte PING frame, opaque octets that MUST be included regardless of whether they are used.\n",
      "createdAt": "2013-06-14T15:19:19Z",
      "updatedAt": "2013-06-14T16:26:07Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "79450fa6c7ad1530c2cfe7f2458fb02197c679b3",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "ping-limit2",
      "headRefOid": "342e86ee5c8d7e87698425bcd9c7afbfc49da17b",
      "closedAt": "2013-06-14T16:26:07Z",
      "mergedAt": "2013-06-14T16:26:07Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0d8dce970c901ab7bf6a323b543232b8d45df6fb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 122,
      "id": "MDExOlB1bGxSZXF1ZXN0NjMyOTAyNw==",
      "title": "COMEBACK goaway code, remove settings persistence.",
      "url": "https://github.com/httpwg/http2-spec/pull/122",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Proposal as discussed at the interim... new COMEBACK goaway code... remove settings persistence...\n",
      "createdAt": "2013-06-14T15:33:11Z",
      "updatedAt": "2013-06-19T05:21:53Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "79450fa6c7ad1530c2cfe7f2458fb02197c679b3",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "goaway-reconnect",
      "headRefOid": "47bad2ee7cd2075568ff8926946e2b546a90ca3c",
      "closedAt": "2013-06-14T18:29:16Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Would you mind splitting this into two pull requests?\n",
          "createdAt": "2013-06-14T17:11:43Z",
          "updatedAt": "2013-06-14T17:11:43Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing this one to split into two separate requests\n",
          "createdAt": "2013-06-14T18:29:16Z",
          "updatedAt": "2013-06-14T18:29:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 124,
      "id": "MDExOlB1bGxSZXF1ZXN0NjMzMzIxMg==",
      "title": "COMEBACK goaway code",
      "url": "https://github.com/httpwg/http2-spec/pull/124",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As proposed in the interim, a COMEBACK goaway code that requests that a new connection be established with the previous SETTINGS.\n",
      "createdAt": "2013-06-14T18:30:24Z",
      "updatedAt": "2013-08-07T09:45:41Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1fff52887ddca60a0bd23634ac04c342e57e5b96",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "comeback",
      "headRefOid": "e9ec9e29c7c7104c968fddd4d05e4dbbb4892e81",
      "closedAt": "2013-08-07T09:45:41Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Possible resolution to #8 \n",
          "createdAt": "2013-06-14T20:29:33Z",
          "updatedAt": "2013-06-14T20:29:33Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Deferring until the use case is more clear (e.g., DDoS).\n",
          "createdAt": "2013-06-14T20:34:16Z",
          "updatedAt": "2013-06-14T20:34:16Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closing; see #133.\n",
          "createdAt": "2013-08-07T09:45:40Z",
          "updatedAt": "2013-08-07T09:45:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 125,
      "id": "MDExOlB1bGxSZXF1ZXN0NjMzMzM0Mw==",
      "title": "Drop SETTINGS persistence as discussed at the interim",
      "url": "https://github.com/httpwg/http2-spec/pull/125",
      "state": "MERGED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Drops all mentions of SETTINGS persistence in the current draft as discussed at the interim\n",
      "createdAt": "2013-06-14T18:35:23Z",
      "updatedAt": "2013-06-18T17:56:12Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1fff52887ddca60a0bd23634ac04c342e57e5b96",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "settingspersist",
      "headRefOid": "fccf4aee380935ca42a87e507abbdd984bef66b2",
      "closedAt": "2013-06-18T17:56:11Z",
      "mergedAt": "2013-06-18T17:56:11Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a9fca51793cc499820e29cce16ab5aa5c1c207c9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 126,
      "id": "MDExOlB1bGxSZXF1ZXN0NjMzNzI2Ng==",
      "title": "Remove unused settings.",
      "url": "https://github.com/httpwg/http2-spec/pull/126",
      "state": "MERGED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This fixes http2 issues #110, #109, #108, #107, #65.\n",
      "createdAt": "2013-06-14T21:23:30Z",
      "updatedAt": "2014-06-22T09:28:51Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ac468f3fab9f7092a430eedfd69ee1fb2e23c944",
      "headRepository": null,
      "headRefName": "KillSettings",
      "headRefOid": "293cb14fff59f82dc490e854e29afcf0fda7f34d",
      "closedAt": "2013-06-14T21:38:50Z",
      "mergedAt": "2013-06-14T21:38:50Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "17e7d2ee739548b44ca91ac967c641bd9d44b1fe"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 127,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM0MzA0Nw==",
      "title": "typo",
      "url": "https://github.com/httpwg/http2-spec/pull/127",
      "state": "MERGED",
      "author": "rodnaph",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "or\n\n\"a client with not close connections\"\n",
      "createdAt": "2013-06-15T14:57:43Z",
      "updatedAt": "2013-06-15T15:37:51Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ee08e3ab1c4438d2b1894b779bcbda75c829f7a5",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "7839a06864ae8a48ab3f244f159309c69434b9a2",
      "closedAt": "2013-06-15T15:37:51Z",
      "mergedAt": "2013-06-15T15:37:51Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "320e95fb8b2e49402c234399ddc0f983084801bf"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 128,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM0MzkzMA==",
      "title": "Specify how to handle PING frames of lengths that aren't 8.",
      "url": "https://github.com/httpwg/http2-spec/pull/128",
      "state": "MERGED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Specifically calls them out as connection errors of type\nPROTOCOL_ERROR.\n\nThis addresses issue #68.\n",
      "createdAt": "2013-06-15T18:48:52Z",
      "updatedAt": "2013-09-24T17:15:21Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "eace3a7d65db6b4d2a757ba99c4d997940059a8c",
      "headRepository": null,
      "headRefName": "PING",
      "headRefOid": "48547917ef0de909b1b31b33ba82cfcdb705608a",
      "closedAt": "2013-06-18T18:17:28Z",
      "mergedAt": "2013-06-18T18:17:28Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "e34cabf2c9eb04d368f2b692959578b034c7149b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 130,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM1MDA2Mw==",
      "title": "Refactoring of DATA and HEADERS frame as discussed in Layering TF.",
      "url": "https://github.com/httpwg/http2-spec/pull/130",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Move definition of FINAL flag to DATA and HEADERS frames.\nReplace HEADERS+PRIORITY with HEADERS and a separate PRIORITY flag.\nAdd a MSG_DONE flag for future extensibility.\n",
      "createdAt": "2013-06-17T02:09:11Z",
      "updatedAt": "2014-06-20T12:01:23Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "82d7c810e1de3370a1d38f4abcc41bea740db43f",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "data_headers",
      "headRefOid": "5bc7900eaff865723c0e398cdf6415831c208d82",
      "closedAt": "2013-06-17T15:47:21Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Addresses #99, #103, #104, and #123.\n",
          "createdAt": "2013-06-17T02:10:10Z",
          "updatedAt": "2013-06-17T02:10:10Z"
        },
        {
          "author": "shigeki",
          "authorAssociation": "NONE",
          "body": "There still remains  \"HEADERS+PRIORITY\" in the doc such as 4.2.2 Request and others. Needs to replace them into HEADERS.\n",
          "createdAt": "2013-06-17T02:55:20Z",
          "updatedAt": "2013-06-17T02:55:20Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "@shigeki addressed -- thanks!\n",
          "createdAt": "2013-06-17T03:12:05Z",
          "updatedAt": "2013-06-17T03:12:05Z"
        },
        {
          "author": "shigeki",
          "authorAssociation": "NONE",
          "body": "@jpinner  More editorial fixes are needed for the sentence of \"HEADERS, HEADERS\". And please don't forget to update \"A.1 Since draft-ietf-httpbis-http2-03\" because this is a big change.\n",
          "createdAt": "2013-06-17T03:46:36Z",
          "updatedAt": "2013-06-17T03:46:36Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "I will leave the update section to @martinthomson for when the framing and session layers are more completely separated and the new life-cycle changes included.\n",
          "createdAt": "2013-06-17T04:08:06Z",
          "updatedAt": "2013-06-17T04:08:06Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "@jasnell made the flags language consistent\n",
          "createdAt": "2013-06-17T15:30:30Z",
          "updatedAt": "2013-06-17T15:30:30Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Would it be possible to submit this pull request against the Layering branch first? \n",
          "createdAt": "2013-06-17T15:34:03Z",
          "updatedAt": "2013-06-17T15:34:03Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Definitely -- the branch didn't exist when I submitted the request.\n",
          "createdAt": "2013-06-17T15:47:21Z",
          "updatedAt": "2013-06-17T15:47:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 131,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM2MjYxNw==",
      "title": "Refactoring of DATA and HEADERS frame as discussed in Layering TF.",
      "url": "https://github.com/httpwg/http2-spec/pull/131",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Move definition of FINAL flag to DATA and HEADERS frames.\nReplace HEADERS+PRIORITY with HEADERS and a separate PRIORITY flag.\nRenumber other associated flags now that FINAL is frame-specific.\nAdd a MSG_DONE flag for future extensibility.\n",
      "createdAt": "2013-06-17T15:51:01Z",
      "updatedAt": "2013-07-02T18:02:33Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "layering",
      "baseRefOid": "871398d9951da1e2fd8fa6d6b7d7235d37731955",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "data_headers",
      "headRefOid": "04d92e95701900c3dfbde6e3567debd5fa3dcb3b",
      "closedAt": "2013-06-19T04:53:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Resubmission of #130 against layering branch.\n",
          "createdAt": "2013-06-17T15:51:16Z",
          "updatedAt": "2013-06-17T15:51:16Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Dropping in favor of #137\n",
          "createdAt": "2013-06-19T04:53:29Z",
          "updatedAt": "2013-06-19T04:53:29Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "@martinthomson sounds good -- will deal with HEADERS+PRIORITY later\n",
          "createdAt": "2013-06-19T05:36:02Z",
          "updatedAt": "2013-06-19T05:36:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 132,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM2NDg2Ng==",
      "title": "Multiple edits (per the interim)",
      "url": "https://github.com/httpwg/http2-spec/pull/132",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are quite a few edits in here... merges from the other outstanding pull requests included... It was easier just to merge these and work on them iteratively given the extensive changes... \n",
      "createdAt": "2013-06-17T17:14:29Z",
      "updatedAt": "2014-06-25T17:33:26Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "layering",
      "baseRefOid": "f2d1becbb6dacf1d55d46354aaa5a070f769aec0",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "layering",
      "headRefOid": "395d8138ffa204ca96c5a1c26f2f87c612b3b14a",
      "closedAt": "2013-06-17T20:31:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you try this one again?  I think that you didn't properly rebase your checked out copy before making changes.  This would be a hard commit to track.\n",
          "createdAt": "2013-06-17T17:41:10Z",
          "updatedAt": "2013-06-17T17:41:10Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@jpinner Yes, I know, we need to fully address the On or About issue before that would make much sense tho. This is an incremental change... We still need to figure out the more extensive edits.\n\n@martinthomson I'm trying to figure out the best way to handle these edits. They are very extensive at this point, and it's only going to get more complex before we're done, especially with multiple people submitting overlapping pull requests...\n",
          "createdAt": "2013-06-17T18:56:49Z",
          "updatedAt": "2013-06-17T18:56:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I definitely want to see a separate commit for the ASSOCIATED flags on PRIORITY and RST_STREAM.\n\nThere are other items here as well that make it hard to review this change set.\n",
          "createdAt": "2013-06-17T20:15:13Z",
          "updatedAt": "2013-06-17T20:15:13Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, these changes are going to be quite extensive. Given the time constraints, I'm going to keep working in my branch on these edits, tho. Once they're done, I'll come up with a better approach to attempt an incremental review.\n",
          "createdAt": "2013-06-17T20:30:52Z",
          "updatedAt": "2013-06-17T20:30:52Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"Per the interim... address frame size limits. 64k in the general case, 16k in HTTP. individual frame types and usage can impose additional limits.\"\n\nPlease update to explain this in detail. I know we agreed on this in the interim meeting, but I'd like the full explanation documented in writing for posterity.\n",
          "createdAt": "2013-06-17T20:31:32Z",
          "updatedAt": "2013-06-17T20:31:32Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 134,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM3NzY0MA==",
      "title": "Clarify the interaction between SETTINGS and flow control.",
      "url": "https://github.com/httpwg/http2-spec/pull/134",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-06-18T04:23:25Z",
      "updatedAt": "2013-06-18T17:01:01Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ca8f96b416458b694a56ae661cb3ebc7ae344d57",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "end_flow_control",
      "headRefOid": "c7e9a677c88a9d450c396969fdb47791df65adcc",
      "closedAt": "2013-06-18T16:51:08Z",
      "mergedAt": "2013-06-18T16:51:08Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "57fc23cd12fe5a92501981931f592339c6af49ad"
      },
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Curious why the connection flow control window initial size is 64K (65536 bytes) but the stream flow control window initial size is 65535 bytes. The negative flow control example (taken from the SPDY spec) states that the initial stream flow control window is 64K (the SPDY/3 value).\n",
          "createdAt": "2013-06-18T04:26:04Z",
          "updatedAt": "2013-06-18T04:26:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I have to stop trusting Will's edits.  He, rightfully, challenged the use of SETTINGS to end connection-level flow control because WINDOW_UPDATE provided another way to do the same, and two ways to do the same thing is bad.  I'll fix that up.\n",
          "createdAt": "2013-06-18T16:50:22Z",
          "updatedAt": "2013-06-18T16:50:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 135,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM5NTQyOQ==",
      "title": "Clarifying that the PRIORITY frame does not define any type-specific flags",
      "url": "https://github.com/httpwg/http2-spec/pull/135",
      "state": "MERGED",
      "author": "molnarg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "All other frame descriptions specify explicitly if the frame type does not have any type-specific flags. The PRIORITY frame description should do the same if there are no flags.\n",
      "createdAt": "2013-06-18T18:40:18Z",
      "updatedAt": "2013-06-22T09:58:52Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "4178b91d1e7cc2122fb63b67cc578b3598b0e336",
      "headRepository": "molnarg/http2-spec",
      "headRefName": "priority-frame-flags",
      "headRefOid": "5fdca832b8d2207e14e276812205b78be89b6eb2",
      "closedAt": "2013-06-18T18:58:02Z",
      "mergedAt": "2013-06-18T18:58:02Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "36868777644b725d6b87544b9e5d5838bfc174ba"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 136,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM5OTYxNw==",
      "title": "Reverse the polarity of the CONTINUES flag.",
      "url": "https://github.com/httpwg/http2-spec/pull/136",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This branch also renames the FINAL flag to END_STREAM and the CONTINUES flag to END_HEADERS.\n",
      "createdAt": "2013-06-18T21:08:29Z",
      "updatedAt": "2014-06-28T01:40:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "d990063b30071b4b098934694222485d36bdeb83",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "flag_polarity",
      "headRefOid": "15a88b309ba0f94c30342d97a056d386d8c1ed09",
      "closedAt": "2013-06-18T22:07:05Z",
      "mergedAt": "2013-06-18T22:07:05Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "96ab1aa1fe9fd325951f95a9c84828f4e72aba15"
      },
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Address #129 \n",
          "createdAt": "2013-06-18T21:08:46Z",
          "updatedAt": "2013-06-18T21:08:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll take it, and we can continue to discuss the redundant bit.\n",
          "createdAt": "2013-06-18T22:06:01Z",
          "updatedAt": "2013-06-18T22:06:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 137,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQwNDE2Mw==",
      "title": "Move definition of END_STREAM flag to DATA and HEADERS frames.",
      "url": "https://github.com/httpwg/http2-spec/pull/137",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Also reservers flag 0x2 in DATA and HEADERS frames and renumbers flags accordingly.\n",
      "createdAt": "2013-06-19T00:59:13Z",
      "updatedAt": "2014-06-13T07:26:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "de38721d49d4fb6ee687fe1667b581048096dfc1",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "move_end_stream_flag",
      "headRefOid": "8caef6d8a56de75c810ce8c9d8adf0b51c7a77f0",
      "closedAt": "2013-06-19T04:52:16Z",
      "mergedAt": "2013-06-19T04:52:16Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "4067b9fb4d501ebe8e2c2f5102727b7383c99a82"
      },
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Please feel free to exercise editorial privilege with respect to wording. Reserving 0x2 at @jasnell requests.\n",
          "createdAt": "2013-06-19T01:00:12Z",
          "updatedAt": "2013-06-19T01:00:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 138,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQwNDc0NQ==",
      "title": "Frame size edits as discussed at the interim",
      "url": "https://github.com/httpwg/http2-spec/pull/138",
      "state": "MERGED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed in the interim... (I had previously submitted this in a batch against the Layering branch... redoing against the Master)\n",
      "createdAt": "2013-06-19T01:51:47Z",
      "updatedAt": "2013-06-19T04:58:25Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "de38721d49d4fb6ee687fe1667b581048096dfc1",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "frame-size2",
      "headRefOid": "fd703b572cfc527582c0716e59f2c4044ae195a8",
      "closedAt": "2013-06-19T04:46:55Z",
      "mergedAt": "2013-06-19T04:46:55Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "ab46630ccf382745b4653284a49d9e2fc67902c7"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good for the most part, consider the comments as advisory only.\n",
          "createdAt": "2013-06-19T04:46:48Z",
          "updatedAt": "2013-06-19T04:46:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 139,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQwNzA3OA==",
      "title": "Add PROMISE flag to HEADERS frame. Remove HEADERS+PROMISE.",
      "url": "https://github.com/httpwg/http2-spec/pull/139",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I yield to the Editors to create clarity from chaos.\n",
      "createdAt": "2013-06-19T05:53:19Z",
      "updatedAt": "2013-06-19T16:12:23Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "faee1486ad32da1537a2c0b192ed1fb65a4c20c0",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "headers_priority",
      "headRefOid": "1b435b086b84eb41f3898ff963c78f0657e4e1b0",
      "closedAt": "2013-06-19T16:10:27Z",
      "mergedAt": "2013-06-19T16:10:27Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0e173112c30cbd4fef10adae00b9f8f57517edb5"
      },
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Dealing from #131 -- please feel free to tell me to stop writing .xml and go back to writing code :)\n",
          "createdAt": "2013-06-19T05:53:56Z",
          "updatedAt": "2013-06-19T05:53:56Z"
        },
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I assume you meant s/PROMISE/PRIORITY ;-)\n",
          "createdAt": "2013-06-19T05:54:38Z",
          "updatedAt": "2013-06-19T05:54:38Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "git commit --amend\n\nmy favorite command\n",
          "createdAt": "2013-06-19T05:57:41Z",
          "updatedAt": "2013-06-19T05:57:41Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 141,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQwNzM5Nw==",
      "title": "FRAME_TOO_LARGE renamed to FRAME_SIZE_ERROR ...",
      "url": "https://github.com/httpwg/http2-spec/pull/141",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per #140 ... Suggested pull request replacing FRAME_TOO_LARGE with FRAME_SIZE_ERROR\n",
      "createdAt": "2013-06-19T06:22:19Z",
      "updatedAt": "2014-06-18T05:42:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "faee1486ad32da1537a2c0b192ed1fb65a4c20c0",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "FRAME_SIZE_ERROR",
      "headRefOid": "bf71e6d3097f377953161dc8b504530434d71ceb",
      "closedAt": "2013-07-03T08:25:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 142,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQwNzU5NQ==",
      "title": "HEADERS to start a stream",
      "url": "https://github.com/httpwg/http2-spec/pull/142",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Quick edit indicating that HEADERS are used to start a stream.\n\nAdditional refactoring will be done once the layering tf sections are filled in...\n",
      "createdAt": "2013-06-19T06:39:44Z",
      "updatedAt": "2013-06-19T17:30:20Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a28837a7012c7e5bf711e6526dab12b6f71c356b",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "headers_start",
      "headRefOid": "2659861f451b27983d79f1b663a94b80b37bf9b0",
      "closedAt": "2013-06-19T17:30:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I pulled this onto the layering branch.\n",
          "createdAt": "2013-06-19T17:30:14Z",
          "updatedAt": "2013-06-19T17:30:14Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 143,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQyMDcwOA==",
      "title": "Added ascii art for the WINDOW_UPDATE frame.",
      "url": "https://github.com/httpwg/http2-spec/pull/143",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-06-19T16:31:23Z",
      "updatedAt": "2013-06-21T17:48:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a1b11c7cf186b84afb86f115c245a43e8b1f33a3",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "ascii_art",
      "headRefOid": "3e1f833d41b99ff54487bb8031a6f2b67d064757",
      "closedAt": "2013-06-21T17:44:48Z",
      "mergedAt": "2013-06-21T17:44:48Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9e927309de6f34a27efd72bc072333de5c7f6aa8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 144,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQyMTg0Nw==",
      "title": "Adding ASSOCIATED_ONLY flag as discussed at the Interim",
      "url": "https://github.com/httpwg/http2-spec/pull/144",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "ASSOCIATED_ONLY on PRIORITY and RST_STREAM, better explanation and examples of promised stream association.\n",
      "createdAt": "2013-06-19T17:13:13Z",
      "updatedAt": "2014-06-13T06:25:42Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a1b11c7cf186b84afb86f115c245a43e8b1f33a3",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "associated_only",
      "headRefOid": "6ac649ef91003eb7d70e1c2b54c71df133e7cc07",
      "closedAt": "2013-08-07T09:44:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We discussed this in the breakout, but not with the larger group.  I'm not confident about accepting this yet, without further discussion on-list.  It's not on the list for -04, so I'm going to sit on this one for now.  Thanks for doing the work.\n",
          "createdAt": "2013-06-19T17:18:52Z",
          "updatedAt": "2013-06-19T17:18:52Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closing; please resubmit as an issue.\n",
          "createdAt": "2013-08-07T09:44:39Z",
          "updatedAt": "2013-08-07T09:44:39Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "See #119.\n",
          "createdAt": "2013-08-07T09:46:31Z",
          "updatedAt": "2013-08-07T09:46:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 145,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQyNDg3MQ==",
      "title": "Improved non-idempotent retry",
      "url": "https://github.com/httpwg/http2-spec/pull/145",
      "state": "CLOSED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Incremental improvement to this area... making the language a bit clearer and stronger...\n",
      "createdAt": "2013-06-19T19:04:15Z",
      "updatedAt": "2013-06-25T03:38:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a1b11c7cf186b84afb86f115c245a43e8b1f33a3",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "autoretry",
      "headRefOid": "3dbe0d73c2acd7f4126962ecb451e517c74ec90b",
      "closedAt": "2013-06-25T03:38:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that the main new thing in this changeset (aside from the removal part) is the addition of server requirements regarding these two signals.  I've added a section on the layering branch that uses the new on/about distinction with respect to application processing to specify the following:\n\n```\n        A server MUST NOT indicate that a stream has not been processed unless it can guarantee\n        that fact.  If frames that are on a stream are passed to the application layer for any\n        stream, then REFUSED_STREAM MUST NOT be used for that stream, and a GOAWAY frame MUST\n        include a stream identifier that is greater than or equal to the given stream\n        identifier.\n```\n",
          "createdAt": "2013-06-25T03:38:15Z",
          "updatedAt": "2013-06-25T03:38:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 146,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQyODE0NA==",
      "title": "client settings during Upgrade-based negotiation",
      "url": "https://github.com/httpwg/http2-spec/pull/146",
      "state": "MERGED",
      "author": "GabrielMontenegro",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "#51:Client advertising settings during Upgrade dance\n\nhttps://github.com/http2/http2-spec/issues/51\n",
      "createdAt": "2013-06-19T21:02:34Z",
      "updatedAt": "2014-08-04T01:34:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a1b11c7cf186b84afb86f115c245a43e8b1f33a3",
      "headRepository": "GabrielMontenegro/http2-spec",
      "headRefName": "master",
      "headRefOid": "37457c3d17c02f4b64459c7305525d12a92c9338",
      "closedAt": "2013-06-21T20:45:49Z",
      "mergedAt": "2013-06-21T20:45:49Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c7def12648185cab43cf9cdbbfd184388a979b39"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I assume that this header field is hop-by-hop in the HTTP/1.1 sense and should appear in the Connection header field.\n",
          "createdAt": "2013-06-21T18:41:19Z",
          "updatedAt": "2013-06-21T18:41:19Z"
        },
        {
          "author": "GabrielMontenegro",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ooops, yes! Just checked that in.\n",
          "createdAt": "2013-06-21T19:41:53Z",
          "updatedAt": "2013-06-21T19:41:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 148,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQ1MjM0MA==",
      "title": "Add section reference to SETTINGS_INITIAL_WINDOW_SIZE.",
      "url": "https://github.com/httpwg/http2-spec/pull/148",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-06-20T18:47:50Z",
      "updatedAt": "2013-06-21T01:32:56Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "dfce0b1b701ef9a14c066cfe7b237978052d5b8e",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "flow_control",
      "headRefOid": "a596b1367387a61c03d4f249da1e159ae44e9746",
      "closedAt": "2013-06-21T00:23:53Z",
      "mergedAt": "2013-06-21T00:23:53Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "1a6a511f944c9251c453b7145058500dff90c7ac"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 149,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQ4NjM1MA==",
      "title": "Fixing a typo.",
      "url": "https://github.com/httpwg/http2-spec/pull/149",
      "state": "CLOSED",
      "author": "molnarg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"PRIORITY (0x8): Bit 4 being set...\" -> \"PRIORITY (0x8): Bit 8 being set...\"\n",
      "createdAt": "2013-06-22T10:01:18Z",
      "updatedAt": "2013-06-22T15:10:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "layering",
      "baseRefOid": "165d3342de9df418b738b6f18a5474e46f0cd3a1",
      "headRepository": "molnarg/http2-spec",
      "headRefName": "typo-fix",
      "headRefOid": "82af18147858d293fc6934b8514445ee8289f82f",
      "closedAt": "2013-06-22T15:10:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "molnarg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry that's not a typo!\n",
          "createdAt": "2013-06-22T15:10:36Z",
          "updatedAt": "2013-06-22T15:10:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 150,
      "id": "MDExOlB1bGxSZXF1ZXN0NjU5NTMwOQ==",
      "title": "Make mandatory settings mandatory on all SETTINGS frames",
      "url": "https://github.com/httpwg/http2-spec/pull/150",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "On behalf of @mbelshe:\n1. Simplify the SETTINGS frame by making the common parameters required.\n   They already were required for the upgrade process, so just make them\n   always required (simpler).\n2. Simplify some wording.\n",
      "createdAt": "2013-06-27T17:13:27Z",
      "updatedAt": "2014-06-13T07:30:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "layering",
      "baseRefOid": "664e0cea8e584fb04db1ecae48c2964fae3aa647",
      "headRepository": "mbelshe/http2-spec",
      "headRefName": "foo",
      "headRefOid": "0a3d45b4c89a91161def452adbee9806e084a1e1",
      "closedAt": "2013-10-10T21:38:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in Seattle; we seem to be moving away from this approach with SETTINGS+ACK and defaults for settings, so this isn't applicable. Nothing prohibits a sender from dumping all of their settings onto the wire, but we don't want to require it.\n",
          "createdAt": "2013-10-10T21:38:42Z",
          "updatedAt": "2013-10-10T21:38:42Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 151,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYwMjY0Mw==",
      "title": "HTTP Layer rework...",
      "url": "https://github.com/httpwg/http2-spec/pull/151",
      "state": "MERGED",
      "author": "jasnell",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per the Layering TF effort... fairly significant rework of the HTTP Layering discussion. \n",
      "createdAt": "2013-06-27T21:40:16Z",
      "updatedAt": "2014-06-20T14:37:09Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "layering",
      "baseRefOid": "664e0cea8e584fb04db1ecae48c2964fae3aa647",
      "headRepository": "jasnell/http2-spec",
      "headRefName": "layering",
      "headRefOid": "a4719eabf01d52d15a84762a95d9375706e704a6",
      "closedAt": "2013-07-01T22:04:19Z",
      "mergedAt": "2013-07-01T22:04:19Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c64182bebe10c636c5231edbe12a9220bd36ea36"
      },
      "comments": [
        {
          "author": "jasnell",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Excellent detailed review... already preparing the second pass.. hopefully will have that in by Monday at the latest.\n",
          "createdAt": "2013-06-28T21:29:28Z",
          "updatedAt": "2013-06-28T21:29:28Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Great.  I'll send a pointer to the list so that we can minimize surprise.  I want to ship -04 on Wednesday, which is only a small window for review and objection.  Hopefully you wont get a pile-on.\n",
          "createdAt": "2013-06-28T21:33:59Z",
          "updatedAt": "2013-06-28T21:33:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I have this merged in, but expect a few things to change.  I don't think that you got all my comments.  Some of the edits exceed my authority, so I'm reverting a few things (pushed HEAD is one of those, which we should really track separately).\n",
          "createdAt": "2013-07-01T22:04:47Z",
          "updatedAt": "2013-07-01T22:04:47Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Thanks guys! I'll try to look over this in the next day or so :)\n",
          "createdAt": "2013-07-01T22:10:48Z",
          "updatedAt": "2013-07-01T22:10:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 157,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY2NzU5OA==",
      "title": "some editorial fixes",
      "url": "https://github.com/httpwg/http2-spec/pull/157",
      "state": "MERGED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- half closed (client/server) is no longer used.\n- :scheme header MUST include HTTP Request\n",
      "createdAt": "2013-07-02T04:23:06Z",
      "updatedAt": "2014-06-20T04:18:31Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "layering",
      "baseRefOid": "1534b687ac4dbb1c2701353e4b7f15d46186e9cd",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20130702",
      "headRefOid": "73dce91fcccecce7079d7ccf6294e80350d5ce19",
      "closedAt": "2013-07-02T17:43:28Z",
      "mergedAt": "2013-07-02T17:43:28Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "984454b81b73ecfc61ea9053a990b230b4d075b5"
      },
      "comments": [
        {
          "author": "shigeki",
          "authorAssociation": "NONE",
          "body": "@martinthomson The fixes of the commit of 73dce91fcccecce7079d7ccf6294e80350d5ce19 were somehow lost after ea5abcf90460dc300b94eb27d82162f56a1dc526 .  I'm not sure why it happened without conflicting. Please fix them by your hand.\n",
          "createdAt": "2013-07-03T01:56:47Z",
          "updatedAt": "2013-07-03T01:56:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Will do.  It's easy enough to fix.\n",
          "createdAt": "2013-07-03T03:26:31Z",
          "updatedAt": "2013-07-03T03:26:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 159,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY4MzExNA==",
      "title": "some minor editorial clean-up",
      "url": "https://github.com/httpwg/http2-spec/pull/159",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-07-02T17:29:07Z",
      "updatedAt": "2013-07-02T18:00:32Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "layering",
      "baseRefOid": "288fc6472f5b0b50b8b3628c1d39fb11c0203cc2",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "layering_clean_up",
      "headRefOid": "381766d2a0397038d74e3a7dc27db99c2638d299",
      "closedAt": "2013-07-02T17:54:49Z",
      "mergedAt": "2013-07-02T17:54:49Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "daf3168fef17d9285887739719a080a06665e670"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 160,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY4NzMyMA==",
      "title": "Layering editorial corrections",
      "url": "https://github.com/httpwg/http2-spec/pull/160",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some editorial corrections/suggestions.\n",
      "createdAt": "2013-07-02T20:01:57Z",
      "updatedAt": "2013-07-02T20:47:32Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "layering",
      "baseRefOid": "8d8b9ea662bc9e4137b8b3f8fd4b31c39e327eb5",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "layering",
      "headRefOid": "71e3692e9033c013a47be040bc36bd903dff3bda",
      "closedAt": "2013-07-02T20:47:32Z",
      "mergedAt": "2013-07-02T20:47:32Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "fd0d6db2254eda08a3b6ff5c1233d21b0dfd0d76"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 161,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY4NzY3NA==",
      "title": "Fixing typo in HEADERS example",
      "url": "https://github.com/httpwg/http2-spec/pull/161",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-07-02T20:14:32Z",
      "updatedAt": "2013-07-03T18:32:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "layering",
      "baseRefOid": "8d8b9ea662bc9e4137b8b3f8fd4b31c39e327eb5",
      "headRepository": null,
      "headRefName": "layering",
      "headRefOid": "cde35c98c7082c4b33d9c318e447eb14b6b982c9",
      "closedAt": "2013-07-02T20:18:29Z",
      "mergedAt": "2013-07-02T20:18:29Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "815e7c258a291fd94960281b880b1b14ae3c1233"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 162,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY5NTEwMw==",
      "title": "Add opaque data to GOAWAY.",
      "url": "https://github.com/httpwg/http2-spec/pull/162",
      "state": "MERGED",
      "author": "gongloo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-07-03T02:25:08Z",
      "updatedAt": "2013-07-03T18:28:04Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "layering",
      "baseRefOid": "145c7b63922562e20644084b5d7bb4cad9e0f05a",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "f74e94841072d08cf3cdb49d7d0c41803f9c4369",
      "closedAt": "2013-07-03T18:14:43Z",
      "mergedAt": "2013-07-03T18:14:43Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "ead70cfd8ec456e85d5905af06c2a5d5613342ea"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 178,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAwMDMzMg==",
      "title": "Clarify no duplicate instances of HTTP2-Settings",
      "url": "https://github.com/httpwg/http2-spec/pull/178",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think this is strictly an editorial clarification, not a technical change, but something that came up in discussions within the team.  If there's any question about that, feel free to push it back and we'll discuss on-list.\n",
      "createdAt": "2013-07-17T23:22:12Z",
      "updatedAt": "2014-06-14T10:29:43Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "5bc7938781bbae1463fcb261f26ae744b4d95105",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "62d410cc4f48fab1b53cd35e6fbadaf550614450",
      "closedAt": "2013-07-18T22:57:52Z",
      "mergedAt": "2013-07-18T22:57:52Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "dc7f57e7f8b11abd9e2950f5c4fa1ffd61211071"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This looks like #174, sort of.  I think that we need a little more than what you include here.  This covers the initial SETTINGS frame, but there are bits in 3.8.5 that need fixing too.\n",
          "createdAt": "2013-07-18T22:48:54Z",
          "updatedAt": "2013-07-18T22:48:54Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Similar issue, different layer\u2026.  #174 is talking about multiple instances of the same setting value in a single SETTINGS frame.  This commit is talking about multiple instances of the \u201cHTTP2-Settings\u201d header in an HTTP/1.1 request that\u2019s offering Upgrade.\n\nFrom: martinthomson [mailto:notifications@github.com]\nSent: Thursday, July 18, 2013 3:49 PM\nTo: http2/http2-spec\nCc: Mike Bishop\nSubject: Re: [http2-spec] Clarify no duplicate instances of HTTP2-Settings (#178)\n\nThis looks like #174https://github.com/http2/http2-spec/issues/174, sort of. I think that we need a little more than what you include here. This covers the initial SETTINGS frame, but there are bits in 3.8.5 that need fixing too.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/pull/178#issuecomment-21220738.\n",
          "createdAt": "2013-07-18T22:53:58Z",
          "updatedAt": "2013-07-18T22:53:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Ahh, I don't see this as a big deal, since \"a header field\" and \"exactly one header field\" seem equivalent to me.  I'll pull it in.\n",
          "createdAt": "2013-07-18T22:57:48Z",
          "updatedAt": "2013-07-18T22:57:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 179,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAwNTI5Nw==",
      "title": "Add condition of a promised stream in receiving PUSH_PROMISE",
      "url": "https://github.com/httpwg/http2-spec/pull/179",
      "state": "CLOSED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "As shown in the table in #175, the promised stream MUST be in the \"idle\" state in receiving PUSH_PROMISE.\n",
      "createdAt": "2013-07-18T06:26:52Z",
      "updatedAt": "2014-06-27T17:28:35Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "5bc7938781bbae1463fcb261f26ae744b4d95105",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20130718",
      "headRefOid": "68323f058704f4152cab7744b93ca57e2dea5168",
      "closedAt": "2013-08-05T07:04:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that I'd like to approach this stream state stuff a little more systematically.  I might pull this when I get some time to look into what it takes to describe all those nasty corner cases.\n",
          "createdAt": "2013-07-18T17:43:56Z",
          "updatedAt": "2013-07-18T17:43:56Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This should be addressed by 4ced17f290e6b0ee1c836e2b996e974ef9164383\n",
          "createdAt": "2013-08-05T07:04:03Z",
          "updatedAt": "2013-08-05T07:04:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 237,
      "id": "MDExOlB1bGxSZXF1ZXN0Nzc4OTcyNg==",
      "title": "Fixing some typos",
      "url": "https://github.com/httpwg/http2-spec/pull/237",
      "state": "MERGED",
      "author": "summerwind",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-08-22T13:36:47Z",
      "updatedAt": "2013-09-02T14:06:10Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "49a851d44a5855a30232918097c7a5751d5c3060",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "9609995dc7eb68f6a9c30da25e79ab99af5edd2b",
      "closedAt": "2013-08-22T15:21:18Z",
      "mergedAt": "2013-08-22T15:21:18Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "4b0cf78d944d59f9cc0952e5191ced68a221b4a6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 241,
      "id": "MDExOlB1bGxSZXF1ZXN0ODAyMjEwNQ==",
      "title": "Fixing toc depth",
      "url": "https://github.com/httpwg/http2-spec/pull/241",
      "state": "CLOSED",
      "author": "summerwind",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Enabling the Section 8.1.2.1 and 8.1.2.2 of the Table of Contents.\n",
      "createdAt": "2013-09-02T14:07:02Z",
      "updatedAt": "2013-09-03T17:49:56Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "aeed0160b90ee088d588422bae900cdffb3d2acc",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "df6e2921faa15be5498fc3f7b771423ba315f001",
      "closedAt": "2013-09-03T17:49:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The TOC doesn't need to include every section in the document.\n",
          "createdAt": "2013-09-03T17:49:56Z",
          "updatedAt": "2013-09-03T17:49:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 243,
      "id": "MDExOlB1bGxSZXF1ZXN0ODEzMzYwNQ==",
      "title": "Update examples to match new request table - updating opcodes.",
      "url": "https://github.com/httpwg/http2-spec/pull/243",
      "state": "MERGED",
      "author": "molnarg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I saw that my pull request that I submitted to the wrong repo (https://github.com/http2/compression-spec/pull/28) got merged into this repo, thanks! But I noticed that the changed opcodes somehow did not come over, this PR fixes that.\n",
      "createdAt": "2013-09-06T10:59:18Z",
      "updatedAt": "2014-06-16T12:11:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "03e743759ab3a0f3daa98a363fac12f7d05517b5",
      "headRepository": "molnarg/http2-spec",
      "headRefName": "example-corrections",
      "headRefOid": "a6c2059c1a998257b3d6bbc82fcf0a707ba8c4ae",
      "closedAt": "2013-09-06T12:48:23Z",
      "mergedAt": "2013-09-06T12:48:23Z",
      "mergedBy": "hruellan",
      "mergeCommit": {
        "oid": "ce15efb6f53bb6a89f2463820f7383d58d6759fd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 247,
      "id": "MDExOlB1bGxSZXF1ZXN0ODQ4MzM3Mg==",
      "title": "Fix typo",
      "url": "https://github.com/httpwg/http2-spec/pull/247",
      "state": "MERGED",
      "author": "joliss",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-09-20T13:40:32Z",
      "updatedAt": "2013-09-24T15:43:56Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "4df2ae0fbeaa309677d2cfc17480c132c95de64b",
      "headRepository": "joliss/http2-spec",
      "headRefName": "typo",
      "headRefOid": "26f15f185ec2fac0c6701dbec704ea71be4068da",
      "closedAt": "2013-09-24T15:43:56Z",
      "mergedAt": "2013-09-24T15:43:56Z",
      "mergedBy": "aamelnikov",
      "mergeCommit": {
        "oid": "6f4c483d8dd8cd58b4fe718cb1aae456c2c0b274"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 249,
      "id": "MDExOlB1bGxSZXF1ZXN0ODU2NzYyNA==",
      "title": "Revive the CONNECT method and spec a mapping on top of a stream.",
      "url": "https://github.com/httpwg/http2-spec/pull/249",
      "state": "MERGED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This pull request fixes #230 as per discussion in http://lists.w3.org/Archives/Public/ietf-http-wg/2013JulSep/1016.html.\n",
      "createdAt": "2013-09-24T18:00:14Z",
      "updatedAt": "2014-06-17T14:03:12Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "d7dd0118cd29478edbf6d5667164fc883fb3265b",
      "headRepository": null,
      "headRefName": "CONNECT",
      "headRefOid": "6b001ea6210010c541304631303c56be9375f33e",
      "closedAt": "2013-10-03T21:07:47Z",
      "mergedAt": "2013-10-03T21:07:47Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "074b28aac3de0afeabb9ecf0802b02d611ad535c"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll need to rebuild state before I can commit this, I think that the RST_STREAM and END_STREAM text needs a little more work here, particularly as it relates to the connected TCP server closing the connection.\n",
          "createdAt": "2013-10-02T04:12:01Z",
          "updatedAt": "2013-10-02T04:12:01Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "More commits are needed before I'm happy closing #230.  I'll see what I can do about RST_STREAM/END_STREAM and we can discuss at the interim to see if there is anything else needed.\n",
          "createdAt": "2013-10-03T21:09:49Z",
          "updatedAt": "2013-10-03T21:09:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 254,
      "id": "MDExOlB1bGxSZXF1ZXN0ODg4NDIxOA==",
      "title": "Fixed the word \"client\" to \"request\" on \"HTTP2-Settings Header Field\".",
      "url": "https://github.com/httpwg/http2-spec/pull/254",
      "state": "MERGED",
      "author": "yosssi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixed the word \"client\" to \"request\" on \"HTTP2-Settings Header Field\".\n",
      "createdAt": "2013-10-07T14:35:23Z",
      "updatedAt": "2013-10-12T05:49:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "9659ddb47e1c05b77cd729bcb93eab5d75c4ad27",
      "headRepository": "yosssi/http2-spec",
      "headRefName": "master",
      "headRefOid": "8ca71c21f779f5e31e2b2e34d2d4f7392764b548",
      "closedAt": "2013-10-07T17:05:19Z",
      "mergedAt": "2013-10-07T17:05:19Z",
      "mergedBy": "aamelnikov",
      "mergeCommit": {
        "oid": "ad062acf68e26ce4cd828dd824eb06d4cc878cd8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 262,
      "id": "MDExOlB1bGxSZXF1ZXN0ODk5OTczOA==",
      "title": "[#250] remove substitution from HPACK",
      "url": "https://github.com/httpwg/http2-spec/pull/262",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-10-10T18:21:32Z",
      "updatedAt": "2013-10-10T21:00:43Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "60c956c6cb02f1c7b3adb9fdc6071a2ed01610fb",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "header_updates",
      "headRefOid": "01ac9950c80b8361f4ae929c793b768cca169b31",
      "closedAt": "2013-10-10T18:32:05Z",
      "mergedAt": "2013-10-10T18:32:05Z",
      "mergedBy": "grmocg",
      "mergeCommit": {
        "oid": "c42dfc83c6fc7b8e2455c6abea91c73853bd972b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 265,
      "id": "MDExOlB1bGxSZXF1ZXN0OTAwNzU4Ng==",
      "title": "420 Enhance Your Calm Error Code",
      "url": "https://github.com/httpwg/http2-spec/pull/265",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-10-10T22:02:13Z",
      "updatedAt": "2014-06-21T01:06:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "2d06a403163b213dcab5f42e93ba1fc4af8da600",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "420_enhance_your_clam",
      "headRefOid": "1b21e2ab3b3d1cd2e5e2eb36d4ff2cdb05824266",
      "closedAt": "2013-10-10T22:03:34Z",
      "mergedAt": "2013-10-10T22:03:34Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "2b23c885be1433f07541a11ceac9e9870e6847e3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 271,
      "id": "MDExOlB1bGxSZXF1ZXN0OTAzMDY0NA==",
      "title": "Settings ACK",
      "url": "https://github.com/httpwg/http2-spec/pull/271",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Introduces a confirmation that the SETTINGS frame has been applied.\n",
      "createdAt": "2013-10-11T16:40:33Z",
      "updatedAt": "2013-10-11T21:17:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "d7cdeec415010cc60bfaba52d1156e141c1e5562",
      "headRepository": null,
      "headRefName": "settings_ack",
      "headRefOid": "af9676c03fe238a768962c253a64040b47ff2fdb",
      "closedAt": "2013-10-11T21:17:36Z",
      "mergedAt": "2013-10-11T21:17:36Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "834f193042f3cc933f7f921d5183b6e44a59fffc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 273,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA0NTMxNg==",
      "title": "Fixed a grammar mistake.",
      "url": "https://github.com/httpwg/http2-spec/pull/273",
      "state": "CLOSED",
      "author": "yosssi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixed a grammar mistake.\n",
      "createdAt": "2013-10-12T05:18:11Z",
      "updatedAt": "2013-10-15T02:06:20Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "83987967ff7bc6c5432ad6d21ce51eae2ec30c05",
      "headRepository": "yosssi/http2-spec",
      "headRefName": "master",
      "headRefOid": "1e0a98b46a9148cf7244ca0a984c2128d66289ab",
      "closedAt": "2013-10-15T02:06:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 275,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA3OTE1OQ==",
      "title": "minor rewording",
      "url": "https://github.com/httpwg/http2-spec/pull/275",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-10-14T19:55:07Z",
      "updatedAt": "2013-10-15T00:10:12Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "2126f41bfda1c6fac4806b3778f419e9db53f6ce",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "text_cleanup",
      "headRefOid": "a2727d2ea725ddff048ea5151619a838f8bbc3e9",
      "closedAt": "2013-10-15T00:10:12Z",
      "mergedAt": "2013-10-15T00:10:12Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "7362ae0848224bc66a03426113257b4b5572152f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 276,
      "id": "MDExOlB1bGxSZXF1ZXN0OTA5MDg4Ng==",
      "title": "use consistent terminology for header field",
      "url": "https://github.com/httpwg/http2-spec/pull/276",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-10-15T06:49:56Z",
      "updatedAt": "2013-10-15T15:31:16Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "5e0243f747d7ab9ea06b4fbb839f71a97fb7691e",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "header_field",
      "headRefOid": "f2552248f96b6eb3f61bc3bff7f7d1be9b17b098",
      "closedAt": "2013-10-15T15:31:16Z",
      "mergedAt": "2013-10-15T15:31:15Z",
      "mergedBy": "hruellan",
      "mergeCommit": {
        "oid": "c072a33d7258ae00c0e2a5402f0adaf206156199"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 278,
      "id": "MDExOlB1bGxSZXF1ZXN0OTEwNDk0MQ==",
      "title": "Lower case header names before compression.",
      "url": "https://github.com/httpwg/http2-spec/pull/278",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Possible resolution for #277.\n",
      "createdAt": "2013-10-15T15:41:55Z",
      "updatedAt": "2014-03-14T17:05:17Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a259640d9d460a16d9f2fe95047d23a3b1aec386",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "work",
      "headRefOid": "f0a0e6728fd4f4bf3d8406cd0c0c88ec1f94c172",
      "closedAt": "2013-10-18T10:55:32Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 280,
      "id": "MDExOlB1bGxSZXF1ZXN0OTE0ODcxOA==",
      "title": "Fix length of \"Length\" field in \"Frame Header\" figure",
      "url": "https://github.com/httpwg/http2-spec/pull/280",
      "state": "MERGED",
      "author": "lkundrak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The text below the figure suggests that the field preceded by two reserved bits\nis 14 bits, not 16.\n",
      "createdAt": "2013-10-16T19:13:15Z",
      "updatedAt": "2013-10-16T20:49:42Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "72209be4f29010a82006e249e83b1924a34be5e8",
      "headRepository": "lkundrak/http2-spec",
      "headRefName": "lr-http2-length",
      "headRefOid": "dce5455e23e2d172cff7b2ef57e3cfe92af6d91a",
      "closedAt": "2013-10-16T20:49:42Z",
      "mergedAt": "2013-10-16T20:49:42Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d0705c45957d0316594759369cc28ff081faf403"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 291,
      "id": "MDExOlB1bGxSZXF1ZXN0OTI2MzY2NQ==",
      "title": "Set maximum on integer encoding",
      "url": "https://github.com/httpwg/http2-spec/pull/291",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "On Sun, Oct 20, 2013 at 05:23:50PM -0700, Roberto Peon wrote:\n\n> If any value is too large, the connection should be torn down.\n> The definition of 'too large' depends utterly on details that we cannot\n> predict.\n\nHere's a proposal for that.\n",
      "createdAt": "2013-10-21T17:18:37Z",
      "updatedAt": "2014-07-15T17:49:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "28da43f2e1b241db30433cda6ad4b8a3b5b24f37",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "integermax",
      "headRefOid": "651bc2ff179325a5cdcb478565ed42c71e976504",
      "closedAt": "2013-10-21T17:20:02Z",
      "mergedAt": "2013-10-21T17:20:02Z",
      "mergedBy": "grmocg",
      "mergeCommit": {
        "oid": "7a60328b429808246b6528aeb60d762ae3b3ddb3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 295,
      "id": "MDExOlB1bGxSZXF1ZXN0OTMxMDgyMA==",
      "title": "A couple of mostly minor corrections and clarifications",
      "url": "https://github.com/httpwg/http2-spec/pull/295",
      "state": "MERGED",
      "author": "lkundrak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-10-22T21:49:35Z",
      "updatedAt": "2013-10-22T22:23:21Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a3c281bfb34adb57ff49e979a59720b13f33a653",
      "headRepository": "lkundrak/http2-spec",
      "headRefName": "lr-corrections",
      "headRefOid": "0cbe56bfd53cca73420790ff64f3eca89cb27fdf",
      "closedAt": "2013-10-22T22:23:21Z",
      "mergedAt": "2013-10-22T22:23:21Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "33a2ea4c149790027246c27a637221cd512a17dc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 298,
      "id": "MDExOlB1bGxSZXF1ZXN0OTM0MjY4Mg==",
      "title": "Fixing typo",
      "url": "https://github.com/httpwg/http2-spec/pull/298",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Instructions for Indexed Representation of entry already in header table say to add entry to header table again, don't mention reference set.\n",
      "createdAt": "2013-10-23T19:25:57Z",
      "updatedAt": "2013-10-29T17:45:07Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fbb70b881682478d6a0ec1f6d078f0c9370dd9b7",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "952c81a5215e0d1dd5ea80c7d41b88f5825c7e11",
      "closedAt": "2013-10-29T17:45:07Z",
      "mergedAt": "2013-10-29T17:45:07Z",
      "mergedBy": "hruellan",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 299,
      "id": "MDExOlB1bGxSZXF1ZXN0OTM5NTI0Mg==",
      "title": "Added comma for payload length",
      "url": "https://github.com/httpwg/http2-spec/pull/299",
      "state": "MERGED",
      "author": "summerwind",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-10-25T08:01:28Z",
      "updatedAt": "2013-10-25T17:07:33Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "f73e5b9319c0582bf57cb0d8ee36815674204351",
      "headRepository": "summerwind/http2-spec",
      "headRefName": "master",
      "headRefOid": "06ae4ce43f16c87de35e355e2bd9a6b9dc7c1692",
      "closedAt": "2013-10-25T17:07:33Z",
      "mergedAt": "2013-10-25T17:07:33Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 302,
      "id": "MDExOlB1bGxSZXF1ZXN0OTU4NDE4NA==",
      "title": "Remove reference to push headers being inherited",
      "url": "https://github.com/httpwg/http2-spec/pull/302",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We've long since agreed that full request headers are sent in the PUSH_PROMISE frame; found a lingering reference to pushed resources \"inheriting\" headers from the original request.  Revised it to reference the request headers in the PUSH_PROMISE frame like everywhere else.\n",
      "createdAt": "2013-10-31T22:45:11Z",
      "updatedAt": "2013-10-31T23:07:19Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "5e8878559f1eb9ab94a111ac6666097beeb21c8d",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "04feefbbd1d2a4be2001aa4c28ad2be2b465771b",
      "closedAt": "2013-10-31T23:07:19Z",
      "mergedAt": "2013-10-31T23:07:19Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "622ce40ee12b356ae254fbfd533e755e2babc516"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 307,
      "id": "MDExOlB1bGxSZXF1ZXN0OTgyMzA1Ng==",
      "title": "Small corrections in the examples.",
      "url": "https://github.com/httpwg/http2-spec/pull/307",
      "state": "MERGED",
      "author": "molnarg",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I found these typos while writing unit tests based on the provided examples.\n",
      "createdAt": "2013-11-09T19:58:30Z",
      "updatedAt": "2014-06-16T13:06:10Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "67c89f20852dcdfb04fb494648062e86bef8832e",
      "headRepository": "molnarg/http2-spec",
      "headRefName": "compression-corrections",
      "headRefOid": "f1c75ee3d583332efeb21783db7bc2e1f1c79d5d",
      "closedAt": "2013-11-14T18:39:03Z",
      "mergedAt": "2013-11-14T18:39:03Z",
      "mergedBy": "hruellan",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 309,
      "id": "MDExOlB1bGxSZXF1ZXN0OTkwODE4Nw==",
      "title": "Some editorial fixes",
      "url": "https://github.com/httpwg/http2-spec/pull/309",
      "state": "MERGED",
      "author": "summerwind",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-11-13T02:42:38Z",
      "updatedAt": "2013-11-13T18:05:42Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7ec4d2ab8f81c87c567ad9de4e34010a57d8a990",
      "headRepository": "summerwind/http2-spec",
      "headRefName": "master",
      "headRefOid": "84abbe97313b960ed8bf72baee3193b33b6cdb37",
      "closedAt": "2013-11-13T18:05:42Z",
      "mergedAt": "2013-11-13T18:05:42Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 310,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk1NTQ0Mg==",
      "title": "Fix some typos",
      "url": "https://github.com/httpwg/http2-spec/pull/310",
      "state": "MERGED",
      "author": "vipulnsward",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix some typos\n",
      "createdAt": "2013-11-14T10:16:54Z",
      "updatedAt": "2013-11-14T17:14:31Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6113f83c66437dc0f28a923ab8c6397c9fd05404",
      "headRepository": "vipulnsward/http2-spec",
      "headRefName": "fix_some_typos",
      "headRefOid": "e690af2e959eb3715d9bfdf990af931adf50d07d",
      "closedAt": "2013-11-14T17:14:31Z",
      "mergedAt": "2013-11-14T17:14:31Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9954eeacfbf336d27d98ce210ca4b49d099796f7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 311,
      "id": "MDExOlB1bGxSZXF1ZXN0OTk3MzY2MA==",
      "title": "Minor typo fix",
      "url": "https://github.com/httpwg/http2-spec/pull/311",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Removed double-colon in an example, pointed out by Changshu Jian.\n",
      "createdAt": "2013-11-14T19:20:55Z",
      "updatedAt": "2016-12-23T17:41:03Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "9ccdfb2aa940bce261fdb134ff17ce6eec19200a",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "9310efd00c12a7407e940acd4ef204ec51bce409",
      "closedAt": "2013-11-14T20:01:40Z",
      "mergedAt": "2013-11-14T20:01:40Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This fixes the plaintext, but it looks like this mistake is carried over into the example Huffman, too, and I don't have the patience to fix that right now.  Can someone with more Huffman experience take a look?\n",
          "createdAt": "2013-11-14T19:29:29Z",
          "updatedAt": "2013-11-14T19:29:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 321,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAwMDM5NTg=",
      "title": "Fix static table, replace duplicated \"from\" with \"host\"",
      "url": "https://github.com/httpwg/http2-spec/pull/321",
      "state": "CLOSED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-11-15T15:56:38Z",
      "updatedAt": "2014-06-16T13:06:05Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "43cab82e093e99cd065d1fa6100d14ad3e5d6df1",
      "headRepository": "tatsuhiro-t/http2-spec",
      "headRefName": "fix-static-table",
      "headRefOid": "b1076f08d597812e0071e4bc9e4fd62b3feb063a",
      "closedAt": "2013-11-15T18:33:33Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I added the entry, but forgot to change the name :-(.\nCorrected in cc96358a449155d5f015899bab1759059acf7b89.\n",
          "createdAt": "2013-11-15T18:33:32Z",
          "updatedAt": "2013-11-15T18:33:32Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 322,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAwMTAwNjE=",
      "title": "Octets",
      "url": "https://github.com/httpwg/http2-spec/pull/322",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The description of Huffman coding uses the word \"characters\" incorrectly.\n",
      "createdAt": "2013-11-15T18:52:55Z",
      "updatedAt": "2014-07-15T17:49:49Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "dd5729fad4b5b968b9a0fd1a095f3d2bf0afe81a",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "octets",
      "headRefOid": "90e0ca98c85eb1a6e410d976c01f9f81a993b965",
      "closedAt": "2013-11-19T08:39:12Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Included in f47b01c81bf57b59f43a98743965d30a9dcbca32.\n",
          "createdAt": "2013-11-19T08:39:12Z",
          "updatedAt": "2013-11-19T08:39:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 323,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAwMjIzMDM=",
      "title": "shorten alpn token from HTTP/2.0 to h2",
      "url": "https://github.com/httpwg/http2-spec/pull/323",
      "state": "MERGED",
      "author": "mcmanus",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "upgrade"
      ],
      "body": "TLS Client Hello's between 256 and 512 bytes need to be rounded up to 512 for compatibility reasons. This incents us to keep Client Hello parameters as small as possible to avoid the rounding - this change shortens the ALPN token of HTTP/2.0 to be simply \"h2\"\n",
      "createdAt": "2013-11-16T04:30:04Z",
      "updatedAt": "2014-06-12T06:18:55Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "9ee41297c4a5b05288847a45404b4741b2ff5b8d",
      "headRepository": null,
      "headRefName": "alpntoken",
      "headRefOid": "8727da3ba2e06609dd10460e17b136cee2743295",
      "closedAt": "2014-01-23T09:53:27Z",
      "mergedAt": "2014-01-23T09:53:27Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "2b6eadbdbe05b75f2f5e0b510fcab8f661b09117"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in Zurich; we will take this and hold back the eventual heat death of the universe a byte at a time.\n",
          "createdAt": "2014-01-22T11:15:59Z",
          "updatedAt": "2014-01-22T11:15:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 325,
      "id": "MDExOlB1bGxSZXF1ZXN0MTAyNDk3Mjc=",
      "title": "Refine text about 100 informational responses. See #264.",
      "url": "https://github.com/httpwg/http2-spec/pull/325",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-11-25T05:53:54Z",
      "updatedAt": "2013-11-25T17:09:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ee5d70045235170662dba70feb464f6d24aaabd9",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "40e5cd01e7fbfef28aa467a0bbdb7a24bc8786ef",
      "closedAt": "2013-11-25T17:09:37Z",
      "mergedAt": "2013-11-25T17:09:37Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "e914ebfb10827ffca157faf5c3735e4a48e2decd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 326,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA0MzQ4ODg=",
      "title": "Add value ordering using NULL-separated lists.",
      "url": "https://github.com/httpwg/http2-spec/pull/326",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2013-12-02T14:58:02Z",
      "updatedAt": "2014-03-14T17:05:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "aa394f902e94caeca82da4f1b1afa138661186f8",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "header",
      "headRefOid": "4a76e4be44c0eefb191fd4d8532d34c2cca65985",
      "closedAt": "2013-12-03T18:20:12Z",
      "mergedAt": "2013-12-03T18:20:12Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9a995af8084a644d2d5179237e6222e4e729ad72"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 327,
      "id": "MDExOlB1bGxSZXF1ZXN0MTA0NDMzNDA=",
      "title": "Header field ordering",
      "url": "https://github.com/httpwg/http2-spec/pull/327",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Using zero octet.  Major changes from original proposal in #326.\n",
      "createdAt": "2013-12-02T18:38:52Z",
      "updatedAt": "2013-12-03T18:20:16Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "816c0f7915baddec2371c27390664d8c7fbc47d9",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "hruellan-null",
      "headRefOid": "0914d953fabad8a94edc72967a6dcd4123ae6d7f",
      "closedAt": "2013-12-03T18:20:11Z",
      "mergedAt": "2013-12-03T18:20:11Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "922d81e6541bd1b6ef8fa9dc963bec7cdb5f593f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 333,
      "id": "MDExOlB1bGxSZXF1ZXN0MTExNjc0MzQ=",
      "title": "Reserve PRI method in HTTP/1.1 to avoid collision",
      "url": "https://github.com/httpwg/http2-spec/pull/333",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "transport mapping"
      ],
      "body": "In http://www.w3.org/mid/5215922F.4090509@treenet.co.nz;list=ietf-http-wg, it was proposed that the PRI method be reserved in the HTTP/1.1 method registration document to avoid possible future reservation and ensure that the magic string remains a reliable way of differentiating HTTP/1.1 connections from HTTP/2.0 connections.  There was a +1 and some offline discussion along the same vein, no dissent that I heard or saw.  However, I don\u2019t see it in http://tools.ietf.org/html/draft-ietf-httpbis-method-registrations-14, presumably because no RFC exists to reference.  The appropriate doc is probably HTTP/2.0 rather than breaking the glass on the prepopulated registrations.\n",
      "createdAt": "2014-01-01T00:10:07Z",
      "updatedAt": "2014-07-20T13:15:01Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6cf73458aef62169db4a3a65fe520111a71f1d78",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "d9a3da6f69d9b740cb59f2848dece39efee0eb1d",
      "closedAt": "2014-01-23T09:20:39Z",
      "mergedAt": "2014-01-23T09:20:39Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "ab57025c821c9a1e19cf58f9de4b9245a3934e61"
      },
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There was a question whether \"SM\" should also be reserved; I personally don't think so, since that line will never be interpreted as a potentially-valid HTTP request line or header.  However, I don't think it would break anything if we did.\n",
          "createdAt": "2014-01-20T20:33:07Z",
          "updatedAt": "2014-01-20T20:33:07Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Break things, no.  Squat on prime name-real-estate, a little.\n",
          "createdAt": "2014-01-21T08:18:48Z",
          "updatedAt": "2014-01-21T08:18:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 337,
      "id": "MDExOlB1bGxSZXF1ZXN0MTEzMzI1ODc=",
      "title": "Correct very minor grammatical error in section 8.3",
      "url": "https://github.com/httpwg/http2-spec/pull/337",
      "state": "MERGED",
      "author": "grahame",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The sentence in 8.3:\n\n\"CONNECT is primarily used with HTTP proxies to **established** a TLS session with a server for the purposes of interacting with https resources.\"\n\n... does not read. I believe it should be:\n\n\"CONNECT is primarily used with HTTP proxies to **establish** a TLS session with a server for the purposes of interacting with https resources.\"\n\nThis pull request fixes this incredibly minor issue.\n",
      "createdAt": "2014-01-08T18:16:48Z",
      "updatedAt": "2014-01-08T18:18:41Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "d4a92ff0adb1e242586d4faacb67cc2f1b7533b9",
      "headRepository": "grahame/http2-spec",
      "headRefName": "master",
      "headRefOid": "1c546475ad206ad9f569520421e018b910fad50b",
      "closedAt": "2014-01-08T18:18:41Z",
      "mergedAt": "2014-01-08T18:18:41Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b1e46bb15bac2a8d234da36ee3b4d12ae6e9f21c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 353,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE3OTYwNDA=",
      "title": "Address flow control int31 overflow in SETTINGS",
      "url": "https://github.com/httpwg/http2-spec/pull/353",
      "state": "CLOSED",
      "author": "gongloo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-01-23T10:46:05Z",
      "updatedAt": "2014-06-16T19:48:08Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "2e860fdec27018c6a0357bb85b3198b4869ed8d9",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "730517ca238acec2c09bae8998ceca6631aa26ac",
      "closedAt": "2014-01-23T10:56:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 358,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4MzcwMDk=",
      "title": "Rename GOAWAY to GTFO.",
      "url": "https://github.com/httpwg/http2-spec/pull/358",
      "state": "MERGED",
      "author": "gongloo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-01-24T09:09:45Z",
      "updatedAt": "2014-06-13T06:55:58Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "399e0a83382d7684f3887f8b230a27a6a2c32494",
      "headRepository": "gongloo/http2-spec",
      "headRefName": "master",
      "headRefOid": "23639de94485a690598002b5d8b900da9cef31a8",
      "closedAt": "2014-01-24T09:41:23Z",
      "mergedAt": "2014-01-24T09:41:23Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a3fa3144dd9f65bc3140c312395bd8878e336046"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 361,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4Mzg5MDM=",
      "title": "Add requirements for ephemeral keying",
      "url": "https://github.com/httpwg/http2-spec/pull/361",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-01-24T10:18:16Z",
      "updatedAt": "2014-06-14T19:10:13Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ec234b069d6b62b37568cc908e105a453d6c87ab",
      "headRepository": "ekr/http2-spec",
      "headRefName": "ephemeral_requirements",
      "headRefOid": "09392f0235934fd09e8d3518f7b31bb5bcfac5e6",
      "closedAt": "2014-01-24T10:23:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, taken: https://github.com/http2/http2-spec/commit/b5f037a8dc34d47918b4803923b4eefbb0a1e5eb\n",
          "createdAt": "2014-01-24T10:23:46Z",
          "updatedAt": "2014-01-24T10:23:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 364,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE4ODYwMDY=",
      "title": "Priority strawman",
      "url": "https://github.com/httpwg/http2-spec/pull/364",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "prioritisation"
      ],
      "body": "For #270.\n",
      "createdAt": "2014-01-26T21:29:58Z",
      "updatedAt": "2014-07-15T17:49:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "939b908bdcd63eb1e56ea1a662e25b27566375d4",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "priority",
      "headRefOid": "e4a735a01325c63e50813e528aa4b814d9689617",
      "closedAt": "2014-03-11T14:54:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 366,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE5NTY4MzQ=",
      "title": "Rename GTFO to GOAWAY",
      "url": "https://github.com/httpwg/http2-spec/pull/366",
      "state": "MERGED",
      "author": "dcsommer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is almost a straight revert of the various GOAWAY -> GTFO changes. It seems like this is the popular move as per the discussion on the httpbis mailing list.\n\nArguments for the revert:\n1. GOAWAY is self-descriptive and serves it purpose well.\n2. Editorial changes that don't clearly improve the spec should be discouraged so we can reach a stable spec sooner (granted this change doesn't affect the wire at all, but documentation churn counts too).\n3. GTFO is crass and doesn't belong in internet standards.\n4. GTFO, if it really stands for \"General Termination of Future Operations,\" has a surprising definition and may produce confusion. We should strive for absolute clarity above all else in editorial changes.\n",
      "createdAt": "2014-01-28T17:48:06Z",
      "updatedAt": "2014-06-12T09:13:49Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "3847f2f91c39a194888dc97b644a3c9dbc4a2a7b",
      "headRepository": "dcsommer/http2-spec",
      "headRefName": "master",
      "headRefOid": "c9f30c0d75a0011259d87f3047bc739395e14616",
      "closedAt": "2014-01-28T18:10:01Z",
      "mergedAt": "2014-01-28T18:10:01Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "de5308d15dddaf24c015b00252e5d06982fc7e50"
      },
      "comments": [
        {
          "author": "mcantelon",
          "authorAssociation": "NONE",
          "body": "Boo! You guys are no fun.\n",
          "createdAt": "2014-01-28T19:51:21Z",
          "updatedAt": "2014-01-28T19:51:21Z"
        },
        {
          "author": "dmaison",
          "authorAssociation": "NONE",
          "body": "goaway is just as bad as gtfo for the same reasons as the argument against gtfo... just called it disconnectclient or endcommunication if you're going to be a grumplestiltskin.\n",
          "createdAt": "2014-01-28T19:58:39Z",
          "updatedAt": "2014-01-28T19:58:39Z"
        },
        {
          "author": "seanmcelroy",
          "authorAssociation": "NONE",
          "body": "QUENCH may be a better, more descriptive word that has been used before in RFC's (for TCP Source Quench messages)\n",
          "createdAt": "2014-01-28T20:00:29Z",
          "updatedAt": "2014-01-28T20:00:29Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we should call it BIKESHED.\n\nOn Tue, Jan 28, 2014 at 12:00 PM, Sean McElroy notifications@github.comwrote:\n\n> QUENCH may be a better, more descriptive word that has been used before in\n> RFC's (for TCP Source Quench messages)\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/pull/366#issuecomment-33518291\n> .\n",
          "createdAt": "2014-01-28T20:01:37Z",
          "updatedAt": "2014-01-28T20:01:37Z"
        },
        {
          "author": "AlekseyKorzun",
          "authorAssociation": "NONE",
          "body": "Here we go.. useless HN circle jerk. \n",
          "createdAt": "2014-01-28T20:05:41Z",
          "updatedAt": "2014-01-28T20:05:41Z"
        },
        {
          "author": "nvartolomei",
          "authorAssociation": "NONE",
          "body": ":cat2:\n",
          "createdAt": "2014-01-28T20:06:36Z",
          "updatedAt": "2014-01-28T20:06:36Z"
        },
        {
          "author": null,
          "authorAssociation": "NONE",
          "body": "How about STFU?\n",
          "createdAt": "2014-01-28T20:10:24Z",
          "updatedAt": "2014-01-28T20:10:24Z"
        },
        {
          "author": "lloydwatkin",
          "authorAssociation": "NONE",
          "body": "Boo!\n",
          "createdAt": "2014-01-28T20:18:03Z",
          "updatedAt": "2014-01-28T20:18:03Z"
        },
        {
          "author": "sneakyness",
          "authorAssociation": "NONE",
          "body": ":-1: \n",
          "createdAt": "2014-01-28T20:26:07Z",
          "updatedAt": "2014-01-28T20:26:07Z"
        },
        {
          "author": "fnordbg",
          "authorAssociation": "NONE",
          "body": "This commit should be reverted. It's time we stop behaving like oversensitive automatons and display the beautiful human quality that is a sense of humor every once in a while.\n",
          "createdAt": "2014-01-28T20:30:41Z",
          "updatedAt": "2014-01-28T20:30:41Z"
        },
        {
          "author": "dmaison",
          "authorAssociation": "NONE",
          "body": "^ this\n",
          "createdAt": "2014-01-28T20:33:03Z",
          "updatedAt": "2014-01-28T20:33:03Z"
        },
        {
          "author": "sssilver",
          "authorAssociation": "NONE",
          "body": "^ that\n",
          "createdAt": "2014-01-28T20:33:42Z",
          "updatedAt": "2014-01-28T20:33:42Z"
        },
        {
          "author": "rtpg",
          "authorAssociation": "NONE",
          "body": "how about something like PLZSTOP? it's slightly humorous, but it actually reflects what is wanted (if I understood the spec correctly)\n",
          "createdAt": "2014-01-28T20:39:05Z",
          "updatedAt": "2014-01-28T20:39:05Z"
        },
        {
          "author": "hrenfroe",
          "authorAssociation": "NONE",
          "body": "GOAWAY is clearer for non-native English speakers, easier to pronounce, and more professionally appropriate than the common connotational definition of GTFO. There are times and places for pushing the boundaries of professional speech, but the HTTP2 spec isn't one of them.\n",
          "createdAt": "2014-01-28T20:50:17Z",
          "updatedAt": "2014-01-28T20:50:17Z"
        },
        {
          "author": "adriancole",
          "authorAssociation": "NONE",
          "body": "At least the pendulum didn't swing the other way  NICETALKINGTOYOU\n",
          "createdAt": "2014-01-28T21:13:37Z",
          "updatedAt": "2014-01-28T21:13:37Z"
        },
        {
          "author": "dcsommer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This revert is for the express purpose of stopping endless bikeshedding. We shouldn't encourage trivial changes to frame names. If the name is good enough, it should stay.\n\nI'm all for fun and games, but clarity and concision (as well as spec stability) come first.\n\nFor those that prefer GTFO, please explain how it is clearer than GOAWAY (please consider an international audience too).\n",
          "createdAt": "2014-01-28T21:36:26Z",
          "updatedAt": "2014-01-28T21:37:01Z"
        },
        {
          "author": "adriancole",
          "authorAssociation": "NONE",
          "body": "so mean spirited, this change.\n\n```\nGet\nOut\nAnd\nWhip\nA\nYouth\n```\n",
          "createdAt": "2014-01-28T21:39:08Z",
          "updatedAt": "2014-01-28T21:39:08Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Could always name it SHUTDOWN (yay SCTP)\n\nOn Tue, Jan 28, 2014 at 1:39 PM, Adrian Cole notifications@github.comwrote:\n\n> so mean spirited, this change.\n> \n> Get\n> Out\n> And\n> Whip\n> A\n> Youth\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/pull/366#issuecomment-33529266\n> .\n",
          "createdAt": "2014-01-28T21:41:35Z",
          "updatedAt": "2014-01-28T21:41:35Z"
        },
        {
          "author": "sssilver",
          "authorAssociation": "NONE",
          "body": "\"International audience\" here. I'm Armenian, English isn't my native language, not even my 2nd language.\n\nGTFO to me is more meaningful and more concise than GOAWAY, or any other option mentioned in the comments. GTFO to me doesn't produce any confusion and its actual definition of \"General Termination of Future Operations\" is actually nice, smart, and descriptive rather than \"surprising\" in any negative sense. It also formally de-crasses the word. Of course you can tell me that I'm just a single example, but then again you can tell that to any amount of people.\n\nPretty much the only valid argument out of the posted ones is that GTFO is crass (see I didn't know what \"crass\" meant before reading this). Everything else about descriptiveness and understandability by \"international audience\" are in my opinion totally irrelevant and unfair.\n",
          "createdAt": "2014-01-28T21:47:02Z",
          "updatedAt": "2014-01-28T21:47:02Z"
        },
        {
          "author": "dcsommer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@sssilver thanks for the internationalization datapoint and on-topic discussion! Can you elaborate on how GOAWAY is not clear, and how GTFO is clearer?\n\nTo me, the main argument is that GTFO is not meaningfully _more_ clear than GOAWAY.\n",
          "createdAt": "2014-01-28T21:54:04Z",
          "updatedAt": "2014-01-28T21:54:04Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "If folks have serious contributions to make, they should be on the mailing list, not here, as per https://github.com/http2/http2-spec/blob/master/README.md#contributing\n\nNow I get to try out @eteled... \n",
          "createdAt": "2014-01-28T21:54:47Z",
          "updatedAt": "2014-01-28T21:54:47Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@eteled START\n",
          "createdAt": "2014-01-28T21:54:54Z",
          "updatedAt": "2014-01-28T21:54:54Z"
        },
        {
          "author": "dmaison",
          "authorAssociation": "NONE",
          "body": "@dcsommer Neither option is appropriate or clear... they're both childish choices and neither are semantically appropriate. I've seen some much better options in this thread. if this change were actually about caring about professionalism, clarity of meaning, or necessity, the innumerable amount of better choices (SHUTDOWN, ENDCONNECTION, QUENCH, etc...) should have been used over GOAWAY or GTFO... But its not.. this is about personal preference. \n\nthis change made nothing better, it made nothing worse. In my opinion, for that reason, it should be reverted.\n",
          "createdAt": "2014-01-28T22:04:29Z",
          "updatedAt": "2014-01-28T22:04:29Z"
        },
        {
          "author": "adriancole",
          "authorAssociation": "NONE",
          "body": "FWIW, and for lack of anyone else talking about a pro of GTFO.  When at the working group, a lot of thick topics were discussed at length and everyone there seemed 100% dedicated to having the best spec there is.  GTFO, as a word, is harmless to implementation for reasons including the opcode is the same.  IOTW, the binary representation is the same.  There's no technical reason why it matters.\n\nI am one of the implementors of this specification.  When the change was suggested towards GTFO, I felt _motivated_ I mean the audience of this spec are implementors, some of which may be uptight about crassness others less so.\n\nIf you look at github (ps this is on github) there's ample evidence that implementors are motivated by words that aren't boring.  For example, there's a popular package manager called \"fpm\".  Guess what that stands for?\n\nI'm not saying go back and re-word everything to be fresh, rather have patience with those who are literally implementing this, in open source, and are ok with the choice.  Expect many more implementors to arise from github, a place relatively unburdened by crass-ness or location.\n",
          "createdAt": "2014-01-28T22:05:13Z",
          "updatedAt": "2014-01-28T22:05:13Z"
        },
        {
          "author": "sssilver",
          "authorAssociation": "NONE",
          "body": "@dcsommer I'll split the answer to 2 sections.\n1. AWAY vs. Out -- AWAY implies a certain longish physical distance, whereas Out seems to imply just \"out\".\n2. AWAY vs \"General Termination of Future Operations\" -- obviously the second is much more clear and descriptive.\n",
          "createdAt": "2014-01-28T22:06:49Z",
          "updatedAt": "2014-01-28T22:09:00Z"
        },
        {
          "author": "pr3d4t0r",
          "authorAssociation": "NONE",
          "body": "GTFO would be my vote.  No future operations, full connection termination, it describes the action best.\n",
          "createdAt": "2014-01-28T22:14:13Z",
          "updatedAt": "2014-01-28T22:15:14Z"
        },
        {
          "author": "adriancole",
          "authorAssociation": "NONE",
          "body": "@pr3d4t0r if you feel strongly, mail on this thread as not everyone there are on github to see your pov http://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/0275.html\n",
          "createdAt": "2014-01-28T23:31:33Z",
          "updatedAt": "2014-01-28T23:31:33Z"
        },
        {
          "author": "pr3d4t0r",
          "authorAssociation": "NONE",
          "body": "@adriancole - will do, thanks.  I need to dig my W3C mailing list info; haven't used it in years.  Cheers!\n",
          "createdAt": "2014-01-29T00:07:20Z",
          "updatedAt": "2014-01-29T00:07:20Z"
        },
        {
          "author": "pr3d4t0r",
          "authorAssociation": "NONE",
          "body": "From the W3C mailing list:\n\n> I expressed this in the\n> GitHub comments about the issue, echoing it here as well because this\n> mailing list has a wider audience.\n> \n> Use of GTFO is fine. Anyone arguing\n> that because foreign speakers may not understand potential slang is\n> being na\u00efve or needs to get out more. I've managed development teams in\n> Moscow, Novosibirsk, Kiev, the San Francisco Bay Area, London, and\n> Japan. The use of slang or jargon derived from English in technical\n> documentation, implementations, code, or configuration has never\n> deterred anybody from applying the appropriate knowledge. GOAWAY vs.\n> GTFO -- if I were to implement a server or a client handler for this,\n> I'd go for GTFO as the most meaningful (and perhaps get a secret\n> chuckle, sure).\n> \n> So -- can we keep this instead? Think of HTTP status\n> code 418 IMATEAPOT (which is Russian slang for \"I don't know what I'm\n> doing\"). Not many web servers or app servers implement it, granted, but\n> it's part of the official spec. And I've known teams in the US and\n> Europe who've used 418 as a placeholder for an app RESTful handler that\n> is only mocked up/yet to be implemented.\n\nThanks, @adriancole :)\n\nCheers!\n",
          "createdAt": "2014-01-29T16:31:34Z",
          "updatedAt": "2014-01-29T16:31:34Z"
        },
        {
          "author": "adriancole",
          "authorAssociation": "NONE",
          "body": "## From Raphael who wanted to post on this ml, but had problems doing so:\n\nAll made points aside, I couldn't find a very important one; to me actually\nbeing the most important.\n\nIf you think about what \"Get Out!\" could also mean (the offensive TF part\nis actually interchangable...), it becomes even more confusing. An\nexpression of disbelief is surely the very last thing this acronym should\nimply. But it did to me; even as a non-native speaker (German).\n\"General Termination of Future Operations\" is, also in my eyes, a made-up\nterm to fit the joke. It is more fitting than GOAWAY, but once you have\nread GTFO your mind is sort of made up, since you spelled GTFO in full in\nyour head, as soon as reading the acronym.\n\nMy suggestion on this one is: Simply get rid of \"General\" / \"G\" and add\n\"of\" to the acronym! TOFO still has a nice ring to it, is quick and easy to\npronounce and \"Termination Of Future Operations\" would be sufficiant\ndescriptive.\n\nregards\n\n## Raphael Beer\n\n(yes, that's my real lastname :P )\nOn Jan 29, 2014 8:31 AM, \"Eugene Ciurana\" notifications@github.com wrote:\n\n> From the W3C mailing list:\n> \n> I expressed this in the\n> GitHub comments about the issue, echoing it here as well because this\n> mailing list has a wider audience.\n> \n> Use of GTFO is fine. Anyone arguing\n> that because foreign speakers may not understand potential slang is\n> being na\u00efve or needs to get out more. I've managed development teams in\n> Moscow, Novosibirsk, Kiev, the San Francisco Bay Area, London, and\n> Japan. The use of slang or jargon derived from English in technical\n> documentation, implementations, code, or configuration has never\n> deterred anybody from applying the appropriate knowledge. GOAWAY vs.\n> GTFO -- if I were to implement a server or a client handler for this,\n> I'd go for GTFO as the most meaningful (and perhaps get a secret\n> chuckle, sure).\n> \n> So -- can we keep this instead? Think of HTTP status\n> code 418 IMATEAPOT (which is Russian slang for \"I don't know what I'm\n> doing\"). Not many web servers or app servers implement it, granted, but\n> it's part of the official spec. And I've known teams in the US and\n> Europe who've used 418 as a placeholder for an app RESTful handler that\n> is only mocked up/yet to be implemented.\n> \n> Thanks, @adriancole https://github.com/adriancole :)\n> \n> Cheers!\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/pull/366#issuecomment-33601391\n> .\n",
          "createdAt": "2014-01-30T15:32:30Z",
          "updatedAt": "2014-01-30T15:32:30Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 367,
      "id": "MDExOlB1bGxSZXF1ZXN0MTE5NjMzMTA=",
      "title": "Reorder DATA frame padding flags.",
      "url": "https://github.com/httpwg/http2-spec/pull/367",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-01-28T20:17:31Z",
      "updatedAt": "2014-06-19T02:05:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "c094828974b1d029544813aae81ee3d9309f8bc7",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "reorder_padding_flags",
      "headRefOid": "308d4231f0cedeb639ee60909261cf0c2fd1adc4",
      "closedAt": "2014-01-28T21:16:25Z",
      "mergedAt": "2014-01-28T21:16:25Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Felt that this order was clearer since the requirement then back-referenced the previous flag instead of forward-referencing it. Feel free to ignore if you disagree.\n",
          "createdAt": "2014-01-28T20:18:29Z",
          "updatedAt": "2014-01-28T20:18:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I considered that option.  I think that it's easier if the order of the bits is the same as the order the fields appear.  I'll reopen and take this if others point this out though.\n",
          "createdAt": "2014-01-28T20:59:44Z",
          "updatedAt": "2014-01-28T20:59:44Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Confused by that. In the as-written docs the flags are:\n\n[R, R, R, R, PAD_LOW, PAD_HIGH, R, END_STREAM]\n\nbut the frame layout is:\n\n[PAD_HIGH (8)], [PAD_LOW(8)]\n\nso the order of the bits is opposite the field order.\n",
          "createdAt": "2014-01-28T21:07:04Z",
          "updatedAt": "2014-01-28T21:07:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's chalk this up as yet another case of blindness on my part.\n",
          "createdAt": "2014-01-28T21:16:21Z",
          "updatedAt": "2014-01-28T21:16:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 368,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIwMDE3MzQ=",
      "title": "Minor editorial changes to HPACK.",
      "url": "https://github.com/httpwg/http2-spec/pull/368",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-01-29T17:50:31Z",
      "updatedAt": "2014-01-30T14:38:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "854ce832c5e0a6845a1b88dd243ca5ebce4db17d",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "hpack_updates",
      "headRefOid": "0294563c96b63c5a78f05a7ccb46eadbd1c3bdc8",
      "closedAt": "2014-01-30T14:18:25Z",
      "mergedAt": "2014-01-30T14:18:25Z",
      "mergedBy": "hruellan",
      "mergeCommit": null,
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Editorial changes through Section 3.1.2. Further updates forthcoming.\n",
          "createdAt": "2014-01-29T17:51:02Z",
          "updatedAt": "2014-01-29T17:51:02Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Rebased onto current master.\n",
          "createdAt": "2014-01-30T13:16:54Z",
          "updatedAt": "2014-01-30T13:16:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 369,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIwNDQxNDQ=",
      "title": "Describe handling of invalid values for SETTINGS_ENABLE_PUSH.",
      "url": "https://github.com/httpwg/http2-spec/pull/369",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "SETTINGS_ENABLE_PUSH values different from 0 or 1 should be handled as a connection error.\n",
      "createdAt": "2014-01-30T17:04:55Z",
      "updatedAt": "2014-06-18T05:27:05Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0fc43b5af886048fd03873bd6e92d03aa67e7e9f",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "settings",
      "headRefOid": "d7a68ba00716bed2e9ff27a36aec908ec5d730f0",
      "closedAt": "2014-02-03T18:05:45Z",
      "mergedAt": "2014-02-03T18:05:45Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 371,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIwNDc0NDI=",
      "title": "Clean up some reference links.",
      "url": "https://github.com/httpwg/http2-spec/pull/371",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-01-30T18:21:09Z",
      "updatedAt": "2014-07-04T04:27:32Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0fc43b5af886048fd03873bd6e92d03aa67e7e9f",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "more_hpack_ed_updates",
      "headRefOid": "0ef7ca68f538a15067d5bf75b64dc09c150c4bec",
      "closedAt": "2014-01-31T10:51:17Z",
      "mergedAt": "2014-01-31T10:51:17Z",
      "mergedBy": "hruellan",
      "mergeCommit": {
        "oid": "dda86859a9d6fef95f83789a30406c94f7e4081e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 372,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIwNjYwMDQ=",
      "title": "refine approach to hop-by-hop headers; addresses #21.",
      "url": "https://github.com/httpwg/http2-spec/pull/372",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-01-31T03:21:50Z",
      "updatedAt": "2014-07-04T23:08:03Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0fc43b5af886048fd03873bd6e92d03aa67e7e9f",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "hop",
      "headRefOid": "b0c474295a215046bd4e7a6444dcc3b36d4f5602",
      "closedAt": "2014-01-31T18:16:02Z",
      "mergedAt": "2014-01-31T18:16:02Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 374,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIxNDQyODA=",
      "title": "Add END_SEGMENT flag and associated requirement. Fixes #350.",
      "url": "https://github.com/httpwg/http2-spec/pull/374",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@jpinner, did you just forget to create the pull request?\n",
      "createdAt": "2014-02-03T18:07:55Z",
      "updatedAt": "2014-02-03T21:24:49Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "02c0cbc34bcfa4348de9d9f8e78bf6f29e557e27",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "end_segment",
      "headRefOid": "8766364fb3dd45bb9ad13f6ca36b2e59b95499ed",
      "closedAt": "2014-02-03T20:53:15Z",
      "mergedAt": "2014-02-03T20:53:15Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Didn't realize you couldn't merge from the referenced issue. What do you need from me to merge the commit?\n",
          "createdAt": "2014-02-03T18:56:58Z",
          "updatedAt": "2014-02-03T18:56:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Just some indication that you think that this is ready, that's all.\n",
          "createdAt": "2014-02-03T19:19:19Z",
          "updatedAt": "2014-02-03T19:19:19Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Do you think we need to add a requirement for must emit? or is the not coalesce sufficient?\n",
          "createdAt": "2014-02-03T19:24:03Z",
          "updatedAt": "2014-02-03T19:24:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Now that you mention it, MUST preserve is really what we are going for.\n",
          "createdAt": "2014-02-03T19:59:41Z",
          "updatedAt": "2014-02-03T19:59:41Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "added \"MUST preserve\"\n",
          "createdAt": "2014-02-03T20:21:35Z",
          "updatedAt": "2014-02-03T20:21:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 375,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIxODcxMzk=",
      "title": "Add insert flag to priority handling.",
      "url": "https://github.com/httpwg/http2-spec/pull/375",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "prioritisation"
      ],
      "body": "Adds possibility to insert a new bag in the middle of the dependency\nlist of a group.\nDescribes how re-prioritisation are handled.\nIncludes some other misc editorial changes.\n",
      "createdAt": "2014-02-04T17:24:31Z",
      "updatedAt": "2014-06-14T03:31:45Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "priority",
      "baseRefOid": "e4a735a01325c63e50813e528aa4b814d9689617",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "priority-update",
      "headRefOid": "644d7cfcb8f7c15df35b6a9c02bb3d270417ac23",
      "closedAt": "2014-03-11T14:54:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 376,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIyMTU5MjA=",
      "title": "Spelling Corrections",
      "url": "https://github.com/httpwg/http2-spec/pull/376",
      "state": "MERGED",
      "author": "tdmackey",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Remove trailing whitespace\n- Spelling corrections\n",
      "createdAt": "2014-02-05T10:21:43Z",
      "updatedAt": "2014-06-18T19:29:21Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6b59822f4b0e2c529d309aa6c94a3d248936f585",
      "headRepository": "tdmackey/http2-spec",
      "headRefName": "typos",
      "headRefOid": "c7356b771bfc952623f5fe65a4670d32bb9f9c23",
      "closedAt": "2014-02-05T17:40:20Z",
      "mergedAt": "2014-02-05T17:40:20Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "43ca393dff1257c0cb3359e6561c746d3cc4159f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 377,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIyNTU5NzE=",
      "title": "Fix grammatical mistake.",
      "url": "https://github.com/httpwg/http2-spec/pull/377",
      "state": "MERGED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-02-06T06:35:13Z",
      "updatedAt": "2014-06-14T00:55:19Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "939b908bdcd63eb1e56ea1a662e25b27566375d4",
      "headRepository": null,
      "headRefName": "Grammar",
      "headRefOid": "4357b22a32aef05b20c8b8b8d6f179db89fb53bd",
      "closedAt": "2014-02-07T23:30:57Z",
      "mergedAt": "2014-02-07T23:30:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 378,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIyNTYwNDc=",
      "title": "Consistently use \"HTTP/2 connection\" as opposed to \"HTTP connection\".",
      "url": "https://github.com/httpwg/http2-spec/pull/378",
      "state": "MERGED",
      "author": "willchan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-02-06T06:39:33Z",
      "updatedAt": "2014-06-14T19:00:44Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "939b908bdcd63eb1e56ea1a662e25b27566375d4",
      "headRepository": null,
      "headRefName": "EditorialNit",
      "headRefOid": "b598d2099871a4863cc2387a9167ce1201b87aaf",
      "closedAt": "2014-02-06T06:55:30Z",
      "mergedAt": "2014-02-06T06:55:30Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "2eb901fc87f3b732c228c2b729f79cc94b50dc7f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 379,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIzMjYwNTI=",
      "title": "Small clarification on what kind of extension",
      "url": "https://github.com/httpwg/http2-spec/pull/379",
      "state": "MERGED",
      "author": "dcsommer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a really minor thing, but as I was reading the spec, I was wondering for a bit what \"extensions\" meant (user defined? something else?). I think the intent is to reference extensions defined by future RFCs that revise HTTP/2 protocol.\n",
      "createdAt": "2014-02-07T19:38:55Z",
      "updatedAt": "2014-07-04T16:04:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7a5a9de54f8e58ccc6b0a405af188d36e7377320",
      "headRepository": "dcsommer/http2-spec",
      "headRefName": "master",
      "headRefOid": "034ca7b848ea90530e4a69c6b45783874ce2dcf2",
      "closedAt": "2014-02-07T23:31:26Z",
      "mergedAt": "2014-02-07T23:31:26Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "339eb662420aee599eda2b9209c0822514bd7db9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 380,
      "id": "MDExOlB1bGxSZXF1ZXN0MTIzMzg2ODQ=",
      "title": "Move Pad High and Pad Low to right after frame header for HEADERS",
      "url": "https://github.com/httpwg/http2-spec/pull/380",
      "state": "MERGED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Padding is made to a frame and other frames\n(DATA and CONTINUATION) have these 2 bytes right after the frame\nheader. It is easier for implementation to put the same constructs\nin the same position.\n",
      "createdAt": "2014-02-08T03:40:58Z",
      "updatedAt": "2014-06-16T13:05:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "bd9ac3752c8c8d6eeab1168cecc69f1fcf614ac7",
      "headRepository": "tatsuhiro-t/http2-spec",
      "headRefName": "move-pad-high-low-right-after-frame-header",
      "headRefOid": "bca86df1a873de0cc65adf2375e3ad2192aafc73",
      "closedAt": "2014-02-08T05:54:24Z",
      "mergedAt": "2014-02-08T05:54:24Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 382,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI0ODI4NjQ=",
      "title": "Fix accidental re-numbering of ENHANCE_YOUR_CALM",
      "url": "https://github.com/httpwg/http2-spec/pull/382",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-02-12T21:10:15Z",
      "updatedAt": "2014-07-08T17:11:17Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "e6caef7733e7bdc4f602f9aa1002d175d2cbaba4",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "fix_renumbering",
      "headRefOid": "7d843ab7861413a2b50ea3fcf4bc9ed12a7a3e1c",
      "closedAt": "2014-02-12T21:49:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Accidental?\n",
          "createdAt": "2014-02-12T21:49:29Z",
          "updatedAt": "2014-02-12T21:49:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 383,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI0ODQ2NTc=",
      "title": "editorial fix on Representation format",
      "url": "https://github.com/httpwg/http2-spec/pull/383",
      "state": "MERGED",
      "author": "Jxck",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "editorial fix on Representation format\n",
      "createdAt": "2014-02-12T21:50:02Z",
      "updatedAt": "2014-07-06T22:54:18Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "e6caef7733e7bdc4f602f9aa1002d175d2cbaba4",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "8f1bf5dd60eb7816c582b488c97eaba644d76692",
      "closedAt": "2014-02-13T08:16:36Z",
      "mergedAt": "2014-02-13T08:16:36Z",
      "mergedBy": "hruellan",
      "mergeCommit": {
        "oid": "068a7f81f88434188626a16261d8376fd4380c12"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 387,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI2MzgwODg=",
      "title": "Suggested edits",
      "url": "https://github.com/httpwg/http2-spec/pull/387",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "... up to Frame Definitions. \n",
      "createdAt": "2014-02-18T05:39:00Z",
      "updatedAt": "2014-06-14T23:08:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "29bde7427df79b978c841b923191fc1a0ea8c150",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "edits",
      "headRefOid": "a0ff2951dba3dbcaf580cf04c2919573b42bd174",
      "closedAt": "2014-02-18T17:32:08Z",
      "mergedAt": "2014-02-18T17:32:08Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "651bf67ae19d4a219b4935d59a856854c3fa8e9a"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Oh, and sorry for doing it on a branch here; I thought I had forked... :-/\n",
          "createdAt": "2014-02-18T05:42:26Z",
          "updatedAt": "2014-02-18T05:42:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Feel free to create branches in future.  I do.  It saves a lot of mucking around with git remote/fetch/pull/push etc...\n",
          "createdAt": "2014-02-18T17:33:14Z",
          "updatedAt": "2014-02-18T17:33:14Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 393,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI2NTY0MzE=",
      "title": "remove description of unsupported or unrecognized settings",
      "url": "https://github.com/httpwg/http2-spec/pull/393",
      "state": "MERGED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Extension of settings was dropped in #95\n",
      "createdAt": "2014-02-18T15:51:41Z",
      "updatedAt": "2014-07-05T13:32:31Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "8aeec77cf80352c60c113b2ccf1733c13a921845",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20140219",
      "headRefOid": "f4cd329de6d39c703cceb7267cdaad68f0893833",
      "closedAt": "2014-02-18T17:56:57Z",
      "mergedAt": "2014-02-18T17:56:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 394,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI2ODYxMDg=",
      "title": "Moar.",
      "url": "https://github.com/httpwg/http2-spec/pull/394",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Still sorting out my local env thanks to xml2rfc.py weirdness, so it may have syntax errors; will correct as I find.\n",
      "createdAt": "2014-02-19T06:40:58Z",
      "updatedAt": "2014-06-13T04:11:44Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "c3f1e9ab5bbf8ac719150d2d3465b9b612d40ea8",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "edits2",
      "headRefOid": "1a21cf730256bfea18254f140656cf7cba9f51fd",
      "closedAt": "2014-02-19T20:10:24Z",
      "mergedAt": "2014-02-19T20:10:24Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "249bd3f6f84a61bc8614b864c64dc9e60bb621f8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 396,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI2OTMwMzE=",
      "title": "Remove END_PUSH_PROMISE in favor of END_HEADERS",
      "url": "https://github.com/httpwg/http2-spec/pull/396",
      "state": "MERGED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This simplifies the text and makes flag consistent with CONTINUATION\nwhich only bears END_HEADERS.\n\nTechnically, both have the same meaning of ending sequence of\nheader block fragments. Therefore there is no reason to use the\ndifferent flag name for the same purpose.\n\nThis will also make the implementaion easier because most likely\nHEADERS and PUSH_PROMISE handling share the same code and\ndancing with END_PUSH_PROMISE and END_HEADERS is not fun.\nAlthough currently they have the same number, it is not\nguaranteed to the last. If they are guarenteed to be the same, then\nit is simpler to use the same name for same value.\n",
      "createdAt": "2014-02-19T11:08:34Z",
      "updatedAt": "2014-06-16T13:05:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "c3f1e9ab5bbf8ac719150d2d3465b9b612d40ea8",
      "headRepository": "tatsuhiro-t/http2-spec",
      "headRefName": "remove-end-push-promise-in-favor-of-end-headers",
      "headRefOid": "1a61eb5eddbd7385f79b39af9a50b09406aeff33",
      "closedAt": "2014-02-19T20:12:30Z",
      "mergedAt": "2014-02-19T20:12:30Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "2172a11006ecd4e327f8dbecd7766f0fc8770f2a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 406,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI3NDgwNjM=",
      "title": "Overview",
      "url": "https://github.com/httpwg/http2-spec/pull/406",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Proposal for solving #389.\n",
      "createdAt": "2014-02-20T14:40:27Z",
      "updatedAt": "2014-07-15T17:49:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "c7dd434d1a55877eb618e25ad76e2878fc1df56c",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "overview",
      "headRefOid": "6f906ba157df56c364b80faf4a3705df18d6be26",
      "closedAt": "2014-02-25T09:37:28Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 408,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI3Nzg5MjY=",
      "title": "link from WINDOW_UPDATE to the general section on flow control.",
      "url": "https://github.com/httpwg/http2-spec/pull/408",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "flow control"
      ],
      "body": "",
      "createdAt": "2014-02-21T03:57:40Z",
      "updatedAt": "2014-06-15T16:05:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ffae5a1643977cbc662b4ef95a457995f7ccac4f",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "edits4",
      "headRefOid": "6cdc5ad9c290f4420e333a64e102cb6a0a68ead7",
      "closedAt": "2014-02-21T17:00:55Z",
      "mergedAt": "2014-02-21T17:00:55Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a38fc1a64a89e31b54213fd3f62a3962cf7b8580"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 410,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI4MjkxOTQ=",
      "title": "Fix article",
      "url": "https://github.com/httpwg/http2-spec/pull/410",
      "state": "MERGED",
      "author": "flano-yuki",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "some editorial fix\n\na experiment -> an experiment\na Expect -> an Expect\n",
      "createdAt": "2014-02-23T03:46:40Z",
      "updatedAt": "2014-06-16T08:14:26Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6cced79404b99e61b70460300eb3cb05ed72fee9",
      "headRepository": "flano-yuki/http2-spec",
      "headRefName": "master",
      "headRefOid": "8ca1491d89d655c371083510cb9d59dd3c810ed8",
      "closedAt": "2014-02-23T04:36:37Z",
      "mergedAt": "2014-02-23T04:36:37Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "3f861f0bacd80f94ec70fc67328d1be507719e6a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 411,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI4Mjk2Nzc=",
      "title": "Fixing the example of trailer",
      "url": "https://github.com/httpwg/http2-spec/pull/411",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- TE: should be Tariler:\n- content-length should be removed\n- trailer should be in HEADERS\n- Foo should be another reasonable header - X-Checksum\n",
      "createdAt": "2014-02-23T05:17:35Z",
      "updatedAt": "2014-07-19T16:16:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "51bd1b6ff3e55c883803380bbae5215f121106de",
      "headRepository": "kazu-yamamoto/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "921f30b638d84c4a32d66111fba9707b3b59c6cf",
      "closedAt": "2014-02-25T00:16:38Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The example is correct.\n- TE is necessary: http://tools.ietf.org/html/rfc2616#section-14.39\n- Content-Length is permitted, and even useful: http://http2.github.io/http2-spec/#rfc.section.8.1.3.5\n- Yes, if the Trailers header field were present, it would be copied to the header block.\n- Foo is better than X-Anything: http://tools.ietf.org/html/rfc6648\n",
          "createdAt": "2014-02-23T22:31:45Z",
          "updatedAt": "2014-02-23T22:31:45Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "I'm not talking whether or not the syntax of this example is correct but\nwhether or not its semantics is reasonable.\n- RFC 2616 says: \"The TE request-header field indicates what extension transfer-codings it is willing to accept in the response and whether or not it is willing to accept trailer fields in a chunked transfer-coding.\" So, TE: has no information about the tailer in this example.\n- RFC 2616 says: \"An HTTP/1.1 message SHOULD include a Trailer header field in a message using chunked transfer-coding with a non-empty trailer... If no Trailer header field is present, the trailer SHOULD NOT include any header fields.\" So, this example should include \"Trailer: Foo\"\n- It is strange to include content-length because the sender cannot tell the length of the _entire_ body in advance.\n- Agreed on the X-Anything issue.\n",
          "createdAt": "2014-02-24T01:56:17Z",
          "updatedAt": "2014-02-24T01:56:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't get your point on TE.  The TE is necessary by my reading.  I'll include the Trailer header field.  No sense in violating a 2616 SHOULD.\n\nWe've actually had some lengthy discussions around the use of Content-Length.  It's a desirable property to include.  It allows recipients to know how much data to expect, and it has proven to be necessary for some servers.  I'd rather leave that in.\n",
          "createdAt": "2014-02-24T19:14:38Z",
          "updatedAt": "2014-02-24T19:14:38Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "- If I understand correctly, a typical story is: a browser sends TE: trailers. Then a server can tell that the browser can accept trailer and sends chunks and a trailer.\n- Yes, content-length is good for receivers _if_ available. But how does a sender know it in advance? If a server tries to send a file, the entire size is available in advance, in this case, content-length is added and _no_ chunks are used. If the server tries to relay a stream from CGI or Web app, it uses chucks because the entire size is not available in advance.\n",
          "createdAt": "2014-02-24T22:44:44Z",
          "updatedAt": "2014-02-24T22:44:44Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That's right.  I don't know why I didn't see that before.  I think that we can safely drop this one.\n\nThis is an example where perhaps the whole reason that chunked encoding is used is to gain access to trailers.\n",
          "createdAt": "2014-02-25T00:11:43Z",
          "updatedAt": "2014-02-25T00:11:43Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "I think \"trailer = foo\" is missing in the right side.\n",
          "createdAt": "2014-02-27T02:56:27Z",
          "updatedAt": "2014-02-27T02:56:27Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "I think that the reason why trailer is defined only for chunked is to add a feature to calculate, for instance, checksum on streaming. If we can gain access to the entire content (like static files), we can calculate the checksum in advance. But for streaming, it is impossible to calculate checksum in advance. The solution for streaming is the trailer.\n",
          "createdAt": "2014-02-27T03:00:49Z",
          "updatedAt": "2014-02-27T03:00:49Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "In other words, Foo: can be inserted into the header, not the trailer, in the case of files.\n",
          "createdAt": "2014-02-27T03:04:00Z",
          "updatedAt": "2014-02-27T03:04:00Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually, I was thinking that a file checksum could be a good example of a case where you potentially have a length, but still want to use trailers.  A length is something you can pull from filesystem metadata, but the checksum might need to be calculated and you don't want to read the file twice.\n",
          "createdAt": "2014-02-27T17:05:50Z",
          "updatedAt": "2014-02-27T17:05:50Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "For content-length, I'm not convinced yet. Where can I find the discussion to which you referred?\n\nIn HTTP/1.0, Content-Length is added if the entire size is available in advance. Otherwise, the connection must be closed to tell the end of stream (for example, from CGI).\n\nThe situation changed in HTTP/1.1 because the persist connection is now the default behavior. How can HTTP/1.1 handle streaming? The answer is chuncked. So, it is strange for me to use Content-Length: and chuncked at the same time. Yes, it is _possible_ to use both at the same time in some cases, but strange.\n",
          "createdAt": "2014-02-28T00:35:16Z",
          "updatedAt": "2014-02-28T00:35:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 412,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI4Mjk3NzY=",
      "title": "fix article",
      "url": "https://github.com/httpwg/http2-spec/pull/412",
      "state": "MERGED",
      "author": null,
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "l.815\nbefore: An endpoint MUST NOT send frames other than than <x:ref>HEADERS/x:ref or\nfix: An endpoint MUST NOT send frames other than <x:ref>HEADERS/x:ref or\n",
      "createdAt": "2014-02-23T05:39:48Z",
      "updatedAt": "2014-06-16T22:26:13Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "51bd1b6ff3e55c883803380bbae5215f121106de",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "31178ef77ff7a93f04666b849976bdeeccfe8df6",
      "closedAt": "2014-02-23T22:33:18Z",
      "mergedAt": "2014-02-23T22:33:18Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 414,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI4ODA0ODg=",
      "title": "Martin's overview changes",
      "url": "https://github.com/httpwg/http2-spec/pull/414",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #389.\n",
      "createdAt": "2014-02-24T23:24:49Z",
      "updatedAt": "2014-02-25T21:38:46Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "91dbb4bf7fc79720ec1504373c167ee00cad4ed4",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "overview-mt",
      "headRefOid": "0633c6370767cc3d2eea342cb3f70b334ab62d67",
      "closedAt": "2014-02-25T21:06:55Z",
      "mergedAt": "2014-02-25T21:06:55Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "645a4ee431a49bb5b1102cff8f33d9f6a1b33319"
      },
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes that's better!\n",
          "createdAt": "2014-02-25T09:36:28Z",
          "updatedAt": "2014-02-25T09:36:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 415,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI5MjEzNTg=",
      "title": "Drop deflate as a required content-encoding.",
      "url": "https://github.com/httpwg/http2-spec/pull/415",
      "state": "MERGED",
      "author": "swankjesse",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping"
      ],
      "body": "See http://lists.w3.org/Archives/Public/ietf-http-wg/2014JanMar/0699.html\n",
      "createdAt": "2014-02-25T20:14:52Z",
      "updatedAt": "2014-07-05T06:47:51Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "c39eafe46d9d8490528998b5c9da392c2690ed06",
      "headRepository": null,
      "headRefName": "gzip_only",
      "headRefOid": "6e4447aaa621d869dfdde69ace4dca1179611eb9",
      "closedAt": "2014-03-03T14:32:20Z",
      "mergedAt": "2014-03-03T14:32:20Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0eed229465c0dadb34e2c7a90a252f7e70f1dc5b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 420,
      "id": "MDExOlB1bGxSZXF1ZXN0MTMwOTU5Mzk=",
      "title": "Refining Prior Knowledge (for #418)",
      "url": "https://github.com/httpwg/http2-spec/pull/420",
      "state": "CLOSED",
      "author": "emile22",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "upgrade"
      ],
      "body": "I propose a section which describes the discovery about the support for HTTP2 during the domain name resolution.\n",
      "createdAt": "2014-03-02T21:34:03Z",
      "updatedAt": "2014-06-18T10:12:00Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a9f9304e95134f05f9bf2a758fd1b4fe14b2af36",
      "headRepository": "emile22/http2-spec",
      "headRefName": "master",
      "headRefOid": "3aaafe39fe7980f4f6d907ef112926db840797ce",
      "closedAt": "2014-06-05T19:58:38Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 432,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM0MDMyNDA=",
      "title": "Clarify text for PUSH_PROMISE",
      "url": "https://github.com/httpwg/http2-spec/pull/432",
      "state": "MERGED",
      "author": "dcsommer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I realize this is somewhat redundant given section 5.1.1, so I don't mind if this pull is rejected. The main reason I think this might be useful is since there are two different stream identifiers involved in PUSH_PROMISE: the promised stream id and the stream identifier in the common header. The extra sentence just makes it explicit how PUSH_PROMISE is linked to an earlier request. It also puts the following sentence in better context.\n",
      "createdAt": "2014-03-11T01:52:21Z",
      "updatedAt": "2014-07-28T02:21:42Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "05885351043e6705a71ba67b922724de7e088ce9",
      "headRepository": "dcsommer/http2-spec",
      "headRefName": "master",
      "headRefOid": "b308ff25c59b503f6899342fd10c91044269e258",
      "closedAt": "2014-03-11T06:02:55Z",
      "mergedAt": "2014-03-11T06:02:55Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "1839e915361cff633039ab602707c2216f85b078"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 433,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM1NDA0MDQ=",
      "title": "Fixing \"less than\" sign in 4.1.1.2.  Example 2: Encoding 1337 using a 5-...",
      "url": "https://github.com/httpwg/http2-spec/pull/433",
      "state": "MERGED",
      "author": "kiewic",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The \"less than\" sign should not be encoded when it is inside a <![CDATA[ ]]> section.\n",
      "createdAt": "2014-03-13T19:34:16Z",
      "updatedAt": "2014-03-14T09:10:45Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "8a5a6f4a93cd7d22654359bad487803dfde0f1e2",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "16764924fa76922070e31f1c27610af4db4e5bde",
      "closedAt": "2014-03-14T09:10:45Z",
      "mergedAt": "2014-03-14T09:10:45Z",
      "mergedBy": "hruellan",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 435,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM2NDM5MDU=",
      "title": "Priority refining",
      "url": "https://github.com/httpwg/http2-spec/pull/435",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Various modifications for improving the description of the priority mechanism.\n",
      "createdAt": "2014-03-17T16:49:51Z",
      "updatedAt": "2014-06-12T20:43:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "90d0426ef21e5c6a7df32ad1a763df03242351e5",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "priority",
      "headRefOid": "019ffdeedd7fef4f333f33535f2124513fa561a9",
      "closedAt": "2014-03-30T06:43:10Z",
      "mergedAt": "2014-03-30T06:43:10Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 436,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM2NDY1NDk=",
      "title": "Enable weight of 0.",
      "url": "https://github.com/httpwg/http2-spec/pull/436",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "prioritisation"
      ],
      "body": "Change the range of weight for a priority group to 0-255.\n0 means that no resource is to be allocated to the group, unless there is nothing else to do.\nIt enables an efficient way of pausing a set of streams.\n",
      "createdAt": "2014-03-17T17:39:15Z",
      "updatedAt": "2014-06-16T17:56:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "90d0426ef21e5c6a7df32ad1a763df03242351e5",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "priority-weight",
      "headRefOid": "415b6d0adc3e1ce3aedc9796d671d2f4c2905185",
      "closedAt": "2014-06-05T20:17:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; closing with no further action.\n",
          "createdAt": "2014-06-05T20:17:46Z",
          "updatedAt": "2014-06-05T20:17:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 437,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM3MzQ0MDk=",
      "title": "Editorial fix in PUSH_PROMISE and make PAD_LOW/PAD_HIGH bit consistent",
      "url": "https://github.com/httpwg/http2-spec/pull/437",
      "state": "MERGED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I believe that PAD_LOW and PAD_HIGH bits in DATA frame were not updated when the dependency based priority was merged. It is quite a headache for implementors if these bits differ across frames.\n",
      "createdAt": "2014-03-19T13:06:42Z",
      "updatedAt": "2014-06-14T11:56:04Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "90d0426ef21e5c6a7df32ad1a763df03242351e5",
      "headRepository": "tatsuhiro-t/http2-spec",
      "headRefName": "editorial-fix",
      "headRefOid": "45eef1308f3031515dae31ee0fae40ced6349cd4",
      "closedAt": "2014-03-19T16:26:30Z",
      "mergedAt": "2014-03-19T16:26:30Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6423e2ba2781c633aa746bf609cd46a5683f1db5"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, my bad.  I missed one.\n",
          "createdAt": "2014-03-19T16:26:48Z",
          "updatedAt": "2014-03-19T16:26:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 439,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM4MTc2MjY=",
      "title": "Integrate Alternate Services",
      "url": "https://github.com/httpwg/http2-spec/pull/439",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editor-ready"
      ],
      "body": "Fixes #349.\n",
      "createdAt": "2014-03-20T23:38:02Z",
      "updatedAt": "2014-06-16T07:42:58Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0ba3ef69cdf3b60d7222bec285d8579406d1d5c5",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "altsvc",
      "headRefOid": "9d7d5f6cdde10bcc432ba31e1a3254d4f8bb622c",
      "closedAt": "2014-03-25T23:01:58Z",
      "mergedAt": "2014-03-25T23:01:58Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 440,
      "id": "MDExOlB1bGxSZXF1ZXN0MTM4NDMzNzc=",
      "title": "Update static table indexes in example",
      "url": "https://github.com/httpwg/http2-spec/pull/440",
      "state": "CLOSED",
      "author": "tomyan",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I _think_ these indexes should be 6 and 4 rather than 7 and 6 - in the static table 7 and 6 are \":scheme: https\" and \":scheme: http\" respectively.\n",
      "createdAt": "2014-03-21T16:18:15Z",
      "updatedAt": "2014-06-16T13:04:42Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0ba3ef69cdf3b60d7222bec285d8579406d1d5c5",
      "headRepository": "tomyan/http2-spec",
      "headRefName": "master",
      "headRefOid": "f6166642a0e4af7eef78701011a0cade3a8f4fa8",
      "closedAt": "2014-03-21T17:10:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "The current example is correct -- as the static table is referenced, those headers get added to the header table, which offsets the static table indices.\n",
          "createdAt": "2014-03-21T16:57:12Z",
          "updatedAt": "2014-03-21T16:57:12Z"
        },
        {
          "author": "tomyan",
          "authorAssociation": "NONE",
          "body": "Ah, of course. Thanks\n",
          "createdAt": "2014-03-21T17:10:23Z",
          "updatedAt": "2014-03-21T17:10:23Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 449,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQzODUyNjY=",
      "title": "Editorial fix",
      "url": "https://github.com/httpwg/http2-spec/pull/449",
      "state": "MERGED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Unless I am completely wrong, the Upgrade response header field also includes h2c since this is a cleartext http2 negotiated.\n",
      "createdAt": "2014-04-04T14:29:46Z",
      "updatedAt": "2014-04-04T15:23:02Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7feade2058c7218d51823a08d7d96d8bd7ab0b12",
      "headRepository": "tatsuhiro-t/http2-spec",
      "headRefName": "editorial-fix-1",
      "headRefOid": "aa1fd2735a3989331eee1ad90633fd4c182d92c9",
      "closedAt": "2014-04-04T15:22:40Z",
      "mergedAt": "2014-04-04T15:22:40Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "99ea2fe3e58928712bf694c476a715b4afdf0a7e"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "No, you are not wrong.  Unless we're upgrading within TLS, which would be silly.\n",
          "createdAt": "2014-04-04T15:23:02Z",
          "updatedAt": "2014-04-04T15:23:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 450,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQzODUzMTQ=",
      "title": "Add text to tell how to obtain [1,256] weight from 1 octet field",
      "url": "https://github.com/httpwg/http2-spec/pull/450",
      "state": "MERGED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This wording once existed in priority branch in github, but missing in\nthe current draft.\n",
      "createdAt": "2014-04-04T14:30:35Z",
      "updatedAt": "2014-06-16T13:04:26Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7feade2058c7218d51823a08d7d96d8bd7ab0b12",
      "headRepository": "tatsuhiro-t/http2-spec",
      "headRefName": "editorial-fix-2",
      "headRefOid": "b1304feb9e0b247adad61822958caf1243910360",
      "closedAt": "2014-04-04T15:23:36Z",
      "mergedAt": "2014-04-04T15:23:36Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 451,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQzODY2MTc=",
      "title": "Update HTTP usage examples.",
      "url": "https://github.com/httpwg/http2-spec/pull/451",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "HTTP mapping",
        "editorial"
      ],
      "body": "More precise description of flag usage.\nAddition of a CONTINUATION frame (for showing END_STREAM, END_HEADERS flag usage).\n",
      "createdAt": "2014-04-04T14:57:08Z",
      "updatedAt": "2014-04-08T08:24:02Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7feade2058c7218d51823a08d7d96d8bd7ab0b12",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "examples",
      "headRefOid": "b3ee40c547d37e5b128ada4fdd8c188bf367b467",
      "closedAt": "2014-04-08T08:23:50Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Herve, do the changes in https://github.com/http2/http2-spec/commit/027b800f41cd83407976ba8a73dab061ab1dc0a1 work for you?\n",
          "createdAt": "2014-04-07T22:58:59Z",
          "updatedAt": "2014-04-07T22:58:59Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, that's great!\n\nHerv\u00e9.\n\n> -----Original Message-----\n> From: Martin Thomson [mailto:notifications@github.com]\n> Sent: mardi 8 avril 2014 00:59\n> To: http2/http2-spec\n> Cc: RUELLAN Herve\n> Subject: Re: [http2-spec] Update HTTP usage examples. (#451)\n> \n> Herve, do the changes in 027b800 <https://github.com/http2/http2-\n> spec/commit/027b800f41cd83407976ba8a73dab061ab1dc0a1>  work for you?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/pull/451#issuecomment-39794118 .\n> <https://github.com/notifications/beacon/3206601__eyJzY29wZSI6Ik5ld3NpZX\n> M6QmVhY29uIiwiZXhwaXJlcyI6MTcxMjUzMDc0MywiZGF0YSI6eyJpZCI6MjkyOT\n> UyMDl9fQ==--8ee5470018a569e6170869673020c96099773088.gif>\n",
          "createdAt": "2014-04-08T08:23:35Z",
          "updatedAt": "2014-04-08T08:23:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 452,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ1ODE5MTQ=",
      "title": "fixing typo",
      "url": "https://github.com/httpwg/http2-spec/pull/452",
      "state": "MERGED",
      "author": "dret",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-04-10T00:16:30Z",
      "updatedAt": "2014-04-10T01:02:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "cd90ae78b25d059abf756158822fdd44fadf49be",
      "headRepository": "dret/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "5c64803bb612a30115dc0895894bc4e3bec8c30b",
      "closedAt": "2014-04-10T00:58:33Z",
      "mergedAt": "2014-04-10T00:58:33Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 453,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ2ODM0NzI=",
      "title": "Simplify stream priority.",
      "url": "https://github.com/httpwg/http2-spec/pull/453",
      "state": "MERGED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The priority groups are abandoned in favor of a single weighted dependency tree.\nThe root node of the tree is the connection, assigned the stream identifier 0x0.\nBy default, streams are assigned a stream dependency of 0x0 with a weight of 16.\n",
      "createdAt": "2014-04-12T07:35:03Z",
      "updatedAt": "2014-07-08T17:12:01Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "f356308e2fab50ae9917d957369d45e11a3cac9e",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "priority_update",
      "headRefOid": "66d3ded82411c918cb4cb15062010782a61d52ba",
      "closedAt": "2014-04-23T19:44:18Z",
      "mergedAt": "2014-04-23T19:44:18Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "63cf42356f956220d875fc254331598469b81bb0"
      },
      "comments": [
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just read through it, I think it looks good.\n\nI'd like to understand how weight of the stream is calculated and changed.  Here is my understanding:\nThe effective weight of each stream is determined by traversing tree node, taking into account of distribution of weight of parent stream among siblings.  This effective weight is temporal on the tree and initial weight is unchanged for a stream, so when reprioritizing that stream, its weight is initial one.  For example, suppose we have the following dependency tree:\n\n```\n0x0 <--(16)-- A <--(4)-- B <--(16)-- D\n                 \\-(8)-- C\n```\n\nX<--(w)--Y means that Y depends on X with weight w (and w is initial weight).\nCalculated effective weight is like this:\n\n```\nA: 16\nB: 16*(1/3)\nC: 16*(2/3) \nD: 16*(1/3)\n```\n\nIf parent stream is closed, then its initial weight is distributed to among the child streams and this updates initial weight of child stream.\nSo, after A was closed, the initial weight of streams becomes like this:\n\n```\n0x0 <--(16*(1/3))-- B <--(16)-- D\n     \\-(16*(2/3))-- C\n```\n",
          "createdAt": "2014-04-12T15:12:34Z",
          "updatedAt": "2014-04-12T15:12:34Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@jpinner thanks for this.  I'll have to read through this more carefully before I comment.\n\n@tatsuhiro-t that seems right.  Note that this means that a server might want to maintain more precision on it's weight values than the 8 bits we mandate in the protocol.  That said, if there are deep dependency trees and you are killing off nodes that are high up, at some point you will need to round off, so I think that how much precision is allocated is largely a discretionary thing.\n",
          "createdAt": "2014-04-12T18:33:53Z",
          "updatedAt": "2014-04-12T18:33:53Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks good.\n\nOn Sat, Apr 12, 2014 at 11:33 AM, Martin Thomson\nnotifications@github.comwrote:\n\n> @jpinner https://github.com/jpinner thanks for this. I'll have to read\n> through this more carefully before I comment.\n> \n> @tatsuhiro-t https://github.com/tatsuhiro-t that seems right. Note that\n> this means that a server might want to maintain more precision on it's\n> weight values than the 8 bits we mandate in the protocol. That said, if\n> there are deep dependency trees and you are killing off nodes that are high\n> up, at some point you will need to round off, so I think that how much\n> precision is allocated is largely a discretionary thing.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/pull/453#issuecomment-40288069\n> .\n",
          "createdAt": "2014-04-12T18:56:13Z",
          "updatedAt": "2014-04-12T18:56:13Z"
        },
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It seems that we can make a stream to depend on stream 0x0 exclusively, which makes all existing connections its descendant.  This is not possible in the current draft version.  I wonder this can be directly proxy-able since stream 0x0 is imaginable stream.\n",
          "createdAt": "2014-04-15T02:57:44Z",
          "updatedAt": "2014-04-15T02:57:44Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yea, the idea is that '0' is a reserved stream ID, and so it is safe to use\nit as a flag for saying that (effectively) any stream with '0' as a parent\nhas no parent.\n\nOn Mon, Apr 14, 2014 at 7:57 PM, Tatsuhiro Tsujikawa <\nnotifications@github.com> wrote:\n\n> It seems that we can make a stream to depend on stream 0x0 exclusively,\n> which makes all existing connections its descendant. This is not possible\n> in the current draft version. I wonder this can be directly proxy-able\n> since stream 0x0 is imaginable stream.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/pull/453#issuecomment-40441004\n> .\n",
          "createdAt": "2014-04-15T06:09:03Z",
          "updatedAt": "2014-04-15T06:09:03Z"
        },
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, then we should explicitly say that receiver must treat exclusive bit as 0 if stream ID field is 0.\n",
          "createdAt": "2014-04-15T12:35:11Z",
          "updatedAt": "2014-04-15T12:35:11Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson I would add an explicit hint to implementers that having more than 8 bits of internal precision is a good thing.\n\n@tatsuhiro-t I think we should leave open the possibility to insert a new stream between the connexion and all its children, even if it's probably a large re-prioritization.\n",
          "createdAt": "2014-04-15T14:16:23Z",
          "updatedAt": "2014-04-15T14:16:23Z"
        },
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think large re-prioritization is not a problem.  If proxy gets such requests and it aggregates several frontend connections to single backend connection, inserting under stream 0x0 with exclusive flag set seems to be impossible in backend.\n",
          "createdAt": "2014-04-15T14:30:03Z",
          "updatedAt": "2014-04-15T14:30:03Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "If it aggregates to a different backend connection it is not impossible to proxy.\n\nConsider streams A and B depend on stream 0x0 and are proxied to some backend connection as streams X and Y. If we get a new streams, C, that exclusively depends on 0x0, we can proxy it as stream Z by dropping the exclusive dependency and then re-prioritizing streams X and Y to depend on stream Z.\n",
          "createdAt": "2014-04-15T15:20:27Z",
          "updatedAt": "2014-04-15T15:21:02Z"
        },
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, it works like that.\n\nBut if we just don't allow 0x0 with exclusive dependency, we can do all priority stuff via proxy without doing any extra handling except for stream ID mappings.\n",
          "createdAt": "2014-04-15T16:34:23Z",
          "updatedAt": "2014-04-15T16:34:23Z"
        },
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Yep, true -- I don't have much of a preference -- if clients feel like it is not an important use case than I am perfectly happy to disallow it.\n",
          "createdAt": "2014-04-15T16:39:53Z",
          "updatedAt": "2014-04-15T16:39:53Z"
        },
        {
          "author": "willchan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is it possible to move this discussion to the mailing list? If you need\ncomments from a client, I'm happy to take a look later.\n\nOn Tue Apr 15 2014 at 9:39:56 AM, Jeff Pinner notifications@github.com\nwrote:\n\n> Yep, true -- I don't have much of a preference -- if clients feel like it\n> is not an important use case than I am perfectly happy to disallow it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/pull/453#issuecomment-40504411\n> .\n",
          "createdAt": "2014-04-15T16:50:55Z",
          "updatedAt": "2014-04-15T16:50:55Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 454,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ3MzA5NTU=",
      "title": "Move padding to the frame header.",
      "url": "https://github.com/httpwg/http2-spec/pull/454",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is a proof-of-concept to see what the spec would look like if Padding was defined as part of the common frame format instead of on each frame type.\n\nPros:\n- It simplifies the frame validation (padding flags and length checks no longer depend on the frame type).\n- It reduces the duplication in the spec.\n\nCons:\n- It is a little more cumbersome to explain the length field as being the length of  payload + padding + optional pad high / pad low.\n- It requires adding text to some frame types to prohibit padding.\n\nChanges:\n- In most ways this is purely editorial, but of note is that the padding flags are now defined on all frame types. For example: previously receiving a PING frame with the PAD_HIGH bit set and the PAD_LOW bit cleared was completely valid and required to be processed, with this change, receiving a PING frame with either the H bit or L bit set must be treated as a connection error.\n\nThoughts and feedback welcome :)\n",
      "createdAt": "2014-04-14T17:45:06Z",
      "updatedAt": "2014-07-08T17:11:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "f356308e2fab50ae9917d957369d45e11a3cac9e",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "move_padding",
      "headRefOid": "5968facdd1b310a648924733107846be805e0074",
      "closedAt": "2014-04-16T23:53:28Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "Withdrawing this -- after further consideration, I believe the length frame reserve bits are not the right place for this.\n",
          "createdAt": "2014-04-16T23:53:28Z",
          "updatedAt": "2014-04-16T23:53:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 455,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ3NzMzNjI=",
      "title": "fixing typos",
      "url": "https://github.com/httpwg/http2-spec/pull/455",
      "state": "MERGED",
      "author": "ZumZoom",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-04-15T14:43:34Z",
      "updatedAt": "2014-07-12T22:30:36Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "f356308e2fab50ae9917d957369d45e11a3cac9e",
      "headRepository": null,
      "headRefName": "typo-fix",
      "headRefOid": "6423a6ff544e872890f2e83b58d98e8c61eea50e",
      "closedAt": "2014-04-15T17:16:45Z",
      "mergedAt": "2014-04-15T17:16:45Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "4e98c9c4066557701ecdd7a8247193e876815d9c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 456,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ4NTQ0NDM=",
      "title": "Only restrict HTTP application data and header block fragment lengths.",
      "url": "https://github.com/httpwg/http2-spec/pull/456",
      "state": "CLOSED",
      "author": "jpinner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "frame layout"
      ],
      "body": "This commit reverses 2582bc5 addressing #260.\n",
      "createdAt": "2014-04-17T00:28:05Z",
      "updatedAt": "2014-07-08T17:10:56Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "e5eeb102141f8ec9155345482daa8b5655b4b478",
      "headRepository": "jpinner/http2-spec",
      "headRefName": "unreserve_length_bits",
      "headRefOid": "d575426325f0955c82723364603d99d8fbdec16c",
      "closedAt": "2014-06-05T18:31:41Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jpinner",
          "authorAssociation": "NONE",
          "body": "With the addition of padding to the framing layer, it is preferable to implement this requirement at the application layer, rather than the framing layer. This allows intermediaries to pad frames up to application data or header block fragment size without running into frame length restrictions.\n",
          "createdAt": "2014-04-17T00:30:54Z",
          "updatedAt": "2014-04-17T00:30:54Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; closing because withdrawn.\n",
          "createdAt": "2014-06-05T18:31:41Z",
          "updatedAt": "2014-06-05T18:31:41Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 457,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ4NjIzNjk=",
      "title": "add missing \"to\" in WINDOW_UPDATE",
      "url": "https://github.com/httpwg/http2-spec/pull/457",
      "state": "CLOSED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-04-17T07:16:10Z",
      "updatedAt": "2014-08-05T13:41:10Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "e5eeb102141f8ec9155345482daa8b5655b4b478",
      "headRepository": null,
      "headRefName": "copy-editing",
      "headRefOid": "22e6b032e486df76650f834fa5aa6ae95d074fbd",
      "closedAt": "2014-04-17T23:40:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Rather than take your entire revision history there, can you try to rebase?  i.e., `git rebase -i upstream/master`; if you see multiple commits, just squash them.\n",
          "createdAt": "2014-04-17T16:12:18Z",
          "updatedAt": "2014-04-17T16:12:18Z"
        },
        {
          "author": "phluid61",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My history got too mangled. I've made a clean branch and started over. Hardly worth the effort for a single word.  :\\\n",
          "createdAt": "2014-04-17T23:40:24Z",
          "updatedAt": "2014-04-17T23:40:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 459,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ5MDI4Nzk=",
      "title": "add missing \"to\" in WINDOW_UPDATE",
      "url": "https://github.com/httpwg/http2-spec/pull/459",
      "state": "MERGED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Cleaner version of #457\n",
      "createdAt": "2014-04-17T23:40:52Z",
      "updatedAt": "2014-06-17T13:29:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "e5eeb102141f8ec9155345482daa8b5655b4b478",
      "headRepository": null,
      "headRefName": "copy-editing",
      "headRefOid": "7efbd794a35a1c148a395fa841669a72b8d029a1",
      "closedAt": "2014-04-17T23:45:19Z",
      "mergedAt": "2014-04-17T23:45:19Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "3d373a960201f7bad9a0daa8197c2159b91f9743"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 461,
      "id": "MDExOlB1bGxSZXF1ZXN0MTQ5NTE2MDI=",
      "title": "Editorial fix",
      "url": "https://github.com/httpwg/http2-spec/pull/461",
      "state": "MERGED",
      "author": "summerwind",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-04-20T12:46:53Z",
      "updatedAt": "2014-06-28T06:36:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ebf1465697d311462bebf55082c1f5246b523a46",
      "headRepository": "summerwind/http2-spec",
      "headRefName": "editorial-fix",
      "headRefOid": "461cb57e5841c55f903e39d8c2aa45e9a734d336",
      "closedAt": "2014-04-21T18:31:11Z",
      "mergedAt": "2014-04-21T18:31:11Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 463,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUwMDQzMzQ=",
      "title": "GZIP in DATA",
      "url": "https://github.com/httpwg/http2-spec/pull/463",
      "state": "MERGED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "frame semantics"
      ],
      "body": "A proposal for adding GZIP compression to DATA frames. One possible resolution for #445.\n",
      "createdAt": "2014-04-22T09:46:16Z",
      "updatedAt": "2014-06-15T20:57:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a030bef5893fd27d7dfde1d2b0a53316f109b434",
      "headRepository": null,
      "headRefName": "445-gzip",
      "headRefOid": "1580ac1fae9347b0157da81ad4def26e8d6b7cf8",
      "closedAt": "2014-04-23T20:35:11Z",
      "mergedAt": "2014-04-23T20:35:11Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "f0ee935dbfaf42dd0076530fba3a3b37e748d036"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This looks good.  Thanks for putting this together.  We'll see how the discussion progresses.\n",
          "createdAt": "2014-04-22T16:27:34Z",
          "updatedAt": "2014-04-22T16:27:34Z"
        },
        {
          "author": "phluid61",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I realise we might also want to modify Section 8.1.3.5 _Malformed Messages_, to explain that Content-Length either cannot be sent if any frame is compressed, or measures the length after inflation, depending on how closely this maps to transfer encoding (http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-26#section-3.3.2).\n\nI suppose that's a follow-up issue for the WG to discuss.\n",
          "createdAt": "2014-04-22T23:28:25Z",
          "updatedAt": "2014-04-22T23:28:25Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "No. You are right. Content-length applies pre-compression or\npost-decompression. We need to that clear.\nOn Apr 22, 2014 4:28 PM, \"Matthew Kerwin\" notifications@github.com wrote:\n\n> I realise we might also want to modify Section 8.1.3.5 _Malformed\n> Messages_, to explain that Content-Length either cannot be sent if any\n> frame is compressed, or measures the length after inflation, depending on\n> how closely this maps to transfer encoding (\n> http://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-26#section-3.3.2\n> ).\n> \n> I suppose that's a follow-up issue for the WG to discuss.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/http2/http2-spec/pull/463#issuecomment-41108445\n> .\n",
          "createdAt": "2014-04-23T00:47:16Z",
          "updatedAt": "2014-04-23T00:47:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 464,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUxMjc0NDk=",
      "title": "Priority update",
      "url": "https://github.com/httpwg/http2-spec/pull/464",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "prioritisation"
      ],
      "body": "Several editions for new priority description.\nIncludes a paragraph on the ability to group streams into dependency subtree to allow the reprioritization of a whole group of streams at once.\n",
      "createdAt": "2014-04-24T16:05:58Z",
      "updatedAt": "2014-06-18T16:18:08Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0aa3e9f893c16054650e964a4c6991e20ae24504",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "priority-update",
      "headRefOid": "3a4f924f225933b3f4dd6e3832dbf44a3cad1507",
      "closedAt": "2014-04-25T17:36:41Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 470,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUxOTQzOTU=",
      "title": "add missing 'is'",
      "url": "https://github.com/httpwg/http2-spec/pull/470",
      "state": "CLOSED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-04-25T22:36:46Z",
      "updatedAt": "2014-06-30T14:08:58Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "9aff0992641c20b5a0a5e760a830d9deada7a946",
      "headRepository": null,
      "headRefName": "copy-edit-260414",
      "headRefOid": "25f04aa0de85a6bfe68d96939636c1bb2cc0c165",
      "closedAt": "2014-04-29T05:34:00Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 471,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUyNzMzNTQ=",
      "title": "add missing 'is'",
      "url": "https://github.com/httpwg/http2-spec/pull/471",
      "state": "MERGED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-04-29T05:35:40Z",
      "updatedAt": "2014-06-26T16:51:31Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ac9b0e324ed15ac315608e53c3d5a752bedf539d",
      "headRepository": null,
      "headRefName": "copy-edit-260414",
      "headRefOid": "6ea50b7646465b88d85139f7e3488e526bd1a76e",
      "closedAt": "2014-04-29T16:56:12Z",
      "mergedAt": "2014-04-29T16:56:12Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 472,
      "id": "MDExOlB1bGxSZXF1ZXN0MTUyNzQ4ODQ=",
      "title": "make content-codings optional again",
      "url": "https://github.com/httpwg/http2-spec/pull/472",
      "state": "CLOSED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Proposed resolution for #460\n",
      "createdAt": "2014-04-29T06:57:39Z",
      "updatedAt": "2016-07-07T01:42:17Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ac9b0e324ed15ac315608e53c3d5a752bedf539d",
      "headRepository": null,
      "headRefName": "optional-content-codings",
      "headRefOid": "3c95f109746d947dd8390721a00ca604bbb6cf5d",
      "closedAt": "2014-06-05T18:57:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I forgot about this one and duplicated the effort.  This isn't needed now.\n",
          "createdAt": "2014-06-05T18:57:39Z",
          "updatedAt": "2014-06-05T18:57:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 474,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0MDc4NjU=",
      "title": "Changing the way that altsvc use is indicated",
      "url": "https://github.com/httpwg/http2-spec/pull/474",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "alt-svc"
      ],
      "body": "For #443.\n\nThe discussion we've had so far on this seems to have converged on the use of ALTSVC frames for indicating what alternative service is in use.  This enacts that change, and adds a congruent use of the Alt-Svc header field for use in contexts other than HTTP/2.\n\nThat means that the Service header field can be removed safely.\n\nI've also added some notes regarding tracking of clients.  I think that is sufficient (I'll make this another pull request if you'd prefer it that way).\n",
      "createdAt": "2014-05-01T21:14:02Z",
      "updatedAt": "2014-07-15T17:49:14Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "742b20e6327f7e1e4d0fc316beb6af9fb904e40f",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "altsvcindicator",
      "headRefOid": "8031f678c385296b8b4fd6bbaf82edf100286250",
      "closedAt": "2014-06-10T18:51:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The case for an indicator still remains slightly contentious.\n",
          "createdAt": "2014-06-02T22:25:19Z",
          "updatedAt": "2014-06-02T22:25:19Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; current approach (Service header) is the right approach; still need to justify / discuss the motivations on the list. \n",
          "createdAt": "2014-06-05T19:34:49Z",
          "updatedAt": "2014-06-05T19:34:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We don't need this pull request.  Should I start a thread instead?\n",
          "createdAt": "2014-06-10T18:51:20Z",
          "updatedAt": "2014-06-10T18:51:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 475,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0NDE4MzY=",
      "title": "Proposed text for #458",
      "url": "https://github.com/httpwg/http2-spec/pull/475",
      "state": "MERGED",
      "author": "dcsommer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "frame semantics"
      ],
      "body": "We left #458 open pending some explicit text about the double GOAWAY graceful shutdown. Here is some proposed text that we can iterate on. One difference from what we discussed is the first GOAWAY has last-stream-id of 2^31 - 1. The calculation based on MAX_CONCURRENT_STREAMS isn't really needed and just opens up implementations to bugs.\n",
      "createdAt": "2014-05-02T17:38:52Z",
      "updatedAt": "2014-06-14T10:24:45Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "f935b6dc5c1bb0629ccf081586f9c0bd3b76ba5c",
      "headRepository": "dcsommer/http2-spec",
      "headRefName": "master",
      "headRefOid": "5e382d37775c1afb16ec9ec7960f729d99756ef6",
      "closedAt": "2014-06-05T20:02:05Z",
      "mergedAt": "2014-06-05T20:02:05Z",
      "mergedBy": "mnot",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 476,
      "id": "MDExOlB1bGxSZXF1ZXN0MTU0OTAwMTA=",
      "title": "Fix typo: \"vulnerabilites\"",
      "url": "https://github.com/httpwg/http2-spec/pull/476",
      "state": "MERGED",
      "author": "rutsky",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-05-05T12:31:34Z",
      "updatedAt": "2014-06-19T06:18:08Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "f935b6dc5c1bb0629ccf081586f9c0bd3b76ba5c",
      "headRepository": "rutsky/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "70b31cc16dbd0a47bcabed0ce793e25f28536d9a",
      "closedAt": "2014-05-05T17:03:34Z",
      "mergedAt": "2014-05-05T17:03:34Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "19673ddf7c4e216c2b220efa652764a20365ed97"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 479,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYwMjAyNTg=",
      "title": "Use \"name = value\" consistently for headers",
      "url": "https://github.com/httpwg/http2-spec/pull/479",
      "state": "MERGED",
      "author": "chris-morgan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There has been some inconsistency in the format used for headers, with some\nusing `name: value` and others using `name = value`. As these are only\napproximations, either is fine, but internal consistency is desirable.\n\nWith the colon-prefixed names now extant, `:name = value` is subjectively\nclearer than `:name: value`; for this reason, I have normalised headers to\n`name = value` rather than `name: value`.\n",
      "createdAt": "2014-05-17T13:09:49Z",
      "updatedAt": "2014-06-23T05:00:18Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "696b0fa552985d3b43bc92bed849570e2c08decd",
      "headRepository": "chris-morgan/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "4d5c04bc8c4f814e7420315d82392bb614bb8be7",
      "closedAt": "2014-05-18T15:29:29Z",
      "mergedAt": "2014-05-18T15:29:29Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b0ba50165b38fd9fe4c9684a46fa346bbaacbc0c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 482,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYyMTgzMzI=",
      "title": "Advice on dealing with large header blocks",
      "url": "https://github.com/httpwg/http2-spec/pull/482",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "A proposed explanation for what to do with large header blocks.\n",
      "createdAt": "2014-05-22T13:18:17Z",
      "updatedAt": "2014-06-13T12:07:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "742b20e6327f7e1e4d0fc316beb6af9fb904e40f",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "bigblocks",
      "headRefOid": "381179fbd456dc53b49f819004dd2d414900e96c",
      "closedAt": "2014-06-05T18:19:27Z",
      "mergedAt": "2014-06-05T18:19:27Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c3a59dfa8d3c3e7201a50814857f9bf55e29de51"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Discussed in NYC; this can be considered editorial.\n",
          "createdAt": "2014-06-05T18:19:15Z",
          "updatedAt": "2014-06-05T18:19:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 483,
      "id": "MDExOlB1bGxSZXF1ZXN0MTYyNjEzMTI=",
      "title": "Fix literal string lengths with Huffman encodings in examples.",
      "url": "https://github.com/httpwg/http2-spec/pull/483",
      "state": "CLOSED",
      "author": "mad-p",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Huffman encoded strings are correct, however, length representations are wrong.\n",
      "createdAt": "2014-05-23T08:09:08Z",
      "updatedAt": "2014-08-05T08:09:07Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "3427262c499a5bc39162b3758f4dd085a37ab6b1",
      "headRepository": "mad-p/http2-spec",
      "headRefName": "fix-huffman-string-length",
      "headRefOid": "c28f651b1b7e2b00bc562f9b2a2b5ba08e2f13b9",
      "closedAt": "2014-05-23T08:28:09Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mad-p",
          "authorAssociation": "NONE",
          "body": "I misunderstood the spec. Never mind.\n",
          "createdAt": "2014-05-23T08:28:09Z",
          "updatedAt": "2014-05-23T08:28:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 486,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY0MjY0NzM=",
      "title": "fix example in Appendix C",
      "url": "https://github.com/httpwg/http2-spec/pull/486",
      "state": "CLOSED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "header compression"
      ],
      "body": "Another remnant from ada75bb\n",
      "createdAt": "2014-05-28T13:22:51Z",
      "updatedAt": "2016-07-07T01:42:16Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "3427262c499a5bc39162b3758f4dd085a37ab6b1",
      "headRepository": null,
      "headRefName": "hpack-huffman-example",
      "headRefOid": "547e884d31c38487cd2056a546813765902a098f",
      "closedAt": "2014-06-03T00:16:57Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "phluid61",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Already fixed.\n",
          "createdAt": "2014-06-03T00:16:57Z",
          "updatedAt": "2014-06-03T00:16:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 487,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY1Mzc3OTI=",
      "title": "Correct example to reference the updated table",
      "url": "https://github.com/httpwg/http2-spec/pull/487",
      "state": "MERGED",
      "author": "n1hility",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Correct the huffman example that was not updated when the table was changed in a past revision.\n",
      "createdAt": "2014-05-30T15:11:16Z",
      "updatedAt": "2014-06-16T13:03:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "3427262c499a5bc39162b3758f4dd085a37ab6b1",
      "headRepository": "n1hility/http2-spec",
      "headRefName": "master",
      "headRefOid": "82c0ca4673ba6e533e2ec00f65af16dd5380e3cf",
      "closedAt": "2014-06-02T22:27:41Z",
      "mergedAt": "2014-06-02T22:27:41Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 488,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY1NTA2ODU=",
      "title": "Clarify ambiguity in prioritization state management",
      "url": "https://github.com/httpwg/http2-spec/pull/488",
      "state": "CLOSED",
      "author": "lavamic",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The manner in which weights should be redistributed when a node is removed from the priority tree is a little ambiguous. This is a proposed rewording to make the specification more clear.\n",
      "createdAt": "2014-05-30T19:33:24Z",
      "updatedAt": "2014-06-19T07:29:53Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "3427262c499a5bc39162b3758f4dd085a37ab6b1",
      "headRepository": "lavamic/http2-spec",
      "headRefName": "master",
      "headRefOid": "e4d29994accaeab45c8662ac84289962f17873fb",
      "closedAt": "2014-06-02T22:28:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The rounding thing is a matter for server implementers.  If you want to do this, then you can, but putting it in the spec would require that people do that.\n\nA perfectly valid implementation would have a 16- or 32-bit weight for streams, of which the top 8 bits are populated from the protocol.  When dividing weights, some amount of rounding (and the corresponding loss of expressiveness) could therefore be avoided.  I expect that some implementations (I'm thinking nodejs here) will use double precision floating point for this and lose basically no precision at all.\n",
          "createdAt": "2014-05-30T19:46:30Z",
          "updatedAt": "2014-05-30T19:46:30Z"
        },
        {
          "author": "lavamic",
          "authorAssociation": "NONE",
          "body": "Maybe we should amend the spec in the opposite direction then, and say that servers SHOULD keep track of weights to greater than 8 bits of precision? Either way sounds fine to me, but leaving it unspecified could result in unpredictable behavior depending on whether a given implementation uses rounding or not.\n",
          "createdAt": "2014-05-30T21:05:40Z",
          "updatedAt": "2014-05-30T21:05:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That's probably something that should be discussed on [the HTTPbis mailing list](mailto:ietf-http-wg@w3.org) rather than here.\n",
          "createdAt": "2014-05-30T21:39:54Z",
          "updatedAt": "2014-05-30T21:39:54Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this.  If you want to talk about this on the list, I encourage you to take it there.\n",
          "createdAt": "2014-06-02T22:28:43Z",
          "updatedAt": "2014-06-02T22:28:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 489,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY2MjgzMjc=",
      "title": "Adding ability to send PRIORITY on closed stream (for #468)",
      "url": "https://github.com/httpwg/http2-spec/pull/489",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... as new priority scheme demands and implies, but does not expressly permit.\n\nFor #468.\n",
      "createdAt": "2014-06-02T23:28:11Z",
      "updatedAt": "2014-06-12T06:58:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7e35060dc722bc34f76a5d00a8a251aa28e50c0a",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue468",
      "headRefOid": "a082421b549326ae526e6edc7c798ab4edc0096d",
      "closedAt": "2014-06-05T20:08:34Z",
      "mergedAt": "2014-06-05T20:08:34Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 493,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY3NjUzMjI=",
      "title": "Adding extensions back",
      "url": "https://github.com/httpwg/http2-spec/pull/493",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #95\n",
      "createdAt": "2014-06-05T13:25:13Z",
      "updatedAt": "2014-06-15T12:50:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "742b20e6327f7e1e4d0fc316beb6af9fb904e40f",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "extend",
      "headRefOid": "811def954d89748b929125ba360ee47bbc3deaaf",
      "closedAt": "2014-06-05T15:44:58Z",
      "mergedAt": "2014-06-05T15:44:58Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "64e922126620648fe7dd8692373145d0916d8756"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 494,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY3Nzc4Mzc=",
      "title": "Restricting to AEAD modes only",
      "url": "https://github.com/httpwg/http2-spec/pull/494",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "security"
      ],
      "body": "Proposed text for #491.\n",
      "createdAt": "2014-06-05T16:53:51Z",
      "updatedAt": "2014-06-15T13:45:20Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "477eb7815b47ca95a5749efdff5b8e45aefbc9a9",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "aeadonly",
      "headRefOid": "2a84e5227e0ea1245b79811bbd98788ff2cdffd6",
      "closedAt": "2014-06-06T17:12:15Z",
      "mergedAt": "2014-06-06T17:12:15Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "513c214e40c1d3a524370f84ada432aec856537e"
      },
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This would be consistent with the plan for TLS 1.3.\n",
          "createdAt": "2014-06-06T14:54:16Z",
          "updatedAt": "2014-06-06T14:54:16Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@ekr:\n\n> If that fails, drop HTTP2 and then try again.\n\nFirefox hard fails here, which I think is the right decision.  I'll confirm with the working group.\n",
          "createdAt": "2014-06-06T17:12:01Z",
          "updatedAt": "2014-06-06T17:12:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 495,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY3NzkwODc=",
      "title": "Removing requirements on Content-Encoding",
      "url": "https://github.com/httpwg/http2-spec/pull/495",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #460\n",
      "createdAt": "2014-06-05T17:18:06Z",
      "updatedAt": "2014-07-27T12:06:16Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a0ced45906559ba80f33c9fb12c0a5aca48b878e",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "nocontentencoding",
      "headRefOid": "7b2a4a2d6a9d958f3592717f870865e22cb74d45",
      "closedAt": "2014-06-05T17:34:48Z",
      "mergedAt": "2014-06-05T17:34:48Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "30ea0e7edcdba73c5842e0bb1634cb5b3cec06b8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 501,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY3ODY4MDU=",
      "title": "Privacy considerations for Alternative Services",
      "url": "https://github.com/httpwg/http2-spec/pull/501",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design",
        "security"
      ],
      "body": "We need to get this right.\n",
      "createdAt": "2014-06-05T19:42:56Z",
      "updatedAt": "2014-06-19T02:28:26Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "e216403537b130cae7713b37582a2bfa79104a3a",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "altsvcprivacy",
      "headRefOid": "720e9dd26fa5fc9a86de422b670def3c19c1bcad",
      "closedAt": "2014-06-06T17:15:09Z",
      "mergedAt": "2014-06-06T17:15:09Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9b00cccd92651fd5d207db7c4ee7486b80d64b1f"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Sounds good.\n",
          "createdAt": "2014-06-05T20:41:04Z",
          "updatedAt": "2014-06-05T20:41:04Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 503,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY3ODcyNTQ=",
      "title": "Note that ALTSVC frame is preferred to Alt-Svc header field",
      "url": "https://github.com/httpwg/http2-spec/pull/503",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "alt-svc"
      ],
      "body": "",
      "createdAt": "2014-06-05T19:51:19Z",
      "updatedAt": "2014-06-27T17:48:46Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "01fd45be88286e36244af3568d89c4d339f8acbe",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "altsvcframe",
      "headRefOid": "66c8d36bccd31645dcd4db1f3684a3b1036ede24",
      "closedAt": "2014-06-07T00:15:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 504,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY3OTA2NzM=",
      "title": "Removing BLOCKED",
      "url": "https://github.com/httpwg/http2-spec/pull/504",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We decided that Hasan will do this\n",
      "createdAt": "2014-06-05T20:51:57Z",
      "updatedAt": "2014-06-30T05:44:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1a8f5b9037eb59d8849eb2a4adfcd9e9421a8a67",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "noblocked",
      "headRefOid": "92775280b5fc1b2babe2a1555de6c70a9b3fc9b6",
      "closedAt": "2014-06-05T20:52:36Z",
      "mergedAt": "2014-06-05T20:52:36Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 507,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY4MTg2OTA=",
      "title": "Make ALTSVC an extension",
      "url": "https://github.com/httpwg/http2-spec/pull/507",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #499 \n",
      "createdAt": "2014-06-06T12:52:48Z",
      "updatedAt": "2014-06-25T06:27:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fdcb1b54fae01203e65a2bd3a9ed251f7143badc",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "extendaltsvc",
      "headRefOid": "00b81b26e4cb38d572367677d2ff5969158d4409",
      "closedAt": "2014-06-06T16:50:17Z",
      "mergedAt": "2014-06-06T16:50:17Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 509,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY4MzI5Njg=",
      "title": "Moving to Alt-Svc-Used",
      "url": "https://github.com/httpwg/http2-spec/pull/509",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #502.\n\n@reschke can you review this.  Please merge it if you like it.\n",
      "createdAt": "2014-06-06T17:41:56Z",
      "updatedAt": "2014-06-13T09:19:33Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7985741e59884410d98b22a0be6cb3bc3dd480b6",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "altsvcused",
      "headRefOid": "088380b3593ff8f3d97293d480bed6c5cb4e7004",
      "closedAt": "2014-06-06T23:20:45Z",
      "mergedAt": "2014-06-06T23:20:45Z",
      "mergedBy": "reschke",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 510,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY4MzQwNzA=",
      "title": "Removing the PAD_HIGH flag and Pad High field",
      "url": "https://github.com/httpwg/http2-spec/pull/510",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "WIP for #505.\n",
      "createdAt": "2014-06-06T18:04:23Z",
      "updatedAt": "2014-06-28T04:57:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7985741e59884410d98b22a0be6cb3bc3dd480b6",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "padhigh",
      "headRefOid": "a65f355f91bad40e6137db24b2e779eba10f241e",
      "closedAt": "2014-06-06T18:25:32Z",
      "mergedAt": "2014-06-06T18:25:32Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "1ef0cb9e140e97334c1f6db765245c9c659a5c2a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 511,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY4MzUzNTg=",
      "title": "Removing per-frame compression",
      "url": "https://github.com/httpwg/http2-spec/pull/511",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #497 \n",
      "createdAt": "2014-06-06T18:28:57Z",
      "updatedAt": "2014-06-25T17:40:25Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7a491bf588cc469fa276aeae93e556e6d6b0f986",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "nocompression",
      "headRefOid": "9d7409454cd56b5b689bd9d3bb21e1d5b0bba757",
      "closedAt": "2014-06-06T18:29:30Z",
      "mergedAt": "2014-06-06T18:29:30Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0146513cf9589924191102139f625d2fb69ab5eb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 512,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY4NTA2MjI=",
      "title": "Travis setup",
      "url": "https://github.com/httpwg/http2-spec/pull/512",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Phase 1: building the files, which checks for sanity.  Phase 2 will be to have gh-pages updated.\n",
      "createdAt": "2014-06-07T02:59:43Z",
      "updatedAt": "2014-07-09T17:20:09Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "568dcee8598f000665b18032c4ca3047914a3e3f",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "travis",
      "headRefOid": "0cbb1d261e9bc131658084ce38a94f39a11f90f9",
      "closedAt": "2014-06-09T02:22:29Z",
      "mergedAt": "2014-06-09T02:22:29Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d457be4cb4befb5510fbf56bf4fec1e41456799f"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Working?\n",
          "createdAt": "2014-06-09T13:20:50Z",
          "updatedAt": "2014-06-09T13:20:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 513,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY4OTcwNTk=",
      "title": "Add \"gzip, deflate\" as value for accept-encoding in static table",
      "url": "https://github.com/httpwg/http2-spec/pull/513",
      "state": "CLOSED",
      "author": "nwgh",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "header compression"
      ],
      "body": "Now that the WG has removed implicit accept-encoding: gzip, let's make that part of the static table.\n",
      "createdAt": "2014-06-09T17:33:57Z",
      "updatedAt": "2014-06-13T09:13:55Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "d8319860504ced1b674ee8926f1f8374e40402cc",
      "headRepository": null,
      "headRefName": "ae-gzip-deflate",
      "headRefOid": "6c2920909eefca048a27fc7f9a0736b199b5328d",
      "closedAt": "2014-06-13T09:13:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Note that order and spacing is important here; see https://bugzilla.mozilla.org/show_bug.cgi?id=576033. LGTM.\n",
          "createdAt": "2014-06-09T19:33:35Z",
          "updatedAt": "2014-06-09T19:33:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 514,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY5MTIyMTQ=",
      "title": "Reorganizing TLS section to add prohibition on renegotiation",
      "url": "https://github.com/httpwg/http2-spec/pull/514",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #363.  Until we have a draft for #496 I'm going to leave this pull request open.  I'll need to add another commit to refer to whatever @mnot produces.\n",
      "createdAt": "2014-06-09T22:22:24Z",
      "updatedAt": "2014-06-16T18:56:41Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "de614c446d18aeea3fe976b7bcb47f4e0460fb17",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "renego",
      "headRefOid": "d0de9d0085302232474414ab1109ebcffddee2f1",
      "closedAt": "2014-06-16T18:56:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 515,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY5MTYwMjI=",
      "title": "Coalesce connections",
      "url": "https://github.com/httpwg/http2-spec/pull/515",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #490.  The changes here are fairly minimal.  Turns out that coalescing was already just a \"MAY\".\n\nI'm still waiting on a resolution to #496 here for the \"Not Authoritative\" status code.\n\nAnother security consideration here is that origin servers can potentially probe the header tables of each other in this case.  I want to write some text on that separately, because the current text in HPACK is inadequate to really understand the scope of this issue.\n",
      "createdAt": "2014-06-10T00:10:41Z",
      "updatedAt": "2014-07-15T17:49:12Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "de614c446d18aeea3fe976b7bcb47f4e0460fb17",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "coalesce",
      "headRefOid": "7b4ed5c7f9cfb624b92768f690de39405a31fc40",
      "closedAt": "2014-06-17T21:13:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "closed with https://github.com/http2/http2-spec/commit/c1410dd1e9d36ffba88a397f31ad772398ff08b1\n",
          "createdAt": "2014-06-17T21:13:06Z",
          "updatedAt": "2014-06-17T21:13:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 516,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY5NTc4ODM=",
      "title": "ALTSVC frame changes",
      "url": "https://github.com/httpwg/http2-spec/pull/516",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "alt-svc"
      ],
      "body": "Two minor things here:\n- more strongly recommend the use of the frame type in HTTP/2 over the header field\n- add a frame type number (no need to defer the choice now, this lets people build code based on this)\n",
      "createdAt": "2014-06-10T18:49:54Z",
      "updatedAt": "2014-06-18T05:52:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "92e5bcd0d96e07100d9c79c402a24a26196ca059",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "altsvcframe",
      "headRefOid": "a1651d3bd7e0d52c444ba47481ed091663cb6db1",
      "closedAt": "2014-06-10T19:30:49Z",
      "mergedAt": "2014-06-10T19:30:49Z",
      "mergedBy": "reschke",
      "mergeCommit": {
        "oid": "1fa99a5319baf940fb6320583a4b1764dd43f1d3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 517,
      "id": "MDExOlB1bGxSZXF1ZXN0MTY5NzM1NzY=",
      "title": "HPACK Security Considerations",
      "url": "https://github.com/httpwg/http2-spec/pull/517",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I have written what I think is a slightly more robust Security Consideration for HPACK.  This covers:\n- the attack in the general sense, \n- how the attack might apply in HPACK and HTTP, \n- particular areas of concern, \n- how HPACK inherently mitigates these attacks, \n- what environments might need additional mitigation, and\n- some suggested mitigation strategies.\n\nMitigation strategies that I have described are:\n- actor-based isolation (a generalized application of the origin isolation principle)\n- destroy values on failed guesses (thanks here to Adam Barth for the idea), either probabilistically, or based on a count, with a recommendation that shorter values be made harder to guess\n- specific protection for \"special\" header fields\n\nThere are a few formatting changes in the first commit, sorry.\n",
      "createdAt": "2014-06-11T00:06:21Z",
      "updatedAt": "2014-07-15T17:04:58Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6b241f9455336fdbeb947e3445046b1ed866158",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "hpack-security",
      "headRefOid": "af2a75e3d04b1f4755d2aa3de5be881f8d388f05",
      "closedAt": "2014-06-13T09:39:05Z",
      "mergedAt": "2014-06-13T09:39:05Z",
      "mergedBy": "hruellan",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 518,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcwMzcxNTQ=",
      "title": "HPACK editorial changes",
      "url": "https://github.com/httpwg/http2-spec/pull/518",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This includes a whole raft of editorial changes, including:\n- grammatical corrections\n- small and less-small wording changes\n- reorganization to make the document a little flatter overall, \n- new introductory text in empty sections\n- reformatting and reflowing of text (I've isolated these changes and identified them clearly to aid review)\n- some xml2rfc tweaking\n\nFeel free to skip changesets that look off; we can discuss those further.  I don't think that I've done anything controversial here, but I might be wrong.\n",
      "createdAt": "2014-06-12T04:31:32Z",
      "updatedAt": "2014-06-12T16:37:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "bfead39db08de30c9bf1bc1983c9d64894f2f46e",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "hpack-editorial",
      "headRefOid": "02d002d9f8fbab44dbb5e3893a6a866ccca42c90",
      "closedAt": "2014-06-12T11:05:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done manually.\n",
          "createdAt": "2014-06-12T11:05:24Z",
          "updatedAt": "2014-06-12T11:05:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 519,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcwMzgyMTQ=",
      "title": "Moving encryption draft to official repository",
      "url": "https://github.com/httpwg/http2-spec/pull/519",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Adding draft in preparation for adoption.  @mnot can merge this one.\n",
      "createdAt": "2014-06-12T05:34:17Z",
      "updatedAt": "2014-07-15T17:06:04Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b55db58baa7e90d4b9f67293364a1056d44b5d98",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "encryption",
      "headRefOid": "7f9a6e0d5bbee292469bbb2822a3dd6043f7b4ff",
      "closedAt": "2014-06-12T20:36:52Z",
      "mergedAt": "2014-06-12T20:36:52Z",
      "mergedBy": "mnot",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 523,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcxMjU5NTg=",
      "title": "Tweaking extensions text",
      "url": "https://github.com/httpwg/http2-spec/pull/523",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Two small changes here.  First, adding unnegotiated semantics to reserved bits in existing frames feels like a REALLY bad idea, since you're almost guaranteed to have collisions, so I'm suggesting we remove that as something that extensions can do unannounced.  Second, we permit negotiated changes to existing semantics, so I'm suggesting that instead of saying only DATA will ever be flow controlled, we say that making anything else flow-controlled is a changed semantic that has to be negotiated.\n",
      "createdAt": "2014-06-13T18:58:37Z",
      "updatedAt": "2014-06-13T22:05:35Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "4e68544d7310e6f676db7255d8699373a91c26ca",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "fb41def692cb40366cff0cb9c991458a38bcb929",
      "closedAt": "2014-06-13T21:08:34Z",
      "mergedAt": "2014-06-13T21:08:34Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6b85f67613a1963aff076c4e91ee7388e55c3ede"
      },
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(And as a side-note, section 6.9 implies that there may be frames other than DATA which are flow-controlled defined elsewhere:  \"Flow control only applies to frames that are identified as being subject to flow control. Of the frame types defined in this document, this includes only DATA frame.\")\n",
          "createdAt": "2014-06-13T19:22:24Z",
          "updatedAt": "2014-06-13T19:22:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 524,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcxMjc5NDA=",
      "title": "Tweaks from a doc readthrough",
      "url": "https://github.com/httpwg/http2-spec/pull/524",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Mostly minor stuff from a readthrough.  Of particular note:\n- Regarding headers, \"name-value pair\" implies only one value; either it's a pair, and collections may have multiple instances with the same name; or it's a name with a collection of associated values.  Either is reasonable, but both is confusing.\n- Adjusting phrasing in SETTINGS_HEADER_TABLE_SIZE to better reflect that HPACK now lets the encoder change the table size at will.\n- Removing suggestion that a GOAWAY frame can get \"lost\", which can't happen in TCP; actual issue is that recipient may have acted on the previous GOAWAY and retried the requests the server says it didn't process.\n",
      "createdAt": "2014-06-13T19:40:28Z",
      "updatedAt": "2014-06-16T17:09:01Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "4e68544d7310e6f676db7255d8699373a91c26ca",
      "headRepository": null,
      "headRefName": "patch-3",
      "headRefOid": "e1f15b35ccb37b5e32675f7c32e72b4617646ef2",
      "closedAt": "2014-06-16T17:03:01Z",
      "mergedAt": "2014-06-16T17:03:01Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 525,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcxODAzOTU=",
      "title": "Minor editions to extensibility.",
      "url": "https://github.com/httpwg/http2-spec/pull/525",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-06-16T14:21:38Z",
      "updatedAt": "2015-02-05T10:57:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7f82500a8495aa2937ad15032cbef27be85bbe41",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "extensibility",
      "headRefOid": "0e7209bfe29d68544eb4b49c3a76973332ddac72",
      "closedAt": "2014-06-16T16:56:20Z",
      "mergedAt": "2014-06-16T16:56:20Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "42ecfe56ddfeca106a9cf7ec8f7a09da3cd78814"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 526,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcxOTIyNzM=",
      "title": "Allows server to prioritize push.",
      "url": "https://github.com/httpwg/http2-spec/pull/526",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "server push"
      ],
      "body": "A server can send priority for a pushed response. This describes its intend on how to order the pushed response in regards to other responses and in particular other pushed responses.\n",
      "createdAt": "2014-06-16T17:51:20Z",
      "updatedAt": "2014-07-25T00:00:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "223f354ac0125dbabe43f0921151dbe118f7270b",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "priority-push",
      "headRefOid": "bd8052410a5b29a0089f16b721d399105ddee48b",
      "closedAt": "2014-07-25T00:00:11Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 527,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcxOTY2MTE=",
      "title": "Indexes/indices and between one thing",
      "url": "https://github.com/httpwg/http2-spec/pull/527",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Updating 3.4 to remove the use of \"indexes\" in the midst of all the \"indices,\" and to not use the word \"between\" when referring to a single bound.  (Adding the other bound into the same paragraph just looks too verbose.)\n",
      "createdAt": "2014-06-16T19:11:27Z",
      "updatedAt": "2016-12-23T17:41:00Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "417437f24750c35248134d9aa0b2a8af288194f4",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "6a4b62066a31abc7c1b412d3f8ac609df6258751",
      "closedAt": "2014-06-18T07:50:57Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "See also #533.\n",
          "createdAt": "2014-06-17T22:18:34Z",
          "updatedAt": "2014-06-17T22:18:34Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yep, that fixes the \"between\" but leaves the use of \"indexes.\"  (And I like my wording a little better, but I'm also biased, given the authorship.  :smirk: )\n",
          "createdAt": "2014-06-17T22:23:59Z",
          "updatedAt": "2014-06-17T22:23:59Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed with 5c1429e7606adf22c21ab0e78c8aa6f4f4cd810b.\n",
          "createdAt": "2014-06-18T07:50:57Z",
          "updatedAt": "2014-06-18T07:50:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 533,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcyNTg2OTM=",
      "title": "Fixup unclear statement about header table indices",
      "url": "https://github.com/httpwg/http2-spec/pull/533",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Nothing exciting here. Looks like a sentence that got lost in editing. \n",
      "createdAt": "2014-06-17T20:18:02Z",
      "updatedAt": "2014-06-18T07:34:44Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6da09e2c374172af5e4582b52c746263456be1bc",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "hpack-style",
      "headRefOid": "299697853917474aa72a445ecbbb3480051532c9",
      "closedAt": "2014-06-18T07:33:09Z",
      "mergedAt": "2014-06-18T07:33:09Z",
      "mergedBy": "hruellan",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 534,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcyNjY0MzM=",
      "title": "Missing article",
      "url": "https://github.com/httpwg/http2-spec/pull/534",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Could have been \"a\" just as easily, but I felt like a two-character pull request was just overkill.\n",
      "createdAt": "2014-06-17T22:49:15Z",
      "updatedAt": "2016-12-23T17:40:54Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6da09e2c374172af5e4582b52c746263456be1bc",
      "headRepository": null,
      "headRefName": "patch-3",
      "headRefOid": "335399865eb3fbfba430efeb7f07e3bbe59b4f9f",
      "closedAt": "2014-06-17T22:54:00Z",
      "mergedAt": "2014-06-17T22:54:00Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "7eb3ecf339b63125343b053c632f9f030c4108cb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 538,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczMzExMzU=",
      "title": "Clarify the description of priority",
      "url": "https://github.com/httpwg/http2-spec/pull/538",
      "state": "CLOSED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Add the following two changes.\n- When the default priority is assigned, it is non-exclusive.\n- When a parent stream is not in a priority tree, the stream is assigned a default priority\n",
      "createdAt": "2014-06-19T02:48:16Z",
      "updatedAt": "2014-06-19T15:36:28Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "5c1429e7606adf22c21ab0e78c8aa6f4f4cd810b",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20140619",
      "headRefOid": "ce2131d94f40ad2b240fa5dda323e8952428e0d6",
      "closedAt": "2014-06-19T15:36:28Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 542,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc3MTkzMDY=",
      "title": "proposed clarifications for stream states verbage",
      "url": "https://github.com/httpwg/http2-spec/pull/542",
      "state": "MERGED",
      "author": "shearl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-06-27T18:50:07Z",
      "updatedAt": "2014-06-27T21:57:29Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "d3df80f1396f111f5bc85c3d9ac5231c17dbb17b",
      "headRepository": "shearl/http2-spec",
      "headRefName": "master",
      "headRefOid": "54cd7fe5d1e75c0406dc74c2f6f29aa9a7611737",
      "closedAt": "2014-06-27T21:57:29Z",
      "mergedAt": "2014-06-27T21:57:29Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "fe78c278deaeaea414d9231739d28b74bbce3efd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 544,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc3ODczNDU=",
      "title": "CONTINUATION simplification plus flow control",
      "url": "https://github.com/httpwg/http2-spec/pull/544",
      "state": "CLOSED",
      "author": "shearl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-06-30T17:51:39Z",
      "updatedAt": "2014-07-07T19:58:44Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "85b6880214644b6a8317748e6b32075c7aeacdc6",
      "headRepository": "shearl/http2-spec",
      "headRefName": "continuation",
      "headRefOid": "5a548553334e35cbba5946d238e9a14c6ba03f7e",
      "closedAt": "2014-07-07T19:58:44Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "To summarize this, as I see it:\n\nCONTINUATION can be interleaved with frames from other streams\nCONTINUATION frames are flow controlled\n\nI think that there needs to be some text regarding the crossover between HEADERS and CONTINUATION.  Particularly the case where you have an opcode that is followed by a literal that crosses into a CONTINUATION.  This needs to be clarified.  That is, the opcode and all of the literal values associated with the opcode MUST fit within the initial frame.\n",
          "createdAt": "2014-06-30T18:06:29Z",
          "updatedAt": "2014-06-30T18:06:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The other point that I think is very important to call out is that the reference set is emitted at the end of the HEADERS/PUSH_PROMISE frame, even if there is a partially completed opcode in flight.\n",
          "createdAt": "2014-06-30T18:12:49Z",
          "updatedAt": "2014-06-30T18:12:49Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As was pointed by Mike on the list, in this proposal, CONTINUATION frames do not affect compression state, but may _use it_: in HPACK a literal header representation can either use a literal or a reference for the header name.\n",
          "createdAt": "2014-07-01T09:16:16Z",
          "updatedAt": "2014-07-01T09:16:16Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The simplest expression of something like this is that an HPACK\nencoder/decoder might be configured to treat all opcodes which finish\nbeyond a certain byte offset from the beginning of the header block as if\nthey were not state modifying.\n\nIf we go down this route, then  this option makes the implementor's life\nthe easiest-- it doesn't require back-tracking.\n\nOn Tue, Jul 1, 2014 at 2:16 AM, Herv\u00e9 notifications@github.com wrote:\n\n> As was pointed by Mike on the list, in this proposal, CONTINUATION frames\n> do not affect compression state, but may _use it_: in HPACK a literal\n> header representation can either use a literal or a reference for the\n> header name.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/pull/544#issuecomment-47634184.\n",
          "createdAt": "2014-07-01T16:24:58Z",
          "updatedAt": "2014-07-01T16:24:58Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I wanted to point out that CONTINUATION frames could _depend_ on the compression state, enforcing an order with HEADER frames from other streams.\n\nRoberto's proposal could be modified to remove this dependency, by enforcing to use only the literal representation without indexing (and with a literal header name) on the byte offset is reached.\n",
          "createdAt": "2014-07-01T16:43:07Z",
          "updatedAt": "2014-07-01T16:43:07Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@shearl, is the intent now to abandon this proposal?\n",
          "createdAt": "2014-07-07T16:44:54Z",
          "updatedAt": "2014-07-07T16:44:54Z"
        },
        {
          "author": "shearl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes. Mark told me to send an email to the group first to see if anybody had\nany heartache about this. As I suspected, nobody did so yes consider it\nabandoned.\n\nOn Monday, July 7, 2014, Martin Thomson notifications@github.com wrote:\n\n> @shearl https://github.com/shearl, is the intent now to abandon this\n> proposal?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/pull/544#issuecomment-48204324.\n\n## \n\nKeith S. Morgan\nkeith.morgan@byu.net\n",
          "createdAt": "2014-07-07T19:57:17Z",
          "updatedAt": "2014-07-07T19:57:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 546,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc4OTgwODQ=",
      "title": "Forbidding the use of pseudo-header fields",
      "url": "https://github.com/httpwg/http2-spec/pull/546",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Tightening the language around the definition of malformed requests\nand responses to support this.\n",
      "createdAt": "2014-07-02T16:52:59Z",
      "updatedAt": "2014-07-15T17:07:08Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "85b6880214644b6a8317748e6b32075c7aeacdc6",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "colon-malformed",
      "headRefOid": "d99289a0884a6e7d70febd5410d53d1f22e55c4c",
      "closedAt": "2014-07-15T17:07:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 547,
      "id": "MDExOlB1bGxSZXF1ZXN0MTc5MDc3NDA=",
      "title": "Removed CONTINUATION (for proposal to move CONTINUATION to extension)",
      "url": "https://github.com/httpwg/http2-spec/pull/547",
      "state": "CLOSED",
      "author": "shearl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-07-02T19:46:05Z",
      "updatedAt": "2014-07-16T17:08:28Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "85b6880214644b6a8317748e6b32075c7aeacdc6",
      "headRepository": "shearl/http2-spec",
      "headRefName": "nocontinuation",
      "headRefOid": "188acfbfab14886e9d6323bca52465451a392dac",
      "closedAt": "2014-07-16T17:08:28Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that this would need a change log entry and a note regarding the limitation on header block size, ... and then working group consensus.  Otherwise, I like the fact that the removed line count >> added.\n",
          "createdAt": "2014-07-02T19:57:29Z",
          "updatedAt": "2014-07-02T19:57:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "#559 covers this.\n",
          "createdAt": "2014-07-16T17:08:28Z",
          "updatedAt": "2014-07-16T17:08:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 548,
      "id": "MDExOlB1bGxSZXF1ZXN0MTgwMzA0OTI=",
      "title": "Large Frame Proposal",
      "url": "https://github.com/httpwg/http2-spec/pull/548",
      "state": "CLOSED",
      "author": "gregw",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "## Background\n\nThe HTTP2 protocol has a requirement to be able to transport large headers, that exceed the payload size of a single frame at the current 16KB maximum size.\n\nTo address this requirement, the current draft (13) includes the CONTINUATION frames, 0 or more of which may be sent after a HEADERS or PUSH_PROMISE frame to contain the large headers.  There has been significant criticism of the CONTINUATION design, including:\n- The total length of a HEADERS+CONTINUATION\\* sequence is not known until the last frame in the sequence is processed.  A receiver that wishes to reject streams headers larger than a specific limit may have to process many frames and hold the results in memory before it discovers the header is too large.\n- The size of header that an endpoint is prepared to receive is not known in advance. The only way a sender can know if a header too large is by attempting to send it and receiving an error in response. Error handling of headers may be difficult for an endpoint to handle efficiently and can result in the closure of the entire connection.\n- The END_STREAM flag is not present on the CONTINUATION frame, thus it is possible for a stream to send CONTINUATION frames after a HEADERS frame that has the END_STREAM flag set.  This is confusing and increases the complexity of the state machine required to process streams.  It is highly desirable that a set END_STREAM flag truly indicates the last non control frame of a stream.\n- There is a significant discontinuity in the code path required to process headers.  Headers up to an indeterminate size (roughly 20-something KB) can be handled in a single frame. Headers that exceed this size must be handled in multiple frames of different types with different frame flags and stream control logic. Because the vast majority of headers sent (>99.99%) are below this indeterminate size, implementations will have a code path that is seldom executed and probably insufficiently tested. This invites poor and/or partial and/or incorrect implementation.\n- Because of the HPACK compression algorithm, a sequence of HEADERS+CONTINUATIONS frames may not be interleaved with any other frame. This effectively makes the sequence a single large frame.  Because of the simplicity of description and implementation it is proposed that it would be far simpler to meet the requirement of large headers by supporting large frames.\n\nThis proposal has been prepared as it is possible to meet the requirements of CONTINUATIONS without the complications and criticisms above.\n\n> This proposal addresses the issue of sending/receiving large HTTP headers without giving endpoints and intermediaries unlimited resource commitments nor unknown limits\n## Additional Frame Size Issues Addressed\n\nThe current draft (13) has maximum frame size of 16KB, which is an arbitrary value that has been selected on the basis of experience to provide a reasonable compromise between the efficiency of transmitting data vs the quality of service for multiplexed channels.\n\nWhilst this educated guess may be near optimal for today's networks and traffic, it is entirely possible that some current and/or future networks may require a different value to achieve an optimal balance. There have already been proposals [1] put to the WG to reduce the frame size to optimise multiplexing , as well as discussion that high capacity, low latency networks can achieve satisfactory multiplexing quality of service with large frame sizes.\n\n> This proposal addresses the issue that a fixed frame size does  not allow tuning multiplexing performance based on current/future experience.\n\nIt has also been noted that 16KB is near the middle of the peak of the current HTTP Object size histogram [2], so that a small change in the frame size may have a significant impact on the number of HTTP messages that can be sent in a single frame, without significant impacts on QoS. The HTTP Object size histogram has changed significantly over time and is expected to continue to do so.\n\n> This proposal addresses the issue of tuning the frame size based on experience of actual payload sizes.\n\nThere have also been issues raised that a 16KB frame size does not allow efficient data transfer [3] even when the end points are aware that only a single stream is likely to be required for the imminent future, or\nthat a particular stream is of high priority.\n\n> This proposal addresses the issue of tuning the frame size for transport efficiency for specific streams in specific situations.\n## Large Frame Header Proposal\n\nThis proposal is to alter the core http2 protocol to address the issues identified above by supporting a variable length maximum frame size controlled by peer limits.\n\nThis proposal increases the length field in the frame header to 31 bits, to match the maximum flow control window size.  However, implementations will not be able to use the full frame size without explicit consent from peers using newly defined SETTINGS.\n## Frame Size Settings\n\nTwo settings parameters are proposed: SETTINGS_HEADER_FRAME_SIZE for the maximum header size and SETTINGS_FRAME_SIZE for all other frames.\n\nThe SETTINGS_HEADER_FRAME_SIZE parameter supports the current behaviour where large headers can be sent without changing the frame size allowed for other frame types. ie A large header size limit can be set without affecting the multiplexing efficiency of DATA frames.\n\nThe SETTINGS_FRAME_SIZE applies to all other frames including DATA frames and any other frame that may be defined by an extension.  The use of this parameter is intended to tune/optimise the connection for the general case of multiple streams over the specific connection.\n## Minimal Compliance\n\nA minimally compliant implementation MUST handle the SETTING_FRAME_SIZE and SETTINGS_HEADER_SIZE and ensure that no frame sent exceeds the applicable limit.   However no implementation is required to send frames at or near these limits when set above the default 16KB.\n## Anticipated Feedback\n\n> It is too late in the process to change the framing layer and to do so after so much discussion is an implicit fail of the WG\n\nTo not consider issues and proposal brought to the WG would be a fail of the process.   This proposal is based on all the hard work to date done by the WG and contributors to identify issues and test solutions.\n\n> These issues can be handled in extensions.\n\nOptimising data transfers for large content could possibly be done in an extension, however:\n- It is not yet clear if extensions will be a viable way to enhance the  http2 protocol. There are significant hurdle to overcome to deploy  extensions.\n- Many of the issues are aimed at complexity and tuning of the core  protocol, and these cannot be addressed in an extension.\n- It is asymmetric to support large headers with one mechanism and large data with another.\n\n> The proposed header costs 2 extra bytes per frame\n\nThere is a small data cost to adopt this proposal, however this is mitigated as:\n- The proposal may be able to reduce the number of frames needed for some content, thus saving 8 bytes.  Whilst not likely to be a 25% frame saving required to break even, it will still reduce cost to below 2 bytes.\n- There are options to have variable length headers or optional extended headers that will preserve the semantics of this proposal and keep an 8 byte header for small frames.  If the 2 byte cost is considered prohibitive, then these alterations can be considered.\n\n> The header is 10 bytes long and not 32bit word aligned.\n\nFrames sent after arbitrary data will not be word aligned anyway. If alignment is important, then padding could changed to be part of the base frame format, 2 header bytes used for a padding length (giving an aligned 12 byte header) and all frames padded to a word boundary.\n\n> 31 bits is also an arbitrary length\n\nIt is true that a 31 bit large frame length is also an arbitrary limit to the size of a frame. However, it is believed that 31 bits is sufficiently large to efficiently handle almost all conceivable present and future use cases.   It would be possible to implement an unlimited size length field, but this would also need changes to the flow control mechanism, which currently also has a 31 bit maximum size.\n\n> It does not support unlimited response headers\n\nA SETTINGS_HEADER_FRAME_SIZE of 2^31-1 is effectively unlimited for all foreseeable response headers.\n\n> This was tried with SPDY and rejected\n\nSPDY did not have the settings to allow peers to set limits on the max frame size.  This proposal will not change to default behaviour of http2 with regards to frame size.\n\n> Intermediaries will destroy multiplexing by setting frame size to 2^31-1\n\nLarge frames require the participation of both sender and receiver.  A receiver may advise that it is willing to accept large frames, but a sender is under no obligation to send them.  Thus intermediaries nor any end point can unilaterally change multiplexing QoS.\n\n> Cannot be hardware accelerated.\n\nHardware acceleration is not part of the WG brief to support, nor is it clear that this proposal is any less suitable than others for hardware acceleration.\n## Contributors\n\nThis proposal was prepare by:\n- Amos Jeffries squid3@treenet.co.nz\n- Greg Wilkins gregw@intalio.com\n- Jason Greene jgreene@redhat.com\n- Keith Morgan K.Morgan@iaea.org\n- Poul-Henning Kamp phk@phk.freebsd.dk \n\n[1] http://lists.w3.org/Archives/Public/ietf-http-wg/2013AprJun/0926.html\n[2] http://httparchive.org/interesting.php\n[3] http://lists.w3.org/Archives/Public/ietf-http-wg/2014AprJun/1664.html\n",
      "createdAt": "2014-07-07T07:46:37Z",
      "updatedAt": "2014-07-16T17:08:03Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "f8020a699206671915bcd1fd6c18ed8b722d2767",
      "headRepository": "gregw/http2-spec",
      "headRefName": "largeframes",
      "headRefOid": "f9c1c906dad65eda96e5f410fcb786d82d44c300",
      "closedAt": "2014-07-16T17:08:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Frame sizes in, moved the CONTINUATION removal part to #559.\n",
          "createdAt": "2014-07-16T17:08:03Z",
          "updatedAt": "2014-07-16T17:08:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 554,
      "id": "MDExOlB1bGxSZXF1ZXN0MTgzMTE3NTI=",
      "title": "Fixed a typo in section 5.3.1 (Stream Dependencies)",
      "url": "https://github.com/httpwg/http2-spec/pull/554",
      "state": "MERGED",
      "author": "frankzinger",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-07-12T06:36:31Z",
      "updatedAt": "2014-07-13T20:25:03Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "c084dab7c81c48f49f3354a22e5bec0c741b4ad4",
      "headRepository": "frankzinger/http2-spec",
      "headRefName": "master",
      "headRefOid": "8083cee3574a857ab63076083ad783a3f0d1bd0f",
      "closedAt": "2014-07-13T20:25:02Z",
      "mergedAt": "2014-07-13T20:25:02Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 559,
      "id": "MDExOlB1bGxSZXF1ZXN0MTg0NDE4Mjk=",
      "title": "Removing CONTINUATION frames",
      "url": "https://github.com/httpwg/http2-spec/pull/559",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Supercedes #547 and #548 and invalidates #549 now that increased frame sizes have been committed.  This still depends on the outcome of #550.\n",
      "createdAt": "2014-07-15T23:28:18Z",
      "updatedAt": "2014-11-25T19:37:09Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a2beac5c2f8df1bbaef613ea2f367bee2d976444",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "remove_continuation",
      "headRefOid": "26bf79495a2fae8fede2402f32aef0b9ad862828",
      "closedAt": "2014-07-21T15:20:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Since people were confused, this isn't an endorsement from me.  I'm just cleaning house, removing dead issues.\n",
          "createdAt": "2014-07-16T19:01:48Z",
          "updatedAt": "2014-07-16T19:01:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 560,
      "id": "MDExOlB1bGxSZXF1ZXN0MTg0NTQxMzk=",
      "title": "Clarifications on frame size.",
      "url": "https://github.com/httpwg/http2-spec/pull/560",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "frame layout"
      ],
      "body": "Make clear that the intent for SETTINGS_MAX_FRAME_SIZE is that\n2^14 <= value <= 2^24 - 1.\n",
      "createdAt": "2014-07-16T08:00:33Z",
      "updatedAt": "2014-11-25T19:37:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "198e44576cc62e4dbd289e4be26927548a7fb9ae",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "FrameSize",
      "headRefOid": "a9a7c68ff45acde5bdd89fcc0c4787d4288914cc",
      "closedAt": "2014-07-16T17:07:22Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged manually: https://github.com/http2/http2-spec/commit/e5c1eb3be2ee1c3ce2c7936431556405a2456bb9\n",
          "createdAt": "2014-07-16T17:07:22Z",
          "updatedAt": "2014-07-16T17:07:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 561,
      "id": "MDExOlB1bGxSZXF1ZXN0MTg0NTUxNzk=",
      "title": "Acknowledgement of unsupported settings",
      "url": "https://github.com/httpwg/http2-spec/pull/561",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "An endpoint that receives a SETTINGS frame must acknowledge it.\n\nIt still has to do this when the SETTINGS frame contains an unsupported setting parameter (either alone or combined with supported setting parameters), otherwise there is a loss of synchronization between SETTINGS frame and their acknowledgements.\n\nThis means that an endpoint has no way of stating whether it supports a new setting or not.\n\nI think this is in line with the sense of the WG regarding extensions. But it should be made clear in the spec.\n",
      "createdAt": "2014-07-16T08:30:56Z",
      "updatedAt": "2014-11-25T19:37:12Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "2a468b8750988c36e0b2ab597fc224c250675901",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "SettingsAck",
      "headRefOid": "a1d52ff38d5700205e4be9f71e40c9c059c2d0bd",
      "closedAt": "2014-07-16T17:07:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged manually: https://github.com/http2/http2-spec/commit/f7693a74081e03d5526b21667b0143655c74cfa4\n",
          "createdAt": "2014-07-16T17:07:04Z",
          "updatedAt": "2014-07-16T17:07:04Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 562,
      "id": "MDExOlB1bGxSZXF1ZXN0MTg1MDI4Mzk=",
      "title": "Adding mandatory cipher suites",
      "url": "https://github.com/httpwg/http2-spec/pull/562",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #498.  Note: adds downref to Informational spec.\n",
      "createdAt": "2014-07-16T23:54:38Z",
      "updatedAt": "2014-07-28T15:26:00Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "3ecd9b2827456be6b8950ae764bbdb436212b59d",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "cipher",
      "headRefOid": "bc6ceb9f50b05c30ef83219f46cb7702e7cb1335",
      "closedAt": "2014-07-28T15:25:58Z",
      "mergedAt": "2014-07-28T15:25:58Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 566,
      "id": "MDExOlB1bGxSZXF1ZXN0MTg3MzQ5NDI=",
      "title": "Proposal for multiple encoding context updates",
      "url": "https://github.com/httpwg/http2-spec/pull/566",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "header compression"
      ],
      "body": "For #565\n",
      "createdAt": "2014-07-22T19:13:23Z",
      "updatedAt": "2014-11-25T19:37:13Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "3ecd9b2827456be6b8950ae764bbdb436212b59d",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "ecu-low-high",
      "headRefOid": "1aceb1e8eaaef0eebacca665486510dd3c180b2a",
      "closedAt": "2014-07-28T17:09:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 568,
      "id": "MDExOlB1bGxSZXF1ZXN0MTg4NDIzMjY=",
      "title": "Removing header ordering",
      "url": "https://github.com/httpwg/http2-spec/pull/568",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Now that we have decided to remove the reference set, the hacks we added to address header field ordering are no longer entirely necessary.\n\nThis change does the following:\n- remove the requirement to concatenate with '\\0'\n- require pseudo-header fields to all appear before regular header fields\n- change 'header set' to 'header list'\n",
      "createdAt": "2014-07-24T14:59:46Z",
      "updatedAt": "2014-07-28T17:19:41Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "c282fea326c9d64de126313d10910b8c4ed33a78",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "header_order",
      "headRefOid": "92a9d8aa22f1cfc72d522be0806ce09b7847f4d5",
      "closedAt": "2014-07-28T15:26:23Z",
      "mergedAt": "2014-07-28T15:26:23Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This has implications beyond ordering w.r.t. compression efficiency,\n_especially_ now that the number of items incurs a cost per item.\n\nOn Thu, Jul 24, 2014 at 7:59 AM, Martin Thomson notifications@github.com\nwrote:\n\n> Now that we have decided to remove the reference set, the hacks we added\n> to address header field ordering are no longer entirely necessary.\n> \n> This change does the following:\n> - remove the requirement to concatenate with '\\0'\n> - require pseudo-header fields to all appear before regular header\n>   fields\n> - change 'header set' to 'header list'\n> \n> ---\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/http2/http2-spec header_order\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/http2/http2-spec/pull/568\n> Commit Summary\n> - Removing header ordering requirements\n> - Reflow\n> \n> File Changes\n> - _M_ draft-ietf-httpbis-http2.xml\n>   https://github.com/http2/http2-spec/pull/568/files#diff-0 (256)\n> \n> Patch Links:\n> - https://github.com/http2/http2-spec/pull/568.patch\n> - https://github.com/http2/http2-spec/pull/568.diff\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/pull/568.\n",
          "createdAt": "2014-07-24T17:33:10Z",
          "updatedAt": "2014-07-24T17:33:10Z"
        },
        {
          "author": "n1hility",
          "authorAssociation": "CONTRIBUTOR",
          "body": "nice, more red than green :)\n",
          "createdAt": "2014-07-25T18:13:05Z",
          "updatedAt": "2014-07-25T18:13:05Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Included into HPACK.\nEncoder and decoder SHOULD preserve ordering.\n:headers MUST appear before normal headers (in both encoded and decoded lists).\n",
          "createdAt": "2014-07-28T17:19:41Z",
          "updatedAt": "2014-07-28T17:19:41Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 570,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkxMzE5MDc=",
      "title": "fix description of frame header size",
      "url": "https://github.com/httpwg/http2-spec/pull/570",
      "state": "MERGED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2014-07-31T04:23:51Z",
      "updatedAt": "2014-07-31T17:53:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "2dd2aad67f15d1acbcccc5f8d1132e04a80086c4",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20140731",
      "headRefOid": "94cf2fbcb422166992826f7ec222d44fb82d20e1",
      "closedAt": "2014-07-31T17:53:47Z",
      "mergedAt": "2014-07-31T17:53:47Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 571,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkxMzY1NDI=",
      "title": "Change error code when window size increment is 0",
      "url": "https://github.com/httpwg/http2-spec/pull/571",
      "state": "CLOSED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It can be consistent with the other error cases of WINDOW_UPDATE such that illegal increment value is above 2^31-1\n",
      "createdAt": "2014-07-31T07:38:54Z",
      "updatedAt": "2014-11-06T00:33:26Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "79e7ab3049013fc50167cecd75ee426216b1ac4b",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20140731_2",
      "headRefOid": "870c5be5a2cdee72d36051ee79d60ffe99405c08",
      "closedAt": "2014-11-05T22:23:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Hi Shigeki,\n\nThis never got discussed on-list; I think it's too late to make changes like this, as they'd likely cause intro problems...\n",
          "createdAt": "2014-11-05T22:23:02Z",
          "updatedAt": "2014-11-05T22:23:02Z"
        },
        {
          "author": "shigeki",
          "authorAssociation": "NONE",
          "body": "@mnot  I intended this for an editorial fix after through reading of the draft. But anyway, it is not so important and closing is not a problem for me.\n",
          "createdAt": "2014-11-06T00:32:57Z",
          "updatedAt": "2014-11-06T00:32:57Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Thanks.\n",
          "createdAt": "2014-11-06T00:33:26Z",
          "updatedAt": "2014-11-06T00:33:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 572,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkxMzcyOTc=",
      "title": "make zero value of SETTINGS_INITIAL_WINDOW_SIZE be connection error",
      "url": "https://github.com/httpwg/http2-spec/pull/572",
      "state": "CLOSED",
      "author": "shigeki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is the same error case as WINDOW_UPDATE.\n",
      "createdAt": "2014-07-31T07:58:19Z",
      "updatedAt": "2014-08-01T00:08:07Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "2dd2aad67f15d1acbcccc5f8d1132e04a80086c4",
      "headRepository": "shigeki/http2-spec",
      "headRefName": "shigeki_20140731_3",
      "headRefOid": "310183ecb2751d676776504e6bc862ed48f2008f",
      "closedAt": "2014-08-01T00:08:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Setting to zero is perfectly appropriate for some strategies, so it\nshouldn't be an error...\n\nOn Thu, Jul 31, 2014 at 12:58 AM, Shigeki Ohtsu notifications@github.com\nwrote:\n\n> ## This is the same error case as WINDOW_UPDATE.\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/shigeki/http2-spec shigeki_20140731_3\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/http2/http2-spec/pull/572\n> Commit Summary\n> - make zero value of SETTINGS_INITIAL_WINDOW_SIZE be connection error\n> \n> File Changes\n> - _M_ draft-ietf-httpbis-http2.xml\n>   https://github.com/http2/http2-spec/pull/572/files#diff-0 (6)\n> \n> Patch Links:\n> - https://github.com/http2/http2-spec/pull/572.patch\n> - https://github.com/http2/http2-spec/pull/572.diff\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/pull/572.\n",
          "createdAt": "2014-07-31T18:06:00Z",
          "updatedAt": "2014-07-31T18:06:00Z"
        },
        {
          "author": "shigeki",
          "authorAssociation": "NONE",
          "body": "Oh, this is one of use cases to block all streams initially. I understood.\n",
          "createdAt": "2014-08-01T00:08:07Z",
          "updatedAt": "2014-08-01T00:08:07Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 573,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkxMzkwMjA=",
      "title": "Fix typo",
      "url": "https://github.com/httpwg/http2-spec/pull/573",
      "state": "MERGED",
      "author": "mad-p",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-07-31T08:43:21Z",
      "updatedAt": "2014-08-01T03:17:36Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "2dd2aad67f15d1acbcccc5f8d1132e04a80086c4",
      "headRepository": "mad-p/http2-spec",
      "headRefName": "fix_typo",
      "headRefOid": "5344dba800eecfd27b289ead5a92615d67730a51",
      "closedAt": "2014-07-31T18:02:54Z",
      "mergedAt": "2014-07-31T18:02:54Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 574,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkxMzkwMzg=",
      "title": "Fix MAX_FRAME_SIZE initial value in Settings Registry",
      "url": "https://github.com/httpwg/http2-spec/pull/574",
      "state": "MERGED",
      "author": "mad-p",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-07-31T08:43:45Z",
      "updatedAt": "2014-08-01T03:17:52Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "2dd2aad67f15d1acbcccc5f8d1132e04a80086c4",
      "headRepository": "mad-p/http2-spec",
      "headRefName": "fix_default_max_frame_size",
      "headRefOid": "475e55ab041a281886e6b936617b7c8d84aefd0d",
      "closedAt": "2014-07-31T18:03:16Z",
      "mergedAt": "2014-07-31T18:03:16Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "454f9bb5d729cc591ef2baee55cf276bdcc87cb8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 576,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkyMDAwMTA=",
      "title": "shearl: s/GOAWAY/GO_AWAY, s/REFUSED_STREAM/RETRY_STREAM, s/RST_STREAM/TERMINATE_STREAM",
      "url": "https://github.com/httpwg/http2-spec/pull/576",
      "state": "CLOSED",
      "author": "shearl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "renamed GOAWAY to GO_AWAY to be consistent with the naming for other two-word frame types ie RST_STREAM, PUSH_PROMISE and WINDOW_UPDATE\n\ns/REFUSED_STREAM/RETRY_STREAM The definition of REFUSED_STREAM is somewhat contradictory with the definition of the word refused. The word refused is defined as: indicate or show that one is _not willing_ to do something (https://www.google.at/).  The definition of REFUSED_STREAM in Section 7 references section 8.1.4 which says that a REFUSED_STREAM is safe to retry.  In other words the server is actually _willing_ to process the stream, but _currently unable_ (e.g. because the client overran settings and so the client needs to retry the stream with the new settings.)\n\ns/RST_STREAM/TERMINATE_STREAM The definition of RST_STREAM doesn't match the meaning of the word reset.  The word reset generally means: \"cause (a binary device) to enter the state representing the numeral 0.\" [http://www.oxforddictionaries.com/definition/english/reset] In other words, the word reset implies that the stream should be reset back to its _original_ state (i.e. IDLE), but RST_STREAM immediately takes a stream to its _terminal_ state (i.e. CLOSED).\n",
      "createdAt": "2014-08-01T09:09:38Z",
      "updatedAt": "2014-11-03T02:33:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "79e7ab3049013fc50167cecd75ee426216b1ac4b",
      "headRepository": "shearl/http2-spec",
      "headRefName": "master",
      "headRefOid": "3b1cd86a6e77b0cc1b41cf257484472fd99888ee",
      "closedAt": "2014-11-03T02:33:50Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you're renaming things for consistency, might I suggest having all 3 stream error names in the same format of \"STREAM_type\" (or \"type_STREAM\").\n\nAlso, you could use \"drop\" instead of \"retry\" or \"refused\" if you're looking for more literal meanings.\n(& add a note about the ability to retry where needed)\n\nThe suggestion would be a matching set of:\nSTREAM_CLOSED\nSTREAM_DROPPED (formerly REFUSED_STREAM)\nSTREAM_CANCELED (formerly CANCEL)\n\nIf you want to be pedantic, you could also rearrange the list to have all \"_ERROR\" together sequentially then all \"STREAM_\" sequentially after that, though changing values this late in the game probably isn't worth it.\n",
          "createdAt": "2014-08-02T07:04:17Z",
          "updatedAt": "2014-08-02T07:07:44Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Closing, as this has become out of sync with he spec. If you're still interested, I think it'd be better to talk about it on-list first, as we're in a stage where even small changes to the spec are getting a lot of scrutiny.\n",
          "createdAt": "2014-11-03T02:33:50Z",
          "updatedAt": "2014-11-03T02:33:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 577,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkyMjAwMTY=",
      "title": "Initially empty being a little ambiguous",
      "url": "https://github.com/httpwg/http2-spec/pull/577",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Looks like I caught some trailing whitespace at the same time.\n",
      "createdAt": "2014-08-01T16:31:44Z",
      "updatedAt": "2014-08-29T18:00:31Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6b10d81cea62853a5bbc01ac73a21447b29c7713",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "initially",
      "headRefOid": "aa8cc0824d4004ace69eebe5b6b2b0a56afe5fcd",
      "closedAt": "2014-08-28T13:21:01Z",
      "mergedAt": "2014-08-28T13:21:01Z",
      "mergedBy": "hruellan",
      "mergeCommit": null,
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The trailing whitespace came from an automatically generated part of the spec and will reappear if I ever re-generate the examples. In addition, it really should be here ;-).\n",
          "createdAt": "2014-08-29T16:35:37Z",
          "updatedAt": "2014-08-29T16:35:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 580,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkzMjcwMzU=",
      "title": "Fix description for SETTING_MAX_FRAME_SIZE.",
      "url": "https://github.com/httpwg/http2-spec/pull/580",
      "state": "CLOSED",
      "author": "mad-p",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The _sender_ advertises it's acceptable max size.\n",
      "createdAt": "2014-08-05T07:48:52Z",
      "updatedAt": "2014-08-05T08:13:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "95ebf486abc7469c38415424e7d3c7b0b99086b7",
      "headRepository": "mad-p/http2-spec",
      "headRefName": "fix_max_frame_size_description",
      "headRefOid": "3c5caf45d07764f67378abcfc9e15fd21c9ac21a",
      "closedAt": "2014-08-05T08:09:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bagder",
          "authorAssociation": "NONE",
          "body": "\"that the sender is willing to receive\" perhaps? ie \"receive\" instead of \"accept\" ?\n",
          "createdAt": "2014-08-05T07:53:57Z",
          "updatedAt": "2014-08-05T07:53:57Z"
        },
        {
          "author": "mad-p",
          "authorAssociation": "NONE",
          "body": "Closed by mistake.  I'll submit another pull request. thx.\n",
          "createdAt": "2014-08-05T08:13:24Z",
          "updatedAt": "2014-08-05T08:13:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 581,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkzMjc2Mzk=",
      "title": "Fix typo",
      "url": "https://github.com/httpwg/http2-spec/pull/581",
      "state": "MERGED",
      "author": "mad-p",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-08-05T08:06:56Z",
      "updatedAt": "2014-08-05T16:01:56Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "95ebf486abc7469c38415424e7d3c7b0b99086b7",
      "headRepository": "mad-p/http2-spec",
      "headRefName": "fix_typo2",
      "headRefOid": "cbd50094ddb1f8601128aa318bd75b8c9babb73f",
      "closedAt": "2014-08-05T16:01:56Z",
      "mergedAt": "2014-08-05T16:01:56Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 582,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkzMjc5MzE=",
      "title": "Fix description for SETTING_MAX_FRAME_SIZE.",
      "url": "https://github.com/httpwg/http2-spec/pull/582",
      "state": "MERGED",
      "author": "mad-p",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The _sender_ advertises it's acceptable max size.\nIncorporated @bagder 's suggestion on #580.\n",
      "createdAt": "2014-08-05T08:15:16Z",
      "updatedAt": "2014-08-05T16:02:54Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "95ebf486abc7469c38415424e7d3c7b0b99086b7",
      "headRepository": "mad-p/http2-spec",
      "headRefName": "fix_max_frame_size_description",
      "headRefOid": "eded260b53b1cf7710de64a1f2b70131ca13098c",
      "closedAt": "2014-08-05T16:02:54Z",
      "mergedAt": "2014-08-05T16:02:54Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 583,
      "id": "MDExOlB1bGxSZXF1ZXN0MTkzNzA5NDM=",
      "title": "Update on the connection header and its use",
      "url": "https://github.com/httpwg/http2-spec/pull/583",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-08-05T21:25:32Z",
      "updatedAt": "2014-08-05T22:59:25Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "3773d39bd2b636c700c4268f1c2e4ba76ae0cec9",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "connection_header",
      "headRefOid": "d349fcda8f4c5f1c3ea68cf14e1f92cb32e2ff00",
      "closedAt": "2014-08-05T22:59:23Z",
      "mergedAt": "2014-08-05T22:59:23Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "12d549cf6e142c420548d8a682144f7c253a3962"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 588,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk1MTQ0NDI=",
      "title": "Wglc edit",
      "url": "https://github.com/httpwg/http2-spec/pull/588",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Editorial suggestions for WGLC. I don't think there's anything controversial or semantically significant here, but please have a look over it before accepting.\n",
      "createdAt": "2014-08-08T08:16:36Z",
      "updatedAt": "2014-08-09T00:12:03Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7c364dd5c215d9cb43ffc4d4706073ec6beab7a2",
      "headRepository": null,
      "headRefName": "wglc-edit",
      "headRefOid": "327d22fd3c40d663c08dbd4a9d3ae08dc3c1a258",
      "closedAt": "2014-08-08T16:26:18Z",
      "mergedAt": "2014-08-08T16:26:18Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c1a369f843bebce132fe175d0ffce0318fc51644"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 589,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk1NDY3MzQ=",
      "title": "fix markup",
      "url": "https://github.com/httpwg/http2-spec/pull/589",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix minor markup and whitespace issues introduced in recent commit\nhttps://github.com/mnot/http2-spec/commit/135a439ba940c7a8054d403b0bb4e1d9315c62a5\n",
      "createdAt": "2014-08-08T19:27:50Z",
      "updatedAt": "2014-08-08T20:07:45Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "f488509241059326de5e834824f78cfb02338a89",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "af5caa2fed92fff18da38788932b0eca4141339b",
      "closedAt": "2014-08-08T19:56:21Z",
      "mergedAt": "2014-08-08T19:56:21Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "ff77d35976727f2e001b9c8a124443f0f3457914"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm so please that this annoyed you enough to make the change for me.\n",
          "createdAt": "2014-08-08T19:58:28Z",
          "updatedAt": "2014-08-08T19:58:28Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Really nice that you can make patches completely from the web interface. It's far quicker for everyone for trivial fixes like this. Quite a useful feature.\n",
          "createdAt": "2014-08-08T20:07:45Z",
          "updatedAt": "2014-08-08T20:07:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 590,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk1Njk3MzI=",
      "title": "Fix mark's initials",
      "url": "https://github.com/httpwg/http2-spec/pull/590",
      "state": "MERGED",
      "author": "summerwind",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-08-10T01:40:56Z",
      "updatedAt": "2014-08-10T05:51:28Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "2fc937f29d6af26f533f35053b63895dcd1ececa",
      "headRepository": "summerwind/http2-spec",
      "headRefName": "editorial-fix",
      "headRefOid": "679a83ae0dc618b8e55e9fcab5dee994cb01a361",
      "closedAt": "2014-08-10T03:43:49Z",
      "mergedAt": "2014-08-10T03:43:49Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6457e762be4943bf68869e9bfbf41df776fa6351"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 596,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk3MDg1NTY=",
      "title": "Hpack wglc",
      "url": "https://github.com/httpwg/http2-spec/pull/596",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Editorial suggestions for WGLC. Please have a good look through before committing.\n",
      "createdAt": "2014-08-13T07:26:22Z",
      "updatedAt": "2014-08-28T15:25:36Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1391ec0c05006a7facb6ef0c83dc5c6fdbf3a72b",
      "headRepository": null,
      "headRefName": "hpack-wglc",
      "headRefOid": "f210c364e7f12f94a7564ac735aaa6ec9b65d1c7",
      "closedAt": "2014-08-28T15:25:36Z",
      "mergedAt": "2014-08-28T15:25:36Z",
      "mergedBy": "hruellan",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 598,
      "id": "MDExOlB1bGxSZXF1ZXN0MjAxNDg0ODM=",
      "title": "Proposal to address push cacheability",
      "url": "https://github.com/httpwg/http2-spec/pull/598",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "server push"
      ],
      "body": "I think the section could benefit from rearrangement some after this, but I'll leave that until later.\n",
      "createdAt": "2014-08-22T01:28:29Z",
      "updatedAt": "2014-08-25T16:39:13Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "36e73218bd6cb55eb5358f278aab52459166f38d",
      "headRepository": null,
      "headRefName": "push-caching",
      "headRefOid": "97938d03c285fee0b424ee5f84bc5a5b1f98b6b3",
      "closedAt": "2014-08-25T16:38:48Z",
      "mergedAt": "2014-08-25T16:38:48Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Once that's done, I'll have a look to see if there is anything that can be done to improve the section structure.  The expanded material might need a new section heading and maybe some re-framing.  Suggestions are, as always, very welcome.\n",
          "createdAt": "2014-08-22T17:18:04Z",
          "updatedAt": "2014-08-22T17:18:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll tweak this to soften the SHOULD and MAY.\n",
          "createdAt": "2014-08-25T16:39:13Z",
          "updatedAt": "2014-08-25T16:39:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 599,
      "id": "MDExOlB1bGxSZXF1ZXN0MjAyODI2MTQ=",
      "title": "HTTP_1.1_REQUIRED",
      "url": "https://github.com/httpwg/http2-spec/pull/599",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adds a \"1.1 Required\" error code, and a mention of the error code in the Renegotiation section.  Hopefully addresses #496.\n",
      "createdAt": "2014-08-26T01:08:26Z",
      "updatedAt": "2016-12-23T17:40:52Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a1f1fef967df14207a6e558d4d7097d56718b21d",
      "headRepository": null,
      "headRefName": "patch-4",
      "headRefOid": "cebb0385f188ddcaf75ec3a7811b836c770e7fdb",
      "closedAt": "2014-10-07T23:23:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to go with #625 for this one.  @MikeBishop, feel free to reopen if I've messed this up.\n",
          "createdAt": "2014-10-07T22:07:57Z",
          "updatedAt": "2014-10-07T22:07:57Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "We need to declare consensus first, Martin.\n",
          "createdAt": "2014-10-07T22:43:14Z",
          "updatedAt": "2014-10-07T22:43:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I have a replacement; see #625.  You know, one that merges and includes IANA section and stuff like that.\n",
          "createdAt": "2014-10-07T23:21:11Z",
          "updatedAt": "2014-10-07T23:21:36Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Thhhpt, this is the pull, not the issue. Need yet more coffee.\n",
          "createdAt": "2014-10-07T23:23:03Z",
          "updatedAt": "2014-10-07T23:23:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 600,
      "id": "MDExOlB1bGxSZXF1ZXN0MjA1MjUwNjc=",
      "title": "WGLC editorial pass",
      "url": "https://github.com/httpwg/http2-spec/pull/600",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A couple nitpicky things that jumped out at me in another readthrough.\n- 3.2.1:  Says that the SETTINGS parameters don't need defaults because of HTTP2-Settings, but they _have_ defaults.  Removing this claim.\n- 3.3:  Says that ALPN is used for HTTPS _if_ you don't have prior knowledge, but 3.4 says you have to use ALPN even if you do have prior knowledge.  Removing the caveat in 3.3 to reconcile.\n- 5.1:  Allowing WINDOW_UPDATE to be send in reserved (remote) state.  This has been discussed in-person and on-list as a reasonable client strategy (low initial window, unchoke the pushes you want), but per the current text this is actually prohibited until after receiving the HEADERS frame.\n- 5.2.1:  Fixing sentence fragment.\n- 5.3.2:  Possibly just a personal/regional style, but from/to or between/and works for me; between/to doesn't.\n- 6.1 and 6.2 use different definitions of the padding field.  Copied 6.1's to 6.2.\n",
      "createdAt": "2014-08-29T21:42:39Z",
      "updatedAt": "2014-08-29T22:25:19Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a7160716b7143421b7af3ddacdf975c6954cfea0",
      "headRepository": null,
      "headRefName": "patch-5",
      "headRefOid": "8199eb4c1777ea067f75dc30b18398a7e3445ac7",
      "closedAt": "2014-08-29T22:08:21Z",
      "mergedAt": "2014-08-29T22:08:21Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "598d986a2bfd84cbfc9ab3a01516d3036910ffce"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Mike.\n",
          "createdAt": "2014-08-29T22:08:34Z",
          "updatedAt": "2014-08-29T22:08:34Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 605,
      "id": "MDExOlB1bGxSZXF1ZXN0MjA3MDA2MTc=",
      "title": "Rewriting header encapsulation attacks section",
      "url": "https://github.com/httpwg/http2-spec/pull/605",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "security"
      ],
      "body": "For #604.\n",
      "createdAt": "2014-09-03T19:38:20Z",
      "updatedAt": "2014-09-26T15:48:19Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "54c288b6ae1a6349c2be62cd1aa6202086988d12",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "headerenc",
      "headRefOid": "52c32efea314ca6bd504be6f08e91e895add7bc9",
      "closedAt": "2014-09-26T15:48:16Z",
      "mergedAt": "2014-09-26T15:48:16Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I need to rebase this...\n",
          "createdAt": "2014-09-26T09:30:41Z",
          "updatedAt": "2014-09-26T09:30:41Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 606,
      "id": "MDExOlB1bGxSZXF1ZXN0MjA3MDA5ODM=",
      "title": "Changes to authority-related text to account for proxies",
      "url": "https://github.com/httpwg/http2-spec/pull/606",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Includes a proposal for #607.\n",
      "createdAt": "2014-09-03T19:44:18Z",
      "updatedAt": "2014-09-23T11:03:14Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "160b16fb09c2b42f891df5e22da9727e4f4a8f32",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "authority",
      "headRefOid": "d09d356e26713310f7832e3ef7f9b47c4826814b",
      "closedAt": "2014-09-09T22:20:57Z",
      "mergedAt": "2014-09-09T22:20:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 608,
      "id": "MDExOlB1bGxSZXF1ZXN0MjA5Njc0MzQ=",
      "title": "Clarifies issue with initial SETTINGS order",
      "url": "https://github.com/httpwg/http2-spec/pull/608",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-09-09T16:32:37Z",
      "updatedAt": "2014-09-09T18:03:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "cbba1bd6986c07f492c3bf554db3be7e354a7dd8",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "connection_preface",
      "headRefOid": "c6fe6440b2be67460bcb9edd5d45ff77766e4fac",
      "closedAt": "2014-09-09T18:03:12Z",
      "mergedAt": "2014-09-09T18:03:12Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "776f47a0dad678fc10609f6cb1a4850c32e1e155"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 615,
      "id": "MDExOlB1bGxSZXF1ZXN0MjE2MzUzNzA=",
      "title": "Fixups for 9.2",
      "url": "https://github.com/httpwg/http2-spec/pull/615",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "security"
      ],
      "body": "See commit log for details on changes.\n",
      "createdAt": "2014-09-23T10:09:00Z",
      "updatedAt": "2014-11-22T01:01:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "93b00cd12f6109579c31eab1f0212f98660a35a8",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "922",
      "headRefOid": "3dc9484c6342aedc1f3223a672ff7588ea11fdbb",
      "closedAt": "2014-11-22T01:01:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Superceded by #644.\n",
          "createdAt": "2014-11-22T01:01:35Z",
          "updatedAt": "2014-11-22T01:01:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 616,
      "id": "MDExOlB1bGxSZXF1ZXN0MjE2NTgxMTI=",
      "title": "Tightening frame size restrictions",
      "url": "https://github.com/httpwg/http2-spec/pull/616",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #611 \n",
      "createdAt": "2014-09-23T16:29:11Z",
      "updatedAt": "2014-09-26T15:49:49Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "54c288b6ae1a6349c2be62cd1aa6202086988d12",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "frame_size",
      "headRefOid": "e83e1532ab534d8b2b9817f9556b281c28e3e187",
      "closedAt": "2014-09-26T15:49:47Z",
      "mergedAt": "2014-09-26T15:49:47Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 617,
      "id": "MDExOlB1bGxSZXF1ZXN0MjE2NTkwNjc=",
      "title": "Allowing validation of padding bytes",
      "url": "https://github.com/httpwg/http2-spec/pull/617",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #602.  This takes the approach used for the TLS padding extension.\n",
      "createdAt": "2014-09-23T16:43:21Z",
      "updatedAt": "2014-09-26T15:43:22Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "54c288b6ae1a6349c2be62cd1aa6202086988d12",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "zero_pad",
      "headRefOid": "17982aa7b2f9d8f84993d9257453d68c7b75e076",
      "closedAt": "2014-09-26T15:43:00Z",
      "mergedAt": "2014-09-26T15:43:00Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 619,
      "id": "MDExOlB1bGxSZXF1ZXN0MjE2OTM0Njk=",
      "title": "change \"of a length\" to \"with..\"",
      "url": "https://github.com/httpwg/http2-spec/pull/619",
      "state": "MERGED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per discussion on mailing list.\n",
      "createdAt": "2014-09-24T05:50:37Z",
      "updatedAt": "2014-09-24T06:04:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "frame_size",
      "baseRefOid": "efa9a6defcc8aeb838b0bc36f24be695f728c6e0",
      "headRepository": null,
      "headRefName": "frame_size",
      "headRefOid": "35efc578d8055fb6d14f718a20522d26f411bc4b",
      "closedAt": "2014-09-24T06:03:16Z",
      "mergedAt": "2014-09-24T06:03:16Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 620,
      "id": "MDExOlB1bGxSZXF1ZXN0MjE2OTkwMzM=",
      "title": "Reworking the dynamic table size section",
      "url": "https://github.com/httpwg/http2-spec/pull/620",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #594.\n\nHere, I moved the text that covers the calculation of the dynamic header table size up into a new section.\n\nThen, I reworded the text to reduce the direct dependency on HTTP/2 and its settings.  The emphasis is now on the using protocol setting a maximum, of which the HTTP/2 setting is just an example.\n\nApologies for the diff, I'll try to split the move commit out to make it more readable.\n",
      "createdAt": "2014-09-24T08:33:26Z",
      "updatedAt": "2014-10-07T22:05:14Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "09aee356555c555149c4a9e6b2b0db7be1c716fd",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "table_size",
      "headRefOid": "a0e2edb501a973b8847cbad55750fd9bd1162c76",
      "closedAt": "2014-09-29T16:20:27Z",
      "mergedAt": "2014-09-29T16:20:27Z",
      "mergedBy": "hruellan",
      "mergeCommit": {
        "oid": "578c01f205c53aa951c53b9cc44ce9fcad476a4a"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, the first commit does the rewording, the second only moves text around.\n",
          "createdAt": "2014-09-24T08:37:43Z",
          "updatedAt": "2014-09-24T08:37:43Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 624,
      "id": "MDExOlB1bGxSZXF1ZXN0MjIzODcyNDQ=",
      "title": "RST_STREAM to cancel unfinished requests",
      "url": "https://github.com/httpwg/http2-spec/pull/624",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "...is now OK.  Closes #618\n",
      "createdAt": "2014-10-07T21:59:58Z",
      "updatedAt": "2014-10-27T23:52:18Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "22d89544179847b8f3792ded256c60857b7ca415",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "rst_ok",
      "headRefOid": "7d2483066093db64531b3fdda1da6dea1a85adb0",
      "closedAt": "2014-10-27T23:51:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged on the command line.\n",
          "createdAt": "2014-10-27T23:52:18Z",
          "updatedAt": "2014-10-27T23:52:18Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 625,
      "id": "MDExOlB1bGxSZXF1ZXN0MjIzODc3NDM=",
      "title": " HTTP_1.1_REQUIRED",
      "url": "https://github.com/httpwg/http2-spec/pull/625",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is an update of #599:\n\n> Adds a \"1.1 Required\" error code, and a mention of the error code in the Renegotiation section.\n\nCloses #496.\n",
      "createdAt": "2014-10-07T22:07:25Z",
      "updatedAt": "2020-09-22T04:14:13Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "22d89544179847b8f3792ded256c60857b7ca415",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "http11req",
      "headRefOid": "4dccef34449388a50d42123a69b73112bcb4d117",
      "closedAt": "2014-10-12T16:33:29Z",
      "mergedAt": "2014-10-12T16:33:29Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "1ce16573e33bb3be584faecc20188faa98e3460c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 626,
      "id": "MDExOlB1bGxSZXF1ZXN0MjI0NzEwMTM=",
      "title": "Improved 9.2.2 TLS Restrictions",
      "url": "https://github.com/httpwg/http2-spec/pull/626",
      "state": "CLOSED",
      "author": "gregw",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Made cipher restrictions TLS1.2 specific.\n\nRemoved all \"such as\" examples and replaced with references to RFC\n\nMade DHE or ECDHE the only acceptable key exchanges as I could not find\nprecise definition of an ephemeral key exchange. None DHE or ECDHE ciphers\nwill have to be TLS 1.3 or rely on 9.2.3\n\nMoved h1 backwards compatibility to 9.2.3 section.  Weak ciphers can\nonly be offered in a retry without h2.  If a client advertises a cipher\nwith h2, it must not subsequently reject it.\n",
      "createdAt": "2014-10-09T04:24:05Z",
      "updatedAt": "2014-10-12T07:57:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "22d89544179847b8f3792ded256c60857b7ca415",
      "headRepository": "gregw/http2-spec",
      "headRefName": "master",
      "headRefOid": "69db826366079d172df081e3c4975ceb953cc731",
      "closedAt": "2014-10-12T07:57:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@gregw, is this superceded by #627 ?  Can it be closed?\n",
          "createdAt": "2014-10-10T18:16:01Z",
          "updatedAt": "2014-10-10T18:16:01Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "Well it is an alternative to #627 - but not one that has got any support.  So closing it.  \n",
          "createdAt": "2014-10-12T07:57:39Z",
          "updatedAt": "2014-10-12T07:57:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 627,
      "id": "MDExOlB1bGxSZXF1ZXN0MjI0NzMxMTI=",
      "title": "Retry after inadequate security",
      "url": "https://github.com/httpwg/http2-spec/pull/627",
      "state": "CLOSED",
      "author": "gregw",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is a variation on https://github.com/http2/http2-spec/pull/626\nIt switches the retry from to only be in the case of inadequate security.\n",
      "createdAt": "2014-10-09T05:59:28Z",
      "updatedAt": "2014-11-24T23:27:49Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "22d89544179847b8f3792ded256c60857b7ca415",
      "headRepository": "gregw/http2-spec",
      "headRefName": "retry_after_inadequate_security",
      "headRefOid": "9e11429c7f74cb98b92e5a847ca8363553dcf6b3",
      "closedAt": "2014-11-24T23:27:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Hey Greg - just a side note; please try to keep diffs on proposals for design issues as minimal as possible, so people can more easily evaluate what you're proposing. If you have editorial suggestions / cleanup that you'd like to do, that can go in a separate (editorial) pull.\n\nThanks,\n",
          "createdAt": "2014-10-10T00:02:26Z",
          "updatedAt": "2014-10-10T00:02:26Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "Mark,\n\nnoted.   I tossed this one up a bit as I think the stricter/simpler write\nup of 9.2.2 is closely related to having a robust handshake.... but I guess\nit could also have been separate and probably should have been.\n\nAnyway, sounds like I may have finally communicated my actual concerns and\nI'm interested to see what Martin comes up with in his updated PR.\n\ncheers\n\nOn 10 October 2014 11:02, Mark Nottingham notifications@github.com wrote:\n\n> Hey Greg - just a side note; please try to keep diffs on proposals for\n> design issues as minimal as possible, so people can more easily evaluate\n> what you're proposing. If you have editorial suggestions / cleanup that\n> you'd like to do, that can go in a separate (editorial) pull.\n> \n> Thanks,\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/pull/627#issuecomment-58596236.\n\n## \n\nGreg Wilkins gregw@intalio.com  @  Webtide - _an Intalio subsidiary_\nhttp://eclipse.org/jetty HTTP, SPDY, Websocket server and client that scales\nhttp://www.webtide.com  advice and support for jetty and cometd.\n",
          "createdAt": "2014-10-10T00:15:55Z",
          "updatedAt": "2014-10-10T00:15:55Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Adopting #644.\n",
          "createdAt": "2014-11-24T23:27:49Z",
          "updatedAt": "2014-11-24T23:27:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 628,
      "id": "MDExOlB1bGxSZXF1ZXN0MjI3MDAxNDY=",
      "title": "a HTTP -> an HTTP",
      "url": "https://github.com/httpwg/http2-spec/pull/628",
      "state": "MERGED",
      "author": "eungjun-yi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think \"an\" is correct.\n",
      "createdAt": "2014-10-14T10:03:08Z",
      "updatedAt": "2014-10-14T22:15:30Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "92ed131cd276c486c75bcde539ad40385149b502",
      "headRepository": "eungjun-yi/http2-spec",
      "headRefName": "fix/a-http",
      "headRefOid": "5d3f092e33926d815369630dd5b4412ed61463b5",
      "closedAt": "2014-10-14T16:44:27Z",
      "mergedAt": "2014-10-14T16:44:27Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "3b8be6eb1b81c486cbfdba81dfcb626fa9219b80"
      },
      "comments": [
        {
          "author": "war59312",
          "authorAssociation": "NONE",
          "body": "An is generally used only before a vowel.\n\nAs in, \"A, E, I, O, and U\".\n\nAn can be used before a \"vowel sound\" as well. But \"h\" in \"http\" is neither in my book.\n\nSee http://en.wikipedia.org/wiki/Vowel for more info.\n",
          "createdAt": "2014-10-14T13:12:22Z",
          "updatedAt": "2014-10-14T13:12:22Z"
        },
        {
          "author": "bagder",
          "authorAssociation": "NONE",
          "body": "In (British?) English, 'h' can be pronounced either as 'aytch' or as 'haytch' so I would say that both 'a' and 'an' HTTP something should be considered fine.\n",
          "createdAt": "2014-10-14T13:14:53Z",
          "updatedAt": "2014-10-14T13:14:53Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's at least be consistent.\n",
          "createdAt": "2014-10-14T16:44:35Z",
          "updatedAt": "2014-10-14T16:44:35Z"
        },
        {
          "author": "davegarrett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you pronounce 'a' as 'ahh' then \"a HTTP\" sounds ok. If you pronounce 'a' as 'aye' then it sounds wrong as you have two 'aye' sounds in a row unless you pronounce your 'h' as 'haytch'. American English would generally expect \"an\" to be used here, I think. Dialects might disagree.\n\nRFC 2616 & RFC 7230 use \"an\".\n",
          "createdAt": "2014-10-14T22:08:59Z",
          "updatedAt": "2014-10-14T22:08:59Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "We had this fight (almost verbatim) for bis; \"an\" won. As Martin says, let's be consistent.\n",
          "createdAt": "2014-10-14T22:15:30Z",
          "updatedAt": "2014-10-14T22:15:30Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 629,
      "id": "MDExOlB1bGxSZXF1ZXN0MjI3NjM0MzU=",
      "title": "Dedupe However, However",
      "url": "https://github.com/httpwg/http2-spec/pull/629",
      "state": "CLOSED",
      "author": "adriancole",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The last sentence of the previous paragraph started with However, which made this sentence not read as nicely. Killed the extra However.\n",
      "createdAt": "2014-10-15T06:36:55Z",
      "updatedAt": "2014-10-28T03:15:08Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "32bc34ceccd34f830b526451ab79a318537c46f7",
      "headRepository": "adriancole/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "046409686686c37239ad6ff91446db470a8a025c",
      "closedAt": "2014-10-28T03:15:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 630,
      "id": "MDExOlB1bGxSZXF1ZXN0MjI4ODE0NTA=",
      "title": "Proposed editorial changes to make the draft more precise or easier to read.",
      "url": "https://github.com/httpwg/http2-spec/pull/630",
      "state": "MERGED",
      "author": "bencebeky",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-10-16T19:51:27Z",
      "updatedAt": "2014-10-16T20:17:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1a1e6e642f448e3fb6ea8a2cd89dee38be0f2478",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "c9ff4b314c7055bd6c1489c9ef59812a9a976aa0",
      "closedAt": "2014-10-16T20:17:39Z",
      "mergedAt": "2014-10-16T20:17:39Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 631,
      "id": "MDExOlB1bGxSZXF1ZXN0MjMwNzQ4MDQ=",
      "title": "Fix bit numbering",
      "url": "https://github.com/httpwg/http2-spec/pull/631",
      "state": "MERGED",
      "author": "wtarreau",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Bits seem to be numbered from 1 to N, which is very confusing since\nalmost every software starts at zero. Also it's common to find macros\nlike :\n\n  #define BIT(N) (1 << (N))\n\nand here that would introduce mistakes since one constantly has to\nthink about shifting bits before using the macro (eg: BIT(3) to check\nbit called \"4\" in the spec, corresponding to value 0x8).\n\nSince there are not that many places where this happens, this commit\naims at fixing them. Note that the hexadecimal values for each of them\nwere already correct and non-ambiguous.\n",
      "createdAt": "2014-10-21T10:11:09Z",
      "updatedAt": "2014-10-21T11:30:21Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "9efc186005d83ead23e7a9fce2d9c132dfe734e1",
      "headRepository": null,
      "headRefName": "fix-bit-numbering",
      "headRefOid": "f789adb31edb806353d890f497cf3394ac526386",
      "closedAt": "2014-10-21T11:30:20Z",
      "mergedAt": "2014-10-21T11:30:20Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9d5109661db0cec8c646232fe58cda2efebda494"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 632,
      "id": "MDExOlB1bGxSZXF1ZXN0MjMxOTYyNDU=",
      "title": "Tweaks for client certs",
      "url": "https://github.com/httpwg/http2-spec/pull/632",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "editor-ready",
        "transport mapping"
      ],
      "body": "Two changes here, one editorial and one probably-editorial:\n- The endpoint might send a connection _or_ a stream error of HTTP_1_1_REQUIRED, depending on the scope of the requirement.  Note that this was non-normative language, so removing the implication that it would always be a connection error simply makes clearer what was already permitted.\n- The server might know as soon as the connection is established that it will want the cert, but want it protected by the handshake.  Either endpoint, not just the client, may choose to renegotiate before sending their preface.\n",
      "createdAt": "2014-10-22T22:57:38Z",
      "updatedAt": "2016-12-23T17:40:51Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "83052c6912f26a5c2b9e0d4660b4cb8aebf6dfaa",
      "headRepository": null,
      "headRefName": "patch-5",
      "headRefOid": "6ee2f48f22ad14239c3db8dbab8359a0039e96ed",
      "closedAt": "2014-11-05T22:29:48Z",
      "mergedAt": "2014-11-05T22:29:48Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "10be6fe81fe231a40a1081b7a304d1006f50a73d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 635,
      "id": "MDExOlB1bGxSZXF1ZXN0MjMyNzE2NTE=",
      "title": "Permitting receipt of WINDOW_UPDATE in reserved (local)",
      "url": "https://github.com/httpwg/http2-spec/pull/635",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #634\n",
      "createdAt": "2014-10-24T01:36:05Z",
      "updatedAt": "2014-10-27T21:19:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "83052c6912f26a5c2b9e0d4660b4cb8aebf6dfaa",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "wurl",
      "headRefOid": "3bbc9619fa713fac40fedbbb4755e33e0e72e4d7",
      "closedAt": "2014-10-27T21:19:55Z",
      "mergedAt": "2014-10-27T21:19:55Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 638,
      "id": "MDExOlB1bGxSZXF1ZXN0MjM0MjI2OTY=",
      "title": "Remove 9.2.2",
      "url": "https://github.com/httpwg/http2-spec/pull/638",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #612\n",
      "createdAt": "2014-10-27T22:52:43Z",
      "updatedAt": "2014-11-22T01:02:01Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "c84cbbbbf3411a926e2a947907caff01bccf5644",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "del922",
      "headRefOid": "8ed1bdb2f5558adcd825d9fec7bc031b21973464",
      "closedAt": "2014-11-22T01:01:59Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We seem to converging on #644.\n",
          "createdAt": "2014-11-22T01:01:59Z",
          "updatedAt": "2014-11-22T01:01:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 639,
      "id": "MDExOlB1bGxSZXF1ZXN0MjM3NjYyMTM=",
      "title": "Proposal for addressing interop issues with 9.2.2",
      "url": "https://github.com/httpwg/http2-spec/pull/639",
      "state": "CLOSED",
      "author": "n1hility",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-11-03T15:17:39Z",
      "updatedAt": "2014-11-24T23:27:07Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "45d0135be8a1b99ecaa12cc603c9511ad7b1ac57",
      "headRepository": "n1hility/http2-spec",
      "headRefName": "master",
      "headRefOid": "31f1473f8ceee27628f3448f27296c755c46fdad",
      "closedAt": "2014-11-24T23:27:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "n1hility",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See #612 \n",
          "createdAt": "2014-11-03T15:46:37Z",
          "updatedAt": "2014-11-03T15:46:37Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Going with #644. \n",
          "createdAt": "2014-11-24T23:27:07Z",
          "updatedAt": "2014-11-24T23:27:07Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 640,
      "id": "MDExOlB1bGxSZXF1ZXN0MjM4MTE1ODY=",
      "title": "typo: HTTP -> HTTP/2",
      "url": "https://github.com/httpwg/http2-spec/pull/640",
      "state": "CLOSED",
      "author": "kazu-yamamoto",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I think this is a typo.\n",
      "createdAt": "2014-11-04T05:06:54Z",
      "updatedAt": "2014-11-25T19:35:54Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "45d0135be8a1b99ecaa12cc603c9511ad7b1ac57",
      "headRepository": "kazu-yamamoto/http2-spec",
      "headRefName": "typo-fix",
      "headRefOid": "9d5070c20d5d8ce17e178d43ddc173344ec68d05",
      "closedAt": "2014-11-25T19:35:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, you are right, but if I accept this now, it will rot #615 or #638, which also fix it.  It seems now likely that we'll accept #615 now.  Let's just sit on this one.\n",
          "createdAt": "2014-11-04T18:36:39Z",
          "updatedAt": "2014-11-04T18:36:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Captured in #644.\n",
          "createdAt": "2014-11-25T19:35:54Z",
          "updatedAt": "2014-11-25T19:35:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 641,
      "id": "MDExOlB1bGxSZXF1ZXN0MjM4Nzg4NDc=",
      "title": "Relaxing 9.2.2 without removing",
      "url": "https://github.com/httpwg/http2-spec/pull/641",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "MUST -> SHOULD, restrictions/requirements -> recommendations\n\nSending e-mail to working group with extended explanation.\n",
      "createdAt": "2014-11-05T01:41:13Z",
      "updatedAt": "2016-12-23T17:40:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "45d0135be8a1b99ecaa12cc603c9511ad7b1ac57",
      "headRepository": null,
      "headRefName": "patch-6",
      "headRefOid": "159cd4311799c6f7b5a05d9c805d1b2f6ce15afe",
      "closedAt": "2014-11-24T23:27:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Adopting #644.\n",
          "createdAt": "2014-11-24T23:27:19Z",
          "updatedAt": "2014-11-24T23:27:19Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 643,
      "id": "MDExOlB1bGxSZXF1ZXN0MjM5NTEyODI=",
      "title": "Enabling the use of PRIORITY at any time",
      "url": "https://github.com/httpwg/http2-spec/pull/643",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed on the mailing list.\n\nCloses #642.\n",
      "createdAt": "2014-11-06T00:48:56Z",
      "updatedAt": "2014-11-25T19:37:51Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "93b00cd12f6109579c31eab1f0212f98660a35a8",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "priority_idle",
      "headRefOid": "84af05bc9fb8fbe3eda6625da857442262a832fd",
      "closedAt": "2014-11-22T00:57:31Z",
      "mergedAt": "2014-11-22T00:57:31Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c8dcb302dfdc18e4d346bf23528131a99dd25804"
      },
      "comments": [
        {
          "author": "igrigorik",
          "authorAssociation": "MEMBER",
          "body": ":+1: \n",
          "createdAt": "2014-11-06T17:02:53Z",
          "updatedAt": "2014-11-06T17:02:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 644,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ0MDgzNTc=",
      "title": "Move to a cipher suite blacklist (WIP)",
      "url": "https://github.com/httpwg/http2-spec/pull/644",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is based on the long set of negotiated changes added to #615.  This adds the blacklist as Sam Hartman proposed at IETF 91.\n\nCloses #612.\n",
      "createdAt": "2014-11-13T23:04:17Z",
      "updatedAt": "2014-11-25T19:37:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1effd058fc0f301c633d8675893848c9e9c08174",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "922sh",
      "headRefOid": "6e43e77f8c5c6ec3a431df227df705d87be68621",
      "closedAt": "2014-11-25T19:11:16Z",
      "mergedAt": "2014-11-25T19:11:16Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "e2c23af809b93b034c32668e9512e5950b29fced"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 647,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ4MTY4ODg=",
      "title": "Privacy",
      "url": "https://github.com/httpwg/http2-spec/pull/647",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Proposal for #645 \n",
      "createdAt": "2014-11-21T03:25:30Z",
      "updatedAt": "2014-11-25T19:37:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6e43e77f8c5c6ec3a431df227df705d87be68621",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "privacy",
      "headRefOid": "4ed85ab39d5e104f77b153459001eabc07eb2a98",
      "closedAt": "2014-11-25T19:35:30Z",
      "mergedAt": "2014-11-25T19:35:30Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9b65760bf581e60393e74e62aebf2575a6886de9"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Taking Mark's base, taking Herve's suggestions and removing some text.  I think that this is good.\n",
          "createdAt": "2014-11-22T01:10:10Z",
          "updatedAt": "2014-11-22T01:10:10Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 648,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ5MDE1NTQ=",
      "title": "Fix Error Code Registry",
      "url": "https://github.com/httpwg/http2-spec/pull/648",
      "state": "MERGED",
      "author": "summerwind",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-11-23T13:51:17Z",
      "updatedAt": "2014-11-24T13:47:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ea36f720f509ab68ef2100309c5a623fc47dad18",
      "headRepository": "summerwind/http2-spec",
      "headRefName": "master",
      "headRefOid": "37bdaa0add8055632d6373a9cc0dd8279b8094e8",
      "closedAt": "2014-11-23T21:05:10Z",
      "mergedAt": "2014-11-23T21:05:10Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "2387ee98bfbacc7d3969ef40f7ba7d1d7ccecf7c"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Was this discussed on-list? Not saying we need discussion there, but it'd be good to highlight it in case somebody's implementation missed it...\n",
          "createdAt": "2014-11-24T01:09:39Z",
          "updatedAt": "2014-11-24T01:09:39Z"
        },
        {
          "author": "summerwind",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No it wasn't. \nh2-15 is not marked as \"implementation draft\". \nSo I pushed as an editorial fix.\n",
          "createdAt": "2014-11-24T13:47:48Z",
          "updatedAt": "2014-11-24T13:47:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 650,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ5MDY1NTI=",
      "title": "Credit where credit is due",
      "url": "https://github.com/httpwg/http2-spec/pull/650",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-11-23T21:06:56Z",
      "updatedAt": "2014-11-23T21:07:17Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "85c4745ef1364888d23e928f615a6fef58b91e21",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "jp",
      "headRefOid": "2ac353d7429c1859e883951c4074f3eee0a0711c",
      "closedAt": "2014-11-23T21:07:04Z",
      "mergedAt": "2014-11-23T21:07:04Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 651,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ5MDY3MDQ=",
      "title": "PROTOCOL_ERROR for SETTINGS_MAX_CONCURRENT_STREAMS violations",
      "url": "https://github.com/httpwg/http2-spec/pull/651",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This one suggests PROTOCOL_ERROR.\n\nCloses #649.\n",
      "createdAt": "2014-11-23T21:18:21Z",
      "updatedAt": "2014-11-26T19:27:03Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "864afb361a4c68eb04d764cfd9aeedff062a99a6",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "mcs_err",
      "headRefOid": "35699dd72f83cbbd9928aee5728c56ef3669dfa7",
      "closedAt": "2014-11-26T19:27:01Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks like we are converging on #652 \n",
          "createdAt": "2014-11-26T19:27:01Z",
          "updatedAt": "2014-11-26T19:27:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 652,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ5MDY3NDA=",
      "title": "Options for SETTINGS_MAX_CONCURRENT_STREAMS violations",
      "url": "https://github.com/httpwg/http2-spec/pull/652",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Rather than just PROTOCOL_ERROR, allow REFUSED_STREAM.\n\nREFUSED_STREAM is a more lenient error.  It allows clients to retry requests.  Servers might also set the GOAWAY stream number to a lower value if they upgraded.\n\nCloses #649.\n",
      "createdAt": "2014-11-23T21:21:11Z",
      "updatedAt": "2014-11-30T07:22:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "57f0135095fe8dbfc04d254217c348c4801d8257",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "mcs_err2",
      "headRefOid": "8b332944641ad1765f84ff2aa40e6347e071a7a0",
      "closedAt": "2014-11-30T07:22:05Z",
      "mergedAt": "2014-11-30T07:22:04Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 653,
      "id": "MDExOlB1bGxSZXF1ZXN0MjQ5MDgzNDM=",
      "title": "minor editorial twiddles",
      "url": "https://github.com/httpwg/http2-spec/pull/653",
      "state": "MERGED",
      "author": "phluid61",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-11-23T23:10:49Z",
      "updatedAt": "2014-11-25T19:08:02Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "57f0135095fe8dbfc04d254217c348c4801d8257",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "5a14b95d3c47680a2246870e970a874e6878b694",
      "closedAt": "2014-11-25T19:08:02Z",
      "mergedAt": "2014-11-25T19:08:02Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 654,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUwMzM2NTk=",
      "title": "remove errant parens",
      "url": "https://github.com/httpwg/http2-spec/pull/654",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "trivial typo fix\n",
      "createdAt": "2014-11-25T19:29:47Z",
      "updatedAt": "2014-11-25T19:36:25Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6e43e77f8c5c6ec3a431df227df705d87be68621",
      "headRepository": null,
      "headRefName": "patch-2",
      "headRefOid": "3ba9090a61d1473dc1b2296549e979c1b652c163",
      "closedAt": "2014-11-25T19:36:25Z",
      "mergedAt": "2014-11-25T19:36:25Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 655,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUwMzYxNDg=",
      "title": "make sentence coherent",
      "url": "https://github.com/httpwg/http2-spec/pull/655",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix severe grammatical issues describing risk of using prohibited cipher suites.\n",
      "createdAt": "2014-11-25T20:04:18Z",
      "updatedAt": "2014-11-25T21:38:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "04eb831d5fc9f01375480cf991472f04197f3b4c",
      "headRepository": null,
      "headRefName": "patch-3",
      "headRefOid": "546062913b1f87f9fb985dd135c0aaa58f003298",
      "closedAt": "2014-11-25T21:38:48Z",
      "mergedAt": "2014-11-25T21:38:48Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "84438440b6b9dee4a6912128c566fe16e3584a64"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 656,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUwNjYxNDg=",
      "title": "Mnot edits",
      "url": "https://github.com/httpwg/http2-spec/pull/656",
      "state": "CLOSED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Editorial suggestions; fell free to ignore, cherry-pick, escalate to design, etc.\n",
      "createdAt": "2014-11-26T07:45:32Z",
      "updatedAt": "2014-11-26T17:26:33Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "0a48a021f46c16f958fb0f94c32439c467601f76",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "mnot-edits",
      "headRefOid": "1b75285efecc2e6e7f59319cacc95ebd57eae57e",
      "closedAt": "2014-11-26T17:26:22Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged manually with minor changes only.\n",
          "createdAt": "2014-11-26T17:26:22Z",
          "updatedAt": "2014-11-26T17:26:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 657,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUxMDIzOTc=",
      "title": "fix alignment in example",
      "url": "https://github.com/httpwg/http2-spec/pull/657",
      "state": "MERGED",
      "author": "davegarrett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-11-26T17:51:43Z",
      "updatedAt": "2014-11-26T18:09:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "ff3737344b14a68f90ae4f65f923a779c3e292c9",
      "headRepository": null,
      "headRefName": "patch-4",
      "headRefOid": "cd312918a089091559ab6171d683d9c566f22bb5",
      "closedAt": "2014-11-26T18:09:27Z",
      "mergedAt": "2014-11-26T18:09:27Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 658,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUxMTM0NzA=",
      "title": "Update PUSH_PROMISE text in Section 5.1 and improve Figure 2. ASCII art diagram",
      "url": "https://github.com/httpwg/http2-spec/pull/658",
      "state": "MERGED",
      "author": "jthackray",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi Martin,\n\nI believe the current text is wrong/confusing for PUSH_PROMISE in the \"Section 5.1 Stream states\" section, as associated streams aren't marked in any way, and are already in use, rather than \"reserve for later use\". This caused me confusion when I was implementing as to which stream was \"associated\" (the new promised stream or the existing stream). I hope my pull request clarifies this text.\n\nI've also improved the ASCII art diagram for Figure 2, albeit at the cost of an extra 4 characters width, which shows whether a frame is being sent, received or both for each transition.\n\nMany thanks,\nJonathan.\n",
      "createdAt": "2014-11-26T20:57:57Z",
      "updatedAt": "2014-11-29T07:25:31Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "4f3b467fc6acf0c8bb2e92f5cc95f374da9a976e",
      "headRepository": "jthackray/http2-spec",
      "headRefName": "master",
      "headRefOid": "72096958adfd0d7416622642a176f658b88b8286",
      "closedAt": "2014-11-29T07:25:31Z",
      "mergedAt": "2014-11-29T07:25:31Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5afa4479d485b6b0714b65e16bf10d9748a53d25"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to send this to the list, but I think that this is OK.\n",
          "createdAt": "2014-11-26T21:19:55Z",
          "updatedAt": "2014-11-26T21:19:55Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I updated the pull request by replacing either with recv/send as suggested on the list: #659.\n",
          "createdAt": "2014-11-27T08:06:41Z",
          "updatedAt": "2014-11-27T08:06:41Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 659,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUxMzQ2NzE=",
      "title": "Replaces either with send+recv",
      "url": "https://github.com/httpwg/http2-spec/pull/659",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-11-27T07:58:36Z",
      "updatedAt": "2015-02-05T10:52:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "4f3b467fc6acf0c8bb2e92f5cc95f374da9a976e",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "diagram",
      "headRefOid": "804101bfdded323da6705f943713c925ce354d95",
      "closedAt": "2014-11-29T07:25:28Z",
      "mergedAt": "2014-11-29T07:25:28Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d1f16a083884b58d2896f76c39a910598d5e7fa4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 660,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUyMzMzNDA=",
      "title": "Extremely minor typo fix.",
      "url": "https://github.com/httpwg/http2-spec/pull/660",
      "state": "CLOSED",
      "author": "Lukasa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Spotted while reviewing the draft-14 to draft-15 diff.\n",
      "createdAt": "2014-11-30T10:42:16Z",
      "updatedAt": "2014-12-05T23:02:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "6442ada69b1c86ee58685235965889461de4da2a",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "typo",
      "headRefOid": "804cce3cd1290059b3485ab3d3356818eb315683",
      "closedAt": "2014-11-30T15:59:58Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Missed -16 cutoff, just.  This isn't a typo though.  The plural/singular form is intentional in this case.\n",
          "createdAt": "2014-11-30T15:59:58Z",
          "updatedAt": "2014-11-30T15:59:58Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In that case the error is earlier, surely: \"an\" should be removed.\n",
          "createdAt": "2014-12-05T21:21:38Z",
          "updatedAt": "2014-12-05T21:21:38Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "as in \"made to an origin server\"; it's a little lumpy, but it is correct\n",
          "createdAt": "2014-12-05T23:02:27Z",
          "updatedAt": "2014-12-05T23:02:27Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 661,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUyOTc1NDc=",
      "title": "Fix typo (s/sever/server/)",
      "url": "https://github.com/httpwg/http2-spec/pull/661",
      "state": "MERGED",
      "author": "jthackray",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi Martin,\n\nFixed a small typo in -16.\n\nCheers,\nJonathan.\n",
      "createdAt": "2014-12-01T20:47:46Z",
      "updatedAt": "2014-12-01T22:14:53Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "81d05fcb4e1cc61e353c57bed43f753465604bab",
      "headRepository": "jthackray/http2-spec",
      "headRefName": "master",
      "headRefOid": "790524d4c995b83dbfa52cd3807ce5c5f9b14628",
      "closedAt": "2014-12-01T22:14:53Z",
      "mergedAt": "2014-12-01T22:14:53Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "4d63a47472e99d9587390a7b8c619fdbec9e3819"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 664,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUzMzY3MzM=",
      "title": "Fix more trivial typos",
      "url": "https://github.com/httpwg/http2-spec/pull/664",
      "state": "MERGED",
      "author": "jthackray",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2014-12-02T12:04:46Z",
      "updatedAt": "2014-12-02T15:04:23Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1743c644125b2507ad137f01c8f791b5e3da18ff",
      "headRepository": "jthackray/http2-spec",
      "headRefName": "master",
      "headRefOid": "a567eb492bd44f222a62436591e4e1a321ac41ad",
      "closedAt": "2014-12-02T15:04:23Z",
      "mergedAt": "2014-12-02T15:04:23Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 665,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUzNjI0NzA=",
      "title": "No PUSH_PROMISE in idle",
      "url": "https://github.com/httpwg/http2-spec/pull/665",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The current text says that you can receive a PUSH_PROMISE on an idle stream, which I don't believe was ever the intent.  Clarifying that PUSH_PROMISE references an idle stream in the Promised Stream ID field, and is not actually sent on the idle stream.\n",
      "createdAt": "2014-12-02T18:18:10Z",
      "updatedAt": "2016-12-23T17:40:49Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "c4be3554ee81b547decb7a33f9294bc013ead800",
      "headRepository": null,
      "headRefName": "patch-7",
      "headRefOid": "cc26250102fc0c228ebeee89b1ded225248ade18",
      "closedAt": "2015-01-27T00:43:57Z",
      "mergedAt": "2015-01-27T00:43:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d1fb19b372e932b8259615bbb46fccfcd97988ab"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 669,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU3NjE1MDc=",
      "title": "Identifying streams more precisely",
      "url": "https://github.com/httpwg/http2-spec/pull/669",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Two issues were raised about the use of the words \"existing\" and \"current\" to refer to streams.  These were a little squishy, so I tightened the language a little.  The text no longer uses either word to refer to streams, instead using stream states to describe where the relevant text applies and favouring \"identified\" as a fallback.\n",
      "createdAt": "2014-12-09T17:36:18Z",
      "updatedAt": "2015-01-27T00:44:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "8a621699ad3ad6368abe36ffb743dc3804fc4e66",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "identifying_streams",
      "headRefOid": "42d75e3c6cda281ba157a0fb40e6b062fdbec68e",
      "closedAt": "2015-01-27T00:44:09Z",
      "mergedAt": "2015-01-27T00:44:09Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 670,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU3NjI3Nzk=",
      "title": "Clarifying idle stream priority",
      "url": "https://github.com/httpwg/http2-spec/pull/670",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As suggested by @mcmanus \n",
      "createdAt": "2014-12-09T17:52:00Z",
      "updatedAt": "2015-01-27T00:44:22Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "8a621699ad3ad6368abe36ffb743dc3804fc4e66",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "priority_mcmanus",
      "headRefOid": "4a76bddd0e0500a9673abb2b1d3d6d80318f9602",
      "closedAt": "2015-01-27T00:44:20Z",
      "mergedAt": "2015-01-27T00:44:20Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 672,
      "id": "MDExOlB1bGxSZXF1ZXN0MjY3OTA4MTA=",
      "title": "Changed Incorrect \"an\" to \"and\" (Editorial)",
      "url": "https://github.com/httpwg/http2-spec/pull/672",
      "state": "MERGED",
      "author": "pducks32",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #671 \n",
      "createdAt": "2015-01-04T04:37:13Z",
      "updatedAt": "2015-01-04T17:57:35Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "5182d1e56026c54462aab3362aff6966725ebfde",
      "headRepository": "pducks32/http2-spec",
      "headRefName": "master",
      "headRefOid": "c624fc71e41db94d7694ea40fe905db9992f36a2",
      "closedAt": "2015-01-04T17:57:35Z",
      "mergedAt": "2015-01-04T17:57:35Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "92165ac662afed5b8c90d21056b5592c8c680e87"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 675,
      "id": "MDExOlB1bGxSZXF1ZXN0MjcxNjM1Njg=",
      "title": "augment FIPS186 reference with document link",
      "url": "https://github.com/httpwg/http2-spec/pull/675",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-01-11T14:49:20Z",
      "updatedAt": "2015-01-11T18:45:18Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "cc915d292220a37041d5fc5d4ccae8223b714ed2",
      "headRepository": "reschke/http2-spec",
      "headRefName": "master",
      "headRefOid": "74689fd870ee73c39b587d0506dca693593bdc69",
      "closedAt": "2015-01-11T18:45:18Z",
      "mergedAt": "2015-01-11T18:45:18Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 678,
      "id": "MDExOlB1bGxSZXF1ZXN0MjcyODEyMTk=",
      "title": "fix varius typoes",
      "url": "https://github.com/httpwg/http2-spec/pull/678",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-01-13T15:58:20Z",
      "updatedAt": "2015-01-13T18:17:36Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "dab9c823f2bfc9fea9e4cf4420f844098ff7ac1f",
      "headRepository": "reschke/http2-spec",
      "headRefName": "master",
      "headRefOid": "c2da79c4f3b7343ed7acddc44020beb88c551cbe",
      "closedAt": "2015-01-13T18:17:36Z",
      "mergedAt": "2015-01-13T18:17:36Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d431b55e484760fb53495db1944752c036a02ad7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 683,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc1Nzc0NjM=",
      "title": "Adding DoS considerations for CONNECT",
      "url": "https://github.com/httpwg/http2-spec/pull/683",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #662.\n",
      "createdAt": "2015-01-18T21:37:29Z",
      "updatedAt": "2015-01-27T00:44:30Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc42bddc61609937164ecc8b148ac958e0d6e561",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue662",
      "headRefOid": "a1f26bd4755c41a1c3545cc7d42d7b0dde1d3308",
      "closedAt": "2015-01-27T00:44:29Z",
      "mergedAt": "2015-01-27T00:44:29Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 684,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc1Nzc1Njk=",
      "title": "Clarifying what happens in the \"idle\" stream state",
      "url": "https://github.com/httpwg/http2-spec/pull/684",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This removes the misleading text as observed in #667.  It also clarifies what was potentially misleading text about PUSH_PROMISE from the section.\n\nCloses #667\n",
      "createdAt": "2015-01-18T21:44:28Z",
      "updatedAt": "2015-01-27T00:47:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc42bddc61609937164ecc8b148ac958e0d6e561",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue667",
      "headRefOid": "71ac4977d236ebee17becd65252276f14fb76f8b",
      "closedAt": "2015-01-27T00:47:49Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Manually merged\n",
          "createdAt": "2015-01-27T00:47:48Z",
          "updatedAt": "2015-01-27T00:47:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 685,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc1Nzc2MTk=",
      "title": "It is a compression error to exceed the defined table size",
      "url": "https://github.com/httpwg/http2-spec/pull/685",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #676\n",
      "createdAt": "2015-01-18T21:48:35Z",
      "updatedAt": "2020-09-22T04:14:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc42bddc61609937164ecc8b148ac958e0d6e561",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue676",
      "headRefOid": "445e120930aa82d22e717f7b3e1d2605c587501f",
      "closedAt": "2015-01-26T15:05:58Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Replaced by #705 for compatibility with other changes.\n",
          "createdAt": "2015-01-26T15:05:58Z",
          "updatedAt": "2015-01-26T15:05:58Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 686,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc1Nzc3MzU=",
      "title": "Proper scope limitation on extension section",
      "url": "https://github.com/httpwg/http2-spec/pull/686",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #677\n",
      "createdAt": "2015-01-18T21:57:12Z",
      "updatedAt": "2015-01-27T00:48:00Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc42bddc61609937164ecc8b148ac958e0d6e561",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue677",
      "headRefOid": "80a22f8bc37ecceae9c9976a5f5da1c3e251a46c",
      "closedAt": "2015-01-27T00:47:59Z",
      "mergedAt": "2015-01-27T00:47:59Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 687,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc1Nzc4NDM=",
      "title": "Reset of promised stream for unsafe method clarifications",
      "url": "https://github.com/httpwg/http2-spec/pull/687",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #679\n",
      "createdAt": "2015-01-18T22:04:12Z",
      "updatedAt": "2015-01-27T00:48:14Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc42bddc61609937164ecc8b148ac958e0d6e561",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue679",
      "headRefOid": "ad5dd802d8815e6e5a3b746954bbb7974eb3e5f9",
      "closedAt": "2015-01-27T00:48:12Z",
      "mergedAt": "2015-01-27T00:48:12Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 688,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc1Nzc5ODA=",
      "title": "HTTP/2 doesn't enable compressed content-codings",
      "url": "https://github.com/httpwg/http2-spec/pull/688",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #680\n",
      "createdAt": "2015-01-18T22:12:39Z",
      "updatedAt": "2015-01-27T00:48:23Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc42bddc61609937164ecc8b148ac958e0d6e561",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue680",
      "headRefOid": "bf3485bf7bed8c676afb2c9521224a2a55348b7d",
      "closedAt": "2015-01-27T00:48:21Z",
      "mergedAt": "2015-01-27T00:48:21Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 689,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc1NzgxMjQ=",
      "title": "Scrubbing for the use of 'optional'",
      "url": "https://github.com/httpwg/http2-spec/pull/689",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #681\n",
      "createdAt": "2015-01-18T22:23:24Z",
      "updatedAt": "2015-01-27T00:48:31Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc42bddc61609937164ecc8b148ac958e0d6e561",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue681",
      "headRefOid": "3b54964c5b303e4d2b65e994adff455ace7faf3a",
      "closedAt": "2015-01-27T00:48:30Z",
      "mergedAt": "2015-01-27T00:48:30Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 690,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc1NzgxNTc=",
      "title": "PRI is safe and idempotent",
      "url": "https://github.com/httpwg/http2-spec/pull/690",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #682\n",
      "createdAt": "2015-01-18T22:25:08Z",
      "updatedAt": "2015-01-27T00:48:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc42bddc61609937164ecc8b148ac958e0d6e561",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue682",
      "headRefOid": "98c59ac9cfb7045b25a65a7df63985f3f3716cdc",
      "closedAt": "2015-01-27T00:48:37Z",
      "mergedAt": "2015-01-27T00:48:37Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6f21c0438b19e746c63cc75e55b57fd53b9dddd7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 692,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc2NTc2ODc=",
      "title": "Addressing GenART review comments",
      "url": "https://github.com/httpwg/http2-spec/pull/692",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There were lots of small changes as a result of [the GenART review](http://www.ietf.org/mail-archive/web/gen-art/current/msg11211.html).\n\nThe only change of note is https://github.com/http2/http2-spec/commit/d4e9ba3d57cb4c5a1a990a4e838369c37a7dad5d, which adds text on what a receiver should expect and what they are obligated to do for streams in the \"half closed (local)\" state.\n",
      "createdAt": "2015-01-20T07:06:09Z",
      "updatedAt": "2015-02-04T03:09:55Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc42bddc61609937164ecc8b148ac958e0d6e561",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "genart",
      "headRefOid": "836a8b10859ebcaf53058dab2b5975ad3ddab4d5",
      "closedAt": "2015-02-04T03:09:52Z",
      "mergedAt": "2015-02-04T03:09:52Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 693,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc2NjAyNDQ=",
      "title": "GenART for compression",
      "url": "https://github.com/httpwg/http2-spec/pull/693",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "[David Black's GenART review of HPACK](http://www.ietf.org/mail-archive/web/gen-art/current/msg11197.html) had a few actionable comments that seemed relatively easy to handle.  In the absence of feedback from @hruellan and @grmocg, I responded.\n\nOf note: the introductory text in https://github.com/http2/http2-spec/commit/3ec8f039c11f73b56a133e99cdfed05f6a08dd18 about the choice to make the format inflexible.\n",
      "createdAt": "2015-01-20T08:19:53Z",
      "updatedAt": "2020-09-22T04:14:16Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc42bddc61609937164ecc8b148ac958e0d6e561",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "genart-comp",
      "headRefOid": "c62129b16448a77324c053752121a05cbebde983",
      "closedAt": "2015-01-20T17:04:25Z",
      "mergedAt": "2015-01-20T17:04:25Z",
      "mergedBy": "grmocg",
      "mergeCommit": {
        "oid": "361a96f3acc5bba69f65a3ec8e6135b7e7cd3085"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 694,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc3MDA3NTU=",
      "title": "More additions for GenART review",
      "url": "https://github.com/httpwg/http2-spec/pull/694",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-01-20T18:34:30Z",
      "updatedAt": "2015-02-05T10:48:00Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "genart-review",
      "headRefOid": "cad8676a4c6d0f0b574c183e783e9ea3b82514c3",
      "closedAt": "2015-02-04T03:10:29Z",
      "mergedAt": "2015-02-04T03:10:29Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 696,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc3MDczMDE=",
      "title": "COMPRESSION_ERROR clarification",
      "url": "https://github.com/httpwg/http2-spec/pull/696",
      "state": "CLOSED",
      "author": "RobbySimpson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Proposal to resolve issue #695 \n",
      "createdAt": "2015-01-20T20:00:58Z",
      "updatedAt": "2015-02-04T03:11:07Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "RobbySimpson/http2-spec",
      "headRefName": "master",
      "headRefOid": "c2b5c7d54a520a92d17de5f7a417a3046b528f65",
      "closedAt": "2015-02-04T03:11:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favour of #699\n",
          "createdAt": "2015-02-04T03:11:00Z",
          "updatedAt": "2015-02-04T03:11:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 697,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc3MjI1MjI=",
      "title": "Framing cipher suite prohibitions as a black list",
      "url": "https://github.com/httpwg/http2-spec/pull/697",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Kathleen Moriarty's IESG review noted some confusion that I think derived from the use of the word \"prohibited\" in relation to the cipher suite black list.\n",
      "createdAt": "2015-01-20T23:27:30Z",
      "updatedAt": "2015-02-04T03:11:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "iesg-km",
      "headRefOid": "64e5800099af0be3a33c1aa499c78e5cdc3ea2d0",
      "closedAt": "2015-02-04T03:11:34Z",
      "mergedAt": "2015-02-04T03:11:34Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 698,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc3MjYwMDU=",
      "title": "Changes from Alissa Coopers IESG review",
      "url": "https://github.com/httpwg/http2-spec/pull/698",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "More may be forthcoming.\n",
      "createdAt": "2015-01-21T00:35:10Z",
      "updatedAt": "2015-02-04T03:11:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "iesg-ac",
      "headRefOid": "61dc9cf1055a7532cc6a0169dfc68ee4b6d352a2",
      "closedAt": "2015-02-04T03:11:57Z",
      "mergedAt": "2015-02-04T03:11:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "87eafb4b8645cf1511ba567a4665f7ee75a14fbc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 699,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc3NzgwMTY=",
      "title": "Adding a failure note for decompression failure",
      "url": "https://github.com/httpwg/http2-spec/pull/699",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Proposal to replace #696.  I think that this is a little clearer this way.\n\nAlso, it's strange that this was not added earlier, but then sometimes the most obvious things get missed.\n\ncc @RobbySimpson\n",
      "createdAt": "2015-01-21T17:25:02Z",
      "updatedAt": "2020-09-22T04:14:18Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue696v2",
      "headRefOid": "63e1ab86802dfeb6dadfdcb38d65d3dff6c1a8f3",
      "closedAt": "2015-02-04T03:11:19Z",
      "mergedAt": "2015-02-04T03:11:18Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "So I'm not seeing how the new sentence is any different than this one two paragraphs below:\nA receiver MUST terminate the connection with a connection error of type COMPRESSION_ERROR if it does not decompress a header block.\n\nMy chief concern (merely editorial) is that HPACK consistently uses the phrase \"decoding error\" whereas here we are using the phrase \"decompress.\"  I think it good to make clear that any and all decoding errors MUST result in connection errors of type COMPRESSION_ERROR.\n\nPicky, I know.  ;-)\n",
          "createdAt": "2015-01-21T19:18:32Z",
          "updatedAt": "2015-01-21T19:18:32Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that Martin's proposal tries to specifically address your concern.\n\nThe sentence two paragraphs below address the case of an endpoint deciding for whatever reason not to decompress a header block: this also has to result in a COMPRESSION_ERROR.\n\nSo I think that both are useful.\n",
          "createdAt": "2015-01-22T17:03:06Z",
          "updatedAt": "2015-01-22T17:03:06Z"
        },
        {
          "author": "RobbySimpson",
          "authorAssociation": "NONE",
          "body": "Ahhh - thanks @hruellan!  Makes perfect sense and I agree.\n",
          "createdAt": "2015-01-22T17:16:35Z",
          "updatedAt": "2015-01-22T17:16:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 700,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5MjMxMTg=",
      "title": "Reset state",
      "url": "https://github.com/httpwg/http2-spec/pull/700",
      "state": "CLOSED",
      "author": "gregw",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The complex conditional behaviour of the closed state indicates that it is really two states: reset and closed.  The reset state is entered when a reset is sent and then transitions to the closed state only when the peer acknowledges the stream is closed with either an END_STREAM flag or RST_STREAM frame.\n\nBy making RST_STREAM an acknowledged frame there is no need for indeterminate behaviour with timeouts to handle frames sent while a RST_STREAM is in transit.    \n",
      "createdAt": "2015-01-23T13:24:32Z",
      "updatedAt": "2015-01-23T14:36:51Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "gregw/http2-spec",
      "headRefName": "reset-state",
      "headRefOid": "ec8f1bd8908fb6243975ba85cbe0b291e8924dc9",
      "closedAt": "2015-01-23T14:36:51Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "I just noticed that my branch picked up a couple of reverted commits from previous PRs.   So IF this is accepted, I'll remake it on a fresh branch without the noise commits.  But I'll leave it as is for now to see if it has a hope first.\n",
          "createdAt": "2015-01-23T14:22:01Z",
          "updatedAt": "2015-01-23T14:22:01Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "I couldn't stand the mess, so I have recreated without noise reverts and with Scotts feedback in https://github.com/http2/http2-spec/pull/701\n",
          "createdAt": "2015-01-23T14:36:51Z",
          "updatedAt": "2015-01-23T14:36:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 701,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5Mjc0MjM=",
      "title": "Added Reset State",
      "url": "https://github.com/httpwg/http2-spec/pull/701",
      "state": "CLOSED",
      "author": "gregw",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The complex conditional behaviour of the closed state indicates that it is really two states: reset and closed. The reset state is entered when a reset is sent and then transitions to the closed state only when the peer acknowledges the stream is closed with either an END_STREAM flag or RST_STREAM frame.\n\nBy making RST_STREAM an acknowledged frame there is no need for indeterminate behaviour with timeouts to handle frames sent while a RST_STREAM is in transit.\n\nThis is a redo of PR#700 on a cleaner branch without reverted commits.\n",
      "createdAt": "2015-01-23T14:35:53Z",
      "updatedAt": "2015-02-12T09:20:51Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "gregw/http2-spec",
      "headRefName": "reset_state_2",
      "headRefOid": "7c6b44d10f8542ed895787284995be0fa428f923",
      "closedAt": "2015-02-11T23:29:33Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "HTTP/2 is approved and going to the RFC editor.\n",
          "createdAt": "2015-02-11T23:29:33Z",
          "updatedAt": "2015-02-11T23:29:33Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Nit: https://datatracker.ietf.org/doc/draft-ietf-httpbis-http2/history/ doesn't show it as approved.\n",
          "createdAt": "2015-02-12T09:20:51Z",
          "updatedAt": "2015-02-12T09:20:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 702,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5MjkyMTI=",
      "title": "Spencer Dawkins' IESG review feedback",
      "url": "https://github.com/httpwg/http2-spec/pull/702",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Dealing with the DISCUSS and a few comments.\n",
      "createdAt": "2015-01-23T15:01:34Z",
      "updatedAt": "2015-02-04T03:14:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "iesg-sd",
      "headRefOid": "f38bf90a370c8044f4240ea7e9dbb28a6abb65aa",
      "closedAt": "2015-02-04T03:14:49Z",
      "mergedAt": "2015-02-04T03:14:48Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 703,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5MzA4NTY=",
      "title": "Addressing concerns about the use of an ALPN identifier",
      "url": "https://github.com/httpwg/http2-spec/pull/703",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... for a non-ALPN/non-TLS purpose.\n\nRaised by Joe Salowey in reviewing the \"h2c\" ALPN registration.\n",
      "createdAt": "2015-01-23T15:23:20Z",
      "updatedAt": "2020-09-22T04:14:19Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "iana-js",
      "headRefOid": "c3c302d68ab5fc1683ad629e4b66c98d5948bb2f",
      "closedAt": "2015-02-04T04:39:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jsalowey",
          "authorAssociation": "NONE",
          "body": "Looks good.\n\nThanks,\n\nJoe\n",
          "createdAt": "2015-01-23T17:26:55Z",
          "updatedAt": "2015-01-23T17:26:55Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 704,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5MzA5NjI=",
      "title": "Expands never indexed literals guidance.",
      "url": "https://github.com/httpwg/http2-spec/pull/704",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Expands section 7.1.3 to describes characteristics of header needing the protection offered by the never indexed literal representation.\n",
      "createdAt": "2015-01-23T15:24:33Z",
      "updatedAt": "2015-02-05T10:04:01Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "sensitive-header",
      "headRefOid": "c68cf2cb39c75f65c7b39a2b45308468180590e6",
      "closedAt": "2015-02-05T10:03:48Z",
      "mergedAt": "2015-02-05T10:03:48Z",
      "mergedBy": "hruellan",
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that this looks good now.\n",
          "createdAt": "2015-01-26T21:38:30Z",
          "updatedAt": "2015-01-26T21:38:30Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 705,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5MzQ3Mzg=",
      "title": "Editorial comments from Julian.",
      "url": "https://github.com/httpwg/http2-spec/pull/705",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-01-23T16:13:18Z",
      "updatedAt": "2015-02-05T10:35:07Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "editorials",
      "headRefOid": "17aef901e96ac9e12d24494e38f55fc08dd3e7e8",
      "closedAt": "2015-02-05T10:35:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Lgtm\n",
          "createdAt": "2015-01-23T23:28:36Z",
          "updatedAt": "2015-01-23T23:28:36Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged manually.\n",
          "createdAt": "2015-02-05T10:35:03Z",
          "updatedAt": "2015-02-05T10:35:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 706,
      "id": "MDExOlB1bGxSZXF1ZXN0MjgwNDA3MDI=",
      "title": "Adds links to Security section.",
      "url": "https://github.com/httpwg/http2-spec/pull/706",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-01-26T16:45:59Z",
      "updatedAt": "2015-02-05T10:53:25Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "b6e44e306fe93d9f1b535442e3c0618f6b9f13dc",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "security",
      "headRefOid": "265f803e163048033d25b712d747fda8f5498ffe",
      "closedAt": "2015-02-05T10:44:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged manually.\n",
          "createdAt": "2015-02-05T10:44:10Z",
          "updatedAt": "2015-02-05T10:44:10Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 707,
      "id": "MDExOlB1bGxSZXF1ZXN0MjgwNTE2MDA=",
      "title": "Edits just for Stephen Farrell",
      "url": "https://github.com/httpwg/http2-spec/pull/707",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes for those things that were obviously busted.  Which (I hope) addresses the comments, with one exception (Richard's discuss contained suggested edits that should clear that one up).\n",
      "createdAt": "2015-01-26T19:10:13Z",
      "updatedAt": "2015-02-04T04:39:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1eb3a6e7176376133cb9bc9457e3e4ea944aea94",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "iesg-sf",
      "headRefOid": "2c19ec426c36b80ac8dc4bbeb2dc50b5a1692e0b",
      "closedAt": "2015-02-04T04:39:45Z",
      "mergedAt": "2015-02-04T04:39:45Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 708,
      "id": "MDExOlB1bGxSZXF1ZXN0MjgwNjgxMDY=",
      "title": "De-MUST-ifying for Pete Resnick",
      "url": "https://github.com/httpwg/http2-spec/pull/708",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This isn't everything yet, but it's the easy ones.\n",
      "createdAt": "2015-01-26T22:55:44Z",
      "updatedAt": "2015-02-04T04:39:30Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "fc8bd794c5fbf0b771afe63006a85fb68aa9013e",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "iesg-pr",
      "headRefOid": "e995f4cccc450f6c0e32bac862a06f446e4e9686",
      "closedAt": "2015-02-04T04:39:29Z",
      "mergedAt": "2015-02-04T04:39:29Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 709,
      "id": "MDExOlB1bGxSZXF1ZXN0MjgwNzEyOTM=",
      "title": "Richard's suggestions",
      "url": "https://github.com/httpwg/http2-spec/pull/709",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "All the diagrams changed.  I hope that doesn't generate conflicts.\n",
      "createdAt": "2015-01-26T23:47:37Z",
      "updatedAt": "2015-02-04T04:40:02Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1eb3a6e7176376133cb9bc9457e3e4ea944aea94",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "iesg-rb",
      "headRefOid": "da6771dde497322b7aba0bc980336da2c0a531fd",
      "closedAt": "2015-02-04T04:39:58Z",
      "mergedAt": "2015-02-04T04:39:58Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 710,
      "id": "MDExOlB1bGxSZXF1ZXN0MjgwOTM3ODY=",
      "title": "Alternative to #703",
      "url": "https://github.com/httpwg/http2-spec/pull/710",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Moves considerations of defining an ALPN token for a non-TLS-based protocol to 3.1.\nChanges \"token\" to \"protocol identifier\" in 3.3.\n",
      "createdAt": "2015-01-27T09:22:56Z",
      "updatedAt": "2015-02-05T10:47:17Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "961f66ac251f5e3c37a70f12d9a360ec58af92e6",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "iana",
      "headRefOid": "efcc4cf2af982322901435aa8638af9f47776ec0",
      "closedAt": "2015-02-04T04:39:11Z",
      "mergedAt": "2015-02-04T04:39:11Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "aa2f73ad203ee854aa16e3f2b54b0c1ac721c059"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 711,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg0ODM3NjY=",
      "title": "Clarifies CONTINUATION frames in state diagram.",
      "url": "https://github.com/httpwg/http2-spec/pull/711",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I thought the description for handling CONTINUATION frames in the state diagram could be misleading: the last CONTINUATION frame causes a transition, not as an individual frame, but as the last frame containing a header block.\n",
      "createdAt": "2015-02-02T16:57:21Z",
      "updatedAt": "2015-02-05T10:46:14Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "961f66ac251f5e3c37a70f12d9a360ec58af92e6",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "continuation",
      "headRefOid": "8093b2e5541d380bde63afe35766547d87f11178",
      "closedAt": "2015-02-04T04:37:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 712,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg4Mjk4OTk=",
      "title": "Uses decoder perspective for maximum table size changes.",
      "url": "https://github.com/httpwg/http2-spec/pull/712",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-02-06T18:19:06Z",
      "updatedAt": "2015-02-06T21:10:46Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "5f39196d0e2ce5ff8b8d3ce3da83369bc6af2d23",
      "headRepository": "hruellan/http2-spec",
      "headRefName": "maximumsize",
      "headRefOid": "8b0eaa7e724a3a9d1a309074a0070439380d7332",
      "closedAt": "2015-02-06T21:10:46Z",
      "mergedAt": "2015-02-06T21:10:46Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "7a0e143056255736d532b4cbc301c961e963034c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 714,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkwMjk5NTU=",
      "title": "Better explanation for static header table.",
      "url": "https://github.com/httpwg/http2-spec/pull/714",
      "state": "CLOSED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-02-10T18:04:51Z",
      "updatedAt": "2020-09-22T04:14:26Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "224ce1fd7a48e502c8b15e1e52562afe2aa085fe",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "draft-12",
      "headRefOid": "9bee490e5c9f904763fd0cdcb2f2fd31c88a8341",
      "closedAt": "2015-03-24T21:24:00Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll leave this open as a reminder that we need an RFC editor's note for it.  Text proposed on-list.\n",
          "createdAt": "2015-02-11T23:30:44Z",
          "updatedAt": "2015-02-11T23:30:44Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Handled by 2985dbe.\n",
          "createdAt": "2015-03-24T21:24:00Z",
          "updatedAt": "2015-03-24T21:24:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 716,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkxMjI3MTY=",
      "title": "\tmodified:   draft-ietf-httpbis-http2.xml",
      "url": "https://github.com/httpwg/http2-spec/pull/716",
      "state": "CLOSED",
      "author": "edburns",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- Slight editorial changes\n- Added downstream and upstream to terms section.\n- Suggested adding Stream ID to example section 8.1.3 Examples.  I\n  provided some Stream IDs but I'm not sure they are correct.\n- Renamed section \"Push Requests\" to be \"Push Promises and Requests\" and\n  fixed references and anchor.\n",
      "createdAt": "2015-02-11T19:54:26Z",
      "updatedAt": "2015-02-11T23:28:00Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "224ce1fd7a48e502c8b15e1e52562afe2aa085fe",
      "headRepository": "edburns/http2-spec",
      "headRefName": "H2-16-715-Editorial",
      "headRefOid": "08c4b1376354801f9e5abfe144b3696191b4194e",
      "closedAt": "2015-02-11T23:28:00Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 718,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkyMzkyNjU=",
      "title": "H2 17 edburns editorial",
      "url": "https://github.com/httpwg/http2-spec/pull/718",
      "state": "CLOSED",
      "author": "edburns",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2015-02-13T04:12:10Z",
      "updatedAt": "2015-02-13T05:01:07Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "224ce1fd7a48e502c8b15e1e52562afe2aa085fe",
      "headRepository": "edburns/http2-spec",
      "headRefName": "H2-17-edburns-Editorial",
      "headRefOid": "af985e9d043528f665fa88e9327ae07c506e37a8",
      "closedAt": "2015-02-13T05:01:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This one seems to add to the last one.  I don't think the changes in the new commits are necessary though.\n",
          "createdAt": "2015-02-13T05:01:07Z",
          "updatedAt": "2015-02-13T05:01:07Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 719,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk1ODkwMTY=",
      "title": "Fix some typos",
      "url": "https://github.com/httpwg/http2-spec/pull/719",
      "state": "CLOSED",
      "author": "leekchan",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi.\n\nI fixed some typos.\n",
      "createdAt": "2015-02-19T05:59:24Z",
      "updatedAt": "2015-02-20T00:37:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "2985dbeed8b845ed2fb962b70dede499e1aad0b8",
      "headRepository": "leekchan/http2-spec",
      "headRefName": "fix-typo",
      "headRefOid": "156e22d6b07f8f174ef25e747ea1120d5d3b471b",
      "closedAt": "2015-02-19T06:26:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Thanks for that, but the portion of the compression spec you corrected is going to be removed when published, and the XSLT is copied from elsewhere, so updating it here won't help. \n",
          "createdAt": "2015-02-19T06:26:29Z",
          "updatedAt": "2015-02-19T06:26:29Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have fixed the upstream XSLT, and copied the latest version over here.\n",
          "createdAt": "2015-02-19T15:41:06Z",
          "updatedAt": "2015-02-19T15:41:06Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Thanks, Julian!\n",
          "createdAt": "2015-02-20T00:37:15Z",
          "updatedAt": "2015-02-20T00:37:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 720,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk2NDg2NDY=",
      "title": "Clear up HPACK Section 4.1 \"Calculating Table Size\"",
      "url": "https://github.com/httpwg/http2-spec/pull/720",
      "state": "CLOSED",
      "author": "jrudolph",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It was not quite clear what exactly was referenced with \"as defined in Section 5.2\". \nIn section 5.2, \"String length\" is defined as the \"number of octets used to encode the string\". \nThis, however, would contradict the (now deleted) second paragraph which explicitly states that the \nlength is to be calculated \"without any Huffman encoding applied\".\n\nTherefore, the reference was deleted and both paragraphs consolidated into one.\n",
      "createdAt": "2015-02-19T21:03:46Z",
      "updatedAt": "2015-02-23T15:39:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "7817ccd229fcc90712fd30e37349c2a68e2de045",
      "headRepository": "jrudolph/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "cea2e570a54d6949d4f94a7284f3ed71a93d8009",
      "closedAt": "2015-02-23T15:39:57Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Your suggestion would improve the HPACK specification.\nUnfortunately, HPACK has been approved and is being published.\n",
          "createdAt": "2015-02-23T15:39:57Z",
          "updatedAt": "2015-02-23T15:39:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 724,
      "id": "MDExOlB1bGxSZXF1ZXN0MzEyOTQyNTE=",
      "title": "Adding protection from padding for the fields in HEADERS",
      "url": "https://github.com/httpwg/http2-spec/pull/724",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #723 \n",
      "createdAt": "2015-03-16T23:19:09Z",
      "updatedAt": "2015-05-04T16:30:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a274a9dc21875bc27d2cddc22862e289fa066dff",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "issue723",
      "headRefOid": "99dd84b0ab1b6736125f1667699a97f23985bad2",
      "closedAt": "2015-05-04T16:30:34Z",
      "mergedAt": "2015-05-04T16:30:34Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "7107423c8db58e443cc2f9907590f6fe16e00180"
      },
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-03-24T21:16:09Z",
          "updatedAt": "2015-03-24T21:16:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged by RFC editor.\n",
          "createdAt": "2015-05-04T16:30:38Z",
          "updatedAt": "2015-05-04T16:30:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 725,
      "id": "MDExOlB1bGxSZXF1ZXN0MzEyOTQ1NzU=",
      "title": "'at any time' for PRIORITY was confusing people",
      "url": "https://github.com/httpwg/http2-spec/pull/725",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This was confusing a few people who weren't clear if the prohibition on frame sending for CONTINUATION trumped this or not.  This isn't a perfect fix, but it should be enough.\n",
      "createdAt": "2015-03-16T23:24:12Z",
      "updatedAt": "2015-05-04T16:30:29Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a274a9dc21875bc27d2cddc22862e289fa066dff",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "at_any_time",
      "headRefOid": "c0a738cea0d187fa564fdc1c730d96b3d9a21b56",
      "closedAt": "2015-05-04T16:30:27Z",
      "mergedAt": "2015-05-04T16:30:27Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-03-24T21:15:37Z",
          "updatedAt": "2015-03-24T21:15:37Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged by RFC editor.\n",
          "createdAt": "2015-05-04T16:30:29Z",
          "updatedAt": "2015-05-04T16:30:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 729,
      "id": "MDExOlB1bGxSZXF1ZXN0MzEzMzk0MzI=",
      "title": "Clarify dynamic table maximum size evolution.",
      "url": "https://github.com/httpwg/http2-spec/pull/729",
      "state": "MERGED",
      "author": "hruellan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a minimal proposal for solving #728.\n",
      "createdAt": "2015-03-17T14:26:48Z",
      "updatedAt": "2020-09-22T04:14:25Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a274a9dc21875bc27d2cddc22862e289fa066dff",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "dynamic_table",
      "headRefOid": "8a1e1cd9be810dd2dd422962daf2a762ea4b7a60",
      "closedAt": "2015-03-24T21:00:54Z",
      "mergedAt": "2015-03-24T21:00:54Z",
      "mergedBy": "hruellan",
      "mergeCommit": {
        "oid": "6d8a94473858e37a22b8e43a5c89b5f3b5ff98a0"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM\n",
          "createdAt": "2015-03-17T16:47:37Z",
          "updatedAt": "2015-03-17T16:47:37Z"
        },
        {
          "author": "grmocg",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Lgtm as well.\nOn Mar 17, 2015 9:47 AM, \"Martin Thomson\" notifications@github.com wrote:\n\n> LGTM\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/http2/http2-spec/pull/729#issuecomment-82471129.\n",
          "createdAt": "2015-03-17T17:24:47Z",
          "updatedAt": "2015-03-17T17:24:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 732,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE2ODE3MjY=",
      "title": "Fixing bug with GOAWAY and graceful shutdown.",
      "url": "https://github.com/httpwg/http2-spec/pull/732",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Closes #731.\n",
      "createdAt": "2015-03-22T02:18:32Z",
      "updatedAt": "2020-09-22T04:14:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a274a9dc21875bc27d2cddc22862e289fa066dff",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "goaway_bug",
      "headRefOid": "3832f62d2a38776c4ace96bd51e1b483ada37512",
      "closedAt": "2015-03-24T20:49:50Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "buchgr",
          "authorAssociation": "NONE",
          "body": "@martinthomson thanks!\n\nA few paragraphs further down it also says\n\n> After sending a GOAWAY frame, the sender can discard frames for streams with identifiers higher than the identified last stream.\n\nFor clarity, this should probably also say for `streams initiated by the receiver` here.\n",
          "createdAt": "2015-03-22T08:18:26Z",
          "updatedAt": "2015-03-22T08:18:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that we've settled on #733 \n",
          "createdAt": "2015-03-24T20:49:50Z",
          "updatedAt": "2015-03-24T20:49:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 733,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE2ODkxNDQ=",
      "title": "Goaway fix v2",
      "url": "https://github.com/httpwg/http2-spec/pull/733",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "After some sleep, I've read through the section and noticed a few other minor inconsistencies.  This alters the structure slightly, as well as replacing the first sentence with a more accurate one.\n\nSupercedes #732.  Closes #731, #732.\n",
      "createdAt": "2015-03-22T15:14:34Z",
      "updatedAt": "2015-05-04T16:30:01Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a274a9dc21875bc27d2cddc22862e289fa066dff",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "goaway_bug2",
      "headRefOid": "3a9a67ddeaa9b0c8dd19aea9ac150d2c7265b2d8",
      "closedAt": "2015-05-04T16:29:59Z",
      "mergedAt": "2015-05-04T16:29:59Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "buchgr",
          "authorAssociation": "NONE",
          "body": "+1, thanks\n",
          "createdAt": "2015-03-22T15:28:13Z",
          "updatedAt": "2015-03-22T16:25:07Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-03-24T21:13:00Z",
          "updatedAt": "2015-03-24T21:13:00Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged by RFC editor.\n",
          "createdAt": "2015-05-04T16:30:00Z",
          "updatedAt": "2015-05-04T16:30:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 734,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE4Njg2NzA=",
      "title": "Headers are OK in 'idle'",
      "url": "https://github.com/httpwg/http2-spec/pull/734",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #721\n",
      "createdAt": "2015-03-24T20:52:28Z",
      "updatedAt": "2015-05-04T16:30:20Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1271b7c9f89977aa1e5d4e115a39b056e67a5b45",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "headers_idle",
      "headRefOid": "1dfff2184230802e61aa63d074283fb04aea7317",
      "closedAt": "2015-05-04T16:30:18Z",
      "mergedAt": "2015-05-04T16:30:18Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-03-24T21:13:26Z",
          "updatedAt": "2015-03-24T21:13:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged by RFC editor.\n",
          "createdAt": "2015-05-04T16:30:20Z",
          "updatedAt": "2015-05-04T16:30:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 735,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE4NjkxMzA=",
      "title": "Reformating cipher black list",
      "url": "https://github.com/httpwg/http2-spec/pull/735",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #722\n",
      "createdAt": "2015-03-24T20:57:02Z",
      "updatedAt": "2015-05-04T16:30:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "1271b7c9f89977aa1e5d4e115a39b056e67a5b45",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "cipher_list_format",
      "headRefOid": "b9372fdccff207f6b2b78d28ab64fc930f981654",
      "closedAt": "2015-05-04T16:30:08Z",
      "mergedAt": "2015-05-04T16:30:08Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6d54aa3d4be4aaa2614c8614c580161d9bf0eafe"
      },
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM!\n",
          "createdAt": "2015-03-24T21:03:41Z",
          "updatedAt": "2015-03-24T21:03:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged by RFC editor.\n",
          "createdAt": "2015-05-04T16:30:11Z",
          "updatedAt": "2015-05-04T16:30:11Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 736,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE4Njk3MTc=",
      "title": "Noting effect of settings on flow control more precisely",
      "url": "https://github.com/httpwg/http2-spec/pull/736",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #727\n",
      "createdAt": "2015-03-24T21:03:54Z",
      "updatedAt": "2015-05-04T16:29:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "4dcd2cd058c6ac90d4974e586c767c4d19bcde38",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "settings_flow_control",
      "headRefOid": "643df83afe316e54a8e50145a049c61576fe3e1e",
      "closedAt": "2015-05-04T16:29:47Z",
      "mergedAt": "2015-05-04T16:29:47Z",
      "mergedBy": "martinthomson",
      "mergeCommit": null,
      "comments": [
        {
          "author": "Scottmitch",
          "authorAssociation": "NONE",
          "body": "Thanks for the PR @martinthomson!  Should we move the issue discussion (https://github.com/http2/http2-spec/issues/727#issuecomment-85060068) to this PR?\n",
          "createdAt": "2015-03-24T21:18:54Z",
          "updatedAt": "2015-03-24T21:18:54Z"
        },
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-03-24T21:19:35Z",
          "updatedAt": "2015-03-24T21:19:35Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@Scottmitch, if you have comments, please let me know ASAP.\n",
          "createdAt": "2015-03-24T21:20:17Z",
          "updatedAt": "2015-03-24T21:20:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged by RFC editor.\n",
          "createdAt": "2015-05-04T16:29:50Z",
          "updatedAt": "2015-05-04T16:29:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 737,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE4Njk4MDc=",
      "title": "PUSH_PROMISE sending conditions",
      "url": "https://github.com/httpwg/http2-spec/pull/737",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This makes it clearer that they can't be sent otherwise.\n\nCloses #726\n",
      "createdAt": "2015-03-24T21:04:45Z",
      "updatedAt": "2015-05-04T16:29:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "4dcd2cd058c6ac90d4974e586c767c4d19bcde38",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "push_state",
      "headRefOid": "4076e4ad4c79a3e40fc1a22eb3231646eb9e7313",
      "closedAt": "2015-05-04T16:29:37Z",
      "mergedAt": "2015-05-04T16:29:37Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "df67ddc17c8f9b1c6f98688a003b6e685c66b4cb"
      },
      "comments": [
        {
          "author": "hruellan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM\n",
          "createdAt": "2015-03-24T21:24:56Z",
          "updatedAt": "2015-03-24T21:24:56Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged by RFC editor.\n",
          "createdAt": "2015-05-04T16:29:39Z",
          "updatedAt": "2015-05-04T16:29:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 742,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI3MzMyMjk=",
      "title": "Fix \"an\" typos",
      "url": "https://github.com/httpwg/http2-spec/pull/742",
      "state": "CLOSED",
      "author": "brendanashworth",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Just a quick look through. Thanks!\n",
      "createdAt": "2015-04-07T04:45:38Z",
      "updatedAt": "2015-04-07T04:58:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "4dcd2cd058c6ac90d4974e586c767c4d19bcde38",
      "headRepository": "brendanashworth/http2-spec",
      "headRefName": "fix-typos",
      "headRefOid": "0d9975adbeac81d98927dbaae64cada5315d74de",
      "closedAt": "2015-04-07T04:58:11Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The RFC editor is [working on this now](http://www.rfc-editor.org/cluster_info.php?cid=C243).  We'll let them fix these.\n",
          "createdAt": "2015-04-07T04:58:11Z",
          "updatedAt": "2015-04-07T04:58:11Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 753,
      "id": "MDExOlB1bGxSZXF1ZXN0NjkxMzg1Mjk=",
      "title": "Change upgrade title to say HTTP/1.1",
      "url": "https://github.com/httpwg/http2-spec/pull/753",
      "state": "CLOSED",
      "author": "phroggyy",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I'm not sure if the intention was to have _Upgrading to HTTP/2_ or _Upgrading from HTTP/1.1_, but the current title is misleading and hence demands a change.\n",
      "createdAt": "2016-05-06T11:31:10Z",
      "updatedAt": "2016-05-09T05:09:25Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a3255e40f4d4550e7111cf57eb4484a28bf28a5b",
      "headRepository": "phroggyy/http2-spec",
      "headRefName": "patch/upgrade-title-fix",
      "headRefOid": "12ec44ee3565ea20cb4ce955825e89609547ece6",
      "closedAt": "2016-05-09T05:09:25Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This section is about upgrading from HTTP/2 to something else.\n",
          "createdAt": "2016-05-09T05:09:25Z",
          "updatedAt": "2016-05-09T05:09:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 763,
      "id": "MDExOlB1bGxSZXF1ZXN0MTI3ODE1MjY5",
      "title": "Fix markdown formatting in README",
      "url": "https://github.com/httpwg/http2-spec/pull/763",
      "state": "CLOSED",
      "author": "Notoh",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "There is no space between the two #'s for the proper markdown header.",
      "createdAt": "2017-06-27T23:39:15Z",
      "updatedAt": "2017-06-29T00:46:35Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "master",
      "baseRefOid": "a3255e40f4d4550e7111cf57eb4484a28bf28a5b",
      "headRepository": "Notoh/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "82f3874c37c1acc2c967513d393974be9629275a",
      "closedAt": "2017-06-28T00:05:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Fixed in source, thanks!",
          "createdAt": "2017-06-28T00:05:52Z",
          "updatedAt": "2017-06-28T00:05:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 795,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQzODAyNzI0",
      "title": "Remove priority",
      "url": "https://github.com/httpwg/http2-spec/pull/795",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This doesn't completely remove it, but it only keeps those pieces\r\nnecessary for interoperability with existing implementations: the rules\r\nfor sending PRIORITY frames in different stream states, the format of\r\nthe HEADERS and PRIORITY frames, and the error handling.\r\n\r\nIt replaces the exposition about how priority works with a deprecation\r\nnotice and the little advice that we currently understand to be\r\naccurate.\r\n\r\nCloses #773.",
      "createdAt": "2020-12-22T00:46:08Z",
      "updatedAt": "2021-05-24T07:04:46Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "054283fe7c7ec4eb95cf44dec6dfb378e15ec1cf",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "prioritectomy",
      "headRefOid": "1d9e8a637d98744eaeb553f283b64e0a1e5d3ab2",
      "closedAt": "2021-05-24T07:04:42Z",
      "mergedAt": "2021-05-24T07:04:42Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "fbe726ddf15b1f18acd7138133adcdb1a0e98b60"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the review Robin.  I think that this is much stronger as a result.",
          "createdAt": "2021-04-23T07:57:42Z",
          "updatedAt": "2021-04-23T07:57:42Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODg2MDk0",
          "commit": {
            "abbreviatedOid": "0d98794"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2020-12-22T08:01:16Z",
          "updatedAt": "2020-12-22T08:01:38Z",
          "comments": [
            {
              "originalPosition": 402,
              "body": "Is there a period missing here?",
              "createdAt": "2020-12-22T08:01:17Z",
              "updatedAt": "2021-04-23T01:16:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQxOTE1NjI2",
          "commit": {
            "abbreviatedOid": "c93a9fb"
          },
          "author": "rmarx",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "I don't feel super-strongly about any of these, but I feel that given the problems with H2 prioritization, it's good to be as nuanced/concrete as possible. ",
          "createdAt": "2021-04-22T08:25:45Z",
          "updatedAt": "2021-04-22T08:41:44Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "This is imo somewhat unclear language: what exactly are the \"resources\" here? When talking about web page construction in other contexts, a \"resource\" is often a file (say main.js), while I feel here resources is more akin to bandwidth (as files are implicitly linked to individual streams?)",
              "createdAt": "2021-04-22T08:25:45Z",
              "updatedAt": "2021-04-23T01:16:17Z"
            },
            {
              "originalPosition": 104,
              "body": "```suggestion\r\n          the content and size of resources, how resources are interrelated, and how those resources will be\r\n```",
              "createdAt": "2021-04-22T08:26:29Z",
              "updatedAt": "2021-04-23T01:16:17Z"
            },
            {
              "originalPosition": 199,
              "body": "Not sure I agree with \"not widely implemented\"... most H2 implementations have a (basic) version of this. \r\n\r\n\"and it's full flexibility was rarely employed\" or \"and it was rarely correctly implemented\" or similar would fit the bill better. (or it can be left out, as this is also said in other terms below)",
              "createdAt": "2021-04-22T08:28:53Z",
              "updatedAt": "2021-04-23T01:16:17Z"
            },
            {
              "originalPosition": 308,
              "body": "Above, it is said that good prioritization can be critical and poor prioritization can lead to performance degradation, which I agree with. As such \"could still be necessary\" is too weak of a statement. \"is still an important aspect to attaining good HTTP/2 performance\" would be better. ",
              "createdAt": "2021-04-22T08:33:46Z",
              "updatedAt": "2021-04-23T01:16:17Z"
            },
            {
              "originalPosition": 319,
              "body": "```suggestion\r\n            format=\"none\">PRIORITY</xref> frames can benefit from applying any priority signals that are\r\n```",
              "createdAt": "2021-04-22T08:34:45Z",
              "updatedAt": "2021-04-23T01:16:17Z"
            },
            {
              "originalPosition": 318,
              "body": "Seeing as the extensible priorities draft also utilizes HTTP headers to communicate its signals, I wonder if this mention of HEADERS frames is too ambiguous for uninitiated readers here? Maybe something like \"HEADERS (as defined in RFC 7540)\" ?",
              "createdAt": "2021-04-22T08:35:56Z",
              "updatedAt": "2021-04-23T01:16:17Z"
            },
            {
              "originalPosition": 333,
              "body": "I wonder if this is a good thing to say, as it has been shown that the defaults in RFC7540 (fair round robin) are typically the worst-case scenario for web page loading performance. \r\n\r\nDoes it not make more sense to deprecate these defaults as well and instead recommend a FIFO/sequential scheme instead in the absence of any signals (or just refer to the extensible priorities draft for the better default options (which also uses FIFO))?",
              "createdAt": "2021-04-22T08:40:12Z",
              "updatedAt": "2021-04-23T01:16:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQyODQxODk2",
          "commit": {
            "abbreviatedOid": "c93a9fb"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-23T01:11:33Z",
          "updatedAt": "2021-04-23T01:11:33Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "size is just another aspect of content :)",
              "createdAt": "2021-04-23T01:11:33Z",
              "updatedAt": "2021-04-23T01:16:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQyODQyMTI1",
          "commit": {
            "abbreviatedOid": "c93a9fb"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-23T01:12:11Z",
          "updatedAt": "2021-04-23T01:12:11Z",
          "comments": [
            {
              "originalPosition": 199,
              "body": "How about s/widely/uniformly ?",
              "createdAt": "2021-04-23T01:12:11Z",
              "updatedAt": "2021-04-23T01:16:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQyODQzNTMz",
          "commit": {
            "abbreviatedOid": "aa939de"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-23T01:16:30Z",
          "updatedAt": "2021-04-23T01:16:31Z",
          "comments": [
            {
              "originalPosition": 333,
              "body": "Good call.  I was being conservative, but I think that we could easily make a stronger statement here.",
              "createdAt": "2021-04-23T01:16:31Z",
              "updatedAt": "2021-04-23T01:16:31Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQyODQzNzMx",
          "commit": {
            "abbreviatedOid": "aa939de"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-23T01:17:06Z",
          "updatedAt": "2021-04-23T01:17:06Z",
          "comments": [
            {
              "originalPosition": 318,
              "body": "I've tweaked this to say \"if you receive priority signals from HEADERS or PRIORITY frames\", which should be clear enough.",
              "createdAt": "2021-04-23T01:17:06Z",
              "updatedAt": "2021-04-23T01:17:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQyODQzNzkw",
          "commit": {
            "abbreviatedOid": "aa939de"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-23T01:17:17Z",
          "updatedAt": "2021-04-23T01:17:17Z",
          "comments": [
            {
              "originalPosition": 308,
              "body": "Done.  Thanks.",
              "createdAt": "2021-04-23T01:17:17Z",
              "updatedAt": "2021-04-23T01:17:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzMDA4NjU1",
          "commit": {
            "abbreviatedOid": "aa939de"
          },
          "author": "rmarx",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-23T07:34:00Z",
          "updatedAt": "2021-04-23T07:34:01Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "Fair enough. It's mainly that size is a parameter typically available only at the server (and is often used in shortest-completion-time schedulers for e.g., multipath) and content (or at least expected content and its semantics/impact) is something typically mainly derived at the client (e.g., difference between render blocking, async or defer JS). \r\n\r\nNow, I don't think it's really necessary to make those nuances here, so I'm fine with dropping it :) ",
              "createdAt": "2021-04-23T07:34:01Z",
              "updatedAt": "2021-04-23T07:34:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzMDExNzI0",
          "commit": {
            "abbreviatedOid": "aa939de"
          },
          "author": "rmarx",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-23T07:37:58Z",
          "updatedAt": "2021-04-23T07:37:59Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Should there be an \"in\" or \"from\" between  signals   and   HEADERS?",
              "createdAt": "2021-04-23T07:37:59Z",
              "updatedAt": "2021-04-23T07:37:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzMDEyMzcx",
          "commit": {
            "abbreviatedOid": "aa939de"
          },
          "author": "rmarx",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "These address all my points nicely, thanks!",
          "createdAt": "2021-04-23T07:38:49Z",
          "updatedAt": "2021-04-23T07:38:49Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUwNjQ0ODAx",
          "commit": {
            "abbreviatedOid": "aa939de"
          },
          "author": "ianswett",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-03T19:16:09Z",
          "updatedAt": "2021-05-17T13:42:26Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Is this first sentence still useful, given priority is listed in the next sentence?",
              "createdAt": "2021-05-03T19:16:09Z",
              "updatedAt": "2021-05-17T13:42:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwOTk2MzY4",
          "commit": {
            "abbreviatedOid": "aa939de"
          },
          "author": "LPardue",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-17T13:54:35Z",
          "updatedAt": "2021-05-17T13:54:35Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYyMjAzNjMx",
          "commit": {
            "abbreviatedOid": "aee015c"
          },
          "author": "birenroy",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-18T15:00:44Z",
          "updatedAt": "2021-05-18T15:04:28Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "s/parallism/parallelism/",
              "createdAt": "2021-05-18T15:00:44Z",
              "updatedAt": "2021-05-18T15:04:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 796,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQzODAyNzc5",
      "title": "Extensions defining pseudo-header fields",
      "url": "https://github.com/httpwg/http2-spec/pull/796",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #8.",
      "createdAt": "2020-12-22T00:46:24Z",
      "updatedAt": "2021-02-02T05:18:05Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "894fb1ede3b6a86bd75ab5376cfb7f7db5b9bd1b",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "extension-pseudo-field",
      "headRefOid": "8ad6f41b72d2275ba7e5e272c75c57cadf3d9901",
      "closedAt": "2021-02-02T05:18:05Z",
      "mergedAt": "2021-02-02T05:18:05Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6091b12ae10fba32ceb8f77ff84b28dc0f0bd676"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODg2NTQ2",
          "commit": {
            "abbreviatedOid": "187e694"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-22T08:02:11Z",
          "updatedAt": "2020-12-22T08:03:11Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n          layout of frames, additions or changes to the way that frames are composed into <xref\r\n```",
              "createdAt": "2020-12-22T08:02:12Z",
              "updatedAt": "2020-12-22T08:05:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 797,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQzODAyOTg1",
      "title": "Changes for TLS 1.3",
      "url": "https://github.com/httpwg/http2-spec/pull/797",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A lot has happened to TLS since we did RFC 7540.  This tries to capture\r\nthat succinctly.\r\n\r\n- It rolls in changes from RFC 8740.\r\n\r\n- It mentions early data and RFC 8470.\r\n\r\n- It updates references, citing TLS 1.3 rather than 1.2 for a generic\r\n  TLS reference.\r\n\r\nCloses #774.",
      "createdAt": "2020-12-22T00:47:09Z",
      "updatedAt": "2021-02-02T03:59:25Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "dd71b3d97206ce5e063c6cdff7ac1792a4531b1e",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "tls13",
      "headRefOid": "97241299365c30b02fd23912918fb50208c19364",
      "closedAt": "2021-02-02T03:59:25Z",
      "mergedAt": "2021-02-02T03:59:25Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "72a8112af9af973e1816c2bcb9b161aed34215e1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODg3OTY5",
          "commit": {
            "abbreviatedOid": "74e532f"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-22T08:05:04Z",
          "updatedAt": "2020-12-22T08:13:55Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Minor editorial note: is it useful to use the `\u201dtls13features\u201d` anchor for consistency with 1.2 and so we don\u2019t have two almost-identical anchors (\u201cTLS13\u201d and \u201ctls13\u201d) in the document?",
              "createdAt": "2020-12-22T08:05:05Z",
              "updatedAt": "2021-02-02T03:58:34Z"
            },
            {
              "originalPosition": 94,
              "body": "As this document obsoletes RFC 8470, is it worth importing that guidance into this document wholesale?",
              "createdAt": "2020-12-22T08:13:27Z",
              "updatedAt": "2021-02-02T03:58:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MzY0MzM2",
          "commit": {
            "abbreviatedOid": "74e532f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-22T21:00:36Z",
          "updatedAt": "2020-12-22T21:00:36Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "It's RFC 8740 that this obsoletes :)  Confusing, I know.  I have to double-check every time because I keep getting them the wrong way around.",
              "createdAt": "2020-12-22T21:00:36Z",
              "updatedAt": "2021-02-02T03:58:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MzY4NjE5",
          "commit": {
            "abbreviatedOid": "74e532f"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-22T21:09:46Z",
          "updatedAt": "2020-12-22T21:09:47Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "That\u2019s a huge mess.",
              "createdAt": "2020-12-22T21:09:46Z",
              "updatedAt": "2021-02-02T03:58:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 798,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQzODAzMDc2",
      "title": "Condition SNI requirement more carefully",
      "url": "https://github.com/httpwg/http2-spec/pull/798",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #792.",
      "createdAt": "2020-12-22T00:47:32Z",
      "updatedAt": "2021-02-02T05:32:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "894fb1ede3b6a86bd75ab5376cfb7f7db5b9bd1b",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "sni-maybe",
      "headRefOid": "d8c84d4aa6d6b786397f159144a71f7482c2ab14",
      "closedAt": "2021-02-02T05:21:26Z",
      "mergedAt": "2021-02-02T05:21:26Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a78e28f8a7e17b9d44c900750994a8dc48e794f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODk5NTg5",
          "commit": {
            "abbreviatedOid": "425bfb4"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-22T08:25:48Z",
          "updatedAt": "2020-12-22T08:25:48Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NTc3MzU5",
          "commit": {
            "abbreviatedOid": "425bfb4"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-23T04:16:31Z",
          "updatedAt": "2020-12-23T04:16:31Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Is \"DNS name\" the right terminology here? 3986 uses [reg-name](https://tools.ietf.org/html/rfc3986#section-3.2.2).",
              "createdAt": "2020-12-23T04:16:31Z",
              "updatedAt": "2020-12-23T04:52:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NjA2MDM4",
          "commit": {
            "abbreviatedOid": "425bfb4"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-23T04:35:32Z",
          "updatedAt": "2020-12-23T04:35:32Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I think so.  `reg-name` is a broad umbrella that covers a bunch of things that might include other name resolution systems (NetBIOS, appletalk, /etc/hosts, namecoin, onion names).  And RFC 6066 uses \"host name\", which implies that it is also generic.  We could use \"host name\" instead, I guess.  That would be more generic, but it also implies a stronger requirement that might not be appropriate for those other uses.  I'm certain about DNS names, but I can't say for sure about the others.",
              "createdAt": "2020-12-23T04:35:32Z",
              "updatedAt": "2020-12-23T04:52:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NjE1MDQ0",
          "commit": {
            "abbreviatedOid": "425bfb4"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-23T04:41:53Z",
          "updatedAt": "2020-12-23T04:41:54Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I think your reasoning is sound. Is 'DNS name' formally defined somewhere? If so, we should probably reference.",
              "createdAt": "2020-12-23T04:41:54Z",
              "updatedAt": "2020-12-23T04:52:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NjM0MDI3",
          "commit": {
            "abbreviatedOid": "d8c84d4"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-23T04:54:08Z",
          "updatedAt": "2020-12-23T04:54:08Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I found something in RFC 8499 that seems right, but it means changing to \"domain name\".  I'll propose the same for QUIC, where this text comes from originally.",
              "createdAt": "2020-12-23T04:54:08Z",
              "updatedAt": "2020-12-23T04:54:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 799,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQzODAzMzE2",
      "title": "Clarifications for trailers",
      "url": "https://github.com/httpwg/http2-spec/pull/799",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Make it clearer that midders leads to the message being invalid.  I\r\nhope.  It was already pretty clear.\r\n\r\nI did have to fix the definition for malformed requests, which was\r\nmissing.\r\n\r\nAnd no mention was made of pseudo-header fields.\r\n\r\nThis uses new terminology too.  That might save effort in a larger\r\ncleanup.\r\n\r\nCloses #780.",
      "createdAt": "2020-12-22T00:48:32Z",
      "updatedAt": "2021-02-02T05:22:53Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "894fb1ede3b6a86bd75ab5376cfb7f7db5b9bd1b",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "midders",
      "headRefOid": "10399697cf7804e5ee8463aaf81b9fa66bfd8a20",
      "closedAt": "2021-02-02T05:22:53Z",
      "mergedAt": "2021-02-02T05:22:53Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "1e2a62afa9f5b439f92c30b1e495f8ca9025f5ee"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTAwMDI3",
          "commit": {
            "abbreviatedOid": "1039969"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-22T08:26:32Z",
          "updatedAt": "2020-12-22T08:26:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 800,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQzODAzNDMy",
      "title": "Reference RFC 6973 for fingerprinting",
      "url": "https://github.com/httpwg/http2-spec/pull/800",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The thinking has evolved considerably since the original reference was\r\nmade.  This is the right way to refer to this concept.\r\n\r\nCloses #771.",
      "createdAt": "2020-12-22T00:49:09Z",
      "updatedAt": "2021-02-22T22:12:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "1e2a62afa9f5b439f92c30b1e495f8ca9025f5ee",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "tracking-vector-ref",
      "headRefOid": "aa98c49f2e6a80f9ab39591fe6c64a705e83860b",
      "closedAt": "2021-02-18T08:58:53Z",
      "mergedAt": "2021-02-18T08:58:52Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "063da80296f4951729be3478bfc810f61f0e9b11"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So the re-request review button doesn't appear to work; @Lukasa, any objections to landing this with the new reference target?",
          "createdAt": "2021-02-18T01:23:35Z",
          "updatedAt": "2021-02-18T01:23:35Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTAwMjI3",
          "commit": {
            "abbreviatedOid": "f491f64"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-22T08:26:50Z",
          "updatedAt": "2020-12-22T08:26:50Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyOTExMzQy",
          "commit": {
            "abbreviatedOid": "aa98c49"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "None whatsoever.",
          "createdAt": "2021-02-18T07:20:57Z",
          "updatedAt": "2021-02-18T07:20:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 801,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ0NTcxOTM4",
      "title": "Add .editorconfig",
      "url": "https://github.com/httpwg/http2-spec/pull/801",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This didn't help a lot with pull requests in QUIC, but it did help people who made regular contributions.",
      "createdAt": "2020-12-23T05:07:33Z",
      "updatedAt": "2021-01-21T23:13:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0277adffeb4dfa0b02608a1b88f0825e9a39feb7",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "editorconfig",
      "headRefOid": "a941b36657db8b72550994f1f0cfa4c6ebedc5b5",
      "closedAt": "2021-01-21T23:13:43Z",
      "mergedAt": "2021-01-21T23:13:43Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "1a422ddc3ad44dfae5e784ff5b5c9975ddbe3fd3"
      },
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We could discuss TABs vs spaces...",
          "createdAt": "2020-12-23T11:01:35Z",
          "updatedAt": "2020-12-23T11:01:35Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let\u2019s not. \ud83d\ude01 ",
          "createdAt": "2020-12-23T22:21:05Z",
          "updatedAt": "2020-12-23T22:21:05Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NzkzNTc2",
          "commit": {
            "abbreviatedOid": "a941b36"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "It's hard to see any sense in which this requires approval, but sure why not.",
          "createdAt": "2020-12-23T10:52:48Z",
          "updatedAt": "2020-12-23T10:52:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 805,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU4OTcxMjU3",
      "title": "Adding myself as editor",
      "url": "https://github.com/httpwg/http2-spec/pull/805",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Wherein I sign a deal with the devil.",
      "createdAt": "2021-01-21T08:29:43Z",
      "updatedAt": "2021-01-21T22:28:43Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0277adffeb4dfa0b02608a1b88f0825e9a39feb7",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-add-editor",
      "headRefOid": "c6f60bf80e612e71ffecf897756305337fe96cc9",
      "closedAt": "2021-01-21T22:28:37Z",
      "mergedAt": "2021-01-21T22:28:37Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "23da1a83b2a809c56d5ed0a9be6ac90ba245c4ea"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 806,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU4OTc5MTE4",
      "title": "Remove use of \"payload\" for message bodies.",
      "url": "https://github.com/httpwg/http2-spec/pull/806",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This patch also changes our text to be consistent in using \"frame\r\npayload\" as a two-word phrase.\r\n\r\nNote that this patch now sometimes leaves us with the text \"frame payload of an X frame\". Shout if that seems too clumsy and I can remove the last word \"frame\", though I think it has the advantage of being extremely clear.\r\n\r\nResolves #803.",
      "createdAt": "2021-01-21T08:43:13Z",
      "updatedAt": "2021-02-02T03:51:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "894fb1ede3b6a86bd75ab5376cfb7f7db5b9bd1b",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-cleanup-payload",
      "headRefOid": "3bc7f7859ff6057c042385597c9367dcc0dd9b63",
      "closedAt": "2021-02-02T03:51:06Z",
      "mergedAt": "2021-02-02T03:51:05Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "3f4a191fe288e63905ab63344b9daf5a7d4a4b61"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNzkwMjIz",
          "commit": {
            "abbreviatedOid": "acab4f9"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-21T22:30:18Z",
          "updatedAt": "2021-01-21T22:33:09Z",
          "comments": [
            {
              "originalPosition": 187,
              "body": "Optional:\r\n```suggestion\r\n              zero or more <xref target=\"DATA\" format=\"none\">DATA</xref> frames containing the message content (see <xref target=\"draft-ietf-httpbis-semantics-14\" section=\"6.4\"/>), and\r\n```\r\n",
              "createdAt": "2021-01-21T22:30:19Z",
              "updatedAt": "2021-01-22T17:20:59Z"
            },
            {
              "originalPosition": 245,
              "body": "Separately, I'm wondering if this \"MUST NOT\" is better as \"cannot\" to match the \"is not possible\" below.",
              "createdAt": "2021-01-21T22:31:25Z",
              "updatedAt": "2021-01-22T17:20:59Z"
            },
            {
              "originalPosition": 303,
              "body": "```suggestion\r\n```",
              "createdAt": "2021-01-21T22:32:07Z",
              "updatedAt": "2021-01-22T17:20:59Z"
            },
            {
              "originalPosition": 318,
              "body": "```suggestion\r\n```",
              "createdAt": "2021-01-21T22:32:18Z",
              "updatedAt": "2021-01-22T17:20:59Z"
            },
            {
              "originalPosition": 334,
              "body": "```suggestion\r\n```",
              "createdAt": "2021-01-21T22:32:29Z",
              "updatedAt": "2021-01-22T17:20:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NDYxNDIz",
          "commit": {
            "abbreviatedOid": "acab4f9"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-22T17:20:18Z",
          "updatedAt": "2021-01-22T17:20:19Z",
          "comments": [
            {
              "originalPosition": 245,
              "body": "Hmm, which \"is not possible\"? I don't see an is-not-possible anywhere near here.",
              "createdAt": "2021-01-22T17:20:18Z",
              "updatedAt": "2021-01-22T17:20:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzIzMjQ3",
          "commit": {
            "abbreviatedOid": "3bc7f78"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-23T01:56:52Z",
          "updatedAt": "2021-01-23T01:56:53Z",
          "comments": [
            {
              "originalPosition": 245,
              "body": "> It is not possible to push a response to a request that includes message content.\r\n\r\nIn the next bit of diff.  Not as close in the file though.",
              "createdAt": "2021-01-23T01:56:52Z",
              "updatedAt": "2021-01-23T01:56:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0ODM2NDcx",
          "commit": {
            "abbreviatedOid": "3bc7f78"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-23T10:09:45Z",
          "updatedAt": "2021-01-23T10:09:46Z",
          "comments": [
            {
              "originalPosition": 245,
              "body": "Ah, I see. My mistake for looking through the file. :wink: But I see what you're driving at.\r\n\r\nI think we need at least one normative statement that promised requests must not contain content. Otherwise, saying \"promised requests cannot include any content\" invites the question \"well, why not?\". Having at least one normative statement means the answer is \"because we said so\" and that's a sufficiently good answer for spec purposes. So I'm inclined to leave it.",
              "createdAt": "2021-01-23T10:09:46Z",
              "updatedAt": "2021-01-23T10:09:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 807,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU4OTgzNjU2",
      "title": "Defer to the core spec for connection-specific headers",
      "url": "https://github.com/httpwg/http2-spec/pull/807",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #804.",
      "createdAt": "2021-01-21T08:50:42Z",
      "updatedAt": "2021-02-02T03:53:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "894fb1ede3b6a86bd75ab5376cfb7f7db5b9bd1b",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-defer-to-core-for-connection",
      "headRefOid": "7537dd7a40739c9324fd05e9e1da81731a2361e5",
      "closedAt": "2021-02-02T03:53:48Z",
      "mergedAt": "2021-02-02T03:53:48Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "89445a0e1f886ae3733eec862ac4b76ffe4a6264"
      },
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note: this patch depends on #806 for the xref. I don't want to add it here as well because then they won't merge cleanly.",
          "createdAt": "2021-01-21T09:26:27Z",
          "updatedAt": "2021-01-21T09:26:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "WFM.  We can keep this open until https://github.com/quicwg/base-drafts/pull/4747 lands so that the language stays coherent between the two specs.",
          "createdAt": "2021-01-21T22:24:21Z",
          "updatedAt": "2021-01-21T22:24:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 808,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU5MDE0MTg2",
      "title": "Remove definition of 421 and point to core.",
      "url": "https://github.com/httpwg/http2-spec/pull/808",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #802.\r\n\r\nDepends on #806 for the xref, won't build cleanly without it. However, I don't want to add the xref here as it would prevent a clean merge.",
      "createdAt": "2021-01-21T09:34:52Z",
      "updatedAt": "2021-02-02T03:54:32Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "894fb1ede3b6a86bd75ab5376cfb7f7db5b9bd1b",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-421",
      "headRefOid": "991df681b1d0e777b36c11e811978b78ef6faf94",
      "closedAt": "2021-02-02T03:54:32Z",
      "mergedAt": "2021-02-02T03:54:31Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "dd71b3d97206ce5e063c6cdff7ac1792a4531b1e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNzkyMzI4",
          "commit": {
            "abbreviatedOid": "991df68"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Let's get #806 in first :)",
          "createdAt": "2021-01-21T22:34:00Z",
          "updatedAt": "2021-01-21T22:34:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 809,
      "id": "MDExOlB1bGxSZXF1ZXN0NTYzMDU3NTQ2",
      "title": "fix IETF area name",
      "url": "https://github.com/httpwg/http2-spec/pull/809",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-01-28T07:54:05Z",
      "updatedAt": "2021-02-08T00:59:58Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "894fb1ede3b6a86bd75ab5376cfb7f7db5b9bd1b",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "23f7fc1030225da1faecc5608d5034ff66be7664",
      "closedAt": "2021-01-28T08:49:34Z",
      "mergedAt": "2021-01-28T08:49:34Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "f862b6659dc5498ed9f6dccf1fcb83a0e341adf0"
      },
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "hmmm.... where did this change go?",
          "createdAt": "2021-02-05T06:33:24Z",
          "updatedAt": "2021-02-05T06:33:24Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't know.  I re-added it.",
          "createdAt": "2021-02-05T10:52:46Z",
          "updatedAt": "2021-02-05T10:52:46Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Something is weird. How did you \"re-add\" it? ",
          "createdAt": "2021-02-05T15:45:19Z",
          "updatedAt": "2021-02-05T15:45:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "`git cherry-pick 23f7fc1; git push origin main`",
          "createdAt": "2021-02-08T00:59:58Z",
          "updatedAt": "2021-02-08T00:59:58Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4MDkyMzQw",
          "commit": {
            "abbreviatedOid": "23f7fc1"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-28T08:37:13Z",
          "updatedAt": "2021-01-28T08:37:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 811,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY1NzAxMjA1",
      "title": "First pass on references to updated documents",
      "url": "https://github.com/httpwg/http2-spec/pull/811",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is fairly cursory at this stage.  The goal is to get the document\r\nfunctional first.  Next step is a full read-through for terminology.",
      "createdAt": "2021-02-02T06:31:39Z",
      "updatedAt": "2021-02-18T00:59:44Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "7c6412d243604b986ea1cbad7f1a3f0f71d6a8d4",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "semantics-refs",
      "headRefOid": "4182ee1324fa8db10c8cb7a585b3d2075e453336",
      "closedAt": "2021-02-18T00:59:21Z",
      "mergedAt": "2021-02-18T00:59:21Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6ae5655abd4f73048c8936c1ef99d6b4487da41e"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "\"field section compression\" it is.",
          "createdAt": "2021-02-08T01:06:46Z",
          "updatedAt": "2021-02-08T01:06:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This might need a double-check later, but it's too big to leave sitting.",
          "createdAt": "2021-02-18T00:59:44Z",
          "updatedAt": "2021-02-18T00:59:44Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMDk0Mzk3",
          "commit": {
            "abbreviatedOid": "f0caa55"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Generally looks good, some notes on specific references in the diff.",
          "createdAt": "2021-02-02T08:33:55Z",
          "updatedAt": "2021-02-02T08:54:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "We really don't have a section reference here?",
              "createdAt": "2021-02-02T08:33:55Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 72,
              "body": "Editorial nit: \"abstract HTTP message abstraction\". Aren't abstractions tautologically abstract? I think I'd propose deleting the first instance of the word \"abstract\".\r\n\r\n```suggestion\r\n        HTTP/2 defines a framing of the HTTP message abstraction\r\n```",
              "createdAt": "2021-02-02T08:40:46Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 95,
              "body": "I'm not sure about this reference. Section 5 is \"Fields\", but this doesn't define \"header section\" (though perplexingly does _use_ the term). \"Header section\" is defined in \u00a7 6.3. I think we should be referring to that instead. This also lines up nicely with the other references in this list, which point to \u00a7 6.4 and \u00a7 6.5.\r\n\r\n```suggestion\r\n              the header section (see <xref target=\"HTTP\" section=\"6.3\"/>),\r\n```",
              "createdAt": "2021-02-02T08:42:42Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 117,
              "body": "Should this reference be more specific, to \u00a7 15.2? \u00a7 15 is \"Status codes\", \u00a7 15.2 is \"Informational 1xx\".",
              "createdAt": "2021-02-02T08:45:21Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 239,
              "body": "Can we make this more specific? I think we could point at \u00a7 6.4 (\"Content\").\r\n\r\n```suggestion\r\n              content.  A response that is defined to have no content, as described in <xref target=\"HTTP\" section=\"6.4\"/>, can have a non-zero\r\n```",
              "createdAt": "2021-02-02T08:49:15Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 266,
              "body": "no-cache is \u00a7 5.2.2.3, not \u00a7 5.2.2.4.\r\n\r\n```suggestion\r\n          if the \"no-cache\" cache response directive is present; see <xref target=\"CACHE\" section=\"5.2.2.3\"/>) while the stream identified by the\r\n```",
              "createdAt": "2021-02-02T08:51:17Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNzg3NTE4",
          "commit": {
            "abbreviatedOid": "f7ad17f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Note that one non-obvious thing here is that HTTP/1.1 is a normative reference here.  I didn't think that it needed to be initially, but then I found that it was unavoidable because we talk a LOT about translating too and from 1.1.  I don't think that we can avoid that unfortunately.",
          "createdAt": "2021-02-02T21:25:40Z",
          "updatedAt": "2021-02-02T21:28:27Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "It's a very broad reference, it doesn't need to be precise.",
              "createdAt": "2021-02-02T21:25:41Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzNjQ1Mjk5",
          "commit": {
            "abbreviatedOid": "f7ad17f"
          },
          "author": "afrind",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-04T17:34:09Z",
          "updatedAt": "2021-02-04T17:48:59Z",
          "comments": [
            {
              "originalPosition": 269,
              "body": "Does this setting also apply to trailer sections?",
              "createdAt": "2021-02-04T17:34:09Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 327,
              "body": "Is 'header compression' still what you want here?",
              "createdAt": "2021-02-04T17:37:00Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 701,
              "body": "Is this a MUST and/or is the message malformed otherwise?",
              "createdAt": "2021-02-04T17:41:20Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 916,
              "body": "The setting applies to the size of a decompressed header list, which implicitly limits the size of the blocks (it is compression, after all).  Does that need to be called out more explicitly?",
              "createdAt": "2021-02-04T17:45:25Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 76,
              "body": "HPACK compresses both fields and control data and applies to \"field lines\", but control data is not a field?  This might need more explanation.",
              "createdAt": "2021-02-04T17:48:49Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzNjYzOTE0",
          "commit": {
            "abbreviatedOid": "f7ad17f"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-04T17:54:40Z",
          "updatedAt": "2021-02-04T17:55:43Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "Yeah I think this specific change doesn't read right to me. Is \"field block\" really right? That feels very strange.",
              "createdAt": "2021-02-04T17:54:40Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 269,
              "body": "I thought we called this the \"field section\" above.",
              "createdAt": "2021-02-04T17:55:10Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0MDIwOTQx",
          "commit": {
            "abbreviatedOid": "f7ad17f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-05T04:51:34Z",
          "updatedAt": "2021-02-05T04:51:35Z",
          "comments": [
            {
              "originalPosition": 327,
              "body": "I think that it is still OK to call it header compression, especially as we aren't revising RFC 7541.  It is a little janky and it probably needs better explanation, but I don't see a better alternative.",
              "createdAt": "2021-02-05T04:51:34Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0MDIxMDg0",
          "commit": {
            "abbreviatedOid": "f7ad17f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-05T04:52:00Z",
          "updatedAt": "2021-02-05T04:52:00Z",
          "comments": [
            {
              "originalPosition": 701,
              "body": "There are MUSTs in other places.",
              "createdAt": "2021-02-05T04:52:00Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0MDI3ODky",
          "commit": {
            "abbreviatedOid": "f7ad17f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-05T05:13:11Z",
          "updatedAt": "2021-02-05T05:13:11Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "I've given this another go, with a more comprehensive rewrite of the first few paragraphs of this section.  Let me know if that reads better.",
              "createdAt": "2021-02-05T05:13:11Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0Mzg1NDA4",
          "commit": {
            "abbreviatedOid": "0b9bd4e"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-05T14:26:56Z",
          "updatedAt": "2021-02-05T14:26:56Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "I do think it's better, yeah.",
              "createdAt": "2021-02-05T14:26:56Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0NTE4Njkz",
          "commit": {
            "abbreviatedOid": "0b9bd4e"
          },
          "author": "afrind",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-05T16:48:21Z",
          "updatedAt": "2021-02-05T16:59:23Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "'or decompressing' reads weirdly to me, since that doesn't apply to the action described: field lines -> field block.  Might be better to just say compression transforms field lines to field blocks and decompression transforms field blocks into field lines.",
              "createdAt": "2021-02-05T16:48:22Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 40,
              "body": "would 'header field sections' read better?",
              "createdAt": "2021-02-05T16:48:46Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 25,
              "body": "I feel like \"Field Section Compression and Decompression\" would be more consistent.",
              "createdAt": "2021-02-05T16:53:27Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            },
            {
              "originalPosition": 327,
              "body": "I think we can call it field section compression everywhere in this document, and explain in the terms section how 7541 Header Compression applies?",
              "createdAt": "2021-02-05T16:58:03Z",
              "updatedAt": "2021-02-18T00:58:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 813,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY2OTgxMTAw",
      "title": "Clarify that PRIORITY does not close streams.",
      "url": "https://github.com/httpwg/http2-spec/pull/813",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a first stab at #759. I've gone for a minimal change here, simply clarifying that only HEADERS and PUSH_PROMISE frames have the effect of implicitly closing streams.\r\n\r\nWhile I was writing this I did have a question that may need to be raised on-list: do HEADERS and PUSH_PROMISE only implicitly close streams if they are _accepted_? That is, if a client sends a HEADERS frame that triggers a stream error, does that HEADERS frame still implicitly close all streams with a lower stream ID that are in the \"idle\" state? This may also be worth clarifying.",
      "createdAt": "2021-02-03T16:47:23Z",
      "updatedAt": "2021-02-05T02:30:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0779af043f353e66d45dd2aa15ef69ff70130f57",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-stream-state-priority",
      "headRefOid": "4607a750884c4f24b65bafb4f38f7f4c2f967e16",
      "closedAt": "2021-02-05T02:30:57Z",
      "mergedAt": "2021-02-05T02:30:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "1cecb59df495df362274fbd9543275848367b05a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyOTI0Njg0",
          "commit": {
            "abbreviatedOid": "8b22905"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-04T00:07:29Z",
          "updatedAt": "2021-02-04T00:07:30Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I've a little trouble with the ambiguity regarding stream identifiers in PUSH_PROMISE.  I'm not clear on this, but it might be better to say:\r\n\r\n> Each type of stream transitions out of the \"idle\" state for one reason:\r\n> * A client-initiated stream becomes \"open\" when a HEADERS frame is sent on the stream.\r\n> * A server-initiated stream becomes \"reserved\" when a PUSH_PROMISE (sent on a request stream) promises a response on the stream.\r\n> When a stream transitions out of the \"idle\" state, all streams in that direction with lower-numbered stream identifiers that are also \"idle\" are closed.  That is, an endpoint can skip a stream identifier, with the effect being that the skipped stream is immediately closed.\r\n\r\nToo large a change?",
              "createdAt": "2021-02-04T00:07:30Z",
              "updatedAt": "2021-02-04T11:40:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzMTAzMDEz",
          "commit": {
            "abbreviatedOid": "8b22905"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-04T07:35:41Z",
          "updatedAt": "2021-02-04T07:35:42Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "No, I think that's a good change. I may try to call out the specific stream identifier in the PUSH_PROMISE frame payload that is relevant here.",
              "createdAt": "2021-02-04T07:35:41Z",
              "updatedAt": "2021-02-04T11:40:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzMTA3NDQ3",
          "commit": {
            "abbreviatedOid": "93c6991"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-04T07:43:11Z",
          "updatedAt": "2021-02-04T07:43:11Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Hmm, I abandoned that change a bit because it didn't read well with the paragraph above, so I've tried something else. Let me know how you feel about it.",
              "createdAt": "2021-02-04T07:43:11Z",
              "updatedAt": "2021-02-04T11:40:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzMjc4MTQ0",
          "commit": {
            "abbreviatedOid": "93c6991"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Like it.  Take the first, maybe take the second, and we can merge this one.",
          "createdAt": "2021-02-04T11:07:39Z",
          "updatedAt": "2021-02-04T11:08:54Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n            by the stream identifier in the frame header from \"idle\" to \"open\". A <xref target=\"PUSH_PROMISE\" format=\"none\">PUSH_PROMISE</xref>\r\n```",
              "createdAt": "2021-02-04T11:07:39Z",
              "updatedAt": "2021-02-04T11:40:26Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n            frame will transition the server-initiated stream identified by the \"Promised Stream ID\" field in the frame payload from \"idle\" to \"reserved\". When\r\n```\r\n\r\n?",
              "createdAt": "2021-02-04T11:08:17Z",
              "updatedAt": "2021-02-04T11:40:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 814,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY2OTg3NDAx",
      "title": "Reduce the width of the upgrade diagram.",
      "url": "https://github.com/httpwg/http2-spec/pull/814",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #810.",
      "createdAt": "2021-02-03T16:56:15Z",
      "updatedAt": "2021-02-03T23:32:03Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "7c6412d243604b986ea1cbad7f1a3f0f71d6a8d4",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-narrower-diagram",
      "headRefOid": "44086b78a137bc482b34ee6ec25c3d47857ed9b3",
      "closedAt": "2021-02-03T23:31:58Z",
      "mergedAt": "2021-02-03T23:31:58Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "028688ad5df27d4cc57b82c51127d45b99440e63"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "simple :)",
          "createdAt": "2021-02-03T23:32:03Z",
          "updatedAt": "2021-02-03T23:32:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 816,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY4NDQ0NzIx",
      "title": "fix IETF working group name",
      "url": "https://github.com/httpwg/http2-spec/pull/816",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Let's try this again.",
      "createdAt": "2021-02-05T15:50:56Z",
      "updatedAt": "2021-02-18T01:01:08Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "6ae5655abd4f73048c8936c1ef99d6b4487da41e",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "9f48cdf47a4dd841fa39842a1b63b760ceb9372a",
      "closedAt": "2021-02-18T01:01:08Z",
      "mergedAt": "2021-02-18T01:01:08Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "dc996f14ecd9a6ff86cda67c5651dc098f7054cf"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, this is weird.  I need to re-check my remotes.",
          "createdAt": "2021-02-08T01:01:02Z",
          "updatedAt": "2021-02-08T01:01:02Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "apparently we were OK, but the working group name change is enough; changed the title and merged",
          "createdAt": "2021-02-18T01:01:04Z",
          "updatedAt": "2021-02-18T01:01:04Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0NTI3Nzk1",
          "commit": {
            "abbreviatedOid": "23f7fc1"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I'm as happy with this now as I was when I first reviewed it.",
          "createdAt": "2021-02-05T16:58:46Z",
          "updatedAt": "2021-02-05T16:58:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 818,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY5MTU3Nzk5",
      "title": "Correct WG name",
      "url": "https://github.com/httpwg/http2-spec/pull/818",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The name of the wg is \"HTTP Working Group\" or just \"HTTP\". The data tracker abbreviation is httpbis.",
      "createdAt": "2021-02-08T05:15:57Z",
      "updatedAt": "2021-02-08T05:28:33Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "ad2b717caaf5fbc6c01590cfd4b7dc5050e0a11a",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "mnot-patch-1",
      "headRefOid": "3683ddf235752136ecc1637439e8f2b316a41d68",
      "closedAt": "2021-02-08T05:28:32Z",
      "mergedAt": "2021-02-08T05:28:32Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0f40174c671bc98684227698ba5a29279fa269c6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 819,
      "id": "MDExOlB1bGxSZXF1ZXN0NTcyNjYxMTgw",
      "title": "Clarify error handling when multiple errors are encountered.",
      "url": "https://github.com/httpwg/http2-spec/pull/819",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #770.",
      "createdAt": "2021-02-12T17:20:22Z",
      "updatedAt": "2021-02-22T22:49:05Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "bdaf4abbac717d4ba643255ad91342175e031088",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-multiple-errors",
      "headRefOid": "091cdcfb24b08c7a3f7911ed280a1f4929ac6358",
      "closedAt": "2021-02-22T22:48:36Z",
      "mergedAt": "2021-02-22T22:48:36Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8817a822817063daa3fbd8cc6b5ef16155c42341"
      },
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks @martinthomson, ready for re-review I think.",
          "createdAt": "2021-02-17T17:06:57Z",
          "updatedAt": "2021-02-17T17:06:57Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh, you proposed changing \"handling\" to \"reporting\": did you want to do that pervasively in this document?",
          "createdAt": "2021-02-17T17:07:39Z",
          "updatedAt": "2021-02-17T17:07:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's take that up separately.",
          "createdAt": "2021-02-17T22:29:03Z",
          "updatedAt": "2021-02-17T22:29:03Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ready for merge I think.",
          "createdAt": "2021-02-18T09:00:26Z",
          "updatedAt": "2021-02-18T09:00:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree, but as this is substantive, let's run this by the working group.",
          "createdAt": "2021-02-18T10:18:59Z",
          "updatedAt": "2021-02-18T10:18:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "As there is a draft deadline, I will open an issue for my niggle, and ask for forgiveness rather than permission.",
          "createdAt": "2021-02-22T22:49:05Z",
          "updatedAt": "2021-02-22T22:49:05Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwMTEyNTg2",
          "commit": {
            "abbreviatedOid": "31b1e51"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I realize that the word \"handling\" is in the title, but I think that this really about reporting.  \"Handling\" implies that the errors are somehow dealt with, rather than having them cause stream or connection termination.\r\n\r\nI'm thinking we can change the title to \"Error Reporting\" on that basis.",
          "createdAt": "2021-02-15T01:21:37Z",
          "updatedAt": "2021-02-15T01:31:31Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n          It is possible that an endpoint will encounter frames that would cause multiple errors. Implementations MAY discover\r\n          multiple errors during processing, but they SHOULD report at most one stream and one connection error as a result.\r\n```\r\n\r\nAnd then I think that we need a new paragraph, though you can join the text I suggest below.",
              "createdAt": "2021-02-15T01:28:19Z",
              "updatedAt": "2021-02-18T09:00:18Z"
            },
            {
              "originalPosition": 8,
              "body": "Unfortunately, I think that we can change our minds when we report a connection error.  And we can report stream errors after a connection error.  But we should advise against it.\r\n\r\n> The first stream error reported for a given stream prevents any other errors on that stream from being reported.  In comparison, the protocol permits multiple GOAWAY frames, though an endpoint SHOULD report just one type of connection errors unless a graceful shutdown (see $$SECTION) is cut short as a result of a connection error is encountered.",
              "createdAt": "2021-02-15T01:29:02Z",
              "updatedAt": "2021-02-18T09:00:18Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n          If an endpoint detects multiple different errors,\r\n```\r\n\r\nI don't think that we need to limit this to frame processing.",
              "createdAt": "2021-02-15T01:29:48Z",
              "updatedAt": "2021-02-18T09:00:18Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n          it MAY choose to report any one of those errors. If a frame would cause a connection error, that error MUST be reported.\r\n```",
              "createdAt": "2021-02-15T01:30:02Z",
              "updatedAt": "2021-02-18T09:00:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNjg1NDg1",
          "commit": {
            "abbreviatedOid": "bfd399e"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2021-02-17T22:30:14Z",
          "updatedAt": "2021-02-17T22:30:22Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n          it MAY choose to report any one of those errors. If a frame causes a connection error, that error MUST be reported.\r\n```",
              "createdAt": "2021-02-17T22:30:14Z",
              "updatedAt": "2021-02-18T09:00:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 820,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc1MTAxMDE1",
      "title": "Remove Upgrade mechanism.",
      "url": "https://github.com/httpwg/http2-spec/pull/820",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "HTTP/1.1 to HTTP/2 Upgrade was never widely deployed and has no\r\nparticular defenders. This change removes the text explaining and\r\ndefining the mechanism.\r\n\r\nResolves #772.\r\n\r\nThis change still requires discussion on the mailing list.",
      "createdAt": "2021-02-17T17:50:19Z",
      "updatedAt": "2021-05-24T07:07:54Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "fbe726ddf15b1f18acd7138133adcdb1a0e98b60",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-remove-upgrade",
      "headRefOid": "93a586dcc297e37a29977a8e98c55c3b80cd575e",
      "closedAt": "2021-05-24T07:07:54Z",
      "mergedAt": "2021-05-24T07:07:54Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d176ad03cfd4f6aadff6d3499f413bb4a5c34036"
      },
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson I've returned the two IANA registry entries and pointed them backwards at RFC 7540, as the sections that define those fields were removed from this document. I'm not actually sure that's the right IETF process there. Happy to take guidance as to what I should be doing instead (e.g. putting in a pair of dummy sections saying that the field and token don't have semantics any longer and referring to those instead).",
          "createdAt": "2021-02-18T08:58:41Z",
          "updatedAt": "2021-02-18T08:58:41Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, I've replaced the registrations with tombstones, this is ready for another go around.",
          "createdAt": "2021-02-23T11:02:06Z",
          "updatedAt": "2021-02-23T11:02:06Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "It would be good to more explicitly say that the upgrade mechanism is NOT RECOMMENDED, both because we're encrypting everything and because of the [new attack vectors](https://labs.bishopfox.com/tech-blog/h2c-smuggling-request-smuggling-via-http/2-cleartext-h2c) it enables (even if they're mostly shoddy implementation, it's more surface area).",
          "createdAt": "2021-05-19T05:10:33Z",
          "updatedAt": "2021-05-19T05:10:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds like a reasonable addition, but it might be better to track that with a separate change.",
          "createdAt": "2021-05-19T06:32:37Z",
          "updatedAt": "2021-05-19T06:32:37Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Happy to add that here or make a separate change, either way.",
          "createdAt": "2021-05-19T07:24:51Z",
          "updatedAt": "2021-05-19T07:24:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Looking into this a little more, I think that Section 10.3 ([Intermediary Encapsulation Attacks](https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#name-intermediary-encapsulation-)) is probably where some extra warnings might be worthwhile.\r\n\r\nThe reason I might prefer a separate change is that we can hit Upgrade, Transfer-Encoding, Content-Length, and other Connection fields at the same time if we do it right.",
          "createdAt": "2021-05-24T05:35:42Z",
          "updatedAt": "2021-05-24T05:35:42Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNjM2MzMx",
          "commit": {
            "abbreviatedOid": "21489f4"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-17T21:18:20Z",
          "updatedAt": "2021-02-17T21:40:14Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Probably something for a different change, but \"discovery\" isn't really right.  The use of HTTP/2 for \"https\" is negotiated.",
              "createdAt": "2021-02-17T21:18:21Z",
              "updatedAt": "2021-02-23T11:15:59Z"
            },
            {
              "originalPosition": 157,
              "body": "```suggestion\r\n          application data octets of a connection.\r\n```\r\n\r\nMight as well make the statement general :)",
              "createdAt": "2021-02-17T21:36:39Z",
              "updatedAt": "2021-02-23T11:15:59Z"
            },
            {
              "originalPosition": 190,
              "body": "I think that Alexey's point here about marking this obsoleted is worthwhile.",
              "createdAt": "2021-02-17T21:38:57Z",
              "updatedAt": "2021-02-23T11:15:59Z"
            },
            {
              "originalPosition": 229,
              "body": "As this registry doesn't have a status column, we can leave this untouched, with the reference to 7540 left alone.",
              "createdAt": "2021-02-17T21:40:01Z",
              "updatedAt": "2021-02-23T11:15:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMDUzNDAz",
          "commit": {
            "abbreviatedOid": "fb4eb4b"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-18T10:17:23Z",
          "updatedAt": "2021-02-18T10:18:34Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "Up there^^ probably best to say that this updates it to obsolete it.  I think that you could just say something like \"this marks the header field as as obsoleted\" and avoid the registration block.  A backward reference to its original definition is probably all you need in addition to that.",
              "createdAt": "2021-02-18T10:17:23Z",
              "updatedAt": "2021-02-23T11:15:59Z"
            },
            {
              "originalPosition": 209,
              "body": "This section can probably be a tombstone only.  \"Previous versions (see X of 7540) registered an upgrade token, but this capability has been removed; see Section X.\"",
              "createdAt": "2021-02-18T10:18:28Z",
              "updatedAt": "2021-02-23T11:15:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2ODc1MzUz",
          "commit": {
            "abbreviatedOid": "51bc906"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-23T23:01:10Z",
          "updatedAt": "2021-02-23T23:01:10Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQyMTU4NDk1",
          "commit": {
            "abbreviatedOid": "51bc906"
          },
          "author": "bencebeky",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-22T12:51:10Z",
          "updatedAt": "2021-04-22T12:51:10Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwNDkxMzUx",
          "commit": {
            "abbreviatedOid": "51bc906"
          },
          "author": "ianswett",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-17T01:11:59Z",
          "updatedAt": "2021-05-17T01:11:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 821,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc1MzgxNTg1",
      "title": "Speak more about DoS",
      "url": "https://github.com/httpwg/http2-spec/pull/821",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "After carefully reviewing the Netflix advisories, it was clear that the\r\nproblem was that implementations didn't read the original text.\r\n\r\nThe TCP window reduction attack in CVE-2019-9517 was not mentioned, and\r\nit is a clever exploit.  The rest were clearly already documented.\r\n\r\nI took the opportunity to restructure things a little bit.  The first\r\nfew CVEs were about causing the victim to enqueue a bunch of frames and\r\nthen exploit the fact that this queuing was badly inefficient.  Those\r\ngot a list of their own.\r\n\r\nI purposefully left CVE-2019-9516 out.  Though I am sad that people\r\ndidn't free() after malloc(), this is pretty much just a systematized\r\nmemory leak and I don't feel like calling that out in an RFC.  I've\r\ncited the disclosure page, so I think we're covered there anyway.\r\n\r\nCloses #775.",
      "createdAt": "2021-02-18T04:17:50Z",
      "updatedAt": "2021-02-22T22:12:44Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "bd27c45b847e826430caab9327ad471dc4125261",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "dos-v2",
      "headRefOid": "0ffbaf87de3cb61ed863c0317551c34888ca4c09",
      "closedAt": "2021-02-18T08:58:41Z",
      "mergedAt": "2021-02-18T08:58:41Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9a12b89d5d6a5daa9220e205170a2aa095dc040a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyOTEwMDQ0",
          "commit": {
            "abbreviatedOid": "e725fe6"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "One minor suggestion, otherwise I\u2019m happy with the new text.",
          "createdAt": "2021-02-18T07:18:44Z",
          "updatedAt": "2021-02-18T07:20:23Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "```suggestion\r\n              Inefficient tracking of outstanding outbound frames can lead to overload if an adversary can\r\n```\r\n\r\nBit of a nit here but it might be helpful to be as explicit as possible.",
              "createdAt": "2021-02-18T07:18:44Z",
              "updatedAt": "2021-02-18T08:58:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 822,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc1MzgzMDM2",
      "title": "The core drafts are normative references",
      "url": "https://github.com/httpwg/http2-spec/pull/822",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Why these were not already is a mystery not worth investigating.  Fix it\r\ninstead.\r\n\r\nCloses #777 while we're at it.",
      "createdAt": "2021-02-18T04:22:19Z",
      "updatedAt": "2021-02-22T22:12:49Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "dc996f14ecd9a6ff86cda67c5651dc098f7054cf",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "semantics-is-normative",
      "headRefOid": "832d9050f03e9f43a37c4c0c6f3153c538c59834",
      "closedAt": "2021-02-18T08:57:44Z",
      "mergedAt": "2021-02-18T08:57:44Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "bd27c45b847e826430caab9327ad471dc4125261"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyOTA5MDUy",
          "commit": {
            "abbreviatedOid": "832d905"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-18T07:16:57Z",
          "updatedAt": "2021-02-18T07:16:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 823,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc1Mzk2NTQ2",
      "title": "Herv\u00e9 was the only one",
      "url": "https://github.com/httpwg/http2-spec/pull/823",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "That is, in text we added.\r\n\r\nI have an open question to rfc-interest@ regarding correcting the spelling of author names in references.  It's pretty clear [what Bodo thinks](https://www.bmoeller.de/) about the mangling we have done to his name in pursuit of ASCII and I'd like to correct that.  I didn't see any others that would appear in the final document (Herv\u00e9 is there too, but only first initials survive).\r\n\r\nCloses #791.",
      "createdAt": "2021-02-18T05:01:47Z",
      "updatedAt": "2021-03-02T06:17:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "dc996f14ecd9a6ff86cda67c5651dc098f7054cf",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "real-names-for-people",
      "headRefOid": "4e87273af97e10e3a408630129aa08894da683a1",
      "closedAt": "2021-02-22T22:48:13Z",
      "mergedAt": "2021-02-22T22:48:13Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a94270140b142345ca90e9bfe058bc7e139f862f"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on feedback from the TRSE, I'm not going to update other names.  Referential integrity is - apparently - more important.",
          "createdAt": "2021-02-22T22:48:09Z",
          "updatedAt": "2021-02-22T22:48:09Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyOTA4NzEz",
          "commit": {
            "abbreviatedOid": "4e87273"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I think making this right is a good idea, notwithstanding the questions about the pursuit of ASCII. It\u2019d be nice if the IETF could make its way into 1995.",
          "createdAt": "2021-02-18T07:16:21Z",
          "updatedAt": "2021-02-18T07:16:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 825,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc4NDEzMDYz",
      "title": "Update of \"Prohibited TLS 1.2 Cipher Suites\"",
      "url": "https://github.com/httpwg/http2-spec/pull/825",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "RFC 7540 is an awesome TLS 1.2 profile, a often recomment it for that purpose. \r\n\r\nAs far as I know, there has been 4 new ciphersuites (2 for TLS 1.2 and 2 for TLS 1.3) and 1 PskKeyExchangeMode violating the null and ephemeral key exchange requirements mandated by RFC 7540.",
      "createdAt": "2021-02-23T12:32:34Z",
      "updatedAt": "2021-05-24T07:08:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8817a822817063daa3fbd8cc6b5ef16155c42341",
      "headRepository": "emanjon/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "6710a1046c89707a4f53f76b3ba13faf9f2dae76",
      "closedAt": "2021-05-24T07:08:11Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2ODgwNDQw",
          "commit": {
            "abbreviatedOid": "6710a10"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Unfortunately, we cannot add to the list of prohibited cipher suites without also defining a new ALPN.  A client that is aware of these new requirements and forced to offer these suites with potential use with non-h2 ALPN values cannot assume that a server is also aware of these new requirements.  If the server is only compliant with RFC 7540 it won't know that these suites are bad (well, aside from that being obvious).  A client can only use INADEQUATE_SECURITY if it knows that the server knows that the choice of cipher suite is wrong.\r\n\r\nWe knew this to be a limitation of the profile when we built it.  That's why it says:\r\n\r\n> Additional cipher suites with these properties could be defined; these would not be explicitly prohibited.",
          "createdAt": "2021-02-23T23:10:33Z",
          "updatedAt": "2021-02-23T23:10:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 830,
      "id": "MDExOlB1bGxSZXF1ZXN0NTk3Njc1NDQ2",
      "title": "Rewrite :authority description",
      "url": "https://github.com/httpwg/http2-spec/pull/830",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I think that this is better, but I'd like input on that.\r\n\r\nI've tried to simplify this into 3 chunks:\r\n\r\n* requests generated natively in HTTP/2\r\n* translating HTTP/1.1 -> HTTP/2\r\n* translating HTTP/2 -> HTTP/1.1\r\n\r\nI realized that absolute-form was underserved here.  I could have\r\nexcluded it on the basis that it is special, but the rules seemed fairly\r\nclear - at least regarding :authority, so that went in too.\r\n\r\nThe text now deals more fully with absolute form.  The previous text\r\nreally only hinted at the possibility that there might be two values.\r\nThis points to -messaging for what to do about those two values (hint:\r\n:authority wins).\r\n\r\nCloses #828.",
      "createdAt": "2021-03-22T05:18:41Z",
      "updatedAt": "2021-04-22T04:10:34Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8817a822817063daa3fbd8cc6b5ef16155c42341",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "pseudo-mapping-creation",
      "headRefOid": "b615f32e0aa27b991e6d1642634f837e753a36f7",
      "closedAt": "2021-04-22T04:10:34Z",
      "mergedAt": "2021-04-22T04:10:33Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b0e7e31a2ba2a9b2ea0b6ced69b8b9ad7ee3edc1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE3MjE2NTcw",
          "commit": {
            "abbreviatedOid": "b615f32"
          },
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This looks good overall.\r\n\r\nAs a separate task once the changes are in I would recommend considering to have obe sub section per pseudo header field (and maybe combine request/response behaviour in the same place).",
          "createdAt": "2021-03-22T07:38:57Z",
          "updatedAt": "2021-03-22T07:38:57Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE3MjgxNjUz",
          "commit": {
            "abbreviatedOid": "b615f32"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM. I agree with @reschke that separate sections for these pseudo-headers would be good.",
          "createdAt": "2021-03-22T09:04:24Z",
          "updatedAt": "2021-03-22T09:04:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 832,
      "id": "MDExOlB1bGxSZXF1ZXN0NTk3NjgzMjky",
      "title": ":scheme is just the scheme",
      "url": "https://github.com/httpwg/http2-spec/pull/832",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is either taken from the target URI, or translated in (S3.3 of\r\n-messaging).  Unless it is CONNECT where is is absent.\r\n\r\nCloses #831.",
      "createdAt": "2021-03-22T05:33:12Z",
      "updatedAt": "2021-04-23T06:31:30Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8817a822817063daa3fbd8cc6b5ef16155c42341",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "what-scheme",
      "headRefOid": "63c7c12948f0a2647413cda0c4da465f92c6dc42",
      "closedAt": "2021-04-23T06:31:25Z",
      "mergedAt": "2021-04-23T06:31:25Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6ef5e8e13ebcc86eb7368c1c6ba1cb54567dfc5b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE3Mjc2NjQ3",
          "commit": {
            "abbreviatedOid": "827bc70"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Seems reasonable to me.",
          "createdAt": "2021-03-22T08:59:03Z",
          "updatedAt": "2021-03-22T08:59:03Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQxNzYxNTk3",
          "commit": {
            "abbreviatedOid": "827bc70"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-22T04:12:35Z",
          "updatedAt": "2021-04-22T04:12:35Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n                  request target.  The scheme is taken from the target URI (<xref target=\"RFC3986\"\r\n```",
              "createdAt": "2021-04-22T04:12:35Z",
              "updatedAt": "2021-04-22T04:13:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQxODEzNDEw",
          "commit": {
            "abbreviatedOid": "63c7c12"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-22T06:20:40Z",
          "updatedAt": "2021-04-22T06:20:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 833,
      "id": "MDExOlB1bGxSZXF1ZXN0NTk3Njg5MDY5",
      "title": "SETTINGS_ENABLE_PUSH from the server",
      "url": "https://github.com/httpwg/http2-spec/pull/833",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The previous text implied that a value of 1 was a problem,\r\nwhich was somewhat in tension with the default being 1 and servers\r\nmostly not sending the setting.  So clearly what was being checked by\r\nclient was the frame, not the value.  This changes to checking the\r\nsetting as it arrives, changes where that text lives.\r\n\r\nAlso, this changes from \"endpoint\" to \"client\" or \"server\" as\r\nappropriate to match actual practice.\r\n\r\nCloses #793.",
      "createdAt": "2021-03-22T05:45:06Z",
      "updatedAt": "2021-04-22T04:13:19Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8817a822817063daa3fbd8cc6b5ef16155c42341",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "client-enable-push",
      "headRefOid": "0aeb362d3e36c672e94c5f4d3605636096a95551",
      "closedAt": "2021-04-22T04:13:19Z",
      "mergedAt": "2021-04-22T04:13:19Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8fdd07f91ac4c5572a5472a24ff63526ffcaf8e5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE3Mjc4MzMy",
          "commit": {
            "abbreviatedOid": "2b9e4fb"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "One minor language nit, otherwise seems great.",
          "createdAt": "2021-03-22T09:00:52Z",
          "updatedAt": "2021-03-22T09:01:25Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Nit: I think \"always\" is redundant here.",
              "createdAt": "2021-03-22T09:00:52Z",
              "updatedAt": "2021-03-24T00:40:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 835,
      "id": "MDExOlB1bGxSZXF1ZXN0NjA2NjE2NTc0",
      "title": "Server Push caveats",
      "url": "https://github.com/httpwg/http2-spec/pull/835",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #786 ",
      "createdAt": "2021-04-01T00:35:32Z",
      "updatedAt": "2021-04-27T05:35:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8817a822817063daa3fbd8cc6b5ef16155c42341",
      "headRepository": "mnot/http2-spec",
      "headRefName": "mnot-786",
      "headRefOid": "b69a1e0cb00036c520fd2ebf3434ab35cdf75b8a",
      "closedAt": "2021-04-27T05:35:15Z",
      "mergedAt": "2021-04-27T05:35:15Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0615c0b27c26c399ce6b71b9e904d1b373c4f78f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1OTczMjk2",
          "commit": {
            "abbreviatedOid": "eb95479"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2021-04-01T07:29:51Z",
          "updatedAt": "2021-04-01T07:29:51Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQxNzYzOTEx",
          "commit": {
            "abbreviatedOid": "eb95479"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This is great.  I had some trouble with the mega-sentence.  That said, my rewording might not be much better.",
          "createdAt": "2021-04-22T04:20:11Z",
          "updatedAt": "2021-04-22T04:25:43Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "This is one mega-sentence.  How about:\r\n\r\n```suggestion\r\n          Server push was designed to allow a server to exploit knowledge about resources to\r\n          improve client-perceived performance.  A server that could correctly predict a request\r\n          might reduce latency by pushing a response to clients. For example, with HTML, server\r\n          push might be used for linked content like stylesheets, scripts, and images.\r\n```",
              "createdAt": "2021-04-22T04:20:11Z",
              "updatedAt": "2021-04-26T02:26:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQxODE4NjUw",
          "commit": {
            "abbreviatedOid": "eb95479"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-22T06:29:06Z",
          "updatedAt": "2021-04-22T06:29:06Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "PTAL at latest commit",
              "createdAt": "2021-04-22T06:29:06Z",
              "updatedAt": "2021-04-26T02:26:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQxODkyMzg5",
          "commit": {
            "abbreviatedOid": "d453f9b"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Very nice.  Thanks Mark.",
          "createdAt": "2021-04-22T08:01:27Z",
          "updatedAt": "2021-04-22T08:03:11Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "```suggestion\r\n          for stylesheets and scripts referenced by that page. When these requests\r\n```",
              "createdAt": "2021-04-22T08:01:27Z",
              "updatedAt": "2021-04-26T02:26:30Z"
            },
            {
              "originalPosition": 62,
              "body": "I think that you might say \"pushing any significant amount of data\".  It doesn't need to be a whole round trip worth.  Even a fraction of a round trip worth can starve out a high priority request that arrives immediately after starting.",
              "createdAt": "2021-04-22T08:02:58Z",
              "updatedAt": "2021-04-26T02:26:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 836,
      "id": "MDExOlB1bGxSZXF1ZXN0NjEyODU1MTky",
      "title": "Update and rename CONTRIBUTING.md to https:/github.com/httpwg/http2-s\u2026",
      "url": "https://github.com/httpwg/http2-spec/pull/836",
      "state": "CLOSED",
      "author": "Fer6661",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "\u2026pec.wiki.git",
      "createdAt": "2021-04-10T07:52:30Z",
      "updatedAt": "2021-04-10T07:57:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8817a822817063daa3fbd8cc6b5ef16155c42341",
      "headRepository": "Fer6661/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "2c1a74fa10bceae174dae987375521c67d5a0678",
      "closedAt": "2021-04-10T07:57:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 837,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIwNzQxMTY4",
      "title": "Stop using \"settings parameters\"",
      "url": "https://github.com/httpwg/http2-spec/pull/837",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In the spirit of the naming simplications of the recent HTTP changes, we\r\ncan talk about settings in this revision.\r\n\r\nThis aligns better with HTTP/3, though that still uses \"settings\r\nparameters\" (with that ugly double-plural).\r\n\r\ncc @MikeBishop ",
      "createdAt": "2021-04-22T04:09:07Z",
      "updatedAt": "2021-05-24T15:11:28Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8817a822817063daa3fbd8cc6b5ef16155c42341",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "settings-not-parameters",
      "headRefOid": "3b4b98d2c829136db68772d3b35f4fc9b644a5fa",
      "closedAt": "2021-05-24T05:36:06Z",
      "mergedAt": "2021-05-24T05:36:05Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8bb90634f038272616a09def448bd40ccb3bb983"
      },
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I mean, it's not too late to Auth48 the same change into H3....  Not quite, anyway.",
          "createdAt": "2021-05-24T15:11:28Z",
          "updatedAt": "2021-05-24T15:11:28Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQxODE0Mzgx",
          "commit": {
            "abbreviatedOid": "3b4b98d"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-22T06:22:18Z",
          "updatedAt": "2021-04-22T06:22:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 838,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIwNzQxMjMz",
      "title": "Remove \"parameters\" from the IANA registry name",
      "url": "https://github.com/httpwg/http2-spec/pull/838",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Closes #829.",
      "createdAt": "2021-04-22T04:09:16Z",
      "updatedAt": "2021-04-23T06:31:46Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8817a822817063daa3fbd8cc6b5ef16155c42341",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "no-parameters",
      "headRefOid": "7124f530375be451b4bd0c55ccbdd84d6052fd16",
      "closedAt": "2021-04-23T06:31:44Z",
      "mergedAt": "2021-04-23T06:31:43Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a5cccab1a58c5cadcbe2314f7bcb2dbf38accb45"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQxODEzNjAz",
          "commit": {
            "abbreviatedOid": "7124f53"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-22T06:21:00Z",
          "updatedAt": "2021-04-22T06:21:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 839,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIwNzQ4NzMz",
      "title": "references: IETF series should be first",
      "url": "https://github.com/httpwg/http2-spec/pull/839",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(there are more nits like missing DOIs etc, but let's do this one by one)",
      "createdAt": "2021-04-22T04:31:26Z",
      "updatedAt": "2021-04-22T04:39:43Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8fdd07f91ac4c5572a5472a24ff63526ffcaf8e5",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-2",
      "headRefOid": "6958de791a98536d5eb6bddc2a9cfd45f108a901",
      "closedAt": "2021-04-22T04:39:43Z",
      "mergedAt": "2021-04-22T04:39:43Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "53eb9c8ec5c025e4d28646be6a99b7fe9117d2f1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 840,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIwNzU1NzYy",
      "title": "update core spec references",
      "url": "https://github.com/httpwg/http2-spec/pull/840",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-04-22T04:51:16Z",
      "updatedAt": "2021-04-22T05:03:28Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "53eb9c8ec5c025e4d28646be6a99b7fe9117d2f1",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-3",
      "headRefOid": "4968686c8d4be47d8ed4fe1758c7d88f67b71e60",
      "closedAt": "2021-04-22T05:03:28Z",
      "mergedAt": "2021-04-22T05:03:28Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b58675886c14a5c3929d459fe7565e9d5c1e9b30"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 844,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIxNzE0ODM3",
      "title": "Do the obsoletes thing properly",
      "url": "https://github.com/httpwg/http2-spec/pull/844",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current rules state that you need to include text in abstract and\r\nintroduction.\r\n\r\nThis will result in redundant entries for the specs with other changes that add 7540 references, but we can sort that out later. \r\n\r\nCloses #842.",
      "createdAt": "2021-04-23T02:00:26Z",
      "updatedAt": "2021-04-27T02:47:33Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "b58675886c14a5c3929d459fe7565e9d5c1e9b30",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "reference-obsoleted",
      "headRefOid": "6839dc93b60d6075f3d58e0a49faf27343c919bf",
      "closedAt": "2021-04-27T02:46:46Z",
      "mergedAt": "2021-04-27T02:46:46Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "902a7be29bf1a09b1f1fa723107c131dde7dfec4"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Picking my battles more judiciously (as much as I'd like to fight this one, it's a low reward, high risk situation).",
          "createdAt": "2021-04-27T02:47:31Z",
          "updatedAt": "2021-04-27T02:47:31Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzNDc1MTcz",
          "commit": {
            "abbreviatedOid": "6839dc9"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Rules are boring. Be a rebel without a pause. Omit that text.",
          "createdAt": "2021-04-23T16:30:57Z",
          "updatedAt": "2021-04-23T16:30:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 845,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIxODMzMTUy",
      "title": "Make HTTP/1.1 reference informational",
      "url": "https://github.com/httpwg/http2-spec/pull/845",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This required a little careful rewriting of text that only recently\r\nrewrote.  Hopefully this retains the improvements of that rewrite.\r\n\r\nCloses #841.",
      "createdAt": "2021-04-23T07:10:47Z",
      "updatedAt": "2021-05-24T05:37:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8bb90634f038272616a09def448bd40ccb3bb983",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "http11-info",
      "headRefOid": "7f8d12ab92f43a0db63dfc31b030327ca0eb5c8d",
      "closedAt": "2021-05-24T05:37:39Z",
      "mergedAt": "2021-05-24T05:37:39Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "054283fe7c7ec4eb95cf44dec6dfb378e15ec1cf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzNDgxMTI3",
          "commit": {
            "abbreviatedOid": "3964437"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Nice. I think the retains the original meaning of the text well enough, and is as clear as it can be without ever needing to normatively invoke HTTP/1.1. Needle well threaded.",
          "createdAt": "2021-04-23T16:38:25Z",
          "updatedAt": "2021-04-23T16:38:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 846,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIxODU4ODU0",
      "title": "What characters are permitted",
      "url": "https://github.com/httpwg/http2-spec/pull/846",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This encodes the conclusions from interim discussions:\r\n\r\n1. CR, LF, and NUL cannot appear anywhere in field names or values.\r\n2. SP and HTAB cannot appear at the start or end of field names or\r\nvalues.\r\n3. COLON cannot appear anywhere in a field name, except for the colon at\r\nthe start of a pseudo-header field name.\r\n\r\nThe strong requirements about validating fields according to ABNF has\r\nbeen replaced.\r\n\r\nThe text is clearer about how the pieces fit together: it is HPACK that\r\nallows any octet, whereas HTTP/2 makes certain choices invalid.\r\n\r\nCloses #815.",
      "createdAt": "2021-04-23T07:53:05Z",
      "updatedAt": "2021-06-03T04:33:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "a5cccab1a58c5cadcbe2314f7bcb2dbf38accb45",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "allowed-characters",
      "headRefOid": "05686eecd34445f2f3e1dd8129fc5aea6068dd46",
      "closedAt": "2021-06-03T00:25:30Z",
      "mergedAt": "2021-06-03T00:25:30Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b24293090c7b833f8818f8167fc2383b0077b64a"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This allows whitespace and control characters in field names. Is that intentional?",
          "createdAt": "2021-04-27T07:31:39Z",
          "updatedAt": "2021-04-27T07:31:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This was intentional, but it can be revised by expanding the set of characters we prohibit.  I had imagined that this would not be different from HTTP/1.1 where \"Foo\\tBar: ?1\" might parse, but is not valid in the same way that \"Foo\\<BEL>Bar: ?1\" is not.  I thought that we had agreed that a close policing of the field name grammar was not required from HTTP/2 implementations.",
          "createdAt": "2021-04-27T10:47:44Z",
          "updatedAt": "2021-04-27T10:47:44Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@mnot, take another look.  I've refactored your suggestion.",
          "createdAt": "2021-05-20T04:27:06Z",
          "updatedAt": "2021-05-20T04:27:06Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes.",
          "createdAt": "2021-05-25T07:22:30Z",
          "updatedAt": "2021-05-25T07:22:30Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@gregw, if you can suggest text that would address your remaining concerns, that would be good, but I think we're going to include this text in the next draft.  Of course, there will be ample time to improve on this; we just want to make sure that we have an updated draft to discuss at the upcoming interim meeting.",
          "createdAt": "2021-05-26T01:21:58Z",
          "updatedAt": "2021-05-26T01:21:58Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "@martinthomson What I think is missing is a description of what this change is trying to achieve.    \r\n\r\nThe text identifies that there is a set of `valid-hpack-fields`, but notes that that is a super-set of of `valid-HTTP-fields`.   \r\nIt then gives text description of what the set of `valid-h2-fields` is, but it is not clear exactly what the intent of that set is meant to be?   The possibilities are:\r\n\r\n1. `valid-h2-fields` == `valid-HTTP-fields-with-lowercase-names` union `h2-pseudo-fields`.    But if this was the case then why not define it in terms of the HTTP ABNF?\r\n2. `valid-h2-fields` == `valid-HTTP-fields-with-lowercase-names` union `h2-pseudo-fields` union `invalid-fields-from-grandfathered-implementations`.    This seems a strange thing to do, but the motivation was originally given that this was describing what existing implementations do?   If this is the case then it should be described as such.\r\n3. `valid-h2-fields` == `valid-hpack-fields` intersection `fields-safe-from-encapsulation-attacks`.  I think this is what the text is actually striving for, but a) it would be good to say so; b) it is unclear to me why h2 needs a superset of option 1. above... if so it should be said why.\r\n\r\nIf it is indeed option 3. then I assume that there are some fields in the set `valid-h2-fields` that are nether in the `valid-HTTP-fields` nor `h2-pseudo-fields` sets.   What are those fields and what should an implementation do with them?  We are told later in the update that if we are an intermediary then we can validate strictly against the HTTP ABNF and that if we don't we risk invalid fields (and by inference of the section title encapsulation attacks).     But what do we do with those fields if we are not an intermediary?    Do we pass them onto our applications and let them work it out that they are not members of `valid-HTTP-fields`?    There is nothing there that says we MAY treat such messages as malformed - so at the very least, it would be a good addition to the text to say that non-intermediaries can do stricter validation.\r\n\r\nSo in short, I can see lots of text defining `valid-h2-headers`, but it is entirely unmotivated as  to why it is << `valid-hpack-fields` and >> `valid-HTTP-fields-with-lowercase-names`.\r\n\r\nFinally, to harp on my original complaint,  I still do not understand why `valid-h2-fields` is defined in 4 bullet points of prose  that have already confused some readers.  There is a paragraph about how field names have to be lowercase and then the bullet points ignore that and define all visible characters except space (so if space is visible does that mean tab, CR, LF are also visible?) and except colon. \r\nSome simple ABNF would be so much better:\r\n```ABNF\r\nh2-field-name = h2-pseudo-field-name / 1*fn-char\r\nh2-pseudo-field-name = \":\" 1*fn-char ; or list of actual names\r\nfn-char = %x21-39 / %x3b-40 / %x5B-7E ; visible symbols except ':', digits and lowercase alpha\r\n\r\nh2-field-value = 1*fv-char\r\nfv-char = %x01-09 / %x0b-0c / %x0e-ff ; exclude null, CR and LF\r\n```\r\n\r\nOr better yet, just go with HTTP field names, but with names in lower-case:\r\n```ABNF\r\nh2-field-name = h2-pseudo-field-name / 1*fn-char\r\nh2-pseudo-field-name = \":\" 1*fn-char ; or list of actual names\r\nfn-char = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / %x61-7A\r\n\r\nh2-field-value = field-value\r\n```\r\n\r\n\r\n\r\nEdit: removed comment about ESC... I would looking at an ASCII table from before I was born!\r\n\r\n",
          "createdAt": "2021-05-26T05:40:13Z",
          "updatedAt": "2021-05-26T05:42:07Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "> It then gives text description of what the set of `valid-h2-fields` is\r\n\r\nNo it doesn't. It gives a text description of a set of invalid H2 fields. The text does not say these are the only limitations on h2 field validity (noting that there is also an ABNF description that applies when -semantics applies), neither does it say that any field that doesn't contain any invalid characters as described in this section is valid.\r\n\r\nI do think the text could be clearer in saying that this is a non-exhaustive list of reasons why a header field may be invalid, but at the same time I'm reluctant to have this document spend too much time re-hashing reasons that exist in other specifications that are presumed to apply.\r\n\r\n> But what do we do with those fields if we are not an intermediary? Do we pass them onto our applications and let them work it out that they are not members of `valid-HTTP-fields`? There is nothing there that says we MAY treat such messages as malformed - so at the very least, it would be a good addition to the text to say that non-intermediaries can do stricter validation.\r\n\r\nThis question is one for -semantics, not for HTTP/2. -semantics gives the answer to this: you MUST NOT emit (\u00a7 2.2), but as a receiver you are cautioned that (\u00a7 2.3):\r\n\r\n> A recipient should parse a received protocol element defensively, with only marginal expectations that the element will conform to its ABNF grammar and fit within a reasonable buffer size.\r\n\r\nAdditionally (\u00a7 2.4):\r\n\r\n> A recipient must interpret a received protocol element according to the semantics defined for it by this specification, including extensions to this specification, unless the recipient has determined (through experience or configuration) that the sender incorrectly implements what is implied by those semantics. For example, an origin server might disregard the contents of a received Accept-Encoding header field if inspection of the User-Agent header field indicates a specific implementation version that is known to fail on receipt of certain content codings.\r\n>\r\n> Unless noted otherwise, a recipient may attempt to recover a usable protocol element from an invalid construct. HTTP does not define specific error handling mechanisms except when they have a direct impact on security, since different applications of the protocol require different error handling strategies. For example, a Web browser might wish to transparently recover from a response where the Location header field doesn't parse according to the ABNF, whereas a systems control client might consider any form of error recovery to be dangerous.\r\n\r\nThis gives you the permission you want: you are encouraged to parse the field defensively and you may attempt to recover, which implies that by default you may fail, and that -semantics does not specify exactly how you will handle these failures. HTTP/2 continues to grant your application that freedom. The specification does not bind you: you can handle this as you want.",
          "createdAt": "2021-05-26T11:52:14Z",
          "updatedAt": "2021-05-26T11:52:14Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "> > It then gives text description of what the set of `valid-h2-fields` is\r\n> \r\n> No it doesn't. It gives a text description of a set of invalid H2 fields. \r\n\r\nOK True.  Which is actually worse, as it leaves the set of `valid-h2-fields` undefined other than we know it is a subset of the compliment of the set of invalid fields define here.\r\n\r\n> The text does not say these are the only limitations on h2 field validity\r\n\r\nAlso worse, as it means the document only vaguely defines validity.   There is actually no definition of what is a valid h2-field.\r\n\r\n> This question is one for -semantics, not for HTTP/2. -semantics gives the answer to this: you MUST NOT emit (\u00a7 2.2), but as a receiver you are cautioned that (\u00a7 2.3):\r\n\r\nThis reason could be used to say that there should be no additional invalidity check in this document.  Just allow any hpack-valid field and leave the rest to be a matter of semantics.\r\nThe fields excluded by this definition are only dangerous if forwarded, which is already covered by \"Intermediary Encapsulation Attacks\" section that suggests that full HTTP ABNF grammar should be applied (in addition to the vaguely defined exclusions of \"HTTP Fields\").\r\n\r\nSo I'm back to why is this document in-precisely defining valid/invalid h2-fields.  It is not for intermediaries as there is a section in the document dedicated to that.  It is not for locally interpreted HTTP as you say  HTTP semantics should be applied.      Why does this document say that a field name containing space is invalid, yet one containing a double quote is not?   Neither are valid HTTP, both are valid hpack. There is no good reason I can see for either and whilst I don't know of any specific attack that either could be used for, I would not be surprised if both could be used to some evil ends.\r\n\r\nThis vague definition is going to have a significant carbon footprint.   Many Implementations will ultimately end up double validating field names: once to exclude the `invalid-h2-field`s in their h2 layer and then later in their semantic layer to include only the `valid-HTTP-field`s.      Double validation could be avoided if this document either didn't restrict field validity or precisely defined valid fields as a subset of `valid-HTTP-field`s so that semantic layers could trust the fields received from their h2 layers as being valid HTTP.\r\n\r\nMaybe there is a reason for this double validation and the resulting CPU cycles, but I have yet to see why validity is only partially defined.\r\n\r\n\r\n\r\n",
          "createdAt": "2021-05-26T22:02:56Z",
          "updatedAt": "2021-05-26T22:03:28Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "> The fields excluded by this definition are only dangerous if forwarded, which is already covered by \"Intermediary Encapsulation Attacks\" section that suggests that full HTTP ABNF grammar should be applied (in addition to the vaguely defined exclusions of \"HTTP Fields\").\r\n\r\nIt suggests it but does not require it. The other text requires validation. Most intermediaries will not apply the full ABNF validation because a) it requires perfect understanding of the ABNF of all header fields, which they will not have, and b) even if they did, the -semantics ABNF is sufficiently costly to validate that they won't do it. Cheaper validation steps are more likely to be implemented.\r\n\r\n> So I'm back to why is this document in-precisely defining valid/invalid h2-fields.\r\n\r\nThis document (and -semantics) is imprecisely defining them because a [precise definition runs afoul](https://github.com/python-hyper/h11/issues/57) [of](https://github.com/python-hyper/h11/issues/97) [the](https://github.com/golang/go/issues/18215) [real](https://github.com/python-hyper/h11/issues/130) [world](https://github.com/python-hyper/h11/issues/113). The ABNF you're citing represents, fundamentally, guidance. If you want to reject things that don't conform to the ABNF you are free to do so (as -semantics says), but there is no document that obligates you to reject them. This is deliberate, because there is (IMO) absolutely no point in adding normative requirements that, if followed, would harm interoperability.\r\n\r\nIn this case the document is calling out _specific_ cases that MUST be rejected. Practically speaking the intention of this is to encode requirements from other messaging formats, such as -messaging, to ensure that HTTP/2 implementations do not encode header fields that cannot be safely translated to HTTP/1.1. This provides a lower bound on validation: so long as everybody does this, we can safely rely on HTTP/2 messages being _represented_ in HTTP/1.1's framing. Note that this doesn't meant they'll be valid HTTP/1.1 messages, just that they are not going to parse incorrectly.\r\n\r\nWith that in mind, the constraints added here are, in order:\r\n\r\n1. A cheap bitwise check that can be safely vectorised and applied to reject most invalid field names. This is sufficient to get close to the `token` ABNF, but is cheaper.\r\n2. A check that reserves pseudo-headers and is a single-byte comparison.\r\n3. Three vectorizeable field-value checks (NUL, LF, CR) all ensuring valid HTTP/1.1 framing.\r\n4. 4 single-byte comparisons against the first byte of the field-value.\r\n\r\n> This vague definition is going to have a significant carbon footprint. Many Implementations will ultimately end up double validating field names: once to exclude the `invalid-h2-fields` in their h2 layer and then later in their semantic layer to include only the `valid-HTTP-fields`.\r\n\r\nThis problem is solved by not doing that.\r\n\r\nThe ABNF in -semantics, if enforced, is a strict superset of the requirements here except for (2). If your implementation will enforce the requirements in -semantics, you can choose to not enforce these ones at the h2 layer, knowing that the -semantics layer will cover you. The RFC does not bind your implementation, only your observable behaviour: if your implementation ends up rejecting header fields that meet these characteristics, it doesn't matter why you did it, only that you did.\r\n\r\n",
          "createdAt": "2021-05-27T07:01:23Z",
          "updatedAt": "2021-05-27T07:01:23Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> a) it requires perfect understanding of the ABNF of all header fields, which they will not have, and b) even if they did, the -semantics ABNF is sufficiently costly to validate that they won't do it.\r\n\r\nI don't get that. We're still talking about field *names*, right?",
          "createdAt": "2021-05-27T07:13:03Z",
          "updatedAt": "2021-05-27T07:13:03Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't get that. We're still talking about field names, right?\r\n\r\nNo, all of this applies to names and values:\r\n\r\n```\r\nAn intermediary can reject fields that contain invalid field names or values for other\r\nreasons, in particular those that do not conform to the HTTP ABNF grammar from <xref\r\ntarget=\"HTTP\" section=\"5\"/>. Intermediaries that do not perform any validation of fields\r\nother than the minimum required by <xref target=\"HttpHeaders\"/> could forward messages\r\nthat contain invalid field names or values.\r\n```",
          "createdAt": "2021-05-27T07:21:32Z",
          "updatedAt": "2021-05-27T07:21:51Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well.\r\n\r\nValidating names and values are very different things. It would be best to clearly separate these topics.\r\n",
          "createdAt": "2021-05-27T07:40:57Z",
          "updatedAt": "2021-05-27T07:40:57Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "I get it that there is a minimum standard being set.\r\n\r\nIn section \"HTTP Fields\" it says that h2 implementations MUST treat as malformed any fields that violate any of the described conditions and an intermediary MUST NOT forward any such headers. \r\nThen again in section \"Intermediary Encapsulation Attacks\" is says the validations of the \"HTTP Fields\" MUST be implemented, which is kind of a duplication as they are already at MUST strength.\r\n\r\nI don't see any normative text that says that an implementation MAY or SHOULD validate against the HTTP ABNF and that if they do so then that is a superset of the conditions in section \"HTTP Fields\"\r\n\r\nI would very much prefer to see text in the \"HTTP Fields\" section that clearly says h2 implementations MAY validate against the HTTP ABNF and that any implementations that do not MUST validate fields against the following conditions.  I'll have a try at this later today.... stand by....",
          "createdAt": "2021-05-27T07:44:51Z",
          "updatedAt": "2021-05-27T07:44:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@gregw, I'm reading your comments as supportive of the technical change, but a strong preference for a different way of presenting the information.\r\n\r\nI want to clarify that this change is about the mandatory validation that endpoints perform on fields.  It looks like we all agree with stipulating a minimum amount of validation that applies to all implementations, especially those that would otherwise just forward fields without processing.  Additionally, we all agree that additional validation is permitted, up to the point that knowledge of the semantics for the fields is applied in validating the values.\r\n\r\nWhere we might disagree is in the way that these requirements are described.  I've chosen to use words; @gregw would prefer ABNF.\r\n\r\nAs we agree on the technical substance and the question of presentation is an editorial decision in which Cory and I have discretion I'm going to merge this pull request.  We would like to publish a revision ahead of the upcoming interim.\r\n\r\nIf you disagree with this decision, especially the technical aspects, then I encourage you to open a new issue.  One aspect that seems like it might worth discussing is whether we encourage additional validation rather than simply permitting it.  That is, \"SHOULD/MAY fully validate\".",
          "createdAt": "2021-06-03T00:25:26Z",
          "updatedAt": "2021-06-03T00:25:26Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "NONE",
          "body": "@martinthomson that's a correct summation of my position. I would have preferred that some text for SHOULD/MAY fully validate to be resolved in this PR (with or without ABNF), but will open another issue.",
          "createdAt": "2021-06-03T00:34:31Z",
          "updatedAt": "2021-06-03T00:34:31Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzNDg2OTI5",
          "commit": {
            "abbreviatedOid": "f82ea92"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Another good cleanup",
          "createdAt": "2021-04-23T16:45:59Z",
          "updatedAt": "2021-04-23T16:45:59Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ1NTY5NDIx",
          "commit": {
            "abbreviatedOid": "f82ea92"
          },
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "see https://github.com/httpwg/http2-spec/pull/846#issuecomment-827383535",
          "createdAt": "2021-04-27T08:17:59Z",
          "updatedAt": "2021-04-27T08:17:59Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ1ODExNTIx",
          "commit": {
            "abbreviatedOid": "f82ea92"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-27T12:48:02Z",
          "updatedAt": "2021-04-27T12:48:03Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n            do not cause a request to be <xref target=\"malformed\" format=\"none\">malformed</xref>\r\n```",
              "createdAt": "2021-04-27T12:48:02Z",
              "updatedAt": "2021-04-29T04:40:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ1ODE1MDQ5",
          "commit": {
            "abbreviatedOid": "f82ea92"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-27T12:51:25Z",
          "updatedAt": "2021-04-27T12:51:26Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "obvious observation but this sentence loses the \"field\" subject, which seems worse than the previous version",
              "createdAt": "2021-04-27T12:51:25Z",
              "updatedAt": "2021-04-29T04:40:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ2NDM0NDI1",
          "commit": {
            "abbreviatedOid": "f82ea92"
          },
          "author": "gregw",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-04-27T22:43:12Z",
          "updatedAt": "2021-04-27T22:43:29Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "It is not acceptable to not have a clear ABNF definition of acceptable fields.    I am not opposed changing what the characters are, but any new definition must be supported by new ABNF that defines what is and is not acceptable.",
              "createdAt": "2021-04-27T22:43:12Z",
              "updatedAt": "2021-04-29T04:40:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ2NTYzNjY3",
          "commit": {
            "abbreviatedOid": "f82ea92"
          },
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-28T03:22:58Z",
          "updatedAt": "2021-04-28T03:22:59Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Can somebody remind me about *why* we are discussing a different set of chars compared to base HTTP (except for the special case of pseudo header fields)?",
              "createdAt": "2021-04-28T03:22:59Z",
              "updatedAt": "2021-04-29T04:40:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ2NzA5OTEz",
          "commit": {
            "abbreviatedOid": "5ba1891"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-28T07:56:46Z",
          "updatedAt": "2021-04-28T07:56:47Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "The original rules (which used the ABNF) were considered onerous by some intermediaries.  Apparently some implementations pass stuff that doesn't conform to the grammar, as previously mandated.  The thrust of the change here was to align with that, requiring that the HTTP/2 parts of implementations only do what is necessary for security.  That doesn't mean that the things that are conveyed are valid HTTP; that's a determination that any endpoint that processes the fields needs to determine.  Consequently it might be that certain fields can be ignored without causing the entire message to be considered malformed.",
              "createdAt": "2021-04-28T07:56:46Z",
              "updatedAt": "2021-04-29T04:40:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ3NzU1MDc0",
          "commit": {
            "abbreviatedOid": "995fbf0"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-29T01:11:38Z",
          "updatedAt": "2021-04-29T01:11:38Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Perhaps what we need here is encouragement to reject field-names that don't conform to the ABNF, but not a requirement, noting that some intermediaries pass them through.",
              "createdAt": "2021-04-29T01:11:38Z",
              "updatedAt": "2021-04-29T04:40:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ3NzgxMDM2",
          "commit": {
            "abbreviatedOid": "995fbf0"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-29T02:48:09Z",
          "updatedAt": "2021-04-29T02:48:10Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "\"An intermediary can reject fields that contain invalid field names or values for other reasons, in particular those that do not conform to the HTTP ABNF grammar (in Section X of Y).  Some intermediaries do not validate fields and so could pass messages that contain invalid field names or values.\"\r\n\r\n?",
              "createdAt": "2021-04-29T02:48:10Z",
              "updatedAt": "2021-04-29T04:40:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ3ODAzOTYy",
          "commit": {
            "abbreviatedOid": "995fbf0"
          },
          "author": "gregw",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-29T04:16:55Z",
          "updatedAt": "2021-04-29T04:16:55Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "@martinthomson That text well describes what can happen, but it doesn't well describe what an implementation MUST do when that situation occurs.   We need a definition of a function from String to Boolean that will tell us if the field is malformed or not.   Currently that function is defined in ABNF.   If there is a need to relax that definition somewhat, then OK,  but please give us alternative ABNF that clearly defines what strings are acceptable and which are not.   I don't want to have to have a major in interpretive prose to understand what field names are malformed.",
              "createdAt": "2021-04-29T04:16:55Z",
              "updatedAt": "2021-04-29T04:40:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYyODIwNTMz",
          "commit": {
            "abbreviatedOid": "bf4686b"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-05-19T06:48:46Z",
          "updatedAt": "2021-05-19T06:53:36Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\n            HPACK can carry any octet, fields are not valid in the following cases:\r\n```\r\n\r\nUse of 'value' is a bit confusing here",
              "createdAt": "2021-05-19T06:48:46Z",
              "updatedAt": "2021-05-19T06:53:36Z"
            },
            {
              "originalPosition": 31,
              "body": "I think we need to say more about field names, specifically:\r\n- internal whitespace\r\n- control characters\r\n\r\nSee: https://github.com/neex/http2smugl",
              "createdAt": "2021-05-19T06:52:27Z",
              "updatedAt": "2021-05-19T06:53:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ3ODA5MTg3",
          "commit": {
            "abbreviatedOid": "995fbf0"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-29T04:36:47Z",
          "updatedAt": "2021-05-20T00:58:20Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I'm not seeing this particular text as being particularly hard to understand.  Certainly not relative to the rest of the specification.\r\n\r\nWhat is required when the situation occurs is what is defined for all [malformed messages](https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#malformed).\r\n\r\nFWIW, this should be [easy to implement](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=fad0c7b1a265c82d016d762a80f9be3b); easier than the full ABNF.  Defining a narrower ABNF might imply validity where there is none though.  We're not defining what is valid, which is what ABNF is usually turned toward, but defining what validation MUST be performed. ... even when you aren't processing fields.",
              "createdAt": "2021-04-29T04:36:47Z",
              "updatedAt": "2021-05-20T04:26:48Z"
            },
            {
              "originalPosition": 31,
              "body": "@mnot, can you make a very specific suggestion for what to add here?  Do we just say that 0x00-0x20 are not allowed in field names?",
              "createdAt": "2021-05-20T00:58:10Z",
              "updatedAt": "2021-05-20T00:58:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYzOTIwNTA5",
          "commit": {
            "abbreviatedOid": "bf4686b"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-20T03:56:18Z",
          "updatedAt": "2021-05-20T03:56:19Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\n            <li>\r\n              A field name MUST NOT contain characters in the ASCII range 0x00-0x20, or 0x7F.\r\n            </li>\r\n            <li>\r\n              A field value MUST NOT start or end with a whitespace character (SP or HTAB,\r\n              ASCII 0x20 or 0x9).\r\n            </li>            \r\n```",
              "createdAt": "2021-05-20T03:56:18Z",
              "updatedAt": "2021-05-20T03:56:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYzOTIyOTQ1",
          "commit": {
            "abbreviatedOid": "bf4686b"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-20T04:03:46Z",
          "updatedAt": "2021-05-20T04:03:50Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Thanks Mark.  I can work with that (I might need to reconcile some of the items here with this, but it's doable.  I'll also clear it with the list in case someone disagrees.",
              "createdAt": "2021-05-20T04:03:46Z",
              "updatedAt": "2021-05-20T04:03:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYzOTMyMDg2",
          "commit": {
            "abbreviatedOid": "4b361c0"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-20T04:31:21Z",
          "updatedAt": "2021-05-20T04:31:21Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "LGTM",
              "createdAt": "2021-05-20T04:31:21Z",
              "updatedAt": "2021-05-20T04:31:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYzOTMyMTI0",
          "commit": {
            "abbreviatedOid": "4b361c0"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-20T04:31:26Z",
          "updatedAt": "2021-05-20T04:31:26Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYzOTU4MjYx",
          "commit": {
            "abbreviatedOid": "4b361c0"
          },
          "author": "gregw",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-20T05:37:16Z",
          "updatedAt": "2021-05-20T05:37:16Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "the proposed text now does refer to the ABNF.  Edit: the resolve button is not being offered... but consider this resolved for me.",
              "createdAt": "2021-05-20T05:37:16Z",
              "updatedAt": "2021-05-20T05:38:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY0MDA3MzM2",
          "commit": {
            "abbreviatedOid": "4b361c0"
          },
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-20T06:59:17Z",
          "updatedAt": "2021-05-20T06:59:17Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY1MjI3MjMz",
          "commit": {
            "abbreviatedOid": "4b361c0"
          },
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-05-21T08:40:21Z",
          "updatedAt": "2021-05-21T08:40:46Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "This seems to repeat a requirement from above.",
              "createdAt": "2021-05-21T08:40:21Z",
              "updatedAt": "2021-05-21T08:40:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY1MjI4MjAz",
          "commit": {
            "abbreviatedOid": "4b361c0"
          },
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-21T08:41:26Z",
          "updatedAt": "2021-05-21T08:41:27Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "FWIW, it's also not clear to me why we would allow whitespace *inside* the field name...",
              "createdAt": "2021-05-21T08:41:26Z",
              "updatedAt": "2021-05-21T08:41:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY2MTc1NjEw",
          "commit": {
            "abbreviatedOid": "4b361c0"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-22T11:42:49Z",
          "updatedAt": "2021-05-22T11:42:49Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Where does it say those things?",
              "createdAt": "2021-05-22T11:42:49Z",
              "updatedAt": "2021-05-22T11:42:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY2MTc2Mjkw",
          "commit": {
            "abbreviatedOid": "4b361c0"
          },
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-22T11:54:04Z",
          "updatedAt": "2021-05-22T11:54:04Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "It does not. I was confused because of the statement about field *values*. Sorry.",
              "createdAt": "2021-05-22T11:54:04Z",
              "updatedAt": "2021-05-22T11:54:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY3NDc1MzE4",
          "commit": {
            "abbreviatedOid": "05686ee"
          },
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-25T07:22:57Z",
          "updatedAt": "2021-05-25T07:22:57Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY5ODkyNTQ2",
          "commit": {
            "abbreviatedOid": "05686ee"
          },
          "author": "gregw",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-27T08:31:55Z",
          "updatedAt": "2021-05-27T08:31:56Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n            Field names are strings of ASCII characters that are compared in a case-insensitive\r\n            fashion. Field names MUST be converted to lowercase when constructing a HTTP/2\r\n            message. A request or response containing an uppercase character ('A' to 'Z', ASCII 0x41\r\n            to 0x5a) in a field name MUST be treated as <xref target=\"malformed\">malformed</xref>.\r\n          </t>\r\n          <t>\r\n            HPACK is capable of carrying field names or values that are not valid in HTTP, thus endpoints\r\n            MUST perform some additional validation  and treat as <xref target=\"malformed\">malformed</xref>\r\n            that are not <xref target=\"PseudoHeaderFields\">pseudo-header fields</xref> and that do not comply\r\n            with the validation. An endpoint SHOULD, in addition to the lowercase condition above, validate\r\n            fields against the HTTP ABNF grammar from <xref target=\"HTTP\" section=\"5\"/>. Any endpoint that\r\n            does not validate against the HTTP ABNF grammar MUST at least validate against the following cases:\r\n          </t>\r\n```",
              "createdAt": "2021-05-27T08:31:55Z",
              "updatedAt": "2021-05-27T08:31:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY5OTQzNjgw",
          "commit": {
            "abbreviatedOid": "05686ee"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-27T09:16:41Z",
          "updatedAt": "2021-05-27T09:16:41Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Leaving aside the grammar of the text for a moment (I only want to discuss that if we decide to go ahead with adding it), I think the core question is whether or not this is a SHOULD. If -semantics does not make this a SHOULD, why should we?",
              "createdAt": "2021-05-27T09:16:41Z",
              "updatedAt": "2021-05-27T09:16:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcwMTI3MjA0",
          "commit": {
            "abbreviatedOid": "05686ee"
          },
          "author": "gregw",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-27T12:39:59Z",
          "updatedAt": "2021-05-27T12:40:01Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Validating the HTTP fields in -semantics is a MUST, but I'm not proposing that here.   This change works equally as well with MAY instead of SHOULD. The point being making it clear that the conditions listed below are a minimum validation and that more strict validation may be done instead.\r\n\r\nOf course it is yet clearer with ABNF:\r\n\r\n```suggestion\r\n            Field names are strings of ASCII characters that are compared in a case-insensitive\r\n            fashion. Field names MUST be converted to lowercase when constructing a HTTP/2\r\n            message. A request or response containing an uppercase character ('A' to 'Z', ASCII 0x41\r\n            to 0x5a) in a field name MUST be treated as <xref target=\"malformed\">malformed</xref>.\r\n          </t>\r\n          <t>\r\n            Since HPACK is capable of carrying field names or values that are neither valid in HTTP\r\n            nor secure to transmit as HTTP, fields MUST at least be minimally validated by treating as \r\n            <xref target=\"malformed\">malformed</xref> any field that does not comply with the ABNF:\r\n            <pre>\r\n              field-name = h2-pseudo-field-name / 1*fn-char\r\n              pseudo-field-name = \":\" 1*fn-char \r\n              fn-char = %x21-39 / %x3b-40 / %x5B-7E ; lowercase visible symbols except ':'\r\n\r\n              field-value = 1*fv-char\r\n              fv-char = %x01-09 / %x0b-0c / %x0e-ff ; octets excluding null, CR and LF\r\n            </pre>\r\n            Alternately, fields MAY be more strictly validated and treated as \r\n            <xref target=\"malformed\">malformed</xref> if they do not comply with the \r\n            HTTP ABNF grammar from <xref target=\"HTTP\" section=\"5\"/> modified for \r\n            lowercase field names:\r\n            <pre>\r\n              field-name = h2-pseudo-field-name / 1*fn-char\r\n              pseudo-field-name = \":\" 1*fn-char \r\n              fn-char = \"!\" / \"#\" / \"$\" / \"%\" / \"&amp;\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / %x61-7A\r\n              \r\n              field-value = *field-content\r\n              field-content = field-vchar [ 1*( SP / HTAB / field-vchar ) field-vchar ]\r\n              field-vchar = VCHAR / %x80-FF\r\n            </pre>\r\n          </t>\r\n```\r\n\r\nthen delete all the bullet points below.",
              "createdAt": "2021-05-27T12:39:59Z",
              "updatedAt": "2021-05-27T12:40:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcwOTkxMjE1",
          "commit": {
            "abbreviatedOid": "05686ee"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-28T07:04:40Z",
          "updatedAt": "2021-05-28T07:04:41Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "> Validating the HTTP fields in -semantics is a MUST, but I'm not proposing that here.\r\n\r\nIs it? I can\u2019t find that text in the document, can you link me to it?",
              "createdAt": "2021-05-28T07:04:40Z",
              "updatedAt": "2021-05-28T07:04:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxMDAyODIy",
          "commit": {
            "abbreviatedOid": "05686ee"
          },
          "author": "gregw",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-28T07:20:44Z",
          "updatedAt": "2021-05-28T07:20:44Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "In [section 2.4](https://www.ietf.org/archive/id/draft-ietf-httpbis-semantics-16.html#section-2.4) it says:\r\n\r\n> A recipient MUST interpret a received protocol element according to the semantics defined for it by this specification\r\n\r\nThe ABNF is given for the fields in [section 5.](https://www.ietf.org/archive/id/draft-ietf-httpbis-semantics-16.html#name-fields), so by my reading  that would be a protocol element that MUST be interpreted according to the ABNF defined by the specification.\r\n",
              "createdAt": "2021-05-28T07:20:44Z",
              "updatedAt": "2021-05-28T07:20:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcyODk3NTEx",
          "commit": {
            "abbreviatedOid": "05686ee"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-01T10:14:42Z",
          "updatedAt": "2021-06-01T10:14:42Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I don't disagree with the reading, but section 2.4 does then caveat that MUST pretty substantially. For example, the sentence you quotes reads, in its entirety:\r\n\r\n> A recipient MUST interpret a received protocol element according to the semantics defined for it by this specification, including extensions to this specification, unless the recipient has determined (through experience or configuration) that the sender incorrectly implements what is implied by those semantics.\r\n\r\nOn top of that unless, the next paragraph is:\r\n\r\n> Unless noted otherwise, a recipient MAY attempt to recover a usable protocol element from an invalid construct.\r\n\r\nI don't think this drastically changes the MUST, but I do think that we potentially want to walk the SHOULD back to a MAY here.",
              "createdAt": "2021-06-01T10:14:42Z",
              "updatedAt": "2021-06-01T10:14:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjczNzA5OTU2",
          "commit": {
            "abbreviatedOid": "05686ee"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-02T01:27:14Z",
          "updatedAt": "2021-06-02T01:27:14Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "@Lukasa, which \"SHOULD\" are you referring to?",
              "createdAt": "2021-06-02T01:27:14Z",
              "updatedAt": "2021-06-02T01:27:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjczNzUyNTQ2",
          "commit": {
            "abbreviatedOid": "05686ee"
          },
          "author": "gregw",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-02T03:29:22Z",
          "updatedAt": "2021-06-02T03:29:22Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "@martinthomson I believe @Lukasa is referring to the \"SHOULD\" in the first version of suggested text above:  \r\n> An endpoint SHOULD, in addition to the lowercase condition above, validate fields against the HTTP ABNF grammar ...\r\nIf text like that is adopted, I don't particularly care if that is a SHOULD or MAY.   The key thing I suggestion is that this document explicitly calls out the possibility of validating against the full HTTP grammer in this \"HttpFields\" section and indicates that the minimal validation described is just that - a minimal validation.\r\n\r\nHowever, I prefer the form of my second suggested text above:\r\n> Since HPACK is capable of carrying field names or values that are neither valid in HTTP nor secure to transmit as HTTP, fields MUST at least be minimally validated ...\r\n> Alternately, fields MAY be more strictly validated ...  with the  HTTP ABNF grammar ...\r\n\r\nFinally, althought I prefer the ABNF usage in my second suggested text (specially as it clarifies the lowercase situation), but even if a text description is used I think that casn work with the form: \"MUST minimally validate... Alternatively MAY more strictly validate....\" \r\n\r\n",
              "createdAt": "2021-06-02T03:29:22Z",
              "updatedAt": "2021-06-02T03:29:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 847,
      "id": "MDExOlB1bGxSZXF1ZXN0NjIxODYzNjA5",
      "title": "Partially-valid request/response handling",
      "url": "https://github.com/httpwg/http2-spec/pull/847",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #794.",
      "createdAt": "2021-04-23T08:00:28Z",
      "updatedAt": "2021-05-24T07:21:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "a5cccab1a58c5cadcbe2314f7bcb2dbf38accb45",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "malformed-partial",
      "headRefOid": "1a0b35a30e57dfb9ca1a19d84c8b58489f07a199",
      "closedAt": "2021-05-24T07:14:04Z",
      "mergedAt": "2021-05-24T07:14:04Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c57c73e2b09e94fd988b787e39dc94d01548ed69"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzNDg5NDEx",
          "commit": {
            "abbreviatedOid": "133cb6f"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-23T16:49:04Z",
          "updatedAt": "2021-04-23T16:49:17Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Hmm, now that I reread this I feel a bit conflicted by this. MUST NOT be treated by whom?",
              "createdAt": "2021-04-23T16:49:04Z",
              "updatedAt": "2021-04-23T16:49:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ1MzAwOTAx",
          "commit": {
            "abbreviatedOid": "133cb6f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-27T02:52:34Z",
          "updatedAt": "2021-04-27T02:52:34Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Oh yeah, that really isn't clear at all.\r\n\r\nMaybe what this boils down to is that you can't use the REFUSED_STREAM if you do any processing of partial messages.\r\n\r\nI'll give this another go.",
              "createdAt": "2021-04-27T02:52:34Z",
              "updatedAt": "2021-04-27T02:52:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY2NDU4Mzc2",
          "commit": {
            "abbreviatedOid": "1a0b35a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Seems like a nice clear improvement",
          "createdAt": "2021-05-24T07:13:26Z",
          "updatedAt": "2021-05-24T07:13:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 848,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI0MDE2ODEw",
      "title": "xml2rfc workaround",
      "url": "https://github.com/httpwg/http2-spec/pull/848",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "xml2rfc is overly pedantic about non-ASCII text.  The result in this\r\ncase was that Herv\u00e9's name was being mangled to include a literal\r\n`&#233;`, even in a text format (where HTML character references make no\r\nsense).  To avoid that, this is what is necessary.  Of course, this\r\nmakes the rendering of the document with the RFC Editor stylesheet look\r\nawful.  I've decided not to concern myself with that part though; the\r\nstylesheet we use is fine.",
      "createdAt": "2021-04-27T06:22:37Z",
      "updatedAt": "2021-04-27T06:25:10Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0615c0b27c26c399ce6b71b9e904d1b373c4f78f",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "contact",
      "headRefOid": "b54b33a4647b93a03539f83520d61a045adb2b82",
      "closedAt": "2021-04-27T06:25:05Z",
      "mergedAt": "2021-04-27T06:25:05Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "fdc20bc6b57519c1eeac70da07d71c9d67238fd2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ1NDc3ODk0",
          "commit": {
            "abbreviatedOid": "b54b33a"
          },
          "author": "Lukasa",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Good to see the IETF is fully unicode aware. \ud83d\ude10",
          "createdAt": "2021-04-27T06:24:29Z",
          "updatedAt": "2021-04-27T06:24:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 850,
      "id": "MDExOlB1bGxSZXF1ZXN0NjUxMDczMjg3",
      "title": "Clean closed state",
      "url": "https://github.com/httpwg/http2-spec/pull/850",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #783.",
      "createdAt": "2021-05-24T07:15:43Z",
      "updatedAt": "2021-06-03T00:14:05Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "eba436689e3d72435a064c16db312018943f9eef",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "clean-closed-state",
      "headRefOid": "969bb331d9cf2e5e76e3b53c18850a860d535ef5",
      "closedAt": "2021-06-03T00:14:00Z",
      "mergedAt": "2021-06-03T00:14:00Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "cba0c477b004ce7da038873131b389e51517811a"
      },
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Thanks Martin for working on this!\r\nRegarding the following:\r\n> Endpoints  SHOULD NOT use timers for this purpose.\r\n\r\nI'd add \"unless they have a way to know the timer is at least as large as the connection's RTT\". While I'm not using timers myself, I can easily imagine that for some implementations that permanently monitor their connections' quality of service it could be safe and easy to use timers.\r\n\r\nAfter the list of proposed methods, I would add the stream counter one because I think it will often be the easiest one to implement: \"seeing at least SETTINGS_MAX_CONCURRENT_STREAMS new streams created since the RST_STREAM frame was sent also proves it was received and processed\".\r\n\r\nWhat I'm unsure about is whether we should explicitly request for implementations to be careful not to send extra RST_STREAM during this period or if we should only rely on other mentions for this, or leave it implied by \"no frame other than ...\".\r\n",
          "createdAt": "2021-05-26T02:59:50Z",
          "updatedAt": "2021-05-26T02:59:50Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The timers thing is something that I realized might run afoul of certain practices that we know to be common.  Let's say that you have large send buffers (for performance) and you enqueue more than a BDP.  In that case, if the peer resets the stream, you might have committed to writing so much that even after a few round trips, the buffer is still draining.\r\n\r\nNow maybe that is enough cause to drop the connection, but it's a practice that isn't technically *wrong*.  Enforcing this on a timer makes that more risky.\r\n\r\nAs for recycling the entire stream limit, I don't know if it is true that it is easy to implement.  There are obvious ways to implement it that are easy but also obviously wrong.  I would prefer not to include it.\r\n\r\nI'm not following your point about extra RST_STREAM frames.  Do you mean sending RST_STREAM for the same stream more than once?  There is no point in doing that and I think we already prohibit that.  If an endpoint has to reset other streams, I don't think that we can stop that.",
          "createdAt": "2021-05-26T03:42:19Z",
          "updatedAt": "2021-05-26T03:42:19Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "I agree that timers are far from being perfect especially in window-in-window environments like H2, but every implementation has some at least for communication timeouts. In addition, in the case you mention about huge data being queued, that's true but in such a case each such data has to reset the timer. And I also agree that extra data from other streams could artificially delay the resetted stream's final data (but that implicitly increases the measured RTT as well). I don't think we should discourage implementations from doing this if that's easier for them and they can get it right (don't forget that often the alternative is to flood with RST_STREAM in the other direction for each and every frame receivd in closed state). But you're probably right that we should not encourage it either because it's easy to get it wrong. Maybe the only thing to do is to turn the \"SHOULD NOT\" into a non-normative \"should not\".\r\n\r\nRegarding the recycling of the streams, yes it's easy to implement. You just need a counter, which will work exactly like a timeout except that it's based on stream counts. So when resetting a stream we'd just have to set its expiration value to current stream count plus SETTINGS_MAX_CONCURRENT_STREAMS and you're sure that the other end has necessarily received your reset otherwise it would be blocked at a lower value. And I'm pretty sure that it is what I'll implement in the end (much easier and cleaner than sending a PING frame after each RST_STREAM as I initially thought about).\r\n\r\nRegarding the extra RST_STREAM frames, yes that's what I mean. We do prohibit that but we offer no easy way to help against doing it, except in this discussion, which is exactly the point :-)  The problem starts by the spec explicitly asking not to send anything other than PRIORITY on a closed stream and suggesting to use RST_STREAM to close a stream. But the reality in field is that a closed stream is a stream that doesn't exist anymore (i.e. not attached to any upper application layer) and generally the only possible response to this is to send RST_STREAM to signal that the stream is closed (analogy to the \"broken pipe\" between processes or simply TCP RST). I'm pretty sure we fell into that situation in the initial implementation we had in haproxy. RST_STREAM should be seen more as an \"abort\" signal but given that it's often used to report processing errors, it's natural to use it as well to signal that the stream targetted by a received frame has just disappeared.\r\n\r\nOften I've been wondering if it wouldn't have been easier to refer as \"non-existing stream\" or \"unknown stream\" for those that have been definitely closed, and differentiate them from \"closed\" ones which are still known. We could then say that a closed stream disappears immediately on END_STREAM+half-closed and on receipt of RST_STREAM, but that it should be kept in closed state for some time after sending RST_STREAM. Then instead of speaking about \"stream closed by RST_STREAM\" or other variants we could simply speak about \"closed stream\" versus \"unknown stream\" and have simple rules for the latter, especially since the rules are the same for frames received on these closed streams and those received on idle streams. But I'm a bit wary of revisiting all places mentioning \"closed\" :-/",
          "createdAt": "2021-05-26T05:17:39Z",
          "updatedAt": "2021-05-26T05:17:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, that's a bunch of stuff to unpack.\r\n\r\nOn the timer issue, I think that you just convinced me that dissuading people from using timers is the right idea.  It's not a hard rule, so people can use timers if they want.  I could just remove the text about timers, but it seems to me like people will try to use timers and fail majestically.  The text necessary to explain the pitfalls would be more involved than I think the document needs.\r\n\r\nOn the stream limit thing, I'm convinced by the potential for it to be easy to implement (it's more state than I would keep, but that's your call).  However, explaining both how to do that AND explaining why this is OK to do would also take a lot of words.  You will note that the other options we present are pretty short (send SETTINGS, receive an ACK; send PING, receive an ACK) and they are pretty obvious.  The logic here is less direct.\r\n\r\nOn the multiple RST_STREAM thing, could you open an issue?  If people are sending multiple RST_STREAM frames for the same stream and that isn't causing problems, AND there is a good reason to do it, THEN we should document that properly.",
          "createdAt": "2021-05-26T06:08:03Z",
          "updatedAt": "2021-05-26T06:08:03Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "For timers, I think that just lowercasing \"should-not\" will be sufficient, no need for more explanation.\r\nFor the streams count, I don't think we need the put the demonstration, simply saying that \"or at least SETTINGS_MAX_CONCURRENT_STREAMS new streams were initiated by the peer\" is sufficient, it's left as an exercice to the reader to verify why if they want.\r\n\r\nFor the RST_STREAM one I could open an issue, it's just still unclear to me how to address it other than by this precise one. So I think that the current issue can magically solve plenty of small ones because it fixes the root cause instead of addressing individual side effects. Maybe Cory has an opinion about it ?",
          "createdAt": "2021-05-26T07:12:50Z",
          "updatedAt": "2021-05-26T07:12:50Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding multiple RST_STREAM I think there are only two states: either you have sent an RST_STREAM and you don't think your peer has seen it yet, in which case you should ignore frames sent on that stream, or you have sent it and you think your peer _has_ seen it but is still sending non-PRIORITY frames for that stream, in which case you should connection error with PROTOCOL_ERROR.",
          "createdAt": "2021-05-26T11:59:34Z",
          "updatedAt": "2021-05-26T11:59:34Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Actually there's a third state: the stream might have reached the closed state from your peer sending an RST_STREAM itself, and the spec says that in this case you should treat any frame other than PRIORITY with a stream error (hence return an RST_STREAM). By the way this even opens the way to an RST_STREAM loop but I believe it's discussed elsewhere in the spec.\r\n\r\nAnd that's precisely the problem with this \"closed\" state, it's that the rules to process frames in this state differ depending on how you reached that state, and not exclusively on the state. This basically means there are multiple closed states. But once you delete your stream and consider it's closed, it's not possible anymore to figure what happened.\r\n\r\nSo when you receive frames for a closed stream, you have three options:\r\n  - you assume the peer sent a frame after END_STREAM, it's a protocol error and you break the connection\r\n  - you assume the peer sent a frame after RST_STREAM, it's a tream error and you send RST_STREAM(stream_closed) (and in my opinion don't do that if the frame itself was RST_STREAM)\r\n  - or you consider that you might have closed it yourself and it would be bad to punish your peer for not having received it yet, and thus you assume you were the one having sent the reset and ignore the frames.\r\n\r\nI used to send RST_STREAM(stream_closed) when getting frames in this state because it was the most natural and efficient thing to do, with the least impact. But it can result in RST_STREAM floods. Now I prefer to simply ignore frames, but it also means it's not really possible to abort an upload with an early response (e.g. 401 or 302 on a POST) if you have to drain all input.\r\n",
          "createdAt": "2021-05-27T07:02:26Z",
          "updatedAt": "2021-05-27T07:02:26Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "> Actually there's a third state: the stream might have reached the closed state from your peer sending an RST_STREAM itself, and the spec says that in this case you should treat any frame other than PRIORITY with a stream error (hence return an RST_STREAM).\r\n\r\nWhere does the spec say that's a stream error?",
          "createdAt": "2021-05-27T07:24:27Z",
          "updatedAt": "2021-05-27T07:24:27Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Just found it, page 19 in 7540:\r\n```\r\nclosed:\r\n      The \"closed\" state is the terminal state.\r\n\r\n      An endpoint MUST NOT send frames other than PRIORITY on a closed\r\n      stream.  An endpoint that receives any frame other than PRIORITY\r\n      after receiving a RST_STREAM MUST treat that as a stream error\r\n      (Section 5.4.2) of type STREAM_CLOSED.\r\n```\r\n",
          "createdAt": "2021-05-27T08:00:15Z",
          "updatedAt": "2021-05-27T08:00:15Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "That text is replaced by the new text in this PR.",
          "createdAt": "2021-05-27T09:14:44Z",
          "updatedAt": "2021-05-27T09:14:44Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "OK, I didn't notice in the diff that this part was replaced (text parts are much less readable with the XML tags around). But I think we're addressing all remaining problems then, cool!",
          "createdAt": "2021-05-27T09:41:20Z",
          "updatedAt": "2021-05-27T09:41:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks all for the feedback.  We'll need to ask others to review this carefully, but the best way to do that now is to make a new draft.",
          "createdAt": "2021-06-03T00:13:56Z",
          "updatedAt": "2021-06-03T00:13:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 853,
      "id": "MDExOlB1bGxSZXF1ZXN0NjUxMjAyMzA5",
      "title": "Experimental begone",
      "url": "https://github.com/httpwg/http2-spec/pull/853",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is part of the fix for #826.  This part removes the experimental range for frame types and settings.\r\n\r\nAlso updates to use section references to RFC 8126, which replaces RFC 5226.",
      "createdAt": "2021-05-24T10:02:05Z",
      "updatedAt": "2021-06-03T00:12:29Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "c97bf8b33242e3747fec357fe1c59f6c3c1fe4f1",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "experimental-begone",
      "headRefOid": "818e34f0435f80fd6e227614eafcf5acb50cec0e",
      "closedAt": "2021-06-03T00:12:26Z",
      "mergedAt": "2021-06-03T00:12:26Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "916c436264b9fc3b378821fb7daca6fe17f08f17"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY2NjI1MjMx",
          "commit": {
            "abbreviatedOid": "f5af010"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Nice clean change. No notes.",
          "createdAt": "2021-05-24T10:56:53Z",
          "updatedAt": "2021-05-24T10:56:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 854,
      "id": "MDExOlB1bGxSZXF1ZXN0NjUxMjE1Mjc5",
      "title": "Add a changelog for priority removal",
      "url": "https://github.com/httpwg/http2-spec/pull/854",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-05-24T10:20:26Z",
      "updatedAt": "2021-05-24T22:51:52Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "eba436689e3d72435a064c16db312018943f9eef",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "priority-changelog",
      "headRefOid": "abeb3191d3b7a998a7127eaa2e51927e5174922c",
      "closedAt": "2021-05-24T22:51:52Z",
      "mergedAt": "2021-05-24T22:51:52Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6dba43091523758b02b944534814a4281efdfa59"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY2NjI1NjY4",
          "commit": {
            "abbreviatedOid": "abeb319"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-24T10:57:29Z",
          "updatedAt": "2021-05-24T10:57:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 855,
      "id": "MDExOlB1bGxSZXF1ZXN0NjUxMjE2MTIy",
      "title": "Remove dead references",
      "url": "https://github.com/httpwg/http2-spec/pull/855",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is going to conflict with other changes, but that's just how things roll around here.",
      "createdAt": "2021-05-24T10:21:45Z",
      "updatedAt": "2021-05-24T22:51:41Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "eba436689e3d72435a064c16db312018943f9eef",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "misref",
      "headRefOid": "7a0d3417d6dfb3e0fdd8d6d40fab4c85a4fd48de",
      "closedAt": "2021-05-24T22:51:37Z",
      "mergedAt": "2021-05-24T22:51:37Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "acf47c11dc674421581783c49caaabc7d33ae243"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY2NjI1OTc3",
          "commit": {
            "abbreviatedOid": "7a0d341"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-24T10:57:55Z",
          "updatedAt": "2021-05-24T10:57:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 856,
      "id": "MDExOlB1bGxSZXF1ZXN0NjUxMjIxMTQ5",
      "title": "Copy the QUIC text regarding generic errors",
      "url": "https://github.com/httpwg/http2-spec/pull/856",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #824.",
      "createdAt": "2021-05-24T10:30:11Z",
      "updatedAt": "2021-05-24T22:51:01Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "eba436689e3d72435a064c16db312018943f9eef",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "generic-error",
      "headRefOid": "5feb4a4e6f44d45b9f1a91407b53873b74bb80f4",
      "closedAt": "2021-05-24T22:51:01Z",
      "mergedAt": "2021-05-24T22:51:00Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "90db688a8692accd28b7bf7859997e316759c40a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY2NjI2NjMz",
          "commit": {
            "abbreviatedOid": "5feb4a4"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Reads clearly, captures the intent.",
          "createdAt": "2021-05-24T10:58:57Z",
          "updatedAt": "2021-05-24T10:58:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 857,
      "id": "MDExOlB1bGxSZXF1ZXN0NjUxMjM3MDIz",
      "title": "Remote timing attacks are a thing",
      "url": "https://github.com/httpwg/http2-spec/pull/857",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Not sure that this needs a citation.\r\n\r\nCloses #785.",
      "createdAt": "2021-05-24T10:56:36Z",
      "updatedAt": "2021-05-26T01:20:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "eba436689e3d72435a064c16db312018943f9eef",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "remote-timing",
      "headRefOid": "87e747257f0dbd513cfd32e4e8434d111ccc85d6",
      "closedAt": "2021-05-26T01:20:27Z",
      "mergedAt": "2021-05-26T01:20:27Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8cd154799f2fc0dd925a58292f772d0685ed631e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY2NjI3Njk2",
          "commit": {
            "abbreviatedOid": "87e7472"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Yeah, I'm not sure what else we can say here. There are risks here, there are not really many mitigations available.",
          "createdAt": "2021-05-24T11:00:23Z",
          "updatedAt": "2021-05-24T11:00:23Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY3MzEwNzQ2",
          "commit": {
            "abbreviatedOid": "87e7472"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-25T01:14:09Z",
          "updatedAt": "2021-05-25T01:14:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 858,
      "id": "MDExOlB1bGxSZXF1ZXN0NjUxMjUxMTcx",
      "title": "Add details regarding removal of connection-specific fields.",
      "url": "https://github.com/httpwg/http2-spec/pull/858",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Here is some draft text. In principle we don't need any of this at all: as this text shows, all of the relevant guidance is already present in both semantics and H2. I've elected to throw up some possible text, but if we wanted to say that some or all of it is entirely redundant with existing specifications then I'm happy to do so.\r\n\r\nFixes #789.\r\nFixes #851.",
      "createdAt": "2021-05-24T11:17:20Z",
      "updatedAt": "2021-05-26T01:16:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "6dba43091523758b02b944534814a4281efdfa59",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-intermediaries-connection-specific",
      "headRefOid": "1283507393d407d01be19e32f606c7dcdf4a51e3",
      "closedAt": "2021-05-26T01:16:57Z",
      "mergedAt": "2021-05-26T01:16:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "03c03a2f67241dd531302cd0bb32e789a6f8a1b4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY3MjQyNjkz",
          "commit": {
            "abbreviatedOid": "1aac564"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-24T22:28:11Z",
          "updatedAt": "2021-05-24T22:30:24Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n          (see <xref target=\"HTTP\" section=\"7.6.1\" />) MUST remove or replace those header fields when\r\n```",
              "createdAt": "2021-05-24T22:28:11Z",
              "updatedAt": "2021-05-24T22:30:24Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n          forwarding messages. Intermediaries\r\n```\r\n\r\nI'm not sure that that adds anything.",
              "createdAt": "2021-05-24T22:28:56Z",
              "updatedAt": "2021-05-24T22:30:24Z"
            },
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n          MUST validate any Content-Length fields before forwarding to ensure that the\r\n```",
              "createdAt": "2021-05-24T22:29:32Z",
              "updatedAt": "2021-05-24T22:30:24Z"
            },
            {
              "originalPosition": 9,
              "body": "Not sure if we need to say why: HTTP/1.1 uses Content-Length for framing.",
              "createdAt": "2021-05-24T22:30:20Z",
              "updatedAt": "2021-05-24T22:30:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY3NDIyNTMw",
          "commit": {
            "abbreviatedOid": "1aac564"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-25T06:10:23Z",
          "updatedAt": "2021-05-25T06:10:24Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Hmm, I don't think that wording is acceptable: it implies that intermediaries are obligated to buffer all messages before they forward them on, which I don't think they'll do. We could say MUST validate any Content-Length fields _when_ forwarding, I suppose.",
              "createdAt": "2021-05-25T06:10:24Z",
              "updatedAt": "2021-05-25T06:10:24Z"
            }
          ]
        }
      ]
    },
    {
      "number": 859,
      "id": "MDExOlB1bGxSZXF1ZXN0NjUxMzQ2OTQy",
      "title": "Discuss flow control performance",
      "url": "https://github.com/httpwg/http2-spec/pull/859",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Brought over the QUIC text about flow control performance.\r\n\r\ncc @wtarreau\r\n\r\nResolves #784.",
      "createdAt": "2021-05-24T13:52:24Z",
      "updatedAt": "2021-06-03T00:11:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8cd154799f2fc0dd925a58292f772d0685ed631e",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-hol",
      "headRefOid": "ffe4de7d69219fdfc97a7d7efc4465caca1364df",
      "closedAt": "2021-06-03T00:10:41Z",
      "mergedAt": "2021-06-03T00:10:41Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c97bf8b33242e3747fec357fe1c59f6c3c1fe4f1"
      },
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Thank you Cory. After the first sentence, I'd like to add the following because I'm pretty certain it is easily overlooked, especially in gateways where there's basically no way to figure the *really* available room:\r\n```\r\nNote that advertising a larger stream window than the amount of storage effectively\r\ndedicated to the stream may sometimes result in head-of-line blocking situations by\r\nwhich incoming data for stream for which there is no more room will prevent any\r\nprogress to be made on the whole connection.\r\n```\r\n",
          "createdAt": "2021-05-24T15:11:49Z",
          "updatedAt": "2021-05-24T15:12:17Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Under what circumstances can that happen?",
          "createdAt": "2021-05-24T17:13:55Z",
          "updatedAt": "2021-05-24T17:13:55Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "@Lukasa basically any time on the forward path: if you only count on the local buffer you're using to receive a stream, the window will always be ridiculously low, while you *know* that you have plenty of buffers on the other side (e.g. forwarding to H1, which is dedicated to your stream, you can count on the H1 buffers and system socket buffers). When forwarding to H2 you can theoretically at least count on min(stream_window,connection_window,buffer room+system buffers), though it can be quite hard to figure.\r\n\r\nThe problem with a multiplexed protocol (when doing fctl-over-fctl like H2 does with TCP) is that your per-stream buffers are *always* smaller than the connection-level buffers (that include the system's huge socket buffers), which are usually automatically tuned to accommodate the BDP. So in the end relying on stream buffers only implies you can never reach the BDP and will be forced to limit the single-stream bandwidth. This problem doesn't happen with other protocols like QUIC simply because there's no need in-order buffering in the system that you have to rely on.\r\n\r\nIn the end, a reasonable approach consists in having a configurable margin on top of the per-stream buffer room to figure what to advertise, but we need to warn about the risks of advertising too large a window.",
          "createdAt": "2021-05-26T03:13:35Z",
          "updatedAt": "2021-05-26T03:13:35Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm, sorry @wtarreau but I don't see how that relates to the original note you gave.\r\n\r\nWhere is there a head-of-line blocking issue? Having small stream window sizes prevents a single stream reaching full network performance, sure, but that isn't a head-of-line blocking problem. It's a window management problem. If you have multiple streams, all with small windows but all of which can make progress, you can in principal avoid any issues with window management.\r\n\r\nWhat am I missing that brings HOL blocking into play?",
          "createdAt": "2021-05-26T11:40:37Z",
          "updatedAt": "2021-05-26T11:40:37Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Sorry Cory if my explanation was not clear. What I meant is that when you start to use reasonable (i.e. small) windows for your streams, you immediately see the network performance become horrible, despite all the buffering capacity around (kernel etc), only because of the streams window. I've had users complain about 5 Mbps uploads for example with 64kB windows :-/ As such it's extremely tempting to overprovision the stream window to make it cover some of the extra buffers available around that you're almost certain exists (i.e. the output buffer for where that frame is going to be forwarded), but when starting to play with this you *risk* HOL because it's often very hard to be certain about *really* available room (i.e. if you forward that over H2 and several streams consider that same room as available etc). Window-in-window is a very well-known anti-pattern and we knew it was going to hit one way or another and we have to live with it here. For most use cases where a browser is the sole owner of a connection, it's trivial to advertise huge windows and deal with it this way (no real risk that the browser blocks itself). When coalescing multiple agents it becomes quite visible a problem. I hope I managed to make it clearer this time, otherwise do not hesitate to let me know :-)",
          "createdAt": "2021-05-26T16:09:09Z",
          "updatedAt": "2021-05-26T16:09:09Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Willy, this is definitely clarifying things. So let me try to verify my understanding in bullets.\r\n\r\n1. The default per-stream window size (64kB), and other small per-stream window sizes, has performance problems over fat links.\r\n\r\n    This is true. It is not necessarily true if you have multiple streams in flight and your connection window is larger, but it is definitely true for single streams.\r\n    \r\n2. To that end it is tempting to advertise larger stream windows, to improve throughput.\r\n\r\n3. However that window may not be available in the target logical stream, such that if the user actually consumes it your application would have to buffer it.\r\n\r\n    Possible reasons for this include the TCP send buffer not having room, the target H2 connection window not having room, the target H2 stream window not having room, etc.\r\n\r\nSo this is definitely a resource management issue. Presumably the reason there's an HOL issue here is that, in response to needing to buffer on the outbound side, you stop reading from the H2 connection.\r\n\r\nI can think of a few ways to manage this, but this isn't really the forum for that kind of engineering chat. :wink: Instead, I'll say that I think the current text covers this. Specifically, the text says \"bigger windows improve performance, but you need to bear in mind the resource exhaustion concerns elsewhere in this document\". Should we be saying anything else more specific?",
          "createdAt": "2021-05-26T17:20:52Z",
          "updatedAt": "2021-05-26T17:20:52Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Well, I only partially agree, in that it's not exactly a resource exhaustion in the pure sense of the term as there can be plenty of resources available (socket buffers everywhere), but more a matter of difficulty/complexity to *reliably* measure available resources at any instant (i.e. the TCP buffer you have on one side is not necessarily dedicated to a single stream, so what is doable during a POST upload can suddenly change before you even have the option to advertise a window size change).\r\n\r\nI agree that this could be discussed elsewhere in the doc in more details, but my point was to at least put a short warning like the one I proposed to raise awareness of implementors against the risk of pushing this setting too far because \"it seems to work much better\".\r\n\r\nFor the record, in haproxy what we've done to mitigate this on the download side is to avoid mixing multiple client connections over a single outgoing H2 connection. This way a slow client cannot block a fast one and it remains possible to advertise slightly larger stream windows that more realistically take into account available room on the path. For uploads, users generally consider that an uploading browser doesn't perform other operations in parallel over the same connection so it's okay to increase the advertised stream as well. But all these mitigations resulted from experience, were not obvious and will not necessarily apply to other implementations, which is why I thought a small warning could be useful.",
          "createdAt": "2021-05-27T06:46:14Z",
          "updatedAt": "2021-05-27T06:46:14Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Great, so do you think the current text covers it?\r\n\r\n```\r\nSending timely <xref target=\"WINDOW_UPDATE\" format=\"none\">WINDOW_UPDATE</xref> frames can improve performance. Endpoints will\r\nwant to balance the need to improve receive throughput with the need to manage resource exhaustion risks, and should take\r\ncareful note of <xref target=\"dos\"/> in defining their strategy to manage window sizes.\r\n```",
          "createdAt": "2021-05-27T07:27:57Z",
          "updatedAt": "2021-05-27T07:27:57Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Looks great like this, thank you :-)",
          "createdAt": "2021-05-27T08:01:06Z",
          "updatedAt": "2021-05-27T08:01:06Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the constructive discussion.  No doubt we missed something (that's a constant risk here), but this looks like this change is a useful one.  We'll track further improvements with new issues as the opportunity arises.",
          "createdAt": "2021-06-03T00:11:39Z",
          "updatedAt": "2021-06-03T00:11:39Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY4NTIxNjky",
          "commit": {
            "abbreviatedOid": "09e7c71"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-26T01:19:16Z",
          "updatedAt": "2021-05-26T01:19:26Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "QUIC says \"improve performance\", which I think is better than \"mitigate this bottleneck\".  bottleneck is a colloquialism that might be hard to understand, and mitigation isn't what you want (you want avoidance in that case).",
              "createdAt": "2021-05-26T01:19:16Z",
              "updatedAt": "2021-05-26T01:19:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 860,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYwNDgzMDU4",
      "title": "Use QUIC-style frame format illustrations",
      "url": "https://github.com/httpwg/http2-spec/pull/860",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I haven't adjusted for `artwork` vs. `sourcecode` until that war is over.\r\n\r\nNote that I've explicitly added a format for the SETTINGS frame itself, which was missing.",
      "createdAt": "2021-06-03T00:47:17Z",
      "updatedAt": "2021-07-12T06:54:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "b24293090c7b833f8818f8167fc2383b0077b64a",
      "headRepository": "mnot/http2-spec",
      "headRefName": "mnot-binary-format",
      "headRefOid": "7b488adee3d20602b14fc8dbedc243004a3d28b7",
      "closedAt": "2021-07-12T06:30:24Z",
      "mergedAt": "2021-07-12T06:30:24Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "7b488adee3d20602b14fc8dbedc243004a3d28b7"
      },
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 . This would make it easier to write extensions for both h2 and h3. Priorities draft suffers from the mixed presentation format right now.",
          "createdAt": "2021-06-03T00:56:19Z",
          "updatedAt": "2021-06-03T00:56:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, thanks for doing this @mnot.  I merged this manually after fixing a few things up.  From my commit:\r\n\r\n*    Use all caps for frame names\r\n*    Add a value for Type in frame definitions\r\n*    Change order of flag descriptions to match order in layout\r\n*    Make Exclusive field of PRIORITY optional\r\n*    Move PING ACK Flag to the right place\r\n*    Add SETTINGS ACK Flag\r\n\r\nDouble-checking FTW.\r\n\r\nOf course, there's a good chance I also messed something up here.  So feel free to check my work also.",
          "createdAt": "2021-07-12T06:31:50Z",
          "updatedAt": "2021-07-12T06:31:50Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the language about ordering is a bit weird, but it is clarified somewhat by the hex representations shortly after. I think those hex representations are doing the heavy lifting, as I\u2019m not aware of any issue with interoperability caused by getting the flag indices wrong in practice.\r\n\r\nNonetheless, if we\u2019re really worried about it we could just delete \u201cbit n\u201d and replace it with \u201cthe x bit\u201d, e.g. delete \u201cbit 0\u201d and replace it with \u201cthe `END_STREAM` bit\u201d.",
          "createdAt": "2021-07-12T06:54:06Z",
          "updatedAt": "2021-07-12T06:54:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0Nzk3NzQ1",
          "commit": {
            "abbreviatedOid": "eb1c59d"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Let's float this with the working group at the interim.  I don't think that this is quite ready to take, but I do like the direction it is going.",
          "createdAt": "2021-06-03T01:19:31Z",
          "updatedAt": "2021-06-03T01:22:34Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "If we're going full QUIC, then I think we should include the frame header in each of these frame definitions, just like QUIC ended up doing.  The advantage of that being that you can put the flag bits into the definition.  Then we can unify the descriptions of flags and fields.\r\n\r\nSure, that's a lot more work, but I think that it's worth doing.",
              "createdAt": "2021-06-03T01:19:31Z",
              "updatedAt": "2021-06-03T01:22:34Z"
            },
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n          <xref target=\"QUIC\" section=\"1.3\">RFC 9000</xref>.\r\n```",
              "createdAt": "2021-06-03T01:21:33Z",
              "updatedAt": "2021-06-03T01:22:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0ODEyODM2",
          "commit": {
            "abbreviatedOid": "1bbad9c"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T02:00:51Z",
          "updatedAt": "2021-06-03T02:00:51Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "So, something like \r\n\r\n```\r\nData Frame {\r\n  Length (24),\r\n  Type (8),\r\n  END_STREAM (1),\r\n  Flag 1 (1),\r\n  Flag 2 (1),\r\n  PADDED (1),\r\n  Flag 4 (1),\r\n  Flag 5 (1),\r\n  Flag 6 (1),\r\n  Flag 7 (1),\r\n  R (1) = 0,\r\n  Stream Identifier (31),\r\n  [Pad Length (8)],\r\n  Data (..),\r\n  Padding (..),\r\n} \r\n```\r\n\r\n?",
              "createdAt": "2021-06-03T02:00:51Z",
              "updatedAt": "2021-06-03T02:01:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0ODE1MDAy",
          "commit": {
            "abbreviatedOid": "1bbad9c"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T02:06:49Z",
          "updatedAt": "2021-06-03T02:06:50Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "I would probably compress the unused flags, but yeah.\r\n\r\n```  \r\n  END_STREAM (1),\r\n  Unused Flags (2),\r\n  PADDED (1),\r\n  Unused Flags (4),\r\n```\r\n\r\nOr maybe\r\n```\r\n  END_STREAM Flag (1),\r\n```\r\n\r\nThe main problem with this structure is that this probably needs to come with changes to the way that these are described.",
              "createdAt": "2021-06-03T02:06:49Z",
              "updatedAt": "2021-06-03T02:06:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0ODE1NjU1",
          "commit": {
            "abbreviatedOid": "1bbad9c"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T02:08:45Z",
          "updatedAt": "2021-06-03T02:08:45Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Understood re: descriptions; just want to get the format convention down first.\r\n\r\nI didn't compress unused flags because it seems like it'd be super-useful for subsequent extensions that want to define flags. Thoughts?",
              "createdAt": "2021-06-03T02:08:45Z",
              "updatedAt": "2021-06-03T02:08:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0ODE2NDM0",
          "commit": {
            "abbreviatedOid": "1bbad9c"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T02:10:53Z",
          "updatedAt": "2021-06-03T02:10:53Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "![](https://media.giphy.com/media/y65VoOlimZaus/giphy.gif)",
              "createdAt": "2021-06-03T02:10:53Z",
              "updatedAt": "2021-06-03T02:10:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0ODE5ODQy",
          "commit": {
            "abbreviatedOid": "1bbad9c"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T02:20:19Z",
          "updatedAt": "2021-06-03T02:20:19Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Now I'm wondering whether it makes sense to leave flags in a separate prose list, or move them up into the same list as the other descriptions. Got any gifs for that?",
              "createdAt": "2021-06-03T02:20:19Z",
              "updatedAt": "2021-06-03T02:20:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0OTMwMzk4",
          "commit": {
            "abbreviatedOid": "2d06215"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I generally like this.",
          "createdAt": "2021-06-03T06:48:24Z",
          "updatedAt": "2021-06-03T06:50:02Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Do we need to call this `R` in the new format? Can we use our extra horizontal space and write out the whole word \"Reserved\"`?",
              "createdAt": "2021-06-03T06:48:24Z",
              "updatedAt": "2021-06-03T06:50:02Z"
            },
            {
              "originalPosition": 117,
              "body": "Similarly for `E` here, can we use the word `Exclusive`?",
              "createdAt": "2021-06-03T06:49:12Z",
              "updatedAt": "2021-06-03T06:50:02Z"
            },
            {
              "originalPosition": 152,
              "body": "And here.",
              "createdAt": "2021-06-03T06:49:19Z",
              "updatedAt": "2021-06-03T06:50:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0OTMzNzQx",
          "commit": {
            "abbreviatedOid": "2d06215"
          },
          "author": "bagder",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T06:53:25Z",
          "updatedAt": "2021-06-03T06:53:25Z",
          "comments": [
            {
              "originalPosition": 152,
              "body": "Yes please, this allows for \"proper\" names there!",
              "createdAt": "2021-06-03T06:53:25Z",
              "updatedAt": "2021-06-03T06:53:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0OTM0MjE1",
          "commit": {
            "abbreviatedOid": "2d06215"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T06:54:06Z",
          "updatedAt": "2021-06-03T06:54:06Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Works for me, as long as it doesn't rock anybody's world.",
              "createdAt": "2021-06-03T06:54:06Z",
              "updatedAt": "2021-06-03T06:54:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0OTM3ODM5",
          "commit": {
            "abbreviatedOid": "a5eda47"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T06:59:09Z",
          "updatedAt": "2021-06-03T06:59:09Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "We already have an Exclusive Flag; having an Exclusive Field is going to confuse people. Can we come up with another name that distinguishes them a bit more?",
              "createdAt": "2021-06-03T06:59:09Z",
              "updatedAt": "2021-06-03T06:59:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0OTQwNjQ2",
          "commit": {
            "abbreviatedOid": "a5eda47"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T07:03:03Z",
          "updatedAt": "2021-06-03T07:03:03Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "Oh wait, no we don't -- that's just loose use of the term 'flag' in 7540. Hold on a sec...",
              "createdAt": "2021-06-03T07:03:03Z",
              "updatedAt": "2021-06-03T07:03:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAwODgyMDQ5",
          "commit": {
            "abbreviatedOid": "a14c7c7"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-07T11:19:09Z",
          "updatedAt": "2021-07-07T11:20:34Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "I believe these flags (and all the other flags) are defined in the wrong bit order.\r\n\r\nThis is...not entirely well specified in RFC 9000, but the example given in \u00a7 1.3 is:\r\n\r\n```\r\nExample Structure {\r\n  One-bit Field (1),\r\n  7-bit Field with Fixed Value (7) = 61,\r\n  Field with Variable-Length Integer (i),\r\n  Arbitrary-Length Field (..),\r\n  Variable-Length Field (8..24),\r\n  Field With Minimum Length (16..),\r\n  Field With Maximum Length (..128),\r\n  [Optional Field (64)],\r\n  Repeated Field (8) ...,\r\n}\r\n```\r\n\r\nWith the following prose after it:\r\n\r\n> When a single-bit field is referenced in prose, the position of that field can be clarified by using the value of the byte that carries the field with the field's value set. For example, the value 0x80 could be used to refer to the single-bit field in the most significant bit of the byte, such as One-bit Field in Figure 1.\r\n\r\nThis implies that `0x80` refers to the first bit of a byte. `END_STREAM` is not 0x80, it's 0x1. All of the flags sections need to be inverted.",
              "createdAt": "2021-07-07T11:19:10Z",
              "updatedAt": "2021-07-07T11:20:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAzNzI3MDc1",
          "commit": {
            "abbreviatedOid": "a14c7c7"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-12T05:29:51Z",
          "updatedAt": "2021-07-12T05:29:51Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "The prose uses indexed bits - e.g., for `END_STREAM` it says 'When set, bit 0...'. I had assumed that it was indexing from left, this being network byte order and all, but you could also argue it's indexing from least significant bit (although that's pretty odd IMO).\r\n\r\nNevertheless, this protocol interoperates somehow. \r\n\r\nIf I read wireshark correctly, your interpretation is correct:\r\n\r\n<img width=\"415\" alt=\"Screen Shot 2021-07-12 at 3 28 58 pm\" src=\"https://user-images.githubusercontent.com/74384/125235537-f80f9d00-e325-11eb-8e98-d356a2d00e0b.png\">\r\n\r\nHowever did we get this far?",
              "createdAt": "2021-07-12T05:29:51Z",
              "updatedAt": "2021-07-12T05:29:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAzNzMxMjYz",
          "commit": {
            "abbreviatedOid": "a14c7c7"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-12T05:40:25Z",
          "updatedAt": "2021-07-12T05:40:26Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "I'm about to push a commit that should correct that. Please review carefully.\r\n\r\nWe also might want to reconsider the language we use about ordering...",
              "createdAt": "2021-07-12T05:40:25Z",
              "updatedAt": "2021-07-12T05:40:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 861,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYwNDk1MzI3",
      "title": "Improve on fix for #815",
      "url": "https://github.com/httpwg/http2-spec/pull/861",
      "state": "CLOSED",
      "author": "gregw",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Improve on #846 that fixes for #815 by adding extra clarity:\r\n + The validation for uppercase characters is no longer listed separately\r\n + It is clearly stated that violations of the full HTTP ABNF field definition MAY be treated as *Malformed*",
      "createdAt": "2021-06-03T01:17:57Z",
      "updatedAt": "2021-06-18T01:45:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d552116b4a939c5c75f2756318d2387448c2f50",
      "headRepository": "gregw/http2-spec",
      "headRefName": "issue-815-full-validation",
      "headRefOid": "ff56cce3f2b53c72e20cbea21c5be6564fd112ef",
      "closedAt": "2021-06-18T01:45:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson I think these are good simplifications/clarifications",
          "createdAt": "2021-06-03T01:18:50Z",
          "updatedAt": "2021-06-03T01:18:50Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson should I spin out the non controversial change (of combining the lowercase validation into the minimal validation bullet point) into it's own PR so that it doesn't get lost if this PR never reaches a conclusion? ",
          "createdAt": "2021-06-10T05:03:06Z",
          "updatedAt": "2021-06-10T05:03:06Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "If you could, that might help.  I want to talk about the tricky question at our interim next week, but that other piece I can just merge.",
          "createdAt": "2021-06-10T05:07:16Z",
          "updatedAt": "2021-06-10T05:07:16Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The non controversial changes have been moved to #864 ",
          "createdAt": "2021-06-10T05:26:19Z",
          "updatedAt": "2021-06-10T05:26:19Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson any feedback from the interim meeting about how I can make this PR more palatable? ",
          "createdAt": "2021-06-18T00:37:18Z",
          "updatedAt": "2021-06-18T00:37:18Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@gregw I took an action to work on a PR - see https://github.com/httpwg/http2-spec/pull/866",
          "createdAt": "2021-06-18T01:17:55Z",
          "updatedAt": "2021-06-18T01:17:55Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed in favour of #866 ",
          "createdAt": "2021-06-18T01:45:15Z",
          "updatedAt": "2021-06-18T01:45:15Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0Nzk5OTc3",
          "commit": {
            "abbreviatedOid": "54e7b50"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks @gregw.  I like this.  I don't think it changes the previous very much (and it improves the A-Z handling).  @Lukasa?",
          "createdAt": "2021-06-03T01:25:45Z",
          "updatedAt": "2021-06-03T01:25:45Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0ODAzNDEw",
          "commit": {
            "abbreviatedOid": "54e7b50"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T01:34:42Z",
          "updatedAt": "2021-06-03T01:34:43Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n              (all ranges inclusive).  This limits field names to visible ASCII characters, excluding\r\n```\r\n\r\n'other than' reads a little oddly to me...",
              "createdAt": "2021-06-03T01:34:43Z",
              "updatedAt": "2021-06-03T01:34:43Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0ODA3MTU0",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-06-03T01:45:04Z",
          "updatedAt": "2021-06-03T01:45:13Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "This encourages sending a HTTP/2-specific error in situations where a generic HTTP semantic is more appropriate. \r\n\r\nFor example, when a request header violates the ABNF and the recipient wants to reject the request, the appropriate thing to do is to send a 400 Bad Request status code, not close the connection with a HTTP/2 error.\r\n\r\nEven for response headers (where there isn't an in-protocol mechanism in generic HTTP semantics), it's not clear that this is the right thing to do; treating the response as malformed means that the connection is closed, and intermediary senders often don't have full control over the syntax of headers they send -- and we shouldn't encourage them to attempt such control.\r\n\r\n10.5 already [allows](https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#name-denial-of-service-considera) endpoints to handle suspicious activity with a connection error. I think that covers the use case.\r\n\r\nIf we do end up saying something here, it needs to be squared with the considerations above, noting that HTTP [explicitly allows](https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#error.handling) recipients to 'attempt to recover a usable protocol element from an invalid construct.' ",
              "createdAt": "2021-06-03T01:45:04Z",
              "updatedAt": "2021-06-03T01:45:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0ODA5NzY0",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T01:52:42Z",
          "updatedAt": "2021-06-03T01:52:42Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I was OK with this on the basis that we previously permitted this behaviour, but that was a poorly considered requirement.  This is an opportunity to do better.\r\n\r\nWould you prefer that we not say anything in this case?  It seems like we already allow for this possibility (in 10.5 as you say, but also in the core semantics docs), so maybe this is just unnecessary repetition.  And, as you say, unnecessary becomes harmful when the repetition isn't sufficiently precise.\r\n\r\nA maybe-nit:\r\n\r\n> treating the response as malformed means that the connection is closed\r\n\r\nI don't know that this is right.  The requirement is to discard the response, so I assume that RST_STREAM is the expected reaction.",
              "createdAt": "2021-06-03T01:52:42Z",
              "updatedAt": "2021-06-03T01:52:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0ODE0OTM5",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T02:06:39Z",
          "updatedAt": "2021-06-03T02:06:39Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Ah, correct, I misremembered how malformed was treated. However, this MAY is seemingly in conflict with the requirements here:\r\n\r\n> Malformed requests or responses that are detected MUST be treated as a stream error (Section 5.4.2) of type PROTOCOL_ERROR.\r\n>\r\n>... Clients MUST NOT accept a malformed response.\r\n\r\nAlso the [description of malformed](https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#section-8.1.2.6) does not include HTTP header values.",
              "createdAt": "2021-06-03T02:06:39Z",
              "updatedAt": "2021-06-03T02:06:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0OTI3NTUw",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T06:44:10Z",
          "updatedAt": "2021-06-03T06:44:10Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I don't think this MAY is in conflict. This MAY grants the endpoint a new option when it observes a field that fails to validate according to the ABNF, which is to send a RST_STREAM. The MAY is \"MAY treat as malformed\": if you do, then the MUSTs above apply, but if you don't, they don't. \r\n\r\nHowever, I am sympathetic to the idea that failing to validate against the -semantics ABNF should not be a HTTP/2 protocol level error. I think this is happening to us because of two issues:\r\n\r\n1. -semantics doesn't really clearly _say_ what you should do if you get a field that doesn't meet the ABNF requirements. 400 is implied by a careful read of the spec, but not required or even suggested. One part of -semantics talks about \"senders MUST NOT emit\" data that doesn't meet the ABNF, a different section quite far away says that \"receivers MAY try to recover useful data\" and then has nothing else to say. So I'm sympathetic to @gregw's desire to have a single place that outlines your options, especially as HTTP/2 is placing additional constraints.\r\n2. Why do we have different reporting mechanisms for these? In HTTP/1 if you include a space in your field-name, you can expect a 400, while in HTTP/2 we mandate a RST_STREAM. If that mandate applied only to intermediaries then that would make some amount of sense, but it doesn't, it applies to all HTTP/2 implementations.\r\n\r\nIt is possible that we cannot reconcile this with -semantics: HTTP/2 is trying to apply strict rules that eliminate some bad cases that -semantics explicitly permits. These two things seem inherently in conflict to me.",
              "createdAt": "2021-06-03T06:44:10Z",
              "updatedAt": "2021-06-03T06:44:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0OTI5MjYw",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T06:46:39Z",
          "updatedAt": "2021-06-03T06:46:40Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Perhaps we should consider simply abandoning the change as impossible to reconcile with -semantics.",
              "createdAt": "2021-06-03T06:46:40Z",
              "updatedAt": "2021-06-03T06:46:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0OTk3NjUy",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T08:10:26Z",
          "updatedAt": "2021-06-03T08:10:26Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Prior to #846 the text in the intermediary section was:\r\n> Any request or response that contains a character not permitted in a field value MUST be treated as <xref target=\"malformed\">malformed</xref>.  Valid characters are defined by the <tt>field-content</tt> ABNF rule in <xref target=\"HTTP\" section=\"5.5\"/>\r\n\r\nThis has now been modified to: \r\n> An intermediary can reject fields that contain invalid field names or values for other  reasons, in particular those that do not conform to the HTTP ABNF grammar from <xref target=\"HTTP\" section=\"5\"/>.\r\n\r\nSo current implementations have been allowed to treat non HTTP compliant as *malformed*  if they were an intermediary. Now we are just saying \"reject fields\", but not defining how that is done.\r\n\r\nI like the clarity that after #846, a field-name with space in it MUST be treated as malformed.\r\nYet a field-name with a doublequote will be treated as malformed if handled by an intermediary under the previous version; or rejected in and undefined way by an intermediary in the current version; or perhaps handled with a 400 bad request if not an intermediary.  That is just totally confusing.\r\n\r\nEither sending an invalid HTTP field-name is a h2 protocol error (reset-stream) or it is a http semantic error (400 bad request).    \r\n\r\nI think that if the field violates the allowed alphabet for HTTP valid fields, then it is a h2 protocol error: reset-stream.\r\nBut if the field is invalide because of semantics ( multiple fields, missing fields, bad field values) then it is a http protocol error: 400 bad request\r\n\r\nSorry - to relitigating #846,  but I'm unsure why it has created a small set of fields that are inbetween the two of those - ie fields with double quotes in their field name.  Are there any sensible fields that are invalid http but valid h2#846 that are actually are needed by anything?\r\n\r\nEitherway, this document has to define what can be done with such fields (valid h2 fields by #846 but not valid http2 fields).    If they are treated as h2 errors, then there is no difference to just excluding those few extra characters from the minimum validation in the first place.   If are treated as http errors, then that is double handling as field names and values will need to be scanned twice to validate the alphabet used. Insert rant about carbon foot print here.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n",
              "createdAt": "2021-06-03T08:10:26Z",
              "updatedAt": "2021-06-03T08:10:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc1MDEzMzc0",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T08:27:02Z",
          "updatedAt": "2021-06-03T08:27:03Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Focusing on a specific case is helpful, thanks.\r\n\r\nJust to get it out of the way -- In a perfect world we'd specify exactly one way to do this and all implementations would align on that; doing so would almost certainly improve security. Unfortunately, we don't live in that world, because there are already a large number of deployed implementations with diverse behaviour that may not change, and because some implementations don't want to touch every byte flowing through them.\r\n\r\nThat said, the recipient of an invalid HTTP field-name has a choice:\r\n \r\n1. If they can recover from it, they can ignore the invalid bit and pass it on to the consuming application or next hop (e.g., a `\"` is recoverable; a `\\n` is not)\r\n2. If it's a request, they can respond with a 400 (regardless of whether it's an intermediary)\r\n3. If h2 or h3 is in use, they can RST_STREAM with an error code (because it's considered malformed above, I think this would be `ENHANCE_YOUR_CALM`\r\n\r\nI'd argue that the ordering above is a first-match-wins approach that most implementations should use, although an implementation can choose to skip (1), and we might want to highlight the security considerations therein -- but we can't make that an across-the-board requirement.\r\n\r\nfield-values, on the other hand, are much broader; [their definition](https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#fields.values) only excludes most control characters (due to `obs-text`). That said, the same approach can be used above for control characters.\r\n\r\nRegarding how it's documented -- I'd very much prefer that prose rules, NOT references to ABNF, be used here, because talking about field-value ABNF is going to confuse some readers into thinking that they need to reject headers based upon their _individual_ ABNF (at first that's what I thought you were proposing).\r\n\r\n",
              "createdAt": "2021-06-03T08:27:02Z",
              "updatedAt": "2021-06-03T08:27:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc1MjM5MDMw",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T12:50:12Z",
          "updatedAt": "2021-06-03T12:50:12Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "The key thing I'm after is the clarity that an implementation MAY exceed the minimum field syntax validation and treat such messages as malformed. Ie it needs to be clear that the minimum is just the minimum field syntax validation and that it MAY be exceeded by fully checking HTTP field syntax.\r\n\r\nI want to be able to simply implement a single test for field syntax that will equally handle a space or double quote, without the risk that some user then comes and complains that I'm over validating and that they should be able to send double quotes in field names.\r\n\r\nNor do i want to have to check minimum h2 field syntax, then HTTP field syntax separately. Some implementations might want to do minimal validation and then recover from a field with a double quote, but I want it to be ok not to do that and to just reset steam\r\n\r\n\r\n\r\nThe reference to HTTP ABNF is exactly the same as the intermediary section later in the document. If there is another way to say it without ABNF, then fine, but that would be the third definition of field syntax validity in the document.",
              "createdAt": "2021-06-03T12:50:12Z",
              "updatedAt": "2021-06-03T12:50:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc1NzYxNTc0",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T21:52:34Z",
          "updatedAt": "2021-06-03T21:52:34Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Also, if this text is not ok, that says an impl MAY NOT validate against http ABNF , which is in contradiction to the section on intermediaries?",
              "createdAt": "2021-06-03T21:52:34Z",
              "updatedAt": "2021-06-03T21:52:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4MjAwMDI2",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-08T07:50:24Z",
          "updatedAt": "2021-06-08T07:50:24Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Greg, I think we're largely in agreement -- my text above is arguing for adding more nuance / information, not fundamentally against what you're proposing.\r\n\r\nThe one place where I *potentially* see disagreement is with 'I want it to be ok not to do that and to just reset st[r]eam'. It would be really good if we had a common understanding as to whether this is the right thing to do when a server receives a request and has the opportunity to generate a 400. I think that needs wider discussion.\r\n",
              "createdAt": "2021-06-08T07:50:24Z",
              "updatedAt": "2021-06-08T07:50:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4NDI3NjY4",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-08T12:05:27Z",
          "updatedAt": "2021-06-08T12:05:28Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "@mnot  I think the split should be syntax versus semantics.  If a field breaks the field syntax (ie grammar) for h2 or HTTP, then it is a protocol error as it is a field should never have been sent.\r\nWhilst if the field breaks HTTP semantics (eg. wrong type for the value, duplicate etc.) then it is a field that can be sent but that can't be understood, so it should be handled with a  400 (or perhaps ignorable or rejected in some other way).\r\n\r\nSo the nuance that you are after is that for fields in the syntax validation gap between minimal h2 and HTTP you want to give implementations some flexibility to treat them like semantic issues.  So perhaps text like:\r\n\r\n```suggestion\r\n          <t>\r\n            In addition to the minimum validation defined above, non pseudo-header fields\r\n            that violate the HTTP ABNF grammar from <xref target=\"HTTP\" section=\"5\"/> MAY either: be\r\n            treated as <xref target=\"malformed\">malformed</xref>; be ignored; or if part of a request then responded to \r\n            with a 400 Bad Request response.\r\n          </t>\r\n```\r\n\r\nBut then do we need to say that 400 responses and corrections are also applicable to fields that violate the HTTP semantics?  or is that just assumed?\r\n\r\nPlus also, for my own implementation, I really would not want to allow field-names with double quotes into the phase of being semantically evaluated.  It is probably safe to do so, but that code was written and tested against the HTTP semantics which do not allow double-quotes, so I really have no idea that it is safe to let such field propagate into it.  It's also somewhat user extensible and I have even less idea what downstream problems could happen if I let such fields through.  Nor do I want to enhance that semantic layer to do another round of syntax validation and carbon emissions generation.\r\n\r\nOh no... I find myself yet again relitigating... if we just said the h2 implementations MUST NOT send fields that break the HTTP syntax, then there would be no gap and thus no problem.  I keep coming back to that because I'm not understanding the use-case for allowing a message with a field-name containing a double quote?  If we just took a few more characters out of the acceptable alphabet for h2 field validation, then this issue goes away and I don't think we break anybody?",
              "createdAt": "2021-06-08T12:05:27Z",
              "updatedAt": "2021-06-08T12:05:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc5MDgyNzg0",
          "commit": {
            "abbreviatedOid": "ef18d85"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-08T23:16:25Z",
          "updatedAt": "2021-06-08T23:16:25Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "@mnot to get rid of the gap problem, we could just increase the minimal validation to exclude all field names that \r\nbreak HTTP syntax (but not semantics).\r\n```suggestion\r\n              A field name MUST NOT contain characters 0x00-0x20, 0x22, 0x28, 0x29,\r\n              0x2C, 0x41-0x5D, 0x7B, 0x7D or 0x7F-0xFF (all ranges inclusive).\r\n              This limits field names to visible ASCII characters permitted by the HTTP ABNF \r\n              grammar from <xref target=\"HTTP\" section=\"5\"/>, other than uppercase characters \r\n              ('A' to 'Z', ASCII 0x41 to 0x5a).\r\n```\r\nThe down side ofthis is a slightly more difficult check expression, that probably needs to dereference to a table.",
              "createdAt": "2021-06-08T23:16:25Z",
              "updatedAt": "2021-06-08T23:16:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwMzU1NjMz",
          "commit": {
            "abbreviatedOid": "85f5398"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-10T05:28:04Z",
          "updatedAt": "2021-06-10T05:28:05Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I'll resolve this comment, because even if it is agreed to validate against the HTTP field name syntax, this is a horrid way to specify it!",
              "createdAt": "2021-06-10T05:28:04Z",
              "updatedAt": "2021-06-10T05:28:05Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwNjgzNjI0",
          "commit": {
            "abbreviatedOid": "ff56cce"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-10T11:52:57Z",
          "updatedAt": "2021-06-10T11:52:57Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "To give some more concrete data, here is [Jetty's implementation of h2 field-name validation](https://github.com/eclipse/jetty.project/blob/jetty-11.0.4/jetty-http2/http2-hpack/src/main/java/org/eclipse/jetty/http2/hpack/HpackDecoder.java#L170-L198).  You can see that it treats any violations of either h2 or http field criteria as a streamException (ie reset).\r\n\r\nAt the very least, it would be really good if this update of the specification did not make this existing (and used) implementation non compliant and needing to be rewritten to in order to send 400 responses when used in a server.\r\n\r\nIt would be great if the specification explicitly said that a compliant implementation MAY be implemented like this, so we don't have to deal with users trying to send bizarre field-names and complaining we are not compliant with the spec.\r\n\r\n\r\n\r\n",
              "createdAt": "2021-06-10T11:52:57Z",
              "updatedAt": "2021-06-10T11:52:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg2OTUwODEz",
          "commit": {
            "abbreviatedOid": "ff56cce"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-18T00:53:23Z",
          "updatedAt": "2021-06-18T00:53:23Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "@mnot, I really think something does need to be said here, since as currently worded it makes the jetty implementation non-compliant, in that we treat fields that break the ABNF as malformed, but send 400s for any semantic issues.    This was allowed in the previous versions, but now this document says \"fields are not valid in the following cases:\"  without any caviate to indicate that it is minimal validation (eg  \"fields are not valid in at least the following cases:\")\r\n\r\nThe intention was to require minimal validation, but as written the change is specifying exact validation since a reasonable reading of this section would suggest that any fields that are not-not-valid are valid.   So to enforce implementation that were not validating, you have now made jetty, which has always validated, non compliant!\r\n\r\nTo resolve this against the document as written, I would need to do a second round of character checking of the field above the hpack layer to issue a 400.   It will be difficult for me to do this without impossing this second character checking on all protocols: HTTP/1, FCGI, etc. as by the time I'm able to send 400 responses I am in protocol neutral code.    This will be a significant impact with a huge carbon footprint as my server deals with some very high volume websites.\r\n",
              "createdAt": "2021-06-18T00:53:23Z",
              "updatedAt": "2021-06-18T00:53:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 864,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY2NTE4MjQz",
      "title": "Improve on fix for #815 for lowercase validation",
      "url": "https://github.com/httpwg/http2-spec/pull/864",
      "state": "MERGED",
      "author": "gregw",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The validation for uppercase characters is no longer listed separately, but instead included with the minimal validation.",
      "createdAt": "2021-06-10T05:19:47Z",
      "updatedAt": "2021-06-13T22:54:09Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "b24293090c7b833f8818f8167fc2383b0077b64a",
      "headRepository": "gregw/http2-spec",
      "headRefName": "issue-815-lowercase",
      "headRefOid": "920aafdc5ad4e97845023b6044a8b0c9d3a8dcc4",
      "closedAt": "2021-06-10T06:00:07Z",
      "mergedAt": "2021-06-10T06:00:06Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0d552116b4a939c5c75f2756318d2387448c2f50"
      },
      "comments": [
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson : factored out non controversial changes from #861 ",
          "createdAt": "2021-06-10T05:20:47Z",
          "updatedAt": "2021-06-10T05:20:47Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwMzU3NTM3",
          "commit": {
            "abbreviatedOid": "b169959"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-10T05:32:27Z",
          "updatedAt": "2021-06-10T05:32:36Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n              A field name MUST NOT contain characters in the ranges 0x00-0x20, 0x41-0x5A, or 0x7F-0xFF\r\n```",
              "createdAt": "2021-06-10T05:32:27Z",
              "updatedAt": "2021-06-10T05:32:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 866,
      "id": "MDExOlB1bGxSZXF1ZXN0NjcwODYwNTEy",
      "title": "Discuss invalid field names and values",
      "url": "https://github.com/httpwg/http2-spec/pull/866",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #865",
      "createdAt": "2021-06-16T00:12:10Z",
      "updatedAt": "2021-07-07T07:13:05Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d552116b4a939c5c75f2756318d2387448c2f50",
      "headRepository": "mnot/http2-spec",
      "headRefName": "mnot-validation",
      "headRefOid": "341123059c682dc605f5773f15ed18779d897e21",
      "closedAt": "2021-07-07T07:11:40Z",
      "mergedAt": "2021-07-07T07:11:40Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a6fedf548ec893314a4ea1e97ba56c53ed648b27"
      },
      "comments": [
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See #868 as an alternative.",
          "createdAt": "2021-07-07T05:27:29Z",
          "updatedAt": "2021-07-07T05:27:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks everyone for your patience here.  It's good to see this work out :)",
          "createdAt": "2021-07-07T07:12:01Z",
          "updatedAt": "2021-07-07T07:12:01Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg1MDQ5Mzgw",
          "commit": {
            "abbreviatedOid": "dc8d7fd"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think this is reasonable. ",
          "createdAt": "2021-06-16T11:32:01Z",
          "updatedAt": "2021-06-16T11:32:01Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg1NzQ3MTcw",
          "commit": {
            "abbreviatedOid": "dc8d7fd"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I like this, but I want to make sure that we have captured the desired logic.",
          "createdAt": "2021-06-16T23:35:28Z",
          "updatedAt": "2021-06-16T23:41:01Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I just want to poke on this \"MAY\" here a little.  I think it's right, but I want to test it.\r\n\r\nThis is \"MAY\" on the basis that recipients might not detect an error, not because - when an error is detected - we want the recipient to mostly ignore that error, right?\r\n\r\nWhat I'm trying to get at is whether the structure here is:\r\n\r\nMAY check\r\nif checked then:\r\n* SHOULD send 400 when appropriate\r\n* otherwise, treat as malformed\r\n\r\nIn which case the otherwise could be a MUST.  Though the wording chosen here is such that it would make a poor MUST, I think that I might prefer something stronger.\r\n\r\nThe other factor arguing against a stronger statement is that the SHOULD allows for requests to be treated with other than a 400 response.  That is, it effectively allows errors to be ignored or RST_STREAM to be sent instead.  We want that, but it makes it hard to say \"SHOULD ... unless\".  I also don't want to touch the existing SHOULD statement, which is good in its current form.\r\n\r\nMy preference then might be to say SHOULD here rather than MAY.\r\n\r\n```suggestion\r\n            code cannot be sent (e.g., because the error occurs in a trailer field), the recipient SHOULD\r\n```",
              "createdAt": "2021-06-16T23:35:29Z",
              "updatedAt": "2021-06-16T23:41:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg2OTU4NTA4",
          "commit": {
            "abbreviatedOid": "dc8d7fd"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-18T01:17:12Z",
          "updatedAt": "2021-06-18T01:17:12Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Your analysis is correct, but I think it would be better to convert MAY into a 'can', so that readers aren't confused about the (not terribly obvious) link between it and the preceding MAY. Does that work for you?",
              "createdAt": "2021-06-18T01:17:12Z",
              "updatedAt": "2021-06-18T01:17:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg2OTY3Mzg0",
          "commit": {
            "abbreviatedOid": "dc8d7fd"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-06-18T01:44:08Z",
          "updatedAt": "2021-06-18T01:44:19Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Firstly this is a big improvement on the current text, as it no longer makes existing good implementations non-compliant.\r\n\r\nHowever, I still do take issue with \"SHOULD do so using the 400\" as I believe that you have applied that too broadly.\r\n\r\nI agree that semantic errors in fields (duplicate fields, missing fields, wrong value types etc.) SHOULD be responded to with a 400, but I do not think that applies for basic violations of field grammer as defined by the ABNF (ie the example of a field name including a double quote) as defined by sections 5.1 and 5.5 of the referenced HTTP document.\r\n\r\nIt is confusing and over complex to require that a field containing `:` is malformed, but one containing `\"` is h2 is a bad-request sometimes and malformed othertimes.  \r\n\r\nIt is not efficient to require two validations for field grammer: once for the h2 requirements (malformed if it contains a ':' or 'A') and then again for HTTP (400 if it contains a double quote).  This will be a massive carbon foot print as every single field will need to be scanned a second time (or a more complex single scan) just to check for the vanishly small possibility that there is a double quote. \r\n\r\nI think that recipients MAY validate against 5.1 & 5.5 and when they do they should reject fields as malformed.  Recipients MAY perform additional validation against the semantics of HTTP fields (ref whole document), in which case they SHOULD reject requests with 400.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
              "createdAt": "2021-06-18T01:44:08Z",
              "updatedAt": "2021-06-18T01:44:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg2OTcyOTYy",
          "commit": {
            "abbreviatedOid": "dc8d7fd"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-18T02:01:09Z",
          "updatedAt": "2021-06-18T02:01:09Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "This seems to be about two things : division of responsibilities (400 is core semantics, RST_STREAM is h2) and where enforcement responsibilities lie as a result.  I think that we've learned that the character composition of fields (names or values) is split, but enforcement might occur at either layer.\r\n\r\nWhat Mark's text attempts to do (and I think it succeeds) is say that when the rule is in core semantics, then the enforcement should look like a semantic-layer rejection.  That's a principled position.  \r\n\r\nHowever, this acknowledges the pragmatic position and allows it (it's not MUST): if you detect \":\" and send RST_STREAM, that's OK too.  It just recommends (with SHOULD) that you try to engage semantic-layer signals, because those are better.  On principle, I agree with this view.\r\n\r\nThat some implementations combine these checks and use what amount to less rigorous signals, doesn't make them bad.  It is just a trade-off they make: efficient processing over clearer signaling.  As this is a serious error that will likely engage engineers and not users, what signal is used doesn't matter THAT much.\r\n\r\n(As for the \"MAY\" vs. \"can\", \"can\" works for me.)",
              "createdAt": "2021-06-18T02:01:09Z",
              "updatedAt": "2021-06-18T02:01:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg2OTgxNzM4",
          "commit": {
            "abbreviatedOid": "dc8d7fd"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-18T02:26:29Z",
          "updatedAt": "2021-06-18T02:26:30Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "@martinthomson but I don't think the text does achieve allowing for semantic rejection of  invalid fields when possible.  It still leaves the MUST be treated as malformed for any field with a `:` or `A`, etc.  \r\n\r\nIf sending a 400 when possible is a principled position, then the principle should apply to all invalid fields and  I don't see why the fields that are at risk of creating a security problem (and this invalidated at the h2 level) are exempted from the principle?  The text should say that when possible a receiver SHOULD reject a malformed field with a 400 regardless of the reason for the malformation.  \r\n\r\nThis proposed text is that it still encourages two classes of invalid fields with different behaviours for those classes.  Thus implementors will either simply follow the document and be less efficient or be more efficient and considered \"less rigorous\".\r\n\r\n\r\n\r\n\r\n",
              "createdAt": "2021-06-18T02:26:30Z",
              "updatedAt": "2021-06-18T02:26:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg2OTk2MjE1",
          "commit": {
            "abbreviatedOid": "dc8d7fd"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-18T03:10:55Z",
          "updatedAt": "2021-06-18T03:10:55Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Yes - that's why it's a SHOULD. And conforming with that SHOULD will not require scanning a second time for every request -- only when there's a need to distinguish between the two errors. \r\n\r\nThe reason that promoting this to the semantic layer when possible is important is that it's more likely to reach that engineer, through protocol hops and APIs that don't know about h2 error codes.",
              "createdAt": "2021-06-18T03:10:55Z",
              "updatedAt": "2021-06-18T03:10:55Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg3MTM2NzMy",
          "commit": {
            "abbreviatedOid": "dc8d7fd"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-18T08:00:44Z",
          "updatedAt": "2021-06-18T08:00:44Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "@mnot, what I'm not understanding is why you see two types of error?   I'm not disputing how they should be handled, only that the spec should allow all syntax validation failures of fields to be handled equally.   Ie SHOULD send a 400 for a field name with a space just as much as for one with a double quote.   If you can't send a 400, then treat as malformed.\r\n\r\nThe validation was added to the spec for security reason, because space, `:` and control characters are potentially dangerous if forwarded.  But I just don't see that makes them a different class of error to a field with a double quote and no less deserving of a clear signal that will reach an engineer.   If anything they are more deserving of a clear signal as they very likely indicate an attack.\r\n\r\nSo can you explain to me why you see a \"need to distinguish between\" an invalid field with a space vs one with a double quote?  Why can't  the spec be written in a way to encourage best practise for both?\r\n\r\n",
              "createdAt": "2021-06-18T08:00:44Z",
              "updatedAt": "2021-06-18T08:00:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAwNTg5OTc3",
          "commit": {
            "abbreviatedOid": "dc8d7fd"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-07T05:26:23Z",
          "updatedAt": "2021-07-07T05:26:23Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I think we are making heavy work of this section by trying to treat a 400 response as something different to malformed message handling.  Malformed message handling already allows a response code to be sent at MAY strength. I think the text is simpler if we just say treat as malformed and then add a SHOULD for 400 responses to requests if possible.\r\n\r\nThe additional validation can then be simply handled as an optional bullet point in the list of validations.  I have created PR #868 with these changes.\r\n",
              "createdAt": "2021-07-07T05:26:23Z",
              "updatedAt": "2021-07-07T05:26:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAwNjIxNTMw",
          "commit": {
            "abbreviatedOid": "dc8d7fd"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-07T06:28:43Z",
          "updatedAt": "2021-07-07T06:28:44Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "@gregw I think you're right; pushing a revision shortly.",
              "createdAt": "2021-07-07T06:28:44Z",
              "updatedAt": "2021-07-07T06:28:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAwNjM4NTI0",
          "commit": {
            "abbreviatedOid": "3411230"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2021-07-07T06:54:10Z",
          "updatedAt": "2021-07-07T06:54:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 868,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg0ODczNjk0",
      "title": "Alternate for #866 Invalid field handling",
      "url": "https://github.com/httpwg/http2-spec/pull/868",
      "state": "CLOSED",
      "author": "gregw",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Removed distinction between treating as malformed and sending a 400, since treating as malformed already\r\nallows a 400 to be sent.\r\n\r\nThis uses some text from #866 and replaces that PR.",
      "createdAt": "2021-07-07T05:23:49Z",
      "updatedAt": "2021-07-07T22:23:35Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d552116b4a939c5c75f2756318d2387448c2f50",
      "headRepository": "gregw/http2-spec",
      "headRefName": "invalid-fields",
      "headRefOid": "3cebe356052a41e3c256e56b309916992bc18d94",
      "closedAt": "2021-07-07T06:54:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The outcome I'm striving for here is to avoid the situation where the spec has two classes of invalid fields.  With #866 it currently has that a message with one type of invalid character MUSTS be treated as malformed and that bad response code MAY be sent;   but for some other types of invalid characters it just says a bad response code SHOULD be sent otherwise MUST treated as malformed  (which then says a bad response code MAY be sent).\r\n\r\nThis PR simplies it to saying that all messages with invalid characters MUST be treated as  malformed and that if the message is a request then a bad response code SHOULD be sent.    \r\nThe definition of invalid characters optionally include those disallows by HTTP.\r\n\r\n\r\n\r\n",
          "createdAt": "2021-07-07T05:34:30Z",
          "updatedAt": "2021-07-07T05:34:30Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@mnot @martinthomson ",
          "createdAt": "2021-07-07T05:34:43Z",
          "updatedAt": "2021-07-07T05:34:43Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So this makes the recommendation to use 400 stronger; extending it to include more fields.  I think that's OK, but I'm going to defer to @mnot on this.  I'm OK with either; this might even be better.",
          "createdAt": "2021-07-07T06:11:12Z",
          "updatedAt": "2021-07-07T06:12:02Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I did a rewrite, PTAL. Happy to review this one but I'd be suggesting a number of edits here.",
          "createdAt": "2021-07-07T06:31:22Z",
          "updatedAt": "2021-07-07T06:31:22Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "closed in favour of the updated #866 ",
          "createdAt": "2021-07-07T06:54:47Z",
          "updatedAt": "2021-07-07T06:54:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 869,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg0OTE2NTM5",
      "title": "Mark HTTP2-Settings obsolete properly",
      "url": "https://github.com/httpwg/http2-spec/pull/869",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Closes #843.",
      "createdAt": "2021-07-07T06:53:01Z",
      "updatedAt": "2021-07-12T06:13:26Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d552116b4a939c5c75f2756318d2387448c2f50",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "header-rego",
      "headRefOid": "97b9b7a8dbe757df06690303faf5969f174bbd40",
      "closedAt": "2021-07-12T06:13:16Z",
      "mergedAt": "2021-07-12T06:13:15Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c70b3d67f43b2f0cc96795fd238f6b46c117d290"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAwNzc2MTY2",
          "commit": {
            "abbreviatedOid": "97b9b7a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-07T09:21:02Z",
          "updatedAt": "2021-07-07T09:21:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 870,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg0OTIwNDU4",
      "title": "A leaner acknowledgments section",
      "url": "https://github.com/httpwg/http2-spec/pull/870",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Now without the \"e\" too.\r\n\r\nFor this revision I would consider Mark Nottingham, Willy Tarreau, and\r\nGreg Wilkins for direct acknowledgment, but as they are all listed in\r\nRFC 7540 it seems safer to avoid specific mentions here.\r\n\r\nCloses #862.",
      "createdAt": "2021-07-07T07:00:32Z",
      "updatedAt": "2021-07-12T06:13:23Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d552116b4a939c5c75f2756318d2387448c2f50",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "acks",
      "headRefOid": "f4380d21acf443db833437775ab6dffa36f2e33f",
      "closedAt": "2021-07-12T06:13:19Z",
      "mergedAt": "2021-07-12T06:13:19Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "f888ecdc847aa567a32a820fbb0aea442558efde"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAwNzc4MjI5",
          "commit": {
            "abbreviatedOid": "f4380d2"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-07T09:23:03Z",
          "updatedAt": "2021-07-07T09:23:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 871,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg0OTI2MDcy",
      "title": "Change log for character validation",
      "url": "https://github.com/httpwg/http2-spec/pull/871",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The only change we have planned for the draft that isn't in the change\r\nlog yet.\r\n\r\nCaptures #865 changes, whether that is via #866 or other changes, the\r\nsubstance of the change is roughly the same.\r\n\r\nCloses #862.",
      "createdAt": "2021-07-07T07:08:47Z",
      "updatedAt": "2021-07-07T07:09:52Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d552116b4a939c5c75f2756318d2387448c2f50",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "cl-815",
      "headRefOid": "220d63b2ea1313636bf7b281356f8baa354eaed7",
      "closedAt": "2021-07-07T07:09:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Oops, closes the wrong issue.  I'll try again.",
          "createdAt": "2021-07-07T07:09:52Z",
          "updatedAt": "2021-07-07T07:09:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 872,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg0OTI3MTE0",
      "title": "Change log for character validation",
      "url": "https://github.com/httpwg/http2-spec/pull/872",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The only change we have planned for the draft that isn't in the change\r\nlog yet.\r\n\r\nCaptures #865 changes, whether that is via #866 or other changes, the\r\nsubstance of the change is roughly the same.\r\n\r\nCloses #852.",
      "createdAt": "2021-07-07T07:10:26Z",
      "updatedAt": "2021-07-12T06:12:56Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d552116b4a939c5c75f2756318d2387448c2f50",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "cl-815",
      "headRefOid": "531a8b6174c9d9866ec06cdb1f7931e893d92a16",
      "closedAt": "2021-07-12T06:12:55Z",
      "mergedAt": "2021-07-12T06:12:55Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "40b5c412996046392258a1452ff602746365e968"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAwNjUyMDYw",
          "commit": {
            "abbreviatedOid": "e3819f6"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-07T07:11:33Z",
          "updatedAt": "2021-07-07T07:11:33Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n          to encourage sending 400-series status codes.\r\n```",
              "createdAt": "2021-07-07T07:11:33Z",
              "updatedAt": "2021-07-07T07:11:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAwNzc5OTg3",
          "commit": {
            "abbreviatedOid": "531a8b6"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-07T09:24:48Z",
          "updatedAt": "2021-07-07T09:24:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 873,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg3NTk3NjYx",
      "title": "A simple, but manual, s/bit \\d/the XXX Flag/",
      "url": "https://github.com/httpwg/http2-spec/pull/873",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Though I had to be careful with text on TCP, which has FIN and RST bits\r\nwe don't want to touch.",
      "createdAt": "2021-07-12T07:50:29Z",
      "updatedAt": "2021-07-12T21:23:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "12c902f12abe583783bc5f1c0233c7a82c0d5a1b",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "the-flag",
      "headRefOid": "94732fc4041359fe1c42b52e6b8680ef5e8cd916",
      "closedAt": "2021-07-12T21:23:44Z",
      "mergedAt": "2021-07-12T21:23:44Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5320bd1f08e64f9bcbcd45f811daa2bdd8e018bb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAzODY5NzMw",
          "commit": {
            "abbreviatedOid": "94732fc"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2021-07-12T08:51:15Z",
          "updatedAt": "2021-07-12T08:51:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 874,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg3NjI2MDg0",
      "title": "HTTP work",
      "url": "https://github.com/httpwg/http2-spec/pull/874",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This is a rearrangement of the HTTP-related sections, in preparation for actually addressing 867. ",
      "createdAt": "2021-07-12T08:30:24Z",
      "updatedAt": "2021-07-12T23:59:30Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "12c902f12abe583783bc5f1c0233c7a82c0d5a1b",
      "headRepository": "mnot/http2-spec",
      "headRefName": "mnot-867",
      "headRefOid": "80414af2e51406f4411dc760b4ed01ed7c7c7d32",
      "closedAt": "2021-07-12T23:52:12Z",
      "mergedAt": "2021-07-12T23:52:12Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "80414af2e51406f4411dc760b4ed01ed7c7c7d32"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "This doesn't actually address the issue -- I came to a point where I realised this would add a bunch of new requirements and prose that would need heavy scrutiny, and if we want to finish soon, that may not be advisable (although maybe we can figure it out during WGLC). \r\n\r\nIn the meantime, I think this rearrangement is *much* clearer than the original ordering -- see what you think.",
          "createdAt": "2021-07-12T09:32:26Z",
          "updatedAt": "2021-07-12T09:32:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 875,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk0ODg4NDY5",
      "title": "Update ECC reference",
      "url": "https://github.com/httpwg/http2-spec/pull/875",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "RFC 4492 is obsolete.\r\n\r\nThis is a TLS 1.2 section, so it is OK to refer to the TLS 1.2 document here.",
      "createdAt": "2021-07-22T05:52:19Z",
      "updatedAt": "2021-07-22T06:53:10Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "82935dbb1d028ed0a93f47c0d774287c5c814449",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "ecc-ref",
      "headRefOid": "fcd771b1a4633a8649fd8a7e2195b12a8c0878a6",
      "closedAt": "2021-07-22T06:53:10Z",
      "mergedAt": "2021-07-22T06:53:10Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "2d0d75b4918f9b9fe582e073bf245eee82c54d88"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEyNDEyMDY5",
          "commit": {
            "abbreviatedOid": "fcd771b"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-22T06:52:42Z",
          "updatedAt": "2021-07-22T06:52:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 876,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk0ODkyNTQz",
      "title": "Update core drafts references",
      "url": "https://github.com/httpwg/http2-spec/pull/876",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "These will be good for about 2 days based on what I'm seeing now, but I\r\ncan just update to -17 then.",
      "createdAt": "2021-07-22T06:02:53Z",
      "updatedAt": "2021-07-22T06:53:46Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "82935dbb1d028ed0a93f47c0d774287c5c814449",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "core-refs",
      "headRefOid": "9a88c4650c76773cac24e4f97a1047ede6ab5ecd",
      "closedAt": "2021-07-22T06:53:46Z",
      "mergedAt": "2021-07-22T06:53:46Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "e8d6580a1e362fdb8f31f7e7a68319a311c9c0ef"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEyNDEyNjEy",
          "commit": {
            "abbreviatedOid": "9a88c46"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-22T06:53:41Z",
          "updatedAt": "2021-07-22T06:53:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 877,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk1NzIwNTMy",
      "title": "Add some structure to the undifferentiated mess",
      "url": "https://github.com/httpwg/http2-spec/pull/877",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "...that is frame formats.\r\n\r\nI've chosen to put blank lines before and after both frames and the\r\nstream identifier part of the stream header.  That should make this a\r\nlot clearer.\r\n\r\n@wtarreau was right that this was a little hard to process without that.\r\nHopefully this is a tiny bit better.",
      "createdAt": "2021-07-23T07:08:59Z",
      "updatedAt": "2021-08-02T07:55:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "e8d6580a1e362fdb8f31f7e7a68319a311c9c0ef",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "vspace",
      "headRefOid": "0c0396cf7d02217dd6f5880f431b29b621481cad",
      "closedAt": "2021-08-02T06:58:09Z",
      "mergedAt": "2021-08-02T06:58:09Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8f4c07a2e135234c87546408297913476963d9f9"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "I think this helps. The only other clarification I can think of is to pull the flags out into a separate illustration, but let's see if this is sufficient first.",
          "createdAt": "2021-07-23T07:13:56Z",
          "updatedAt": "2021-07-23T07:13:56Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Bah I didn't respond at the right place. One day I'll understand github's interface. Or not :-)\r\n\r\nBoth changes look good and possibly sufficient to me. Let's just wait a bit to see if anyone in the WG has any better proposal. Thanks for your quick reaction!\r\n",
          "createdAt": "2021-07-23T07:18:28Z",
          "updatedAt": "2021-07-23T07:18:28Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "For the flags (and only the flags), what about trying this:\r\n```\r\nDATA Frame {\r\n  Length (24),\r\n  Type (8) = 0,\r\n\r\n  Unused Flags (4),    // 0xF0\r\n  PADDED Flag (1),     // 0x08\r\n  Unused Flags (2),    // 0x06\r\n  END_STREAM Flag (1), // 0x01\r\n\r\n  Reserved (1),\r\n  Stream Identifier (31),\r\n  [Pad Length (8)],\r\n  Data (..),\r\n  Padding (..),\r\n```\r\n",
          "createdAt": "2021-07-23T07:20:30Z",
          "updatedAt": "2021-07-23T07:20:30Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Should I add the octet values of flags?  I would only do that for non-unused flags though.",
          "createdAt": "2021-07-23T10:59:56Z",
          "updatedAt": "2021-07-23T10:59:56Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe the prose text contains them, so there's at least a defensible reason for leaving them off.",
          "createdAt": "2021-07-23T12:57:53Z",
          "updatedAt": "2021-07-23T12:57:53Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "They're indeed present but not trivially spottable. I have a dead-tree copy of 7540 here with them overlined in pink to spot them faster :-/  We could save a tree by noting them there :-). I agree with Martin that we can avoid the unused ones though, because what matters in tests is not to know the unused ones but rather to figure them as the complement of all known ones. I won't roll over the floor crying if that's rejected, but as an implementer I find that it significantly helps during debugging.\r\n",
          "createdAt": "2021-07-23T14:52:57Z",
          "updatedAt": "2021-07-23T14:52:57Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "As I don't know *how* to comment in this format and I don't want to start inventing something (else), I think I'm going to take the coward's option.",
          "createdAt": "2021-08-02T06:58:05Z",
          "updatedAt": "2021-08-02T06:58:05Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "What are the semantics of a blank line in this format?\r\n\r\n/me ducks",
          "createdAt": "2021-08-02T07:55:37Z",
          "updatedAt": "2021-08-02T07:55:37Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzNjEzNDk2",
          "commit": {
            "abbreviatedOid": "0c0396c"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-23T10:53:37Z",
          "updatedAt": "2021-07-23T10:53:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 879,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAxMjUyNzM0",
      "title": "Clarify the rules on server-sent HEADERS",
      "url": "https://github.com/httpwg/http2-spec/pull/879",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #878.",
      "createdAt": "2021-08-02T08:28:06Z",
      "updatedAt": "2021-08-23T01:41:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8f4c07a2e135234c87546408297913476963d9f9",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-server-initiated-streams",
      "headRefOid": "06f45a113b0aaa5765e34b4508cf25ab63265a98",
      "closedAt": "2021-08-23T01:41:57Z",
      "mergedAt": "2021-08-23T01:41:56Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d747991f523cfdfa1bae14ce0a2aee5dd781f953"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Probably needs to be listed in \"Changes from RFC7540\".",
          "createdAt": "2021-08-02T08:44:43Z",
          "updatedAt": "2021-08-02T08:44:43Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Does it? I think this change is editorial: this is already _effectively_ the rule, we're just calling it out more explicitly.",
          "createdAt": "2021-08-02T10:01:21Z",
          "updatedAt": "2021-08-02T10:01:29Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "If by \"effectively\" you mean \"it's what implementations do\", we still need to document a change in the *rfc*.",
          "createdAt": "2021-08-03T00:27:58Z",
          "updatedAt": "2021-08-03T00:27:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I read that as \"it's what the document originally said, just not very clearly\".",
          "createdAt": "2021-08-03T00:29:42Z",
          "updatedAt": "2021-08-03T00:29:42Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Yup, that's my assertion, see the discussion in #878.",
          "createdAt": "2021-08-03T05:59:04Z",
          "updatedAt": "2021-08-03T05:59:04Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxMzgzNzM4",
          "commit": {
            "abbreviatedOid": "a2fb3ef"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Yes, I think this is correct.",
          "createdAt": "2021-08-03T16:02:04Z",
          "updatedAt": "2021-08-03T16:02:16Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Feels like it could use at least one comma in all that.",
              "createdAt": "2021-08-03T16:02:04Z",
              "updatedAt": "2021-08-03T16:02:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxNzQwMDU1",
          "commit": {
            "abbreviatedOid": "a2fb3ef"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-04T00:10:41Z",
          "updatedAt": "2021-08-04T00:10:42Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n                <xref target=\"PROTOCOL_ERROR\" format=\"none\">PROTOCOL_ERROR</xref>. If this stream is server-initiated, as described in\r\n                <xref target=\"StreamIdentifiers\"/>, then receiving a <xref target=\"HEADERS\" format=\"none\">HEADERS</xref> frame MUST also\r\n                be treated as a <xref target=\"ConnectionErrorHandler\">connection error</xref> of type\r\n```\r\n?",
              "createdAt": "2021-08-04T00:10:41Z",
              "updatedAt": "2021-08-04T00:10:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 882,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA1MTE2MDE5",
      "title": "Revise overview text on priority",
      "url": "https://github.com/httpwg/http2-spec/pull/882",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #880.",
      "createdAt": "2021-08-06T00:58:33Z",
      "updatedAt": "2021-08-23T01:42:02Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8f4c07a2e135234c87546408297913476963d9f9",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "priority-intro",
      "headRefOid": "9758653a56e2491e43fa2f2d641fdd6bb75e3acd",
      "closedAt": "2021-08-23T01:41:10Z",
      "mergedAt": "2021-08-23T01:41:10Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "199e4a7c40d0e95d202cccb365c297ab8140242a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIzOTA4MTgx",
          "commit": {
            "abbreviatedOid": "9758653"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-06T01:19:37Z",
          "updatedAt": "2021-08-06T01:19:37Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI0MTk0OTAw",
          "commit": {
            "abbreviatedOid": "9758653"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-06T09:57:26Z",
          "updatedAt": "2021-08-06T09:57:26Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMyMTQxMjYw",
          "commit": {
            "abbreviatedOid": "9758653"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-17T19:23:33Z",
          "updatedAt": "2021-08-17T19:23:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 884,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA1NzY2MjE2",
      "title": "Prohibit duplicate pseudo-headers.",
      "url": "https://github.com/httpwg/http2-spec/pull/884",
      "state": "MERGED",
      "author": "nharper",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This fixes issue #883.",
      "createdAt": "2021-08-06T21:56:24Z",
      "updatedAt": "2021-08-23T19:55:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8f4c07a2e135234c87546408297913476963d9f9",
      "headRepository": "nharper/http2-spec",
      "headRefName": "no-duplicate-pseudo-headers",
      "headRefOid": "c1130a1859f0a506b38e3c47e21d7253a264b5d7",
      "closedAt": "2021-08-23T01:42:16Z",
      "mergedAt": "2021-08-23T01:42:16Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0b330a9c145e2e91d6a2c30cda24747612562926"
      },
      "comments": [
        {
          "author": "nharper",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree on 1 that there's no reason to exclude response pseudo-headers from this requirement. (I was worried about contradicting something regarding multiple interim responses, each of which needs a `:status` field, but each of those are in a separate field section, so a rule of no duplicates within a field section should work for pseudo-headers, both request and response.)\r\n\r\nHowever, I think that a general prohibition is a good thing. If a future (negotiated) extension wants to introduce a new pseudo-header that can be duplicated, it could override an otherwise general prohibition in this draft. If a future extension doesn't do that, it gets the more sane/safe default for free.",
          "createdAt": "2021-08-10T00:56:47Z",
          "updatedAt": "2021-08-10T00:56:47Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm, yeah, I think I can see a justification for that argument. Given that adding new pseudo-headers needs to be negotiated _anyway_, I don't think that's a big deal. So I'm happy to go ahead with the change for (1) and skip (2).",
          "createdAt": "2021-08-10T07:35:06Z",
          "updatedAt": "2021-08-10T07:35:06Z"
        },
        {
          "author": "nharper",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson is \"this\" the current text, or revised text to address Cory's comment?",
          "createdAt": "2021-08-10T07:40:04Z",
          "updatedAt": "2021-08-10T07:40:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This pull request.  I think that a blanket \"at most once\" is fine and what you have is enough.  Future extensions can deal with the consequences of that if they want >1.",
          "createdAt": "2021-08-10T07:44:24Z",
          "updatedAt": "2021-08-10T07:44:24Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson Do you want the change to cover responses as well?",
          "createdAt": "2021-08-10T07:54:50Z",
          "updatedAt": "2021-08-10T07:54:50Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That would mean moving it up to the \"HTTP Control Data\" section.  That is a good idea.  I missed that this was under requests only.",
          "createdAt": "2021-08-10T07:56:59Z",
          "updatedAt": "2021-08-10T07:56:59Z"
        },
        {
          "author": "nharper",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I moved the language up to the HTTP Control Data section and slightly tweaked it.",
          "createdAt": "2021-08-10T19:44:43Z",
          "updatedAt": "2021-08-10T19:44:43Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI0ODE0Mzgw",
          "commit": {
            "abbreviatedOid": "1bb9529"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This seems like a reasonable addition, but I think it\u2019s in the wrong place, for two reasons:\r\n\r\n1. There\u2019s no particular reason to exclude response pseudo-headers from this prohibition: multiple `:status` fields is just as meaningless.\r\n2. We probably don\u2019t want to prohibit this _generally_, but instead only for the pseudo-headers we define in this document.\r\n\r\nTo that end I think I recommend moving this up to the parent section, and noting something like \u201cAll pseudo-header fields defined in this document MUST NOT appear more than once in a header header section.\u201d",
          "createdAt": "2021-08-07T11:41:56Z",
          "updatedAt": "2021-08-07T11:41:56Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2MTA0MDcx",
          "commit": {
            "abbreviatedOid": "1bb9529"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I had something else.  This is better.",
          "createdAt": "2021-08-10T07:37:47Z",
          "updatedAt": "2021-08-10T07:37:47Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2OTE4NzE2",
          "commit": {
            "abbreviatedOid": "a496d06"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-10T23:16:37Z",
          "updatedAt": "2021-08-10T23:16:40Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n        </t>\r\n        <t>\r\n          The same pseudo-header field name MUST NOT appear more than once in a field block. A\r\n```\r\n\r\nLet's use paragraphs.",
              "createdAt": "2021-08-10T23:16:37Z",
              "updatedAt": "2021-08-10T23:16:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI3MjA3ODAx",
          "commit": {
            "abbreviatedOid": "c1130a1"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-11T08:36:50Z",
          "updatedAt": "2021-08-11T08:36:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 888,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA5NzE3NzU4",
      "title": "Mostly just fields",
      "url": "https://github.com/httpwg/http2-spec/pull/888",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Julian identified one.  I found a few more.\r\n\r\nCloses #886.",
      "createdAt": "2021-08-11T22:10:24Z",
      "updatedAt": "2021-08-12T12:25:16Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8f4c07a2e135234c87546408297913476963d9f9",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "just-fields",
      "headRefOid": "a312cc1a7f780f729cf4c21fa477385b6415aa11",
      "closedAt": "2021-08-12T12:25:16Z",
      "mergedAt": "2021-08-12T12:25:16Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "083912f85056c86f6c3b0013748144b7dd361f88"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI4NTMyMDky",
          "commit": {
            "abbreviatedOid": "a312cc1"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-12T12:25:11Z",
          "updatedAt": "2021-08-12T12:25:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 891,
      "id": "MDExOlB1bGxSZXF1ZXN0NzExODk0NTQy",
      "title": "fix #889",
      "url": "https://github.com/httpwg/http2-spec/pull/891",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #889",
      "createdAt": "2021-08-13T01:18:05Z",
      "updatedAt": "2021-08-13T07:17:17Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "083912f85056c86f6c3b0013748144b7dd361f88",
      "headRepository": "LPardue/http2-spec",
      "headRefName": "patch-1",
      "headRefOid": "12736520ee42c44a843bae52ff0e2874ba422f6b",
      "closedAt": "2021-08-13T07:17:17Z",
      "mergedAt": "2021-08-13T07:17:17Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "a8e08db2f2ae334e9ca560f078367b1219757f20"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI5MTkxNzU2",
          "commit": {
            "abbreviatedOid": "1273652"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-13T01:19:41Z",
          "updatedAt": "2021-08-13T01:19:41Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI5MzI5MzQw",
          "commit": {
            "abbreviatedOid": "1273652"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-13T07:17:10Z",
          "updatedAt": "2021-08-13T07:17:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 893,
      "id": "MDExOlB1bGxSZXF1ZXN0NzExOTIzNzk5",
      "title": "missing comma",
      "url": "https://github.com/httpwg/http2-spec/pull/893",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-13T01:45:33Z",
      "updatedAt": "2021-08-13T03:58:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "083912f85056c86f6c3b0013748144b7dd361f88",
      "headRepository": "LPardue/http2-spec",
      "headRefName": "patch-2",
      "headRefOid": "f6c54eb85b7e8f86417fd62de632a49f9912a3d0",
      "closedAt": "2021-08-13T03:58:38Z",
      "mergedAt": "2021-08-13T03:58:38Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "34e3c49c06254b5447b458a22ba867593ba7a49b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 894,
      "id": "MDExOlB1bGxSZXF1ZXN0NzExOTM0MjQ0",
      "title": "Avoid h2c awkwardness",
      "url": "https://github.com/httpwg/http2-spec/pull/894",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #892\ufeff\n",
      "createdAt": "2021-08-13T01:55:16Z",
      "updatedAt": "2021-08-23T11:53:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "083912f85056c86f6c3b0013748144b7dd361f88",
      "headRepository": "LPardue/http2-spec",
      "headRefName": "issue-892",
      "headRefOid": "1b780ac801e61be1190de6bd089788bc7aeac375",
      "closedAt": "2021-08-23T11:53:38Z",
      "mergedAt": "2021-08-23T11:53:38Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "1b780ac801e61be1190de6bd089788bc7aeac375"
      },
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "By removing the word negotiating and avoiding the actual identifiers, we can get the important point across",
          "createdAt": "2021-08-13T01:57:46Z",
          "updatedAt": "2021-08-13T01:57:46Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI5MjQzNjE4",
          "commit": {
            "abbreviatedOid": "1b780ac"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-13T04:00:25Z",
          "updatedAt": "2021-08-13T04:00:25Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I realize now that \"security\" does not hold for both.  We might need to explicitly say that \"h2c\" does not provide the security properties of \"h2\".",
              "createdAt": "2021-08-13T04:00:25Z",
              "updatedAt": "2021-08-13T04:00:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 895,
      "id": "MDExOlB1bGxSZXF1ZXN0NzExOTYyMzc2",
      "title": "Remove stale reference to \"?\" in diagram",
      "url": "https://github.com/httpwg/http2-spec/pull/895",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-13T02:21:43Z",
      "updatedAt": "2021-08-13T04:00:43Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "083912f85056c86f6c3b0013748144b7dd361f88",
      "headRepository": "LPardue/http2-spec",
      "headRefName": "theres-no-question",
      "headRefOid": "1ebec3bcac53d4331630c8000e70530bdf64f64d",
      "closedAt": "2021-08-13T04:00:43Z",
      "mergedAt": "2021-08-13T04:00:43Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c19b15e6fe4f5a4f38a2500870d27f933a2e09e4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 898,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEyMjU3Mzcz",
      "title": "Explicitly state HEADERS and PUSH_PROMISE padding reqs",
      "url": "https://github.com/httpwg/http2-spec/pull/898",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #896\n\nThe old text stated padding things were identical to DATA frames. That might not be\nentirely true. \ufeffSo just spell out the requirements expicitly.\n",
      "createdAt": "2021-08-13T10:42:40Z",
      "updatedAt": "2021-08-16T01:18:53Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "a8e08db2f2ae334e9ca560f078367b1219757f20",
      "headRepository": "LPardue/http2-spec",
      "headRefName": "main",
      "headRefOid": "9fc33f95fd34059d8ddde4d8991d1130ea651e2f",
      "closedAt": "2021-08-16T01:18:52Z",
      "mergedAt": "2021-08-16T01:18:52Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "45879375ec50188295b6c6364b1487ffda6dc003"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI5NTEwMzU4",
          "commit": {
            "abbreviatedOid": "9fc33f9"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-13T11:12:06Z",
          "updatedAt": "2021-08-13T11:12:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 899,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEyMzMwNTQ1",
      "title": "Make introduction more objective",
      "url": "https://github.com/httpwg/http2-spec/pull/899",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #890\ufeff\r\n",
      "createdAt": "2021-08-13T12:46:23Z",
      "updatedAt": "2021-08-16T15:08:53Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "a8e08db2f2ae334e9ca560f078367b1219757f20",
      "headRepository": "LPardue/http2-spec",
      "headRefName": "fix-890",
      "headRefOid": "ad10935a297338592c0a8b1ecc1e3d2754a6abe4",
      "closedAt": "2021-08-16T15:08:53Z",
      "mergedAt": "2021-08-16T15:08:53Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "6a191f42fd61645ba7ca9080e704ac7236e9c14e"
      },
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thanks both, good suggestions",
          "createdAt": "2021-08-16T15:04:27Z",
          "updatedAt": "2021-08-16T15:04:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMwMjY0Mjg2",
          "commit": {
            "abbreviatedOid": "fc3cb6d"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks Lucas.  Some small suggestions only.",
          "createdAt": "2021-08-16T01:20:10Z",
          "updatedAt": "2021-08-16T01:23:09Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n        capacity. Note, however, that TCP head-of-line blocking is not addressed by this protocol.\r\n```",
              "createdAt": "2021-08-16T01:20:10Z",
              "updatedAt": "2021-08-16T01:23:09Z"
            },
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n        Making multiple concurrent requests can reduce latency and improve\r\n```",
              "createdAt": "2021-08-16T01:21:18Z",
              "updatedAt": "2021-08-16T01:23:09Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n        blocking. Therefore, HTTP/1.0 and HTTP/1.1 clients use multiple connections\r\n        to a server to make concurrent requests.\r\n```",
              "createdAt": "2021-08-16T01:22:24Z",
              "updatedAt": "2021-08-16T01:23:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMwMjk3MDc4",
          "commit": {
            "abbreviatedOid": "04553d6"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-16T03:15:10Z",
          "updatedAt": "2021-08-16T03:15:10Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMwODE3MTE1",
          "commit": {
            "abbreviatedOid": "04553d6"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "One change and I'm happy",
          "createdAt": "2021-08-16T14:57:50Z",
          "updatedAt": "2021-08-16T14:58:30Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n        The performance of applications using the Hypertext Transfer Protocol\r\n```",
              "createdAt": "2021-08-16T14:57:50Z",
              "updatedAt": "2021-08-16T14:58:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 901,
      "id": "MDExOlB1bGxSZXF1ZXN0NzEzODM5NjY5",
      "title": "Improve list construction",
      "url": "https://github.com/httpwg/http2-spec/pull/901",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "And correctly refer to the trailer section.\r\n\r\nCloses #900.",
      "createdAt": "2021-08-17T01:06:26Z",
      "updatedAt": "2021-08-17T12:45:43Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "6a191f42fd61645ba7ca9080e704ac7236e9c14e",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "trailer-section",
      "headRefOid": "e9e3f9a90a844c94cddfceacea2bbdae8f2c28dc",
      "closedAt": "2021-08-17T12:45:43Z",
      "mergedAt": "2021-08-17T12:45:43Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "609609e332ecd562e156010ef0a0987eb6cb3874"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMxNzE2ODky",
          "commit": {
            "abbreviatedOid": "e9e3f9a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-17T12:45:37Z",
          "updatedAt": "2021-08-17T12:45:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 907,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE1ODAyOTk0",
      "title": "Avoid previous versions, use RFC7540",
      "url": "https://github.com/httpwg/http2-spec/pull/907",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Resolves #904.",
      "createdAt": "2021-08-19T10:21:35Z",
      "updatedAt": "2021-08-20T06:59:03Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "609609e332ecd562e156010ef0a0987eb6cb3874",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-versions",
      "headRefOid": "15107f6665a43f274d2383c63062011c38e7e9cd",
      "closedAt": "2021-08-20T06:59:03Z",
      "mergedAt": "2021-08-20T06:59:03Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "27b3252dc5e3d2725235411b676b95bb01bea182"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0MDU2MDcz",
          "commit": {
            "abbreviatedOid": "03cf2c6"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-19T14:23:44Z",
          "updatedAt": "2021-08-19T14:24:44Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n            Note: <xref target=\"RFC7540\">RFC 7540</xref> used the term \"header block\" in place of\r\n```\r\nIn prose, the name has a space (it should be non-breaking, but I don't tolerate `&#xa0;` very well.",
              "createdAt": "2021-08-19T14:23:44Z",
              "updatedAt": "2021-08-19T14:24:44Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n         <xref target=\"RFC7540\" section=\"11.8\"/> registered an upgrade\r\n```\r\nI don't know what your version would have rendered as.  If you want to try it out and share, then maybe try that.  With a space, of course.",
              "createdAt": "2021-08-19T14:24:00Z",
              "updatedAt": "2021-08-19T14:24:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0MTQyMjg2",
          "commit": {
            "abbreviatedOid": "03cf2c6"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-19T15:13:14Z",
          "updatedAt": "2021-08-19T15:13:14Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0MTUwMDYy",
          "commit": {
            "abbreviatedOid": "03cf2c6"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-19T15:19:53Z",
          "updatedAt": "2021-08-19T15:19:53Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I don\u2019t have a proper computer on me and I\u2019m too lazy to spin up a cloud VM so I\u2019m just gonna do it your way.",
              "createdAt": "2021-08-19T15:19:53Z",
              "updatedAt": "2021-08-19T15:19:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 908,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE1ODMyMTI2",
      "title": "ref HTTP early (closes #885)",
      "url": "https://github.com/httpwg/http2-spec/pull/908",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-19T11:03:52Z",
      "updatedAt": "2021-08-19T14:25:13Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "609609e332ecd562e156010ef0a0987eb6cb3874",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-4",
      "headRefOid": "145fc1263a0964a7d64fe18fb10fcf957cc08b84",
      "closedAt": "2021-08-19T14:25:08Z",
      "mergedAt": "2021-08-19T14:25:08Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "58106c1415ef25095aabb027bb3446ed1af929a9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 909,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE1ODQ0MTU4",
      "title": "Update core references",
      "url": "https://github.com/httpwg/http2-spec/pull/909",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-19T11:20:36Z",
      "updatedAt": "2021-08-19T14:25:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "609609e332ecd562e156010ef0a0987eb6cb3874",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-5",
      "headRefOid": "91dd2bf31fbdd15c0b49044f1f665b4156663599",
      "closedAt": "2021-08-19T14:25:33Z",
      "mergedAt": "2021-08-19T14:25:32Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "41c93a51692456589f08107742de96e3ace22d6e"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Rapidly moving target.",
          "createdAt": "2021-08-19T14:25:38Z",
          "updatedAt": "2021-08-19T14:25:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 910,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE1OTExNDU1",
      "title": "Use absolute-path",
      "url": "https://github.com/httpwg/http2-spec/pull/910",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Thanks @wtarreau for find this little discrepancy.",
      "createdAt": "2021-08-19T12:58:26Z",
      "updatedAt": "2021-08-19T14:03:54Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "609609e332ecd562e156010ef0a0987eb6cb3874",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "absolute-path",
      "headRefOid": "01e816038951b803e7e33121adc8d2f23de98cf3",
      "closedAt": "2021-08-19T14:03:54Z",
      "mergedAt": "2021-08-19T14:03:54Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "c668acf59521a6590202a2d51a575cef21f120f6"
      },
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "It looks so simple each time you do it for me, Martin :-)\r\nYes that completely solves the problem, thank you! Then I'm going to change my code to relax this now.",
          "createdAt": "2021-08-19T13:46:58Z",
          "updatedAt": "2021-08-19T13:46:58Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0MDMxMzIx",
          "commit": {
            "abbreviatedOid": "01e8160"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-19T14:03:46Z",
          "updatedAt": "2021-08-19T14:03:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 911,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE1OTIzNDIw",
      "title": "ref HTTP \"field lines\"",
      "url": "https://github.com/httpwg/http2-spec/pull/911",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-19T13:12:42Z",
      "updatedAt": "2021-08-19T14:07:22Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "609609e332ecd562e156010ef0a0987eb6cb3874",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-6",
      "headRefOid": "0af7b97de1675bf727a43e359730360744eee472",
      "closedAt": "2021-08-19T14:07:22Z",
      "mergedAt": "2021-08-19T14:07:22Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "e0f4a5658d561512f4bed47057d126499e6725ea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0MDM1NjA4",
          "commit": {
            "abbreviatedOid": "0af7b97"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-19T14:07:17Z",
          "updatedAt": "2021-08-19T14:07:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 914,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE1OTQ5ODg4",
      "title": "extending H2: make ref to settings more generic",
      "url": "https://github.com/httpwg/http2-spec/pull/914",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Which changes\r\n\r\n> Extensions are permitted to use new frame types (Section 4.1), new settings (Section 6.5.2), or new error codes (Section 7).\r\n\r\nto\r\n\r\n> Extensions are permitted to use new frame types (Section 4.1), new settings (Section 6.5), or new error codes (Section 7).",
      "createdAt": "2021-08-19T13:44:51Z",
      "updatedAt": "2021-08-19T14:19:54Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "609609e332ecd562e156010ef0a0987eb6cb3874",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-7",
      "headRefOid": "c92b68d78f3f19d72c68091b1ffed0197e322be9",
      "closedAt": "2021-08-19T14:19:10Z",
      "mergedAt": "2021-08-19T14:19:10Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9206ea03af55c551b50f47f5eae15b828f22fec1"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The new reference is to the frame type (not the settings themselves), so I might have preferred the original, but I don't mind.  The section is about more than the frame anyway.",
          "createdAt": "2021-08-19T14:19:38Z",
          "updatedAt": "2021-08-19T14:19:54Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0MDMzMDI0",
          "commit": {
            "abbreviatedOid": "c92b68d"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-19T14:05:09Z",
          "updatedAt": "2021-08-19T14:05:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 918,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2MzQ1ODA0",
      "title": "Just one missing title case flag name",
      "url": "https://github.com/httpwg/http2-spec/pull/918",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Closes #917.",
      "createdAt": "2021-08-20T00:20:13Z",
      "updatedAt": "2021-08-20T14:21:03Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "41c93a51692456589f08107742de96e3ace22d6e",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "flag",
      "headRefOid": "129fc70f0cfeae14da1d462c1d440514c676dfad",
      "closedAt": "2021-08-20T10:17:41Z",
      "mergedAt": "2021-08-20T10:17:41Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "5e0cca4f4bff4cd88393726e54b3647647aee584"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0ODg1Njk4",
          "commit": {
            "abbreviatedOid": "129fc70"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-20T10:17:37Z",
          "updatedAt": "2021-08-20T10:17:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 919,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2MzQ5Mjcz",
      "title": "More regarding erratum 6309",
      "url": "https://github.com/httpwg/http2-spec/pull/919",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "We could try to make every statement precise.  We could add \"of the\r\nframes defined in this document\" to a bunch of places.  Or we could make\r\na (better) blanket statement.  That is what this does.\r\n\r\nCloses #915.",
      "createdAt": "2021-08-20T00:30:18Z",
      "updatedAt": "2021-08-23T01:28:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "41c93a51692456589f08107742de96e3ace22d6e",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "just-these",
      "headRefOid": "2a72a3a9b2bc60c0ac9689fc3f4a4f9056c03225",
      "closedAt": "2021-08-23T01:28:27Z",
      "mergedAt": "2021-08-23T01:28:27Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6d400b48c087afae1a839c72d3a760bc1158c855"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0ODg1Mzc2",
          "commit": {
            "abbreviatedOid": "2a72a3a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think this is fine.",
          "createdAt": "2021-08-20T10:17:10Z",
          "updatedAt": "2021-08-20T10:17:10Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1MDc4NjU1",
          "commit": {
            "abbreviatedOid": "2a72a3a"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-20T14:18:06Z",
          "updatedAt": "2021-08-20T14:18:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 920,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2NjI2MTEw",
      "title": "Clarify who may send PUSH_PROMISE frames",
      "url": "https://github.com/httpwg/http2-spec/pull/920",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Covers #878 in tandem with #879.",
      "createdAt": "2021-08-20T10:29:47Z",
      "updatedAt": "2021-09-06T04:28:05Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5e0cca4f4bff4cd88393726e54b3647647aee584",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-push-promise-from-client",
      "headRefOid": "93711fdf0ee50c856b210c327e04af78a043a9d8",
      "closedAt": "2021-09-06T04:28:05Z",
      "mergedAt": "2021-09-06T04:28:05Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5741b83737f85361ae09d0ca71cdf4c5de89c5fe"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 921,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2NjUyMDk0",
      "title": "add missing parentheses",
      "url": "https://github.com/httpwg/http2-spec/pull/921",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-20T11:12:23Z",
      "updatedAt": "2021-08-22T12:58:35Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5e0cca4f4bff4cd88393726e54b3647647aee584",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-8",
      "headRefOid": "a5381f9e73611601114aae3ae4adb91505c3d5ba",
      "closedAt": "2021-08-22T12:58:35Z",
      "mergedAt": "2021-08-22T12:58:35Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "94922065ebe90d8aa517df4c6ddb4c7ffbb8a3d6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NTc0NjQ4",
          "commit": {
            "abbreviatedOid": "a5381f9"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-22T12:58:24Z",
          "updatedAt": "2021-08-22T12:58:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 922,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2NjY4MDA2",
      "title": "fix punctuation",
      "url": "https://github.com/httpwg/http2-spec/pull/922",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-20T11:38:53Z",
      "updatedAt": "2021-08-22T12:57:51Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5e0cca4f4bff4cd88393726e54b3647647aee584",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-9",
      "headRefOid": "93962257f883915028ca49f87ec987ea3cb33169",
      "closedAt": "2021-08-22T12:57:51Z",
      "mergedAt": "2021-08-22T12:57:51Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "7d433af155879928fe27159df3bf5e7cbeb8702c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NTc0NTU5",
          "commit": {
            "abbreviatedOid": "9396225"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-22T12:57:40Z",
          "updatedAt": "2021-08-22T12:57:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 923,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2NjczNTk4",
      "title": "fix xref",
      "url": "https://github.com/httpwg/http2-spec/pull/923",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "currently comes out as:\r\n\r\n >  For reference, an HTTP/1.1 Section 3.2 of request target [HTTP11] in ...",
      "createdAt": "2021-08-20T11:48:51Z",
      "updatedAt": "2021-08-22T13:01:13Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5e0cca4f4bff4cd88393726e54b3647647aee584",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-10",
      "headRefOid": "5928ae60b361922e7592c7d868f5ff29782c85b3",
      "closedAt": "2021-08-22T13:01:13Z",
      "mergedAt": "2021-08-22T13:01:13Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "9f7525f4d73932fdabd3caccd0f5032306df1f8b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NTc0ODUx",
          "commit": {
            "abbreviatedOid": "5928ae6"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-22T13:00:59Z",
          "updatedAt": "2021-08-22T13:00:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 924,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2NjgzNzgz",
      "title": "fix broken link",
      "url": "https://github.com/httpwg/http2-spec/pull/924",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-20T12:06:03Z",
      "updatedAt": "2021-08-22T13:01:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5e0cca4f4bff4cd88393726e54b3647647aee584",
      "headRepository": "reschke/http2-spec",
      "headRefName": "patch-11",
      "headRefOid": "5de1feba66fb63dac06351a10dfb003b5c433253",
      "closedAt": "2021-08-22T13:01:39Z",
      "mergedAt": "2021-08-22T13:01:39Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "b3d02e07ea945af64709e73728b6e235fec51af1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NTc0ODk0",
          "commit": {
            "abbreviatedOid": "5de1feb"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-22T13:01:31Z",
          "updatedAt": "2021-08-22T13:01:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 925,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2NzgzMDkw",
      "title": "Lowercase \"flag\" when not in frame artwork",
      "url": "https://github.com/httpwg/http2-spec/pull/925",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I believe the rule in #918 is supposed to be that the layout diagrams use \"FOO Flag\", while the prose uses \"the FOO flag.\"  If so, this lowercases some other instances.",
      "createdAt": "2021-08-20T14:30:18Z",
      "updatedAt": "2021-08-23T01:27:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5e0cca4f4bff4cd88393726e54b3647647aee584",
      "headRepository": "MikeBishop/http2v2",
      "headRefName": "fun_with_flags",
      "headRefOid": "caf877ec2c32b0bfe41160ac224128909efe0fe8",
      "closedAt": "2021-08-23T01:27:57Z",
      "mergedAt": "2021-08-23T01:27:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "516cf2659f718653011ce3e24ca287b88f409029"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 926,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2Nzg2NzM4",
      "title": "Contains is not set",
      "url": "https://github.com/httpwg/http2-spec/pull/926",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Fixes #916.",
      "createdAt": "2021-08-20T14:35:21Z",
      "updatedAt": "2021-08-23T01:28:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5e0cca4f4bff4cd88393726e54b3647647aee584",
      "headRepository": "MikeBishop/http2v2",
      "headRefName": "contains",
      "headRefOid": "26a5431d4a48dddec9382887f0ebcb2b93d52525",
      "closedAt": "2021-08-23T01:28:11Z",
      "mergedAt": "2021-08-23T01:28:11Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0faf48c2c3dd59d86a7ff94c6e1217f52d3c9a95"
      },
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Going to let @martinthomson have a look at this as well.",
          "createdAt": "2021-08-22T13:03:21Z",
          "updatedAt": "2021-08-22T13:03:21Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NTc1MDE2",
          "commit": {
            "abbreviatedOid": "26a5431"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-22T13:03:04Z",
          "updatedAt": "2021-08-22T13:03:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 928,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE2OTM3MTIx",
      "title": "Padding text on HEADERS",
      "url": "https://github.com/httpwg/http2-spec/pull/928",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Fixes #927 by copying the text from DATA",
      "createdAt": "2021-08-20T18:57:57Z",
      "updatedAt": "2021-08-23T01:24:32Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5e0cca4f4bff4cd88393726e54b3647647aee584",
      "headRepository": "MikeBishop/http2v2",
      "headRefName": "headers_padding",
      "headRefOid": "469ea7b2b9b620417454998701a92f46263c2e58",
      "closedAt": "2021-08-23T01:24:32Z",
      "mergedAt": "2021-08-23T01:24:31Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a6ee220ffcc64de19ca6235e1a03e77989fc51f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NTc1MTcw",
          "commit": {
            "abbreviatedOid": "469ea7b"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM, will let @martinthomson take a read as well.",
          "createdAt": "2021-08-22T13:04:58Z",
          "updatedAt": "2021-08-22T13:04:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 930,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3MDA0MTE5",
      "title": "Nits through S7",
      "url": "https://github.com/httpwg/http2-spec/pull/930",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Nits through Section 7; more to follow.",
      "createdAt": "2021-08-20T21:19:04Z",
      "updatedAt": "2021-08-23T01:27:28Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5e0cca4f4bff4cd88393726e54b3647647aee584",
      "headRepository": "MikeBishop/http2v2",
      "headRefName": "nits",
      "headRefOid": "9d6eb96811f9f0f5ae223f49d466ab24e068ebe7",
      "closedAt": "2021-08-23T01:27:28Z",
      "mergedAt": "2021-08-23T01:27:28Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "12d1af871e15aaca84b9196bfbe27ce78bd5af7c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1Mzk0Mjcy",
          "commit": {
            "abbreviatedOid": "7f887c9"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-20T21:21:15Z",
          "updatedAt": "2021-08-20T21:21:15Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I'm also ambivalent about quoting \"closed\" here, since we usually only quote when talking about 'caused the stream to enter the \"closed\" state'",
              "createdAt": "2021-08-20T21:21:15Z",
              "updatedAt": "2021-08-20T21:21:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NTc1NDI0",
          "commit": {
            "abbreviatedOid": "7f887c9"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-22T13:07:31Z",
          "updatedAt": "2021-08-22T13:08:17Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Why not replace \u2018become \u201cclosed\u201d\u2019 with \u2018caused the stream to enter the \u201cclosed\u201d state\u2019 directly? It\u2019s more verbose but it has the advantage of being unambiguous about what \u2018become \u201cclosed\u201d\u2019 means.",
              "createdAt": "2021-08-22T13:07:31Z",
              "updatedAt": "2021-08-22T13:08:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NjQ2NjEz",
          "commit": {
            "abbreviatedOid": "7f887c9"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'll make that one change.",
          "createdAt": "2021-08-23T01:26:41Z",
          "updatedAt": "2021-08-23T01:27:16Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\n              the frames that caused the stream to enter the \"closed\" state and treat receipt of any frame other\r\n```",
              "createdAt": "2021-08-23T01:26:41Z",
              "updatedAt": "2021-08-23T01:27:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 931,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3NDIxOTI3",
      "title": "Address some WGLC comments from @reschke",
      "url": "https://github.com/httpwg/http2-spec/pull/931",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-23T01:18:44Z",
      "updatedAt": "2021-08-23T11:54:41Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "b3d02e07ea945af64709e73728b6e235fec51af1",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "julian-wglc",
      "headRefOid": "284b78843bfc9949fd11ffde297673417dce88c3",
      "closedAt": "2021-08-23T11:54:40Z",
      "mergedAt": "2021-08-23T11:54:40Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "f3d27e7fbb7cb3f4a973cfa4da47d4169b812fd6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2MDMwMzE1",
          "commit": {
            "abbreviatedOid": "284b788"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-23T11:54:31Z",
          "updatedAt": "2021-08-23T11:54:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 932,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3NDI4NDc4",
      "title": "h2c really isn't covered by security promises",
      "url": "https://github.com/httpwg/http2-spec/pull/932",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... or the analysis in the security considerations.\r\n\r\nWe had to walk a more careful path when RFC 7540 was published, so we were careful to legitimize h2c.  In the years since, things have changed and we can be more direct.  This isn't a \"don't use h2c\", but more of a disclaimer as far as security goes.",
      "createdAt": "2021-08-23T01:40:34Z",
      "updatedAt": "2021-08-23T11:53:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "6d400b48c087afae1a839c72d3a760bc1158c855",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "h2c-super-awkward",
      "headRefOid": "500c4edf6edcdef691ba75564a15fc43473a7a66",
      "closedAt": "2021-08-23T11:53:37Z",
      "mergedAt": "2021-08-23T11:53:37Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "aa41636786e2823a094a0e792c6542ae0ef6fb97"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2MDI5NTcw",
          "commit": {
            "abbreviatedOid": "500c4ed"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-23T11:53:32Z",
          "updatedAt": "2021-08-23T11:53:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 933,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3NDc2ODk1",
      "title": "Avoid mention of Alt-Svc for h2c",
      "url": "https://github.com/httpwg/http2-spec/pull/933",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As stated in #903, it's misleading and contradictory.  Better to\r\nconcentrate on configuration for this, as that is the common usage.\r\n\r\nCloses #903.",
      "createdAt": "2021-08-23T04:08:01Z",
      "updatedAt": "2021-08-23T11:52:32Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0b330a9c145e2e91d6a2c30cda24747612562926",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "avoid-alt-svc-h2c",
      "headRefOid": "bdf7eecac3d69d9e89b1802434f434eb6c212176",
      "closedAt": "2021-08-23T11:52:32Z",
      "mergedAt": "2021-08-23T11:52:32Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "a83a2bfa37c6948d0f1941eb04c4beb057780124"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2MDI4NzI3",
          "commit": {
            "abbreviatedOid": "bdf7eec"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-23T11:52:27Z",
          "updatedAt": "2021-08-23T11:52:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 934,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3NDc4NDk5",
      "title": "Ciphers were listed in 2015.",
      "url": "https://github.com/httpwg/http2-spec/pull/934",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #897.",
      "createdAt": "2021-08-23T04:10:51Z",
      "updatedAt": "2021-08-24T11:17:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0b330a9c145e2e91d6a2c30cda24747612562926",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "cipher-list",
      "headRefOid": "50e1e3608cf3d7c2567021cc43befa7f4e183abf",
      "closedAt": "2021-08-24T11:17:59Z",
      "mergedAt": "2021-08-24T11:17:59Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "56ab575099e34b80c7ae5d6dfb29cf2124f89e69"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2MDI3NzA5",
          "commit": {
            "abbreviatedOid": "50e1e36"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-23T11:51:10Z",
          "updatedAt": "2021-08-23T11:51:44Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Presumably this was meant to be `excludes`, not `includes`, and we just missed it?",
              "createdAt": "2021-08-23T11:51:10Z",
              "updatedAt": "2021-08-23T11:51:44Z"
            },
            {
              "originalPosition": 15,
              "body": "And should this say \u201cTLS null stream or block\u201d?",
              "createdAt": "2021-08-23T11:51:40Z",
              "updatedAt": "2021-08-23T11:51:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2Nzg4NDU0",
          "commit": {
            "abbreviatedOid": "50e1e36"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-24T05:15:19Z",
          "updatedAt": "2021-08-24T05:15:19Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Includes is correct.  The negation comes later.",
              "createdAt": "2021-08-24T05:15:19Z",
              "updatedAt": "2021-08-24T05:15:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2NzkxMzE0",
          "commit": {
            "abbreviatedOid": "50e1e36"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-24T05:17:28Z",
          "updatedAt": "2021-08-24T05:17:28Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "\"null\" (that is, identity or `f : x -> x`) is a type of \"cipher\" that some suites offer. Scare quotes on \"cipher\" are necessary because it's exactly as bad as it sounds.\r\n\r\n\"stream\", and \"block\" are also types of cipher.  RC4 is an example of the former, AES CBC modes the latter.",
              "createdAt": "2021-08-24T05:17:28Z",
              "updatedAt": "2021-08-24T05:17:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3MTAxODgz",
          "commit": {
            "abbreviatedOid": "50e1e36"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-24T11:16:21Z",
          "updatedAt": "2021-08-24T11:16:21Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Wow this text is unclear. What it\u2019s saying is that AEAD is a kind of cipher distinct from stream, block, and null? Ok I guess.",
              "createdAt": "2021-08-24T11:16:21Z",
              "updatedAt": "2021-08-24T11:16:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3MTAyOTk4",
          "commit": {
            "abbreviatedOid": "50e1e36"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-24T11:17:48Z",
          "updatedAt": "2021-08-24T11:17:48Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "It comes earlier, as it turns out, but great.",
              "createdAt": "2021-08-24T11:17:48Z",
              "updatedAt": "2021-08-24T11:17:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3MTAzMDg5",
          "commit": {
            "abbreviatedOid": "50e1e36"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-24T11:17:54Z",
          "updatedAt": "2021-08-24T11:17:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 935,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3NDg1Njcw",
      "title": "Drop redundancy in :authority translation",
      "url": "https://github.com/httpwg/http2-spec/pull/935",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Closes #912.",
      "createdAt": "2021-08-23T04:25:56Z",
      "updatedAt": "2021-08-25T02:41:29Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0b330a9c145e2e91d6a2c30cda24747612562926",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "redundant-authority",
      "headRefOid": "57cdbbada1d2d95130683a527d321d35c29816e3",
      "closedAt": "2021-08-23T11:49:11Z",
      "mergedAt": "2021-08-23T11:49:11Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "8ac78b15ccfec8176eb877c62bce601f4d38c9a2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2MDI2MDYz",
          "commit": {
            "abbreviatedOid": "57cdbba"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-23T11:49:05Z",
          "updatedAt": "2021-08-23T11:49:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 936,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3NDk5ODQw",
      "title": "Move field validation text around",
      "url": "https://github.com/httpwg/http2-spec/pull/936",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This just moves the reference to the canonical definition of what is\r\nvalid up to the top of the section.  That's the canonical text.\r\n\r\nThis emphasizes the point that HTTP/2 is placing *additional*\r\nrequirements on endpoints with respect to validation.\r\n\r\nThis does not really fix #902 in the sense that it leaves validation of\r\nDQUOTE and friends to the core semantics implementations.\r\n\r\nNote that any \"MAY\" requirement for rejecting a messaging can have the\r\ndesired effect on those generating those messages: if an endpoint puts\r\nDQUOTE in a field name, that message will have little hope of being\r\nsuccessfully handled.\r\n\r\nCloses #902.",
      "createdAt": "2021-08-23T05:01:48Z",
      "updatedAt": "2021-09-01T13:00:23Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5d009dfde16a17e5b6f132f8c4860c042294dd23",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "field-validation-mkIII",
      "headRefOid": "b06de4e0cb18946866bc4e199f429d579cab434e",
      "closedAt": "2021-09-01T12:15:25Z",
      "mergedAt": "2021-09-01T12:15:25Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "bd46e3e708e50617a59f94e2a15fe8a05a5eef17"
      },
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My 2 cents: it seems that there's disagreement about whether the validity requirements from the core specs need to be repeated.\r\n\r\nOf course, DRY. Semantics currently says:\r\n\r\n> A sender MUST NOT generate protocol elements that do not match the grammar defined by the corresponding ABNF rules. Within a given message, a sender MUST NOT generate protocol elements or syntax alternatives that are only allowed to be generated by participants in other roles (i.e., a role that the sender does not have for that message).\r\n\r\nThe issue here is that H/2 actually *extends* that ABNF (without doing that as ABNF), which makes the link somewhat weak.\r\n\r\nMaybe formally (==ABNF) defining \"h2-fieldname\" as \"lowercase-http-fieldname / h2-pseudofield\" would be helpful.\r\n\r\n",
          "createdAt": "2021-08-23T08:35:48Z",
          "updatedAt": "2021-08-23T08:38:15Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So the proposal would be:\r\n\r\n~~~\r\n  h2-fieldname   = 1*fchar / \":\" 1*fchar\r\n\r\n  fchar          = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\r\n                 / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n                 / DIGIT / %x61-7A\r\n                 ; like \"token\" in [HTTP], expect for uppercase ALPHA\r\n~~~",
          "createdAt": "2021-08-23T08:51:21Z",
          "updatedAt": "2021-08-23T08:51:21Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Julian,\n\nYES PLEASE for ABNF (yeah I know that is editorial, but it makes it so much\nmore concise and exact).\n\nI think everybody agrees that a h2 impl MUST NOT generate invalid HTTP\nfields.   The differences appear on the receiving side as the current\ndocument allows that h2 impls MAY accept some invalid HTTP fields.  I've\nnever understood the use-case for this?\n\ncheers\n\n\nOn Mon, 23 Aug 2021 at 18:51, Julian Reschke ***@***.***>\nwrote:\n\n> So the proposal would be:\n>\n>   h2-fieldname   = 1*fchar / \":\" 1*fchar\n>\n>   fchar          = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n>                  / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n>                  / DIGIT / %x61-7A\n>                  ; like \"token\" in [HTTP], expect for uppercase ALPHA\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/httpwg/http2-spec/pull/936#issuecomment-903569906>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAARJLIYEPII5ZHALGRDC3DT6IDZHANCNFSM5CTYYUKA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&utm_campaign=notification-email>\n> .\n>\n\n\n-- \nGreg Wilkins ***@***.***> CTO http://webtide.com\n",
          "createdAt": "2021-08-23T08:56:42Z",
          "updatedAt": "2021-08-23T08:56:42Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, AFAIU, we do not have a hard requirement on recipients in the base spec (and HTTP/1 either):\r\n\r\n> Unless noted otherwise, a recipient MAY attempt to recover a usable protocol element from an invalid construct. \r\n\r\nSo this seems consistent with what the base spec says.",
          "createdAt": "2021-08-23T09:04:45Z",
          "updatedAt": "2021-08-23T09:04:45Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "I have no objection to adding ABNF to define H2\u2019s fields. I would say that we should keep the prose, as the prose does a good job of expressing the why of our choices: for example, explaining the expectations around lowercase field names.\r\n\r\nHowever, I agree with @reschke and my past self that we do not need add a \u201cMUST validate\u201d section.",
          "createdAt": "2021-08-23T11:47:40Z",
          "updatedAt": "2021-08-23T11:47:40Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Thanks Martin. I'm having a bit of difficulty parsing this sentence: \"These checks are the minimum necessary to avoid accepting messages that might avoid security checks\". Maybe \"These checks are the minimum necessary to forward or process the message as an HTTP message\" ?\r\n\r\nAlso \"A recipient can treat a message ...\" why not \"s/can/SHOULD\" ? I think that should be enough to solve it.",
          "createdAt": "2021-08-24T03:58:28Z",
          "updatedAt": "2021-08-24T03:58:28Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "My objection to ABNF is the same as before: we risk that being mistaken as defining what is valid.  Something that meets that ABNF is not valid.  The point of this section is to define what the absolute minimum is with respect to any form of message handling.  Our attempt to require more complete validation roundly failed, so this is where we end up.\r\n\r\nWilly, I've tried again with the wording.  But I want to avoid normative statements regarding the core semantics documents.  Those already define what a receiver might do.  Those requirements aren't strict enough, at least in the \"acting as a tunnel\" case, for HTTP/2.  The point of this text is to point to HTTP and note that these checks won't guarantee you a valid message, but to allow those implementations that do apply those checks the option of using HTTP/2 signaling (reset streams) to indicate the error condition.  I don't think that needs a SHOULD, but I'm OK with adding it.",
          "createdAt": "2021-08-24T04:54:37Z",
          "updatedAt": "2021-08-24T04:54:37Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The point of this section is to define what the absolute minimum is with respect to any form of message handling.\r\n\r\n@martinthomson I think this is a flawed approach.  By only defining a subset of invalid fields we create a set of fields that are not valid HTTP but may be valid H2 fields (by merit of being not defined as  minimally invalid - just describing it is convoluted).  \r\n\r\nI have yet to see any use-case for a field to be valid in H2 but invalid in HTTP?  #902 has identified that the example we have frequently used for such a field (double quote in name) will be a concern if passed onto CGI scripting language.   So we have no known uses for such fields and security concerns about at least some of them.     So why not just define valid H2 fields as a proper subset of valid HTTP fields plus pseudo fields?\r\n\r\n\r\n>  we risk that being mistaken as defining what is valid\r\n\r\nWe can avoid defining what is valid by referencing other specifications (which do use ABNF).  As #902 suggests a field should be valid in H2  if and only if it is:\r\n```\r\n( valid-HTTP-field || pseudo-field ) && lower-case-name\r\n```\r\nI.e. the set of valid H2 fields is a proper subset of valid HTTP fields plus pseudo fields.\r\n\r\n\r\n\r\n",
          "createdAt": "2021-08-24T05:23:04Z",
          "updatedAt": "2021-08-24T05:23:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That is what RFC 7540 did.  That failed.  We can revert all of these changes (aside from editorial tweaks) and go back to what the previous version said, but would that be any more successful?",
          "createdAt": "2021-08-24T05:36:20Z",
          "updatedAt": "2021-08-24T05:36:20Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> That is what RFC 7540 did. That failed. We can revert all of these changes (aside from editorial tweaks) and go back to what the previous version said, but would that be any more successful?\r\n\r\nI take it that you consider RFC7540 failed because of https://github.com/httpwg/http2-spec/issues/815 which ultimately references https://github.com/httpwg/http-core/issues/683.  These indicate that there are cases of CTL characters in field values observed in the wild.           \r\n\r\nThe response has been to relax the validation on fields so much that now security problems have been created.    I think this is because the minimal validation approach is essentially trying to be secure with a black list (in this case a list of known bad characters).  It is far more secure to use a white list approach (i.e what  is the minimal character set required to carry the HTTP semantic ).\r\n\r\nI don't really understand why no attempt was made to enforce the previous specification - I really hope it was not because of who was violating.  But if enforcing the spec is seen as impossible, then rather than just leave the validity of fields somewhat undefined, surely a better approach would have been to make some explicit exclusions to allow just the needed control characters in field values.    Or perhaps field names must be valid HTTP field names (or psuedo and lowercase), but h2 is more relaxed on field values?  Deserting the field and not actually precisely defining what is valid just seams like an inviation to create more special cases and more unforseen security problems.\r\n\r\n\r\n",
          "createdAt": "2021-08-24T06:18:32Z",
          "updatedAt": "2021-08-24T06:18:32Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "The real reason for this situation is that we all know that what is extracted from H2 then HPACK will need further processing and that this processing may already be fooled by the contents extracted from there. In addition, H2 being a standard multiplexed protocol on top of TCP is abused by some not really interested in the HTTP aspect of it (e.g. https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md) , putting intermediaries at risk of breakage and giving them even more motivation for dropping essential controls and becoming insecure.\r\n\r\nWhile I would prefer a wording directly referencing the HTTP spec, like Martin I'm convinced that some will simply not even read it.\r\n\r\nSo I think the proposed addition here can be welcome provided that it *does not* use the terms \"valid\" or anything else that might make implementations think \"OK that's sufficient\", and that presenting the root cause and the risk remains useful to convince those who are hesitating (or at least give them good arguments for *not* disabling the tests).\r\n\r\nLet's try again:\r\n```\r\n   HTTP/2 and HPACK being length-delimited, they present no restriction to the sets of characters they may convey, exposing\r\n   recipients to character sets that may result in incorrect parsing or mismatched translation to other HTTP versions.\r\n   At the very least, before attempting to parse these fields as HTTP header fields or forwarding them, any implementation\r\n   SHOULD perform the following safety checks, which are not sufficient to declare the fields as valid HTTP fields, but are\r\n   necessary to protect HTTP parsing. [HTTP 5.1/5.5] defines what is valid for HTTP.\r\n```\r\n\r\nIt's not far from what Martin wrote in the last update, it just tries to better present the context and mention that this has to be done *before* HTTP parsing.\r\n\r\nAnd I'd like to use `SHOULD` for treat as malformed.",
          "createdAt": "2021-08-24T07:11:56Z",
          "updatedAt": "2021-08-24T07:11:56Z"
        },
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't really understand why no attempt was made to enforce the previous specification - I really hope it was not because of who was violating\r\n\r\nNo attempt was made to enforce the previous specification because the IETF and httpwg have no enforcement mechanism. What could have been done to enforce it?\r\n\r\nW.r.t. this patch, I agree with @martinthomson that it seems that the conversation has come full-circle to where we were with RFC 7540. In that circle I think the wording here is closest to what I\u2019d want: a clear list of specific rules with a note that these rules are a lower bound on processing, not an upper bound.",
          "createdAt": "2021-08-24T11:15:17Z",
          "updatedAt": "2021-08-24T11:15:17Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\r\n> So I think the proposed addition here can be welcome provided that it _does not_ use the terms \"valid\" or anything else that might make implementations think \"OK that's sufficient\", and that presenting the root cause and the risk remains useful to convince those who are hesitating (or at least give them good arguments for _not_ disabling the tests).\r\n\r\nI agree that misunderstanding the safety of the current spec is a real problem, but I don't think avoiding the word \"valid\" will help.    Many developers will naturally think that a HTTP/2 specification would only support valid HTTP fields.      You can't fix this in the text because that assumption has already been made in existing software and will be made again without reading the text.  Even those that do read the text might get lost in the fine distinctions we are trying to make here between a field that is valid and one that may not be invalid. \r\n\r\n>    At the very least, before attempting to parse these fields as HTTP header fields or forwarding them, any implementation\r\n>    SHOULD perform the following safety checks, which are not sufficient to declare the fields as valid HTTP fields, but are\r\n>    necessary to protect HTTP parsing. [HTTP 5.1/5.5] defines what is valid for HTTP.\r\n\r\nWhat is a safe field? If the safety checks are not sufficient for consuming HTTP semantics, what are H2 fields safe for?  What layers can consume them without extra validation?    Why are consumers protected against CR, LF and ':' attacks but they are not safe from DQUOTE ones?    Fields passing these safety checks cannot not be passed to any existing layers that are written with the assumption that they will only receive valid HTTP fields and new user will wrongly assume that H2 safety checks are at least as good as those in HTTP/1.\r\n\r\nRFC7540 said that an imple MUST be invalid HTTP fields as malformed, but some impls ignored that.   So how about we say that impls SHOULD treat invalid HTTP fields as malformed and then define the specific circumstances in which consenting peers can exchange invalid HTTP fields, perhaps indicating as much with a SETTING or new psuedo header that is needed to specifically allow h2 framing to be used for non-HTTP semantics?     Yeah I know some will say \"you can't force those users of invalid HTTP fields to do something special\".  So instead we make all users of valid HTTP fields need to do extra validation else risk being insecure?\r\n\r\nAnyway,  sorry for re-re-re-re-litigating.   My live-with criteria is that an implementation MAY treat invalid HTTP fields as malformed, so in that sense this PR is fine.... it just doesn't fix #902 (and Martin says as much), so this is really just an editorial PR unrelated to #902.\r\n\r\n",
          "createdAt": "2021-08-24T14:46:26Z",
          "updatedAt": "2021-08-24T14:46:26Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Greg, I'm not suggesting that an H2 field is safe, but \"safe to be parsed as HTTP\". The main reason is that some basic HTTP components have been broken into pieces in H2 and need to be reassembled before being processed by HTTP. :scheme, :authority, :path are two such examples. In HTTP together they're called a URI. Cookie is another one. Some H2-specific issues may happen at the H2 layer that are impossible by definition in HTTP since HTTP/1. In my opinion this is the trouble that is being attempted to be addressed here. And yes it turns out that it diverges a bit from #902 though it can address it if it mentions that consumed fields are subject to these checks.\r\n\r\nFor sure, if we enforce strict validation of all H2 fields against HTTP ones it will address everything, except that we've already seen that implementors are not keen on switching between many specs at once and need some guidance. It's a delicate balance. Julian proposed to duplicate the ABNF there, I thought it was a good idea. And if we don't want to make it look normative we could write the minimum elements as a reminder.\r\n",
          "createdAt": "2021-08-24T16:13:39Z",
          "updatedAt": "2021-08-24T16:13:39Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm not suggesting that an H2 field is safe, but \"safe to be parsed as HTTP\".\r\n\r\nBut the spec currently as currently written and after this PR is not \"safe to be parsed as HTTP\".   If that parsing is done by a scripting language then DQUOTE and other control characters that are current permitted by the spec may well not be safe.  To take your example of a cookie header, how can you be sure that code which is currently safely the cookie header value (or set-cookie value) will be robust in the face of control characters within that value?\r\n\r\nIsn't the set of h2 fields that are \"safe to be parsed as HTTP\" a true subset of valid HTTP fields?  What extra characters can we allow into fields that are not valid HTTP that we are sure will be parsed safely as valid HTTP by all existing layers currently running on top of H2 implementations?\r\n\r\nThe intent of these changes have been to normalize the practise in the wild of h2 framing being used to carry control characters in fields for non-HTTP purposes.    But if we nomarlize that, we are putting in jeopardy all existing code written to HTTP semantics that may not even be aware of the version of HTTP carrying the fields that they are interpretting.   \r\n\r\nSurely there is some other way to allow h2 framing to be used to carry non-HTTP streams without putting all existing HTTP code at risk?  If we don't want developers abusing the current protocol, then give them a proper solution for their use-case rather than corrupt the existing primary use-case.\r\n",
          "createdAt": "2021-08-25T00:33:04Z",
          "updatedAt": "2021-08-25T00:33:04Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "> > I'm not suggesting that an H2 field is safe, but \"safe to be parsed as HTTP\".\r\n> \r\n> But the spec currently as currently written and after this PR is not \"safe to be parsed as HTTP\". If that parsing is done by a scripting language then DQUOTE and other control characters that are current permitted by the spec may well not be safe.\r\n\r\nThey should represent the exact same level of risk as having the same code parse HTTP/1.\r\nBut actually that might in fact be what we're all seeking without precisely realizing it, which is making sure an H2 message can be at least reconstructed as an H1 message that is safe to parse. The rules on CR/LF precisely have always been a concern to all of us for this.\r\n\r\n> To take your example of a cookie header, how can you be sure that code which is currently safely the cookie header value (or set-cookie value) will be robust in the face of control characters within that value?\r\n\r\nSame as above.\r\n\r\n> Isn't the set of h2 fields that are \"safe to be parsed as HTTP\" a true subset of valid HTTP fields? What extra characters can we allow into fields that are not valid HTTP that we are sure will be parsed safely as valid HTTP by all existing layers currently running on top of H2 implementations?\r\n\r\nThis is always difficult to say if we'd try to extend what HTTP permits. However we're certain that some will almost always be dangerous along a chain or cause parsing issues even inside implementations.\r\n\r\n> The intent of these changes have been to normalize the practise in the wild of h2 framing being used to carry control characters in fields for non-HTTP purposes. But if we nomarlize that, we are putting in jeopardy all existing code written to HTTP semantics that may not even be aware of the version of HTTP carrying the fields that they are interpretting.\r\n\r\nNot exactly. This is actually the current situation probably because some consider that the effort needed to comply with the rules in semantics is too high for little value the this level. This is something I can understand. For example in haproxy we have a semantics layer which performs a lot of controls, deduplicates content-length, checks Host against `:authority` etc. But at the lowest level it is difficult to enforce such checks when you're just converting header lists to internal messages. However we already have the NUL/CR/LF checks that allows the upper layer parser to proceed (the initial implementation used to build an H1 message but that's no longer the case).\r\n\r\nThus maybe we should replace all this with an approach centered around this tricky HTTP/1 translation, which also does not infer how implementations should work internally nor suggest to put anything non-HTTP inside HEADERS frames:\r\n```\r\nHTTP/2 and HPACK being length-delimited, they present no restriction to the sets of\r\ncharacters they may convey, exposing recipients to character sets that may result in\r\nincorrect parsing or mismatched translation to other HTTP versions. Implementations\r\nwhich reassemble elements as an HTTP/1-like message before processing semantics are\r\nparticularly at risk and MUST perform the following safety checks before proceeding:\r\n  - CTL, colon, upper case, 0x80-0xFF in header field names\r\n  - NUL, CR, LF, leading/trailing LWS in field values\r\n  - non-token chars in :method\r\n  - chars out of alnum/+/- in :scheme\r\n  - NUL,CR,LF,space in :authority\r\n  - :path not starting with '/' or '*'\r\nThese safety checks are the bare minimum that permits a reconstructed message to be\r\nsafely submitted to a compliant HTTP/1 parser but are not sufficient to declare the\r\nfields as valid HTTP fields, which is covered by [HTTP 5.1/5.5]. Implementations\r\nSHOULD reject messages carrying invalid HTTP fields as malformed.\r\n```\r\n\r\n> Surely there is some other way to allow h2 framing to be used to carry non-HTTP streams without putting all existing HTTP code at risk? If we don't want developers abusing the current protocol, then give them a proper solution for their use-case rather than corrupt the existing primary use-case.\r\n\r\nJust to be clear, I really *do not* want to see HEADERS frame being abused to carry non-HTTP because I know pretty well what it's like to be an intermediary developer whose product is pointed the finger at for breaking stuff when inserted in a working but non-compliant chain. This is also why I would like to see the SHOULD reject as malformed.\r\n",
          "createdAt": "2021-08-25T03:00:36Z",
          "updatedAt": "2021-08-25T03:04:13Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> HTTP/2 and HPACK being length-delimited, they present no restriction to the sets of\r\n> characters they may convey, exposing recipients to character sets that may result in\r\n> incorrect parsing or mismatched translation to other HTTP versions. Implementations\r\n> which reassemble elements as an HTTP/1-like message before processing semantics are\r\n> particularly at risk and MUST perform the following safety checks before proceeding:\r\n\r\nI like this paragraph and I'm totally OK with a spec that has conditions like \"implementations which reassemble elements as an HTTP/1-like message before ....\"\r\n\r\nHowever, it is not just HTTP/1 as there are many HTTP semantic layers that are unaware of the protocol version, so it needs to be any impl that represents streams as HTTP messages must do specific validation whilst the h2 \"abusers\" are free use streams to the limites of HPACK capabilities, so long as they don't represent the results as HTTP messages - either on the wire or to layers above.\r\n\r\nFurthermore an impl that is representing HTTP messages cannot just do the minimal safety checks you listed. It MUST validate the fields against the general syntax of HTTP fields. For example, if I provide a h2 implementation of the Java [HttpExchange](https://docs.oracle.com/javase/8/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/HttpExchange.html) class, then my impl MUST validate the fields against HTTP syntax.    But if instead, I use my h2 impl to implement a gRPC API, then I'm under no such obligation as I'm not representing HTTP messages.\r\n\r\nMore over, it is only the protocol impl that can do this validation. Another example is that my server is used on PAAS platforms where the application was deployed decades ago and the source code is probably lost and the dev team all retired.  The app cannot be redeployed and it certainly cannot be reviewed for how it parses the Cookie header. It's not sufficient for me to switch them from HTTP/1 to H2 and in the process expose those applications to non-valid HTTP headers in HTTP messages I deliver to them.   If the h2 impl is not going to validate the fields are valid HTTP then who is?\r\n\r\nSo how about something like:\r\n```\r\nHTTP/2 and HPACK present few restrictions on the characters they may convey, exposing recipients to character sets that may \r\nresult in incorrect handling or mismatched translation to other HTTP versions.  Implementations which representing streams as HTTP \r\nmessages are particularly at risk and MUST validate the generic syntax of fields as defined in <xref target=\"HTTP\" section=\"5.5\"/>.\r\n```\r\n\r\n\r\n\r\n",
          "createdAt": "2021-08-25T05:56:49Z",
          "updatedAt": "2021-08-25T05:56:49Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "The thing is, stacks that support multiple versions will certainly not implement the full header syntax in each version because that is exactly what ought to be done at the semantics layer and why the HTTP spec was split like this as well. We really have messaging (H1,H2,H3) and semantics. The transport explains how to extract elements from a byte stream and how to encode them into a byte stream. The semantics details their syntax and consistency.\r\n\r\nNUL/CR/LF purely come from the H1 world but H1 was HTTP before H2 existed, so it could be argued that they are legacy limitations that probably affects most stacks. The cookie header splitting is purely H2, and once recombined it must parse correctly according to the semantics definition. But whether your cookie header field comes from H1/H2/H3, it will have to pass through the exact same validity checks.\r\n\r\nWhat is certain is that these HTTP syntax checks must be performed somewhere. But the messaging layer is not always exactly the best place for this. Typically an H1 implementation will not have code to check for embedded LF characters because it's a delimiter, while H2 needs to have explicit check against this.  The rules on the resulting cookie header field format apply after Cookie header reassembly, not before. And this reassembly is specific to the messaging layer which defines how to serialize fields. Last, the generic rules are not sufficient to safely reassemble the pseudo-header fields.\r\n\r\nMaybe in the end we could combine our two parts, starting with yours to indicate what every HTTP implementation must do, and putting the focus on the extreme care that is required when translating to HTTP/1-like since we know that it's one of the most natural approaches (and even used in the examples in the spec).\r\n\r\nThis could give roughly:\r\n\r\n```\r\nHTTP/2 and HPACK present no restriction on the characters they may convey, exposing recipients\r\nto character sets that may result in incorrect handling or mismatched translation to other HTTP\r\nversions.  Implementations which represent HTTP messages as byte streams or series of lines are\r\nparticularly at risk and MUST validate the generic syntax of fields as defined in\r\n<xref target=\"HTTP\" section=\"5.1\"/> and <xref target=\"HTTP\" section=\"5.5\"/>. Implementations that\r\nsupport multiple HTTP versions are specifically warned against the risk of possibly insufficient\r\nfiltering of the CR and LF characters in control code originally developed for HTTP/1.x.\r\n\r\nIn addition, special care is required when attempting to rebuild a start line from the\r\nfollowing pseudo-header fields values, that may also be abused to affect the final message\r\nrepresentation:\r\n  - presence of NUL/CR/LF characters in any pseudo-header field value\r\n  - presence of characters not matching token production in :method\r\n  - presence of chars outside of ALPHA/DIGIT/+/-/. in :scheme\r\n  - presence of LWS characters in :authority\r\n  - :path not starting with '/' or '*'\r\n  - presence of characters outside of DIGIT in :status\r\n```\r\nWith this I think it that the intent is clear, the guidance as well, it is exhaustive and doesn't leave any doubt on what needs to be done.\r\n",
          "createdAt": "2021-08-25T06:48:46Z",
          "updatedAt": "2021-08-25T06:48:46Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Oh, and of course:\r\n```\r\nImplementations SHOULD reject messages carrying invalid HTTP fields as malformed.\r\n```\r\n:-)",
          "createdAt": "2021-08-25T06:52:43Z",
          "updatedAt": "2021-08-25T06:52:43Z"
        },
        {
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think extreme care is need anytime a HTTP message is represented, not just when represented as a HTTP/1.    If a H2 layer is delivering messages to a semantic layer that was developed against h1, then it will not be assuming HTTP valid charset in no matter if the message is passed as byte streams or lines or XML or JSON or Strings in classes.   It seams wrong for one particular messaging layer (h2) to require changes in transport impartial HTTP semantic layers so the messaging layer can be \"abused\" for non HTTP purposes?\r\n\r\nAs you say, the actual syntax validations needed to be done are dependent on the messaging layer.   So they are best done in the messaging layer as it knows what it is and can sometimes do things efficiently like checking charsets during parsing.       If the syntax is not validated by the messaging layer, then the semantic layer will have to do full validation, which will result in wasting CPU duplicating any checks that are done by the messaging layer (or are intrinsic to the transport).\r\n\r\n\r\n",
          "createdAt": "2021-08-25T08:29:25Z",
          "updatedAt": "2021-08-25T08:29:25Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "I think I'm OK with this. There's just one minor thing:\r\n```\r\nwhere characters such as CR and COLON\r\n```\r\nIt's actually \"LF and COLON\", but to be exhaustive I'd write \"CR, LF, and COLON\" since we've always kept extreme care on CR due to older H1 implementations.\r\n\r\nI think we **really** want to say something about the pseudo headers. They do not exist in HTTP/1 and the recent portswigger report clearly shows that many of us were relying on the tests performed on the reassembled start line, but that was too late (in my case everything was already NUL/CR/LF clean but LWS were not imagined there). I think it would be appropriate to place the small enumeration I mentioned above somewhere (probably after the \"minimal validation\" part). But it's possible that it doesn't have its place in the headers section and that it would be better discussed in the security considerations. And maybe then the whole \"minimal validation\" part can be moved there with it, since after all, it's what all this is about, covering risks that are known for having already been abused.\r\n\r\nIf you're interested I can propose a whole paragraph about all this, as being an implementer makes it easy enough for me to describe the traps. I'm just still having difficulties with all the toolchain and the XML docs which is why I don't send PRs.\r\n",
          "createdAt": "2021-08-26T06:25:57Z",
          "updatedAt": "2021-08-26T06:25:57Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "(I'll add LF)\r\n\r\nAs for pseudo-headers, welcome back scope creep.   Would a simple prohibition on SP (and maybe HTAB) for pseudo-headers work?  I'm fairly confident that the `%20` substitution is performed as needed, so there are no valid uses for the character.  Given that that is the real problem, would that do?  I don't feel like a full enumeration is going to be effective, but just one more simple bullet might not hurt.",
          "createdAt": "2021-08-26T06:34:32Z",
          "updatedAt": "2021-08-26T06:34:32Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "I've initially thought about it when fixing my bugs (\"if I had filtered LWS as well...\"). But that's not enough for :scheme nor :path. If :path starts with any character that is valid in a domain name, or a colon, you can change the authority when concatenating values. E.g.\r\n```\r\n:authority: example.org\r\n:path: .example.com/index.html\r\n```\r\nor\r\n```\r\n:authority: example.org\r\n:path: :4443/index.html\r\n```\r\nWould result in `https://example.org.example.com/index.html\" or \"https://example.org:4443/index.html\". Similarly if \":scheme\" contains a colon, we're lost.\r\n\r\nIn haproxy we've seriously hardened this part so that we don't have to deal with a variant of it any time soon. But I think that the absolute bare minimum is:\r\n- no NUL/CR/LF/LWS in *any* of the currently known pseudo header fields\r\n- no colon in :scheme\r\n- nothing but \"/\" or \"*\" as the first char of :path\r\n\r\nI don't see how to fool a start line parser when reassembling something based on such minimum controls, but I do see how to fool them by relaxing any single one of the rules above.\r\n",
          "createdAt": "2021-08-26T06:45:41Z",
          "updatedAt": "2021-08-26T06:45:41Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "Editors, it looks like this is ready to ship; anything stopping that?",
          "createdAt": "2021-09-01T08:09:31Z",
          "updatedAt": "2021-09-01T08:09:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Only that discussion was continuing.  But it seems to have settled now.",
          "createdAt": "2021-09-01T12:15:54Z",
          "updatedAt": "2021-09-01T12:15:54Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Thanks Martin. What about adding the point I made above in https://github.com/httpwg/http2-spec/pull/936#issuecomment-906140011 for :scheme, :path and :method which need further protection (that's not addressed in core since purely H2) ? I could propose this text (yeah I know my formulations are not always great):\r\n\r\n```\r\nIn addition, implementations that operate on a URI or request line reconstructed from the concatenation\r\nof :method, :scheme, :authority, and :path SHOULD validate each of these fields individually and according\r\nto the rules in RFC3986#3 and MUST at least perform this minimal validation:\r\n- none of the aforementioned pseudo-header field values contains any character among NUL/CR/LF/LWS\r\n- :scheme does not contain the COLON character\r\n- :path exclusively starts with \"/\" or \"*\"\r\nFailure to do so exposes the implementation to risks of request smuggling attacks or authority splitting.\r\n```\r\n",
          "createdAt": "2021-09-01T13:00:23Z",
          "updatedAt": "2021-09-01T13:00:23Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1ODQ0NzQ2",
          "commit": {
            "abbreviatedOid": "2305e05"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-23T08:20:18Z",
          "updatedAt": "2021-08-23T08:24:06Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I don't think that `MAY` does enough to satisfy #902.\r\nI think this paragraph should be the first requirement in the list below and say that in H2 a field MUST be treated as malformed if it is invalid in HTTP - unless it is a pseudo header.  Specifically we should say:\r\n\r\nHPACK can carry non valid fileds.\r\nAll H2 impls MUST validate as follows:\r\n + must be a valid HTTP field or a psuedo field\r\n + names must be lower case\r\n + must not contain zero value etc.\r\n + must not start or end with whitespace",
              "createdAt": "2021-08-23T08:20:19Z",
              "updatedAt": "2021-08-23T08:24:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM5MTAwNjEx",
          "commit": {
            "abbreviatedOid": "40cbfb7"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This is really good other than a couple of niggles \r\n\r\nExpressing it this way makes it really clear the difference between recommended full HTTP validation and the minimal validation that must be imposed if full validation is not done. \r\n",
          "createdAt": "2021-08-26T06:55:53Z",
          "updatedAt": "2021-08-26T07:09:10Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Probably need to exclude psuedo headers from the SHOULD.\r\n```suggestion\r\n            The definitions of field names and values in HTTP prohibits some characters that HPACK\r\n            might be able to convey.  HTTP/2 implementations SHOULD validate the names and values \r\n            of non <xref target=\"PseudoHeaderFields\">pseudo-header fields</xref>\r\n            according to their definitions in Sections <xref target=\"HTTP\" section=\"5.1\"\r\n            format=\"counter\"/> and <xref target=\"HTTP\" section=\"5.5\"/> respectively and treat\r\n            messages that contain prohibited characters as <xref\r\n            target=\"malformed\">malformed</xref>.\r\n```",
              "createdAt": "2021-08-26T06:55:53Z",
              "updatedAt": "2021-08-26T07:09:10Z"
            },
            {
              "originalPosition": 28,
              "body": "Should DQUOTE and single quote also be listed here to protect scripting languages?",
              "createdAt": "2021-08-26T07:07:16Z",
              "updatedAt": "2021-08-26T07:09:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM5MTEyOTQ4",
          "commit": {
            "abbreviatedOid": "40cbfb7"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-26T07:11:19Z",
          "updatedAt": "2021-08-26T07:11:19Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "-1\r\n\r\n'non pseudo header fields' is not a thing.",
              "createdAt": "2021-08-26T07:11:19Z",
              "updatedAt": "2021-08-26T07:11:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM5MTE1NjE1",
          "commit": {
            "abbreviatedOid": "40cbfb7"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-26T07:14:30Z",
          "updatedAt": "2021-08-26T07:14:30Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Pseudo-header values need to comply with the same rules anyway and the names are sufficiently well proscribed otherwise.",
              "createdAt": "2021-08-26T07:14:30Z",
              "updatedAt": "2021-08-26T07:14:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM5ODI0ODMz",
          "commit": {
            "abbreviatedOid": "40cbfb7"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-26T18:47:20Z",
          "updatedAt": "2021-08-26T18:47:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 937,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3OTQwODA5",
      "title": "Connections, not implemenations",
      "url": "https://github.com/httpwg/http2-spec/pull/937",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "This text wasn't actually changed in #933, but I noticed it while reviewing.  This says that implementations which support TLS MUST use ALPN, but that's not really tied to what the implementation supports -- it's tied to what the current connection is doing.  If you support TLS but are using cleartext TCP for the current connection (regardless of why), you're not required to use ALPN.",
      "createdAt": "2021-08-23T15:28:44Z",
      "updatedAt": "2021-08-24T11:20:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "f3d27e7fbb7cb3f4a973cfa4da47d4169b812fd6",
      "headRepository": "MikeBishop/http2v2",
      "headRefName": "connection_not_implementations",
      "headRefOid": "14a49b5f342e36b3dcd3fe8ecfb38a13c186e593",
      "closedAt": "2021-08-24T11:20:24Z",
      "mergedAt": "2021-08-24T11:20:24Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "91259c8e84a3a6e8da9d4e12dba2a80e1075d147"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2Njk3NjE5",
          "commit": {
            "abbreviatedOid": "14a49b5"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-24T01:33:18Z",
          "updatedAt": "2021-08-24T01:33:18Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3MTA0OTcy",
          "commit": {
            "abbreviatedOid": "14a49b5"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-24T11:20:14Z",
          "updatedAt": "2021-08-24T11:20:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 939,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE4MDM1MDA5",
      "title": "Lower-case hex",
      "url": "https://github.com/httpwg/http2-spec/pull/939",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "More instances of using a-f than using A-F, so I normalized the outliers to lower-case.",
      "createdAt": "2021-08-23T17:42:05Z",
      "updatedAt": "2021-09-06T04:27:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "f3d27e7fbb7cb3f4a973cfa4da47d4169b812fd6",
      "headRepository": "MikeBishop/http2v2",
      "headRefName": "hex_lower",
      "headRefOid": "50e29bb26340331c0a77ca45ed75b04f8295671d",
      "closedAt": "2021-09-06T04:27:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2NzAxOTYz",
          "commit": {
            "abbreviatedOid": "50e29bb"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Holding this one until that text settles though.",
          "createdAt": "2021-08-24T01:44:55Z",
          "updatedAt": "2021-08-24T01:44:55Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3MTA0NTM5",
          "commit": {
            "abbreviatedOid": "50e29bb"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-24T11:19:44Z",
          "updatedAt": "2021-08-24T11:19:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 940,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE4MDM5NTk4",
      "title": "Remove presupposition",
      "url": "https://github.com/httpwg/http2-spec/pull/940",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The existing language presupposes that the server will reset the stream upon detecting a malformed request, when in fact it only MAY do so.  The simplest fix for this text is to remove any reference to resetting the stream and restrict the advice to using an HTTP status code.",
      "createdAt": "2021-08-23T17:50:03Z",
      "updatedAt": "2021-09-06T04:26:22Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "f3d27e7fbb7cb3f4a973cfa4da47d4169b812fd6",
      "headRepository": "MikeBishop/http2v2",
      "headRefName": "presupposed",
      "headRefOid": "10351c2443b023117e950b787b3792c93c8ae862",
      "closedAt": "2021-09-06T04:26:21Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, I think that I agree, but that text is actively under discussion and might change.  I'd rather not create a conflict yet.  Holding this.",
          "createdAt": "2021-08-24T01:46:03Z",
          "updatedAt": "2021-08-24T01:46:03Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Overtaken by events.",
          "createdAt": "2021-09-06T04:26:21Z",
          "updatedAt": "2021-09-06T04:26:21Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3MTA0MzEw",
          "commit": {
            "abbreviatedOid": "10351c2"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-24T11:19:25Z",
          "updatedAt": "2021-08-24T11:19:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 943,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE4MDU2NTAz",
      "title": "No path for CONNECT",
      "url": "https://github.com/httpwg/http2-spec/pull/943",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Fixes #942.",
      "createdAt": "2021-08-23T18:15:21Z",
      "updatedAt": "2021-08-24T11:21:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "f3d27e7fbb7cb3f4a973cfa4da47d4169b812fd6",
      "headRepository": "MikeBishop/http2v2",
      "headRefName": "connect_path",
      "headRefOid": "c238478e497e4a8ae94bf8bb0db1bd1f4450f7d6",
      "closedAt": "2021-08-24T11:21:38Z",
      "mergedAt": "2021-08-24T11:21:37Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "52b8efca430cc842d450e0afd2f14ca086c5f628"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2Njk1NTE4",
          "commit": {
            "abbreviatedOid": "c238478"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-24T01:27:31Z",
          "updatedAt": "2021-08-24T01:27:31Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3MTA1OTUw",
          "commit": {
            "abbreviatedOid": "c238478"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-24T11:21:28Z",
          "updatedAt": "2021-08-24T11:21:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 945,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE4MzMzMzY5",
      "title": "Remove content-length from the chunked example",
      "url": "https://github.com/httpwg/http2-spec/pull/945",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Closes #944.",
      "createdAt": "2021-08-24T01:27:42Z",
      "updatedAt": "2021-08-24T11:21:04Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "f3d27e7fbb7cb3f4a973cfa4da47d4169b812fd6",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "cl-ex5",
      "headRefOid": "7beba4a292630a980a32e9d7ba1f8350cbfd8f30",
      "closedAt": "2021-08-24T11:21:04Z",
      "mergedAt": "2021-08-24T11:21:04Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "ad5536fbbe765501882465892a81d09814431ca6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3MTA1NTI4",
          "commit": {
            "abbreviatedOid": "7beba4a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-24T11:20:57Z",
          "updatedAt": "2021-08-24T11:20:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 946,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE4MzgyODU4",
      "title": "More on connection-specific headers",
      "url": "https://github.com/httpwg/http2-spec/pull/946",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The original issue here was concerned with Transfer-Encoding, but this\r\nwas not a normative statement, it was a note.  With a forward reference,\r\nthis is better.\r\n\r\nThe section on connection-specific headers probably could have been more\r\nspecific.  Now that the -semantics draft has a specific list of things\r\n(plus whatever `Connection` lists), we can lean on that more directly.\r\n\r\nCloses #938.",
      "createdAt": "2021-08-24T03:47:29Z",
      "updatedAt": "2021-08-24T11:03:41Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "f3d27e7fbb7cb3f4a973cfa4da47d4169b812fd6",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "transfer-codings",
      "headRefOid": "231285f7e502f94418b91ba17d7903010bda70f5",
      "closedAt": "2021-08-24T11:03:41Z",
      "mergedAt": "2021-08-24T11:03:41Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "e8a11abfc1e99829e4bb82491c4c6e1ec27e2393"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3MDkxNDE0",
          "commit": {
            "abbreviatedOid": "231285f"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-24T11:03:32Z",
          "updatedAt": "2021-08-24T11:03:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 947,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE4NjY3Mjkx",
      "title": "Refer to Extended Connect",
      "url": "https://github.com/httpwg/http2-spec/pull/947",
      "state": "CLOSED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #941",
      "createdAt": "2021-08-24T11:42:35Z",
      "updatedAt": "2021-08-25T12:16:18Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "52b8efca430cc842d450e0afd2f14ca086c5f628",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-upgrade-update",
      "headRefOid": "98e8207dba25754532331b4bbeebf3f5ace6dc49",
      "closedAt": "2021-08-25T12:16:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing for #951 instead.",
          "createdAt": "2021-08-25T12:16:17Z",
          "updatedAt": "2021-08-25T12:16:17Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3NTgwODUx",
          "commit": {
            "abbreviatedOid": "98e8207"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-24T18:56:44Z",
          "updatedAt": "2021-08-24T18:56:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 950,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE4OTg0OTYy",
      "title": "Last round of review nits",
      "url": "https://github.com/httpwg/http2-spec/pull/950",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-24T18:54:12Z",
      "updatedAt": "2021-08-25T12:14:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "52b8efca430cc842d450e0afd2f14ca086c5f628",
      "headRepository": "MikeBishop/http2v2",
      "headRefName": "nits",
      "headRefOid": "9d473bb3a2b537d07cd129d29113de420d350d7e",
      "closedAt": "2021-08-25T12:14:38Z",
      "mergedAt": "2021-08-25T12:14:38Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "d858458e126b793a8c4f6fdda710c428023fa19e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3NTc5MzMw",
          "commit": {
            "abbreviatedOid": "9d473bb"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-24T18:55:13Z",
          "updatedAt": "2021-08-24T18:55:13Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Line 2979 says the same thing about responses; I was originally going to remove one or the other as a duplicate, but this section is about requests, so the smaller change is to make them complementary statements.",
              "createdAt": "2021-08-24T18:55:13Z",
              "updatedAt": "2021-08-24T18:55:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM3ODQ2NTU5",
          "commit": {
            "abbreviatedOid": "9d473bb"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-25T02:45:13Z",
          "updatedAt": "2021-08-25T02:45:13Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM4MjcyMjE1",
          "commit": {
            "abbreviatedOid": "9d473bb"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-25T12:14:28Z",
          "updatedAt": "2021-08-25T12:14:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 951,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE5MjA1MDIz",
      "title": "reference extended connect",
      "url": "https://github.com/httpwg/http2-spec/pull/951",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I know that Cory beat me to it with #947, but I had written text.  I only forgot to make the PR.  Cory can decide which he likes better :)\r\n\r\nCloses #941.",
      "createdAt": "2021-08-25T02:48:18Z",
      "updatedAt": "2021-08-25T12:15:58Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "52b8efca430cc842d450e0afd2f14ca086c5f628",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "not-upgrade-connect",
      "headRefOid": "e4db7cf8e6f1b33ffa2a1517a99571d76a39d3e1",
      "closedAt": "2021-08-25T12:15:58Z",
      "mergedAt": "2021-08-25T12:15:57Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "8b814f3925c3424aca6ddb984393e6b97de63d94"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM4MjczNDYy",
          "commit": {
            "abbreviatedOid": "e4db7cf"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "You put more things in your citation block, so it\u2019s clearly better.",
          "createdAt": "2021-08-25T12:15:48Z",
          "updatedAt": "2021-08-25T12:15:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 952,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE5MjA1NDEw",
      "title": "Tighten forward language",
      "url": "https://github.com/httpwg/http2-spec/pull/952",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "This removes the \"from another HTTP version\" and just uses \"forwards\"\r\nwith \"to\" or \"from\".  Not sure if that helps.\r\n\r\nThe rest is an attempt to tighten things up.\r\n\r\nCloses #913.\r\nCloses #935 (as this supersedes it).\r\nCloses #912.",
      "createdAt": "2021-08-25T02:49:27Z",
      "updatedAt": "2021-08-25T12:18:58Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "52b8efca430cc842d450e0afd2f14ca086c5f628",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "intermediary-stuff",
      "headRefOid": "e9a8e8dbdec941ce5844f8d29a860f10196003a9",
      "closedAt": "2021-08-25T12:18:58Z",
      "mergedAt": "2021-08-25T12:18:58Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "f8c762c594480bb6856065cca5c0daacd430133d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM4Mjc1NjM1",
          "commit": {
            "abbreviatedOid": "e9a8e8d"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-25T12:18:07Z",
          "updatedAt": "2021-08-25T12:18:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 953,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIxMjgxNTc1",
      "title": "Clean up IANA link rendering",
      "url": "https://github.com/httpwg/http2-spec/pull/953",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Fixes #948",
      "createdAt": "2021-08-27T12:09:00Z",
      "updatedAt": "2021-08-27T12:23:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5d009dfde16a17e5b6f132f8c4860c042294dd23",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-clean-up-iana-links",
      "headRefOid": "d1817b328051bf926b4ce92cf8f12a2f71c89d5a",
      "closedAt": "2021-08-27T12:23:57Z",
      "mergedAt": "2021-08-27T12:23:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0d42361643adeb6980e7083d7baab2afe9dd5d60"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 954,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIyMDQ3MjM4",
      "title": "Fixup IANA links",
      "url": "https://github.com/httpwg/http2-spec/pull/954",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Followup for #953.\r\n\r\nCloses #948.",
      "createdAt": "2021-08-30T00:19:16Z",
      "updatedAt": "2021-08-30T12:12:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d42361643adeb6980e7083d7baab2afe9dd5d60",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "iana-links2",
      "headRefOid": "cfbb17fc73112e8c5f29b2f067f6bd113fb5ea39",
      "closedAt": "2021-08-30T12:12:24Z",
      "mergedAt": "2021-08-30T12:12:24Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "80efe6db5a6b789443d9ff03b380b91c7d5e9750"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxNTc2NjAy",
          "commit": {
            "abbreviatedOid": "cfbb17f"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-30T12:12:19Z",
          "updatedAt": "2021-08-30T12:12:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 955,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIyMzM5NzE2",
      "title": "abstract: change 'perception of latency' to 'latency'",
      "url": "https://github.com/httpwg/http2-spec/pull/955",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-30T09:56:16Z",
      "updatedAt": "2021-08-31T07:45:21Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d42361643adeb6980e7083d7baab2afe9dd5d60",
      "headRepository": "reschke/http2-spec",
      "headRefName": "abstract",
      "headRefOid": "61bb011057a79521cc5892351a1f46eafce7536e",
      "closedAt": "2021-08-31T07:45:21Z",
      "mergedAt": "2021-08-31T07:45:21Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "875c9225ccf0a0ec2f1a4a057644bfb59ece9487"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxNTc3MzQx",
          "commit": {
            "abbreviatedOid": "61bb011"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-30T12:13:13Z",
          "updatedAt": "2021-08-30T12:13:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 956,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIyMzQzMDAy",
      "title": "intro: move first xref to TCP up",
      "url": "https://github.com/httpwg/http2-spec/pull/956",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-30T10:01:05Z",
      "updatedAt": "2021-08-30T10:05:44Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d42361643adeb6980e7083d7baab2afe9dd5d60",
      "headRepository": "reschke/http2-spec",
      "headRefName": "tcp-ref",
      "headRefOid": "5efdd3cf29d9138374003a9e8ecb7edfce1dba26",
      "closedAt": "2021-08-30T10:05:38Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 957,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIyMzQ5NzEx",
      "title": "intro: move first xref to TCP up",
      "url": "https://github.com/httpwg/http2-spec/pull/957",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-30T10:08:28Z",
      "updatedAt": "2021-08-31T07:45:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d42361643adeb6980e7083d7baab2afe9dd5d60",
      "headRepository": "reschke/http2-spec",
      "headRefName": "tcp-ref",
      "headRefOid": "1d07d5844ede098da5aaaae83626b920c9428c8f",
      "closedAt": "2021-08-31T07:45:47Z",
      "mergedAt": "2021-08-31T07:45:47Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "92ec577e60b3aab6aa5da454e388523cc83f93a8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxNTc3Nzk0",
          "commit": {
            "abbreviatedOid": "1d07d58"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-30T12:13:45Z",
          "updatedAt": "2021-08-30T12:13:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 958,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIyMzU2MTM4",
      "title": "frame order is significant irrelevant of streams",
      "url": "https://github.com/httpwg/http2-spec/pull/958",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-30T10:16:03Z",
      "updatedAt": "2021-08-31T07:46:19Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d42361643adeb6980e7083d7baab2afe9dd5d60",
      "headRepository": "reschke/http2-spec",
      "headRefName": "frame-order",
      "headRefOid": "62d03dfe10cdcac742ba3151a0a4d7ef87dde1a2",
      "closedAt": "2021-08-31T07:46:19Z",
      "mergedAt": "2021-08-31T07:46:19Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "bbb66953e6d252e100469ac4c43d5357ee8b43e6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxNTc4ODM1",
          "commit": {
            "abbreviatedOid": "62d03df"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-30T12:15:04Z",
          "updatedAt": "2021-08-30T12:15:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 959,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIyMzc1MTIy",
      "title": "stream state diagram: move legend out of artwork",
      "url": "https://github.com/httpwg/http2-spec/pull/959",
      "state": "MERGED",
      "author": "reschke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-08-30T10:45:10Z",
      "updatedAt": "2021-09-06T01:10:43Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0d42361643adeb6980e7083d7baab2afe9dd5d60",
      "headRepository": "reschke/http2-spec",
      "headRefName": "diagram-legend",
      "headRefOid": "500436725df9e331faceab84f3e3e44860c774f4",
      "closedAt": "2021-09-06T01:10:43Z",
      "mergedAt": "2021-09-06T01:10:43Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "267f4182b935f8e115c845aa350e8aa2c7297b54"
      },
      "comments": [
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "FWIW, I tried to put the definition terms into \"\\<tt>\" elements, but this causes weirdness in the HTML; apparently margin-bottom doesn't work as intended in that case (child elements inside \"<\\dd>\"). Maybe @martinthomson knows what's going on here and what needs to be fixed in xml2rfc.",
          "createdAt": "2021-08-30T12:41:31Z",
          "updatedAt": "2021-08-30T12:42:08Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, after some tweaks, I've managed to work out what is going on.  If you want a lesson in leading text and inline layout, I might be able to give you more information than I ever wanted.  I've updated the style sheet to allow for `<tt>` or `<code>` in `<dt>`, as well as fixed some other minor layout issues.\r\n\r\n(The short version is that changing the font causes the line to become taller, which breaks the rather fragile layout we use for `<dl>`.  The problem is that the different font has different ascender/descender heights, so when the text baseline is aligned, the extra space ends up being differently balanced to the surrounding text; the CSS layout then makes the line taller to allow for the height of all included fonts.  At that point, the floats that contain `<dt>` no longer line up with the lines that contain `<dd>`.)",
          "createdAt": "2021-09-06T01:10:35Z",
          "updatedAt": "2021-09-06T01:10:35Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQxNTgxNzgy",
          "commit": {
            "abbreviatedOid": "c69caba"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I\u2019ll have to see how this renders, but this seems reasonable to me.",
          "createdAt": "2021-08-30T12:18:31Z",
          "updatedAt": "2021-08-30T12:18:31Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQyMzg5ODk2",
          "commit": {
            "abbreviatedOid": "c69caba"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Seems fine.  I've expanded CONTINUATIONS -> CONTINUATION frames and moved the note up to the definition of `PP` as it relates to that only.",
          "createdAt": "2021-08-31T07:48:05Z",
          "updatedAt": "2021-08-31T07:48:57Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n          <dd><xref target=\"PUSH_PROMISE\" format=\"none\">PUSH_PROMISE</xref> frame (with implied <xref target=\"CONTINUATION\" format=\"none\">CONTINUATION</xref> frames; state transitions are for the promised stream)</dd>\r\n        </dl>\r\n```",
              "createdAt": "2021-08-31T07:48:05Z",
              "updatedAt": "2021-08-31T07:48:57Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n          <dd><xref target=\"PUSH_PROMISE\" format=\"none\">PUSH_PROMISE</xref> frame (with implied <xref target=\"CONTINUATION\" format=\"none\">CONTINUATION</xref> frames)</dd>\r\n```",
              "createdAt": "2021-08-31T07:48:13Z",
              "updatedAt": "2021-08-31T07:48:57Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n          <dd><xref target=\"HEADERS\" format=\"none\">HEADERS</xref> frame (with implied <xref target=\"CONTINUATION\" format=\"none\">CONTINUATION</xref> frames)</dd>\r\n```",
              "createdAt": "2021-08-31T07:48:20Z",
              "updatedAt": "2021-08-31T07:48:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 961,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI0MTg5NDUz",
      "title": "Editorial suggestion",
      "url": "https://github.com/httpwg/http2-spec/pull/961",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "For #905.",
      "createdAt": "2021-09-01T07:15:38Z",
      "updatedAt": "2021-09-06T04:25:12Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "bbb66953e6d252e100469ac4c43d5357ee8b43e6",
      "headRepository": "mnot/http2-spec",
      "headRefName": "mnot-905",
      "headRefOid": "b92198563828adabe8755e0961040a63908919bf",
      "closedAt": "2021-09-06T04:25:12Z",
      "mergedAt": "2021-09-06T04:25:12Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b92198563828adabe8755e0961040a63908919bf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQzNTgwNDcx",
          "commit": {
            "abbreviatedOid": "b921985"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This looks right.\r\n\r\nWe're losing a few `<tt>` elements here, I will need to check, but it might be necessary to add those back in.  I can do that though.",
          "createdAt": "2021-09-01T07:35:49Z",
          "updatedAt": "2021-09-01T07:35:49Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ1Mzg4ODA2",
          "commit": {
            "abbreviatedOid": "b921985"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-02T18:25:20Z",
          "updatedAt": "2021-09-02T18:25:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 964,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI1MTM2MDky",
      "title": "Don't justify lowercase requirement",
      "url": "https://github.com/httpwg/http2-spec/pull/964",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Just state it. No need to justify it so (especially as this invites\r\nquestions about the claimed benefits).\r\n\r\nThis is less than Julian wanted from #963, but I think that it is\r\nimportant to include a requirement like this very clearly and it isn't\r\nreally said anywhere else.  At least not directly.\r\n\r\nCloses #963.",
      "createdAt": "2021-09-02T00:20:41Z",
      "updatedAt": "2021-09-02T18:27:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "bd46e3e708e50617a59f94e2a15fe8a05a5eef17",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "just-lowercase",
      "headRefOid": "f9eedc3789261a38c32c5e0fef0a8075b07a9839",
      "closedAt": "2021-09-02T18:27:10Z",
      "mergedAt": "2021-09-02T18:27:10Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "d126e585ec340f4aa8080026d5b86d24bd9a862b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ1MzkwMzY4",
          "commit": {
            "abbreviatedOid": "f9eedc3"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Agreed, I don't think the spec needs to defend itself on this choice.",
          "createdAt": "2021-09-02T18:27:05Z",
          "updatedAt": "2021-09-02T18:27:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 965,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI1MTM2Mjg4",
      "title": "Make obsoleted registrations consistent",
      "url": "https://github.com/httpwg/http2-spec/pull/965",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Closes #949.",
      "createdAt": "2021-09-02T00:20:57Z",
      "updatedAt": "2021-09-02T18:29:52Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "bd46e3e708e50617a59f94e2a15fe8a05a5eef17",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "consistent-registries",
      "headRefOid": "d5e56a48dea27bc9269281a277641e1d938b02e9",
      "closedAt": "2021-09-02T18:29:52Z",
      "mergedAt": "2021-09-02T18:29:52Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "526705e59de6179d3f4ff3fc97d5cc582bf99344"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ1MzkyNTY2",
          "commit": {
            "abbreviatedOid": "d5e56a4"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-02T18:29:39Z",
          "updatedAt": "2021-09-02T18:29:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 966,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI1MTM4Mjk2",
      "title": "No fields are mandatory",
      "url": "https://github.com/httpwg/http2-spec/pull/966",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Only pseudo-header fields can be mandatory, so no point saying anything\r\nabout fields more generally here.\r\n\r\nCloses #962.",
      "createdAt": "2021-09-02T00:23:40Z",
      "updatedAt": "2021-09-02T18:26:00Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "bd46e3e708e50617a59f94e2a15fe8a05a5eef17",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "no-mandatory-fields",
      "headRefOid": "4f53881fd8eb405134fc82d6e451dc99e92d9b8c",
      "closedAt": "2021-09-02T18:25:55Z",
      "mergedAt": "2021-09-02T18:25:55Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "14a2136cbc2525b0ff42b202dab298943bf2d0e4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ1Mzg5MjE3",
          "commit": {
            "abbreviatedOid": "4f53881"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-02T18:25:50Z",
          "updatedAt": "2021-09-02T18:25:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 967,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI1MTUxNzYx",
      "title": "Remove old registrations",
      "url": "https://github.com/httpwg/http2-spec/pull/967",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As noted in #960, we don't need to redo these.  A backward reference will do.\r\n\r\nThis cuts quite a bit of XML out of the document, which I'm happy about.\r\n\r\nCloses #960.",
      "createdAt": "2021-09-02T00:39:19Z",
      "updatedAt": "2021-09-24T02:34:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "bd46e3e708e50617a59f94e2a15fe8a05a5eef17",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "remove-old-registrations",
      "headRefOid": "1abd87eb3942d777a022c66448a73a0364a3f93c",
      "closedAt": "2021-09-24T02:34:38Z",
      "mergedAt": "2021-09-24T02:34:37Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "58a47fb73a17e79615daf135875ff3c1290b6835"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "@reschke I disagree; IANA hold the registration data, not the document. My understanding is that templates need only appear in the originally registering documents; if there's doubt about that, we should check with the IESG and IANA.",
          "createdAt": "2021-09-02T07:26:10Z",
          "updatedAt": "2021-09-02T07:26:10Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That is true, but the registrations *point* to specs. The IANA Considerations need to take care of updating these references.",
          "createdAt": "2021-09-02T08:02:27Z",
          "updatedAt": "2021-09-02T08:02:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That's a good point; I will shelve that and change to adding a note that says \"references to RFC 7540 for X, Y, and Z are updated to point to this document\".",
          "createdAt": "2021-09-02T14:16:01Z",
          "updatedAt": "2021-09-02T14:16:01Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "> That is true, but the registrations point to specs. The IANA Considerations need to take care of updating these references.\r\n\r\nAbsolutely. It just doesn't need to list them individually; a simple statements such as \"update the references to RFCxxxx to this document in Registry Foo\" will suffice.",
          "createdAt": "2021-09-02T23:50:11Z",
          "updatedAt": "2021-09-02T23:50:11Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Absolutely. It just doesn't need to list them individually; a simple statements such as \"update the references to RFCxxxx to this document in Registry Foo\" will suffice.\r\n\r\nIf that's all which is necessary, yes. Hint: section numbers might change, and you don't want to handle that during AUTH48.",
          "createdAt": "2021-09-03T06:20:00Z",
          "updatedAt": "2021-09-03T06:20:00Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ0Njk1NDcz",
          "commit": {
            "abbreviatedOid": "e2b4149"
          },
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't think this is a good idea. At the end of the day, the IANA registry should point to the updated document.",
          "createdAt": "2021-09-02T07:20:57Z",
          "updatedAt": "2021-09-02T07:20:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 968,
      "id": "PR_kwDOAHsHi84rtQGw",
      "title": "Host and :authority must agree",
      "url": "https://github.com/httpwg/http2-spec/pull/968",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "This makes a few changes, restricting things further than before.  For\r\nthe most part, this removes an allowance in the original specification\r\nthat had Host and :authority potentially differing.  The goal of that\r\nwas - from memory - to preserve some of the inherent quirks in HTTP/1.1.\r\nThat turns out to be more of a liability than an asset and far less\r\nimportant now that we have a more formal understanding of the structure\r\nof requests.\r\n\r\nCloses #905.",
      "createdAt": "2021-09-14T03:26:21Z",
      "updatedAt": "2021-09-24T02:34:14Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "5741b83737f85361ae09d0ca71cdf4c5de89c5fe",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "host-authority-mix",
      "headRefOid": "ca28eef19a52cc0bd838f75f59fea956ad70510a",
      "closedAt": "2021-09-24T02:34:14Z",
      "mergedAt": "2021-09-24T02:34:14Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "78d4e21e91341d56b67ce104fe86dc629c66765d"
      },
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "I think that's good as well. Let's have @gregw and Stefan have a look in order to avoid further round trips. \r\n",
          "createdAt": "2021-09-14T15:24:35Z",
          "updatedAt": "2021-09-14T15:24:35Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "Yeah much better now. A coworker also told me he was bothered by the \"byte-for-byte\" which is now gone. I've reread all of it from https://github.com/martinthomson/http2v2/blob/af9a40279c465e0b6d7994710affe94ef5228109/draft-ietf-httpbis-http2bis.xml#L2900 to see it in context and I find that it flows nicely, details the protocol particularities and traps to care about without stepping over other protocol versions. So that's a definite +1 from me!\r\n\r\nI'm finding something confusing two paragraphs later however: it's said `Note that request targets for CONNECT or asterisk-form OPTIONS requests never include authority information` which contradicts the CONNECT section saying `A CONNECT header section is constructed ... The :authority pseudo-header field contains the host and port to connect to`.\r\n\r\nAnd I'm sure I participated to that but don't remember how we ended up on this one :-/",
          "createdAt": "2021-09-17T06:39:00Z",
          "updatedAt": "2021-09-17T06:39:00Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@wtarreau, that's because the `:authority` pseudo-header in a CONNECT request is the target of the connection, not the proxy you're asking to handle the request.  It's not that the field is absent, but that it means something different in that context.",
          "createdAt": "2021-09-17T15:00:24Z",
          "updatedAt": "2021-09-17T15:00:24Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "body": "@MikeBishop OK but regardless it still looks like recent clients are trying hard to send the exact same Host as the :authority in CONNECT (typically including :443).  It's unclear to me why the target of a proxied CONNECT is not an authority while the target of a proxied GET is an authority then.",
          "createdAt": "2021-09-17T15:05:40Z",
          "updatedAt": "2021-09-17T15:05:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84s6StR",
          "commit": {
            "abbreviatedOid": "2cfe2e9"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Some things to think about.\r\n\r\nAlso, it seems like something should be listed in 'Changes from...'?",
          "createdAt": "2021-09-14T05:11:45Z",
          "updatedAt": "2021-09-14T05:14:02Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "'it' is ambiguous here - are you referring to the intemediary, or the act of setting the field?",
              "createdAt": "2021-09-14T05:11:46Z",
              "updatedAt": "2021-09-14T05:14:02Z"
            },
            {
              "originalPosition": 6,
              "body": "I'm not sure I get your reasoning for MAY here instead of something stronger. It seems that this is a security issue, so we should have stronger reasoning for optionality here. Personally I think this should be at least SHOULD, if not MUST.",
              "createdAt": "2021-09-14T05:13:16Z",
              "updatedAt": "2021-09-14T05:14:02Z"
            },
            {
              "originalPosition": 7,
              "body": "What is 'different' here? If one is present and one isn't, is that different? What if they have case differences? Etc.",
              "createdAt": "2021-09-14T05:13:40Z",
              "updatedAt": "2021-09-14T05:14:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s6T1G",
          "commit": {
            "abbreviatedOid": "2cfe2e9"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T05:21:38Z",
          "updatedAt": "2021-09-14T05:24:39Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "The reasoning is that old implementations won't apply this rule (so it can't be MUST) and some might choose not to (as it requires an extra comparison).  I'm OK with \"SHOULD\", but \"MAY\" seemed safer.",
              "createdAt": "2021-09-14T05:21:38Z",
              "updatedAt": "2021-09-14T05:24:39Z"
            },
            {
              "originalPosition": 7,
              "body": "I didn't specify that deliberately, allowing someone to treat \"example.com\" and \"example.com:443\" and \"Example.com\" each as different to the other.\r\n\r\nWould it be best to point that out?\r\n\r\n> Servers are not required to normalize these fields before comparing them, which means that clients that produce both fields need to make the values byte-for-byte identical.",
              "createdAt": "2021-09-14T05:24:28Z",
              "updatedAt": "2021-09-14T05:24:39Z"
            },
            {
              "originalPosition": 23,
              "body": "Ack, fixed.",
              "createdAt": "2021-09-14T05:24:37Z",
              "updatedAt": "2021-09-14T05:24:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s6Xix",
          "commit": {
            "abbreviatedOid": "bad442d"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T05:51:42Z",
          "updatedAt": "2021-09-14T05:51:42Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "IMO if there's significant security impact, it can be a MUST - especially since this is about recipient behaviour, not sender behaviour.  ",
              "createdAt": "2021-09-14T05:51:42Z",
              "updatedAt": "2021-09-14T05:51:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s6Xoc",
          "commit": {
            "abbreviatedOid": "bad442d"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T05:52:26Z",
          "updatedAt": "2021-09-14T05:52:26Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "or just add 'when their values are compared, byte-for-byte'",
              "createdAt": "2021-09-14T05:52:26Z",
              "updatedAt": "2021-09-14T05:52:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s6brm",
          "commit": {
            "abbreviatedOid": "bad442d"
          },
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T06:19:35Z",
          "updatedAt": "2021-09-14T06:19:35Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "They should not be compared byte-for-byte, we did this mistake recently and broke a few clients :-)\r\nRFC3986#6.2.3 explains the scheme-based normalization, that works particularly well for H2 (in short, drop \":80\" on \"http\" and \":443\" on \"https\").\r\n\r\nI think I'm fine with a SHOULD though. As Stefan (I think) mentioned, most implementations currently do not perform the comparison and a MUST would instantly make them non-compliant.\r\n\r\nHTTP/1.1 messaging proceeds differently (in 3.2). It enumerates what a client must send, then says that a recipient MUST reject as badreq any request with invalid or missing Host. This leaves a bit of gray area about what you consider as invalid but does mandate that *some* checks are performed. I'm not sure I like this approach better, but I wanted to note it if that can fuel the discussion.",
              "createdAt": "2021-09-14T06:19:35Z",
              "updatedAt": "2021-09-14T06:19:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s6ciT",
          "commit": {
            "abbreviatedOid": "2cfe2e9"
          },
          "author": "wtarreau",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T06:24:50Z",
          "updatedAt": "2021-09-14T06:24:51Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I'm still embarrassed by the normative language involving H1 here. What about this variant:\r\n\r\n   An intermediary that needs to produce a Host header field (e.g. to translate\r\n   an HTTP/2 request to HTTP/1.1) MUST set the ...\r\n",
              "createdAt": "2021-09-14T06:24:51Z",
              "updatedAt": "2021-09-14T06:25:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s6mMD",
          "commit": {
            "abbreviatedOid": "bad442d"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T07:13:58Z",
          "updatedAt": "2021-09-14T07:15:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I definitely think we should leave a breadcrumb to, say, scheme-based normalization, as well as to the relevant bit of the -semantics draft ([\u00a7 7.2 Host and Authority](https://www.ietf.org/archive/id/draft-ietf-httpbis-semantics-19.html#name-host-and-authority)).",
              "createdAt": "2021-09-14T07:13:58Z",
              "updatedAt": "2021-09-14T07:15:00Z"
            },
            {
              "originalPosition": 6,
              "body": "I agree with @mnot. I also think that for _senders_ we can safely say that the fields MUST be byte-for-byte identical.",
              "createdAt": "2021-09-14T07:14:30Z",
              "updatedAt": "2021-09-14T07:15:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s6pQn",
          "commit": {
            "abbreviatedOid": "bad442d"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T07:27:19Z",
          "updatedAt": "2021-09-14T07:27:19Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "The problem with citing RFC 3986 is that it doesn't actually specify anything in Section 6.2.  It's all examples.\r\n\r\nSection 7.2 of -semantics is similarly unhelpful.\r\n\r\nHowever, as the server is authoritative, perhaps we can rely on its own definitions of authority and say if the fields identify different authorities - by its own definition - it can reject the request.  Would that work?",
              "createdAt": "2021-09-14T07:27:19Z",
              "updatedAt": "2021-09-14T07:27:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s6qrO",
          "commit": {
            "abbreviatedOid": "bad442d"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T07:33:22Z",
          "updatedAt": "2021-09-14T07:33:22Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I guess we'd apply the same guidance to intermediaries? I think that's probably acceptable from where I'm sitting.",
              "createdAt": "2021-09-14T07:33:22Z",
              "updatedAt": "2021-09-14T07:33:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s6rT8",
          "commit": {
            "abbreviatedOid": "6444758"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T07:36:02Z",
          "updatedAt": "2021-09-14T07:36:02Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "OK, I've worked something out.  It's pretty gross though.  Let me know what you think.",
              "createdAt": "2021-09-14T07:36:02Z",
              "updatedAt": "2021-09-14T07:36:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s6rXS",
          "commit": {
            "abbreviatedOid": "6444758"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T07:36:14Z",
          "updatedAt": "2021-09-14T07:36:15Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Thanks, that's a good suggestion.  I've taken it.",
              "createdAt": "2021-09-14T07:36:14Z",
              "updatedAt": "2021-09-14T07:36:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84s63le",
          "commit": {
            "abbreviatedOid": "6444758"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think this is well-constructed.",
          "createdAt": "2021-09-14T08:23:25Z",
          "updatedAt": "2021-09-14T08:23:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOAHsHi84tDl2P",
          "commit": {
            "abbreviatedOid": "6444758"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The changes are good.... but I have a couple of niggles about cumbersome wording... not that I have better suggestions.   ",
          "createdAt": "2021-09-16T06:48:55Z",
          "updatedAt": "2021-09-16T06:58:33Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Does \"of fields\" apply to all fields, all pseudo fields or just :authority fields?\r\n\r\nDoes the normalization \"need\" apply to the byte-for-byte comparison above ie. do MUST they only be byte-for-byte identical after normalization?\r\n  \r\nIs a \"need\" a MUST or a SHOULD?\r\n",
              "createdAt": "2021-09-16T06:48:55Z",
              "updatedAt": "2021-09-16T06:58:33Z"
            },
            {
              "originalPosition": 27,
              "body": "Rather than \"MUST set the Host field...\", it would be better to say just \"MUST use the value from....\" ",
              "createdAt": "2021-09-16T06:52:20Z",
              "updatedAt": "2021-09-16T06:58:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84tGb8Z",
          "commit": {
            "abbreviatedOid": "6444758"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-16T18:50:52Z",
          "updatedAt": "2021-09-16T18:54:33Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "In this instance, I think \"need\" is a statement of fact -- these are hostnames, therefore not case-sensitive, therefore they need to be normalized to perform a useful comparison.  No need for RFC2119 language here.  However, that implies that \"when compared byte-for-byte\" above is wrong.",
              "createdAt": "2021-09-16T18:50:53Z",
              "updatedAt": "2021-09-16T18:54:33Z"
            },
            {
              "originalPosition": 27,
              "body": "While I agree that the answer to \"use it for what?\" should be clear from context, better to be explicit.",
              "createdAt": "2021-09-16T18:53:49Z",
              "updatedAt": "2021-09-16T18:54:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84tHRSn",
          "commit": {
            "abbreviatedOid": "6444758"
          },
          "author": "gregw",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-16T23:02:27Z",
          "updatedAt": "2021-09-16T23:02:28Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Sorry I should have been less lazy:\r\n```suggestion\r\n                necessary to construct an HTTP/1.1 request) MUST use the value from the <tt>:authority</tt> \r\n                pseudo-header field as the value of the <tt>Host</tt> field,\r\n```",
              "createdAt": "2021-09-16T23:02:27Z",
              "updatedAt": "2021-09-16T23:02:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84tHb2c",
          "commit": {
            "abbreviatedOid": "577a84a"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-16T23:29:15Z",
          "updatedAt": "2021-09-16T23:29:15Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "We're placing a stronger requirement on the sender than the receiver.  The receiver requirements are more lax because we want to allow for folks like @icing who might want to avoid extra work to do so (either because they are happy that their h2 implementation is otherwise OK and don't want to open the patient to add extra checks that will mostly just slow them down).  We don't need to see every server doing this rejection, just a few.  Clients will learn not to put different values in.\r\n\r\nThat said, I think we can say \"identical\" in the first part without resorting to \"byte-for-byte\".  \"byte-for-byte\" is just the most obvious and easiest way to ensure that the values are the same.",
              "createdAt": "2021-09-16T23:29:15Z",
              "updatedAt": "2021-09-16T23:29:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84tHcBg",
          "commit": {
            "abbreviatedOid": "577a84a"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-16T23:29:44Z",
          "updatedAt": "2021-09-16T23:29:45Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n                from the <tt>:authority</tt> pseudo-header field.  A\r\n```",
              "createdAt": "2021-09-16T23:29:44Z",
              "updatedAt": "2021-09-16T23:29:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84tIa_j",
          "commit": {
            "abbreviatedOid": "af9a402"
          },
          "author": "icing",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-17T08:08:23Z",
          "updatedAt": "2021-09-17T08:08:24Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "> ...we want to allow for folks like @icing who might want to avoid extra work to do so...\r\n\r\nThat's very kind and heart-warming.\ud83d\ude0c\r\n\r\n",
              "createdAt": "2021-09-17T08:08:23Z",
              "updatedAt": "2021-09-17T08:08:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84tdDiH",
          "commit": {
            "abbreviatedOid": "af9a402"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-23T23:45:55Z",
          "updatedAt": "2021-09-23T23:45:56Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n                An intermediary that needs to generate a <tt>Host</tt> header field (which might be\r\n```",
              "createdAt": "2021-09-23T23:45:56Z",
              "updatedAt": "2021-09-23T23:45:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 969,
      "id": "PR_kwDOAHsHi84sSNIC",
      "title": "Use past tense to refer to RFC 8740",
      "url": "https://github.com/httpwg/http2-spec/pull/969",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-09-26T23:38:02Z",
      "updatedAt": "2021-09-27T01:00:47Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "e0e32ee14a78df41d7f1563327c193a1b08a4aa1",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "is-was",
      "headRefOid": "a9dbed28937b2d3ea8185eefab1e4ec8251a7b2a",
      "closedAt": "2021-09-27T01:00:42Z",
      "mergedAt": "2021-09-27T01:00:42Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "31f00f6f0adb4ca4e22957d59b8996e443533a15"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 970,
      "id": "PR_kwDOAHsHi84sSNIH",
      "title": "Only update registries that refer to RFC 7540",
      "url": "https://github.com/httpwg/http2-spec/pull/970",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Not all of the references.  That would be bad.",
      "createdAt": "2021-09-26T23:38:04Z",
      "updatedAt": "2021-09-27T02:05:37Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "e0e32ee14a78df41d7f1563327c193a1b08a4aa1",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "reference-update",
      "headRefOid": "c1fe68d602f076b2a26c17fbfa8de65454da1e2d",
      "closedAt": "2021-09-27T02:05:33Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #971.",
          "createdAt": "2021-09-27T02:05:33Z",
          "updatedAt": "2021-09-27T02:05:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 971,
      "id": "PR_kwDOAHsHi84sSNo4",
      "title": "Registry names",
      "url": "https://github.com/httpwg/http2-spec/pull/971",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Includes changes from #970, as that hits the same paragraph.",
      "createdAt": "2021-09-26T23:53:38Z",
      "updatedAt": "2021-09-27T01:01:02Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "f326f0e9c4d250fd1ebd49cfd343a33165af9039",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "registry-names",
      "headRefOid": "fcc88e38360190fbe2a75b2f4c15b3908ceac42f",
      "closedAt": "2021-09-27T01:01:00Z",
      "mergedAt": "2021-09-27T01:01:00Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "7a50b5dd48be4319436c86d8dee7431df157dd3a"
      },
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "body": "why is c4d3528 included?",
          "createdAt": "2021-09-27T00:13:45Z",
          "updatedAt": "2021-09-27T00:13:45Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm, poor rebase on my part I think.  I made #970, you made the changes there, then I made a branch for this and then rebased on top of #970.  It should go away when merged.",
          "createdAt": "2021-09-27T00:21:14Z",
          "updatedAt": "2021-09-27T00:21:14Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 972,
      "id": "PR_kwDOAHsHi84sSeRh",
      "title": "Manually add quotes to important strings",
      "url": "https://github.com/httpwg/http2-spec/pull/972",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "A recent xml2rfc update changed the way that the `<tt>` element was\r\nrendered in text.  Take advantage of that by adding quotes to strings\r\nthat really do benefit from additional quoting, such as the \"PRI ...\"\r\npreface string.\r\n\r\nMost of the changes shown in a recent diff are down to losing quotes\r\non header field names and other protocol elements.  These do not need\r\nto be quoted for their meaning to be clear and unambiguous.  The use\r\nof `<tt>` for these items improves the HTML rendering, but the loss of\r\nline noise in text renderings is a net win (at least in my opinion).",
      "createdAt": "2021-09-27T02:53:35Z",
      "updatedAt": "2021-09-27T07:11:08Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "7a50b5dd48be4319436c86d8dee7431df157dd3a",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "quotes",
      "headRefOid": "b5b51510e02a750636431b96dcb3e50439eb149a",
      "closedAt": "2021-09-27T07:11:08Z",
      "mergedAt": "2021-09-27T07:11:08Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "b7648cb059a928d3c9653d00696e218f9a16efca"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84tiFOh",
          "commit": {
            "abbreviatedOid": "b5b5151"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I agree with your reasoning, this seems like a good change.",
          "createdAt": "2021-09-27T07:11:00Z",
          "updatedAt": "2021-09-27T07:11:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 973,
      "id": "PR_kwDOAHsHi84tnh91",
      "title": "Draw the state machine using SVG",
      "url": "https://github.com/httpwg/http2-spec/pull/973",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "This doesn't automatically generate the state machine.  I did it\r\npartly manually because:\r\n\r\n1. This is XML and it's hard to automate that.\r\n2. xml2rfc chokes (unnecessarily) on what aasvg produces.\r\n\r\nStill, I think that this looks pretty good.",
      "createdAt": "2021-10-25T10:53:04Z",
      "updatedAt": "2021-10-26T23:33:46Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0080bf5c3c832376ff835ab0f385def0d2083597",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "aasvg-sm",
      "headRefOid": "5a40d4b7da8ca3e68b3ce72eeec503f59e55aa47",
      "closedAt": "2021-10-26T23:25:08Z",
      "mergedAt": "2021-10-26T23:25:08Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "ed41e990998e918ca6dee3fd1dbbe4c587ce622a"
      },
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Does this render in the plaintext view? Do we care about the plaintext view?",
          "createdAt": "2021-10-25T11:55:09Z",
          "updatedAt": "2021-10-25T11:55:09Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Does this render in the plaintext view?\r\n\r\nYes, the same way as before.\r\n\r\n> Do we care about the plaintext view?\r\n\r\nWe should.\r\n",
          "createdAt": "2021-10-25T11:59:16Z",
          "updatedAt": "2021-10-25T11:59:16Z"
        },
        {
          "author": "reschke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> This is XML and it's hard to automate that.\r\n\r\nWell. It needs an additional processing step (the one you get for free when using markdown). I'll work on some scripting for this soonish, but too late for this spec.",
          "createdAt": "2021-10-25T12:00:46Z",
          "updatedAt": "2021-10-25T12:00:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84vBzb8",
          "commit": {
            "abbreviatedOid": "5a40d4b"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-26T08:05:24Z",
          "updatedAt": "2021-10-26T08:05:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 975,
      "id": "PR_kwDOAHsHi84uZi95",
      "title": "First pass cleaning up some of the typos from AD review",
      "url": "https://github.com/httpwg/http2-spec/pull/975",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Partially addresses some of #974. This is the low hanging fruit.",
      "createdAt": "2021-11-11T10:31:23Z",
      "updatedAt": "2021-11-12T13:12:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "ed41e990998e918ca6dee3fd1dbbe4c587ce622a",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-typos-from-ad-review",
      "headRefOid": "21870dd8e9ea2dd07438a4375c7e4e57bee431c1",
      "closedAt": "2021-11-12T13:12:38Z",
      "mergedAt": "2021-11-12T13:12:38Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "2d1f7bdce5bbc0c64e1123f2e39a3ade0afbc2b7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v8iAS",
          "commit": {
            "abbreviatedOid": "7477b57"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T04:00:57Z",
          "updatedAt": "2021-11-12T04:01:36Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n            of the altered settings can rely on the values from the oldest unacknowledged SETTINGS frame\r\n```",
              "createdAt": "2021-11-12T04:00:57Z",
              "updatedAt": "2021-11-12T04:01:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 976,
      "id": "PR_kwDOAHsHi84uZq-o",
      "title": "Clarify some settings behaviours based on AD review",
      "url": "https://github.com/httpwg/http2-spec/pull/976",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-11T11:15:55Z",
      "updatedAt": "2021-11-12T12:55:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "ed41e990998e918ca6dee3fd1dbbe4c587ce622a",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-ignoring-settings",
      "headRefOid": "a972f2bc88e745a4c466b1b58eaaa6b530e47b5c",
      "closedAt": "2021-11-12T12:55:39Z",
      "mergedAt": "2021-11-12T12:55:39Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "d612eb71d7ba62fb3a549c035a8cddb9b7919cf6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v8iI7",
          "commit": {
            "abbreviatedOid": "2970dbc"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T04:02:38Z",
          "updatedAt": "2021-11-12T04:02:41Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Text overlap with #975?\r\n\r\nEdit: I should say, that if ignoring is permitted, then ignoring is applying.  I don't think that we should say \"or ignored\".\r\n\r\n",
              "createdAt": "2021-11-12T04:02:38Z",
              "updatedAt": "2021-11-12T04:03:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84v9TKu",
          "commit": {
            "abbreviatedOid": "2970dbc"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-12T09:57:45Z",
          "updatedAt": "2021-11-12T09:57:46Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Ok, that makes sense. I'll update this patch to remove this text.",
              "createdAt": "2021-11-12T09:57:45Z",
              "updatedAt": "2021-11-12T09:57:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 977,
      "id": "PR_kwDOAHsHi84udDFc",
      "title": "Update TCP reference",
      "url": "https://github.com/httpwg/http2-spec/pull/977",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #974 ",
      "createdAt": "2021-11-12T12:29:37Z",
      "updatedAt": "2021-11-19T03:31:18Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "ed41e990998e918ca6dee3fd1dbbe4c587ce622a",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "tcpbis",
      "headRefOid": "9bcbd993981fdc9a33fbe7d0c0fd6dd0f97db953",
      "closedAt": "2021-11-19T03:31:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "As tcpbis is stuck in DISCUSS purgatory and we have no strong need to refer to the latest and shiniest version of TCP, I suggest that we not merge this.  Thanks to Francesca for highlighting the issues there.",
          "createdAt": "2021-11-15T00:47:28Z",
          "updatedAt": "2021-11-15T00:47:28Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this one.  We can revive this if things turn out differently with TCPbis.",
          "createdAt": "2021-11-19T03:31:17Z",
          "updatedAt": "2021-11-19T03:31:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v9-OO",
          "commit": {
            "abbreviatedOid": "9bcbd99"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T12:55:56Z",
          "updatedAt": "2021-11-12T12:55:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 978,
      "id": "PR_kwDOAHsHi84udDpF",
      "title": "TLS BCP is normative",
      "url": "https://github.com/httpwg/http2-spec/pull/978",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We cite it and attach normative language to it.\r\n\r\nFor #974.",
      "createdAt": "2021-11-12T12:33:09Z",
      "updatedAt": "2021-11-19T03:29:42Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "ed41e990998e918ca6dee3fd1dbbe4c587ce622a",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "tlsbcp",
      "headRefOid": "e3fee3b0946e6cb38739e8417141dbf5d1f8397f",
      "closedAt": "2021-11-19T03:29:42Z",
      "mergedAt": "2021-11-19T03:29:42Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "4726ef784b75df519aebc5ea88c9b935fb184584"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v9-Rq",
          "commit": {
            "abbreviatedOid": "e3fee3b"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T12:56:16Z",
          "updatedAt": "2021-11-12T12:56:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 979,
      "id": "PR_kwDOAHsHi84udFVN",
      "title": "Tailored",
      "url": "https://github.com/httpwg/http2-spec/pull/979",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-12T12:43:50Z",
      "updatedAt": "2021-11-19T03:29:52Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "d612eb71d7ba62fb3a549c035a8cddb9b7919cf6",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "tailored",
      "headRefOid": "13fed2002bbd7480c043bb2f1f5eb848e59cbc7c",
      "closedAt": "2021-11-19T03:29:52Z",
      "mergedAt": "2021-11-19T03:29:52Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "f6e76f8b15c95aa0a2356107ff1bd10b9f2ec8c2"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm working on the wrong machine and my setup needs tuning.  I'll just drop the errant commit.",
          "createdAt": "2021-11-12T13:10:21Z",
          "updatedAt": "2021-11-12T13:10:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v9-Xe",
          "commit": {
            "abbreviatedOid": "52fdcb6"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Assuming the BCP stuff gets merged via the other PR first.",
          "createdAt": "2021-11-12T12:56:41Z",
          "updatedAt": "2021-11-12T12:56:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 980,
      "id": "PR_kwDOAHsHi84udGPC",
      "title": "Link to frame type definitions.",
      "url": "https://github.com/httpwg/http2-spec/pull/980",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This links to the section rather than the registry as we no longer list\r\nframe types in the IANA considerations section.\r\n\r\nFor #974.",
      "createdAt": "2021-11-12T12:49:41Z",
      "updatedAt": "2021-11-19T03:29:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "ed41e990998e918ca6dee3fd1dbbe4c587ce622a",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "frame-link",
      "headRefOid": "ad8ffe1f56f78bb31b6195fe8f446ba6698dc64c",
      "closedAt": "2021-11-19T03:29:58Z",
      "mergedAt": "2021-11-19T03:29:58Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "fc1729768f0dc44c04db9344ca5e1550cb6c2954"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v9-bP",
          "commit": {
            "abbreviatedOid": "ad8ffe1"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T12:56:59Z",
          "updatedAt": "2021-11-12T12:56:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 981,
      "id": "PR_kwDOAHsHi84udJng",
      "title": "Fix the flow control text",
      "url": "https://github.com/httpwg/http2-spec/pull/981",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Editorial change only.  The idea is to read as soon as data arrives in\r\nthe TCP buffer.\r\n\r\nIn practice, this is not necessary, but leaving things in the TCP buffer\r\nindefinitely can deadlock.  (Some implementations of over TCP-based\r\nprotocols do this and in this case it is BAD.)\r\n\r\nFor #974.",
      "createdAt": "2021-11-12T13:09:45Z",
      "updatedAt": "2021-11-19T03:30:05Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "d612eb71d7ba62fb3a549c035a8cddb9b7919cf6",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "flow-control-timely",
      "headRefOid": "eaf95fd8701fbee6107abb4130dc079fb3b4cd8d",
      "closedAt": "2021-11-19T03:30:05Z",
      "mergedAt": "2021-11-19T03:30:05Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "914f63cfd3dbacc1a74361099afc8d1722a9f6f6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v-BhO",
          "commit": {
            "abbreviatedOid": "eaf95fd"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Yeah, good rewording here.",
          "createdAt": "2021-11-12T13:11:59Z",
          "updatedAt": "2021-11-12T13:11:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 982,
      "id": "PR_kwDOAHsHi84udKXI",
      "title": "Cite error code section",
      "url": "https://github.com/httpwg/http2-spec/pull/982",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #974.",
      "createdAt": "2021-11-12T13:14:00Z",
      "updatedAt": "2021-11-19T03:30:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "2d1f7bdce5bbc0c64e1123f2e39a3ade0afbc2b7",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "cite-codes",
      "headRefOid": "a1fdaaa2241e6b6c217f99c0b2ca0e446d0f26b3",
      "closedAt": "2021-11-19T03:30:10Z",
      "mergedAt": "2021-11-19T03:30:10Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "4a8b1528a5e5a4d12cae9abfe0824890db88e6ff"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v-CxB",
          "commit": {
            "abbreviatedOid": "a1fdaaa"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T13:18:03Z",
          "updatedAt": "2021-11-12T13:18:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 983,
      "id": "PR_kwDOAHsHi84udLJc",
      "title": "Cite deprecation note",
      "url": "https://github.com/httpwg/http2-spec/pull/983",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #974.",
      "createdAt": "2021-11-12T13:18:21Z",
      "updatedAt": "2021-11-19T03:30:17Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "2d1f7bdce5bbc0c64e1123f2e39a3ade0afbc2b7",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "priority-in-headers-deprecated",
      "headRefOid": "fc3fdec2b8766c7a9aa7266545913ba69cdb28dc",
      "closedAt": "2021-11-19T03:30:16Z",
      "mergedAt": "2021-11-19T03:30:16Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "35f873085c4bd51c4b97bb03fa5148a90caf7d7a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v-gho",
          "commit": {
            "abbreviatedOid": "fc3fdec"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T15:11:40Z",
          "updatedAt": "2021-11-12T15:11:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 984,
      "id": "PR_kwDOAHsHi84udN8F",
      "title": "Remove contradictory text on use of RST_STREAM",
      "url": "https://github.com/httpwg/http2-spec/pull/984",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Two paragraphs up we mandate the use of PROTOCOL_ERROR, so this is not\r\nnecessary.\r\n\r\nFor #974.",
      "createdAt": "2021-11-12T13:33:39Z",
      "updatedAt": "2021-11-19T03:30:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "2d1f7bdce5bbc0c64e1123f2e39a3ade0afbc2b7",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "malformed-rst",
      "headRefOid": "ccbb6f3ed99037a8dc459cedcdc7aa6bea491934",
      "closedAt": "2021-11-19T03:30:23Z",
      "mergedAt": "2021-11-19T03:30:23Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8c317885add49f69923a84df7fc6601bdcf61b1c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v-glj",
          "commit": {
            "abbreviatedOid": "ccbb6f3"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T15:11:55Z",
          "updatedAt": "2021-11-12T15:11:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 985,
      "id": "PR_kwDOAHsHi84udP_C",
      "title": "Fix sections format",
      "url": "https://github.com/httpwg/http2-spec/pull/985",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #974.",
      "createdAt": "2021-11-12T13:45:15Z",
      "updatedAt": "2021-11-19T03:30:29Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "2d1f7bdce5bbc0c64e1123f2e39a3ade0afbc2b7",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "sectionformat",
      "headRefOid": "f03c9654d70c79b7eda5e2e7b70e6d74066f8306",
      "closedAt": "2021-11-19T03:30:29Z",
      "mergedAt": "2021-11-19T03:30:29Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c6d2016e5ea1fa7f37f47998d827a88177f0652d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v-grZ",
          "commit": {
            "abbreviatedOid": "f03c965"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T15:12:17Z",
          "updatedAt": "2021-11-12T15:12:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 986,
      "id": "PR_kwDOAHsHi84udQeO",
      "title": "Add citation for odd request forms",
      "url": "https://github.com/httpwg/http2-spec/pull/986",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #974.",
      "createdAt": "2021-11-12T13:47:58Z",
      "updatedAt": "2021-11-19T03:30:35Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "2d1f7bdce5bbc0c64e1123f2e39a3ade0afbc2b7",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "asterisk-form-ref",
      "headRefOid": "3cc3cf72e15c3f2d848d81984a53c0c17f1064e9",
      "closedAt": "2021-11-19T03:30:35Z",
      "mergedAt": "2021-11-19T03:30:35Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "18be37b1eb428dae894d971471a10a735ee6a546"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v-g7V",
          "commit": {
            "abbreviatedOid": "3cc3cf7"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T15:13:15Z",
          "updatedAt": "2021-11-12T15:13:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 987,
      "id": "PR_kwDOAHsHi84udRob",
      "title": "Keep the note about updating stuff",
      "url": "https://github.com/httpwg/http2-spec/pull/987",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #974.",
      "createdAt": "2021-11-12T13:54:26Z",
      "updatedAt": "2021-11-19T03:30:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "2d1f7bdce5bbc0c64e1123f2e39a3ade0afbc2b7",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "keep-update-note",
      "headRefOid": "d87845aa01894517d496edae3d174bea305923f8",
      "closedAt": "2021-11-19T03:30:39Z",
      "mergedAt": "2021-11-19T03:30:39Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "3fc15b6c2757552cc1d3d6812dcd8700bb6f2eb5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v-hJp",
          "commit": {
            "abbreviatedOid": "d87845a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T15:14:10Z",
          "updatedAt": "2021-11-12T15:14:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 988,
      "id": "PR_kwDOAHsHi84udSIB",
      "title": "Reference is to this doc",
      "url": "https://github.com/httpwg/http2-spec/pull/988",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #974.",
      "createdAt": "2021-11-12T13:57:15Z",
      "updatedAt": "2021-11-19T03:30:44Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "2d1f7bdce5bbc0c64e1123f2e39a3ade0afbc2b7",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "of-this-doc",
      "headRefOid": "c6d9d20302ab5499d744846bd84195773f5bfabd",
      "closedAt": "2021-11-19T03:30:43Z",
      "mergedAt": "2021-11-19T03:30:43Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "4718cd8d28e89d2368235ec6972bb98c5155d2fe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84v-hPZ",
          "commit": {
            "abbreviatedOid": "c6d9d20"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-12T15:14:32Z",
          "updatedAt": "2021-11-12T15:14:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 989,
      "id": "PR_kwDOAHsHi84u4N7H",
      "title": "Updates to -semantics are important",
      "url": "https://github.com/httpwg/http2-spec/pull/989",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Important enough to note in the change log anyway.",
      "createdAt": "2021-11-22T23:02:20Z",
      "updatedAt": "2021-12-24T01:02:49Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "21d73239985424ae6b6b49d4773d13e3361f5531",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "editorial-semantics-cl",
      "headRefOid": "a627e392fc43d8b74649768f0094d4016d3c371e",
      "closedAt": "2021-12-24T01:02:46Z",
      "mergedAt": "2021-12-24T01:02:46Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8bc9af0c5ef2ecead439160fcdee85f4c94dcefb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84wes33",
          "commit": {
            "abbreviatedOid": "a627e39"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-23T08:44:40Z",
          "updatedAt": "2021-11-23T08:44:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 991,
      "id": "PR_kwDOAHsHi84vGaAg",
      "title": "\"idle\"->\"closed\" transition",
      "url": "https://github.com/httpwg/http2-spec/pull/991",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I improved the text along the lines J\u00f6rg suggested.  However, I realized\r\nthat the transition should really be in the diagram.  That's basically\r\nimpossible given the nature of the diagram, but it's worth including in\r\nthe description at least.\r\n\r\nFor #990.",
      "createdAt": "2021-11-29T00:22:19Z",
      "updatedAt": "2021-11-29T07:01:29Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "ec6331ca79d52b0cf75cec0808b4563635d667d0",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "idle-closed",
      "headRefOid": "d26bd29225053e1f8c3e412edbd582950a884270",
      "closedAt": "2021-11-29T07:01:29Z",
      "mergedAt": "2021-11-29T07:01:29Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "fae4353b266ecc787d50474c4a207d75fdecd325"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84wuKfr",
          "commit": {
            "abbreviatedOid": "ab02f5d"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This is a good clarification. One note about a whitespace change but the textual changes are :+1:",
          "createdAt": "2021-11-29T06:51:24Z",
          "updatedAt": "2021-11-29T06:51:47Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Is this whitespace change intentional?",
              "createdAt": "2021-11-29T06:51:24Z",
              "updatedAt": "2021-11-29T06:51:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84wuKsE",
          "commit": {
            "abbreviatedOid": "ab02f5d"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-29T06:53:00Z",
          "updatedAt": "2021-11-29T06:53:01Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "No, my editor does a cleanup when I close it, and I caught this.  I made the change on the main branch, so this is redundant (and wrong).",
              "createdAt": "2021-11-29T06:53:01Z",
              "updatedAt": "2021-11-29T06:53:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 992,
      "id": "PR_kwDOAHsHi84vGaLl",
      "title": "Settings are acknowledged in order",
      "url": "https://github.com/httpwg/http2-spec/pull/992",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "For #990.",
      "createdAt": "2021-11-29T00:25:00Z",
      "updatedAt": "2021-11-29T06:52:10Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "21d73239985424ae6b6b49d4773d13e3361f5531",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "settings-ack-order",
      "headRefOid": "6474fa35dc331cebf4083132b325abe60d015c9a",
      "closedAt": "2021-11-29T06:52:10Z",
      "mergedAt": "2021-11-29T06:52:10Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "607f75be0851f55dbd727c2bf0d48b04d3146b9e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84wuKk6",
          "commit": {
            "abbreviatedOid": "6474fa3"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-29T06:52:05Z",
          "updatedAt": "2021-11-29T06:52:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 993,
      "id": "PR_kwDOAHsHi84vGaz9",
      "title": "Add a note about SETTINGS_TIMEOUT",
      "url": "https://github.com/httpwg/http2-spec/pull/993",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "This isn't TCP RTT based.\r\n\r\nFor #990.",
      "createdAt": "2021-11-29T00:33:43Z",
      "updatedAt": "2021-11-29T06:52:42Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "1be1c61c188e560d1031b0c5ffea2dd8f9f8eeec",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "reasonable-time",
      "headRefOid": "827336376eb975202b9af9aad44f2b8f4a3e01f4",
      "closedAt": "2021-11-29T06:52:42Z",
      "mergedAt": "2021-11-29T06:52:42Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "d0dd0ecc5c4e443c21b65f09abe1741c293203c7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84wuKnv",
          "commit": {
            "abbreviatedOid": "8273363"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-29T06:52:28Z",
          "updatedAt": "2021-11-29T06:52:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 994,
      "id": "PR_kwDOAHsHi84vGcXQ",
      "title": "Add mention of silly window syndrome",
      "url": "https://github.com/httpwg/http2-spec/pull/994",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "For #990.",
      "createdAt": "2021-11-29T00:53:16Z",
      "updatedAt": "2021-11-29T06:53:16Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "1be1c61c188e560d1031b0c5ffea2dd8f9f8eeec",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "sws-avoidance",
      "headRefOid": "94a0a33aedee074e308fbd830ba3e602f516b85c",
      "closedAt": "2021-11-29T06:53:16Z",
      "mergedAt": "2021-11-29T06:53:16Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "95cb62fb1e0fc4b52ee97875f75f1ef2993b1ab3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84wuKts",
          "commit": {
            "abbreviatedOid": "94a0a33"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-29T06:53:12Z",
          "updatedAt": "2021-11-29T06:53:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 995,
      "id": "PR_kwDOAHsHi84vGdHN",
      "title": "More explanation about no content responses",
      "url": "https://github.com/httpwg/http2-spec/pull/995",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "And an update to the section reference.\r\n\r\nFor #990.",
      "createdAt": "2021-11-29T01:00:51Z",
      "updatedAt": "2021-11-29T06:53:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "1be1c61c188e560d1031b0c5ffea2dd8f9f8eeec",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "no-content",
      "headRefOid": "79d973f2ff7f88a780cab34872032e8e0e297c4b",
      "closedAt": "2021-11-29T06:53:59Z",
      "mergedAt": "2021-11-29T06:53:59Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "ec6331ca79d52b0cf75cec0808b4563635d667d0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84wuK0B",
          "commit": {
            "abbreviatedOid": "79d973f"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-29T06:53:55Z",
          "updatedAt": "2021-11-29T06:53:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 996,
      "id": "PR_kwDOAHsHi84vGdTp",
      "title": "Fix bad reference to 400 (Bad Request)",
      "url": "https://github.com/httpwg/http2-spec/pull/996",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "A consequence of bad rendering logic, methinks.\r\n\r\nNoted in #990.",
      "createdAt": "2021-11-29T01:03:04Z",
      "updatedAt": "2021-11-29T06:54:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "1be1c61c188e560d1031b0c5ffea2dd8f9f8eeec",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "bad-bad-request-xref",
      "headRefOid": "150caf7056f6548fde63fa2651b379416da65c03",
      "closedAt": "2021-11-29T06:54:27Z",
      "mergedAt": "2021-11-29T06:54:27Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "31dd869a89ed8e4d2acda7ba1ab6f33937b515e4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84wuK4D",
          "commit": {
            "abbreviatedOid": "150caf7"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-29T06:54:23Z",
          "updatedAt": "2021-11-29T06:54:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 997,
      "id": "PR_kwDOAHsHi84vGdwc",
      "title": "PUSH_PROMISE and SETTINGS_MAX_CONCURRENT_STREAMS",
      "url": "https://github.com/httpwg/http2-spec/pull/997",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "This is confusing; hopefully this rewrite is a little less so.\r\n\r\nFor #990.",
      "createdAt": "2021-11-29T01:08:03Z",
      "updatedAt": "2021-11-29T08:51:36Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "1be1c61c188e560d1031b0c5ffea2dd8f9f8eeec",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "reserved-can-exceed-limit",
      "headRefOid": "240c1c423e8fdca91d62989bf8782c9ea8293331",
      "closedAt": "2021-11-29T08:51:36Z",
      "mergedAt": "2021-11-29T08:51:36Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "a92cd7940c3996c18042cde84346454bee28e7f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84wttl2",
          "commit": {
            "abbreviatedOid": "c3d967b"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-29T01:12:59Z",
          "updatedAt": "2021-11-29T01:13:21Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n            from opening the streams necessary to push responses. However, this does not prevent the\r\n```",
              "createdAt": "2021-11-29T01:12:59Z",
              "updatedAt": "2021-11-29T01:13:21Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n            the concurrent stream limit. Clients that do not wish to receive pushed resources need\r\n```",
              "createdAt": "2021-11-29T01:13:09Z",
              "updatedAt": "2021-11-29T01:13:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84wuLSP",
          "commit": {
            "abbreviatedOid": "b13029f"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-29T06:57:26Z",
          "updatedAt": "2021-11-29T06:57:42Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Should we explicitly point towards `SETTINGS_ENABLE_PUSH` here? It's only a few paragraphs away in the text but this is the second time we've had a review that missed that setting, and it fits well with the text here:\r\n\r\n> Clients that do not wish to receive pushed resources need to reset any unwanted reserved streams, or set `SETTINGS_ENABLE_PUSH` to `0` [xref whatever].",
              "createdAt": "2021-11-29T06:57:26Z",
              "updatedAt": "2021-11-29T06:57:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84wug1_",
          "commit": {
            "abbreviatedOid": "240c1c4"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-29T08:51:32Z",
          "updatedAt": "2021-11-29T08:51:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 998,
      "id": "PR_kwDOAHsHi84vGd7U",
      "title": "Change title of priority background section",
      "url": "https://github.com/httpwg/http2-spec/pull/998",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Mentioning RFC 7540 directly makes it clearer, I think.\r\n\r\nFrom #990.",
      "createdAt": "2021-11-29T01:09:43Z",
      "updatedAt": "2021-11-29T06:54:50Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "1be1c61c188e560d1031b0c5ffea2dd8f9f8eeec",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "background-priority",
      "headRefOid": "0ee834753466d09aa4f8b1193965eedefbbcab49",
      "closedAt": "2021-11-29T06:54:49Z",
      "mergedAt": "2021-11-29T06:54:49Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "fef0bf76e8dd98a37475059b191ca03fd8a21306"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84wttj9",
          "commit": {
            "abbreviatedOid": "0ee8347"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-29T01:12:24Z",
          "updatedAt": "2021-11-29T01:12:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOAHsHi84wuK7Y",
          "commit": {
            "abbreviatedOid": "0ee8347"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-29T06:54:46Z",
          "updatedAt": "2021-11-29T06:54:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 999,
      "id": "PR_kwDOAHsHi84vGexs",
      "title": "2119 language for second GOAWAY",
      "url": "https://github.com/httpwg/http2-spec/pull/999",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "This is the one case in J\u00f6rg's review where I think we need text.  In\r\nthe other places, the text is secondary to other normative language and\r\nshould not be restated in direct terms (or it would need to be far more\r\nprecise than it is).\r\n\r\nFor #990.",
      "createdAt": "2021-11-29T01:16:22Z",
      "updatedAt": "2021-11-29T06:55:44Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "1be1c61c188e560d1031b0c5ffea2dd8f9f8eeec",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "moar-normative",
      "headRefOid": "570aca9a973fb926069ac4a6e7f566c3d9d097cd",
      "closedAt": "2021-11-29T06:55:44Z",
      "mergedAt": "2021-11-29T06:55:44Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "9fdb86f97bf7c2b6536349966c360381d2152785"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84wuLCX",
          "commit": {
            "abbreviatedOid": "570aca9"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-29T06:55:35Z",
          "updatedAt": "2021-11-29T06:55:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1001,
      "id": "PR_kwDOAHsHi84ves2y",
      "title": "Sean's SECDIR review",
      "url": "https://github.com/httpwg/http2-spec/pull/1001",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I'll need to respond via email, but these changes all seem fine.  I'm less sure about the first one than the others though, so look at that carefully.  I'm equally happy pushing back on that; Sean is right that this is probably the most important factoid in the text, but the reordering is a little awkward.",
      "createdAt": "2021-12-07T06:00:53Z",
      "updatedAt": "2022-01-20T07:40:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "07053327abf44928678ebfaa400638682158ec5f",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "sean-secdir",
      "headRefOid": "2a796ac7ab6c90aa9287843cad108b5298beb0b7",
      "closedAt": "2022-01-20T07:40:38Z",
      "mergedAt": "2022-01-20T07:40:38Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "a8e681da529d6675af3a50643091480f66f47fda"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the review; I've tried your suggestion.  It seems to work.",
          "createdAt": "2021-12-07T10:17:29Z",
          "updatedAt": "2021-12-07T10:17:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84xLVdN",
          "commit": {
            "abbreviatedOid": "1a5b61a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-07T10:05:56Z",
          "updatedAt": "2021-12-07T10:11:26Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "The last sentence here isn't right: it reads: \"These URIs do not include any indication about what versions an upstream server supports HTTP/2\".\r\n\r\nConsider:\r\n\r\n- \"These URIs do not include any indication about what HTTP versions an upstream server supports.\"",
              "createdAt": "2021-12-07T10:06:56Z",
              "updatedAt": "2021-12-07T10:11:26Z"
            },
            {
              "originalPosition": 29,
              "body": "I think moving this down is fine but this paragraph now reads a bit strangely. It feels like a dangling paragraph fragment, like we wanted to put this information in somewhere but couldn't find anywhere good so we jammed it here. Which I guess is accurate, but I'd like to be able to hide that.\r\n\r\nWe have defined the term \"client\" in the glossary above, so we don't need to redefine it here. If we want we can move the \"TCP connection initiator\" piece up to the glossary too. We could then move the \"application-layer protocol running on top of a TCP connection\" up to the overview. WDYT?",
              "createdAt": "2021-12-07T10:10:07Z",
              "updatedAt": "2021-12-07T10:11:26Z"
            },
            {
              "originalPosition": 54,
              "body": "Was the decent here intentional?",
              "createdAt": "2021-12-07T10:10:36Z",
              "updatedAt": "2021-12-07T10:11:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84xLYvd",
          "commit": {
            "abbreviatedOid": "34dfb52"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-07T10:17:18Z",
          "updatedAt": "2021-12-07T10:17:19Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "The indent was poor before, but I \"fixed\" it when reflowing the text.",
              "createdAt": "2021-12-07T10:17:19Z",
              "updatedAt": "2021-12-07T10:17:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84zIfrb",
          "commit": {
            "abbreviatedOid": "2a796ac"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-20T07:40:34Z",
          "updatedAt": "2022-01-20T07:40:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1002,
      "id": "PR_kwDOAHsHi84v5lcX",
      "title": "Add 0x to Frame layout diagrams for consistency",
      "url": "https://github.com/httpwg/http2-spec/pull/1002",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "This stems from the IESG review of the priorities draft, where \u00c9ric Vyncke noted the inconsistenc between prose and diagram. This change to use 0x throughout makes it consistent with HTTP/3, which helps documents that need to define frames for both versions.",
      "createdAt": "2021-12-15T16:11:14Z",
      "updatedAt": "2021-12-24T01:02:20Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "a92cd7940c3996c18042cde84346454bee28e7f8",
      "headRepository": "LPardue/http2-spec",
      "headRefName": "patch-3",
      "headRefOid": "8a47280f69773b32c3ccb01a47af90ad9392f686",
      "closedAt": "2021-12-24T01:02:20Z",
      "mergedAt": "2021-12-24T01:02:20Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0feaaa1723fc884b143638535b22f7ed0b5731cf"
      },
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You can theoretically take them up until the RFC is published, with vary layers of pain. Since this was caught in our IESG review, it's likely to come up in yours. \r\n\r\nYour editor discretion on merging this change of course.",
          "createdAt": "2021-12-15T21:11:50Z",
          "updatedAt": "2021-12-15T21:11:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84xrKye",
          "commit": {
            "abbreviatedOid": "8a47280"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This LGTM, but I'll let @martinthomson confirm that we're still happy to take editorial changes at this time.",
          "createdAt": "2021-12-15T21:02:07Z",
          "updatedAt": "2021-12-15T21:02:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1003,
      "id": "PR_kwDOAHsHi84wNn9-",
      "title": "Stricter, clearer rules for Dynamic Table Size Update",
      "url": "https://github.com/httpwg/http2-spec/pull/1003",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As they relate to changes in SETTINGS_HEADER_TABLE_SIZE.\r\n\r\nThis is the strict, by-the-book interpretation.  That is, if the value\r\nchanges, you have to send the update, even if it is pointless (that is,\r\nyou aren't changing the size of the table).\r\n\r\nNote that I'm eliding the point about multiple instructions, which are\r\nnecessary if the decoder reduces the maximum below the current size.\r\nThe only nod in that direction is \"at least one\" and a reference to the\r\nsection that talks about the need for multiple updates.\r\n\r\nThis pulls in more of RFC 7541 than I might have liked, but we have to\r\ndeal with the integration somewhere and this seems like a reasonable\r\nplace to do that.  It might have been better to put this text in a -bis\r\nrevision of RFC 7541, but we decided to leave that document as-is.",
      "createdAt": "2021-12-23T05:19:00Z",
      "updatedAt": "2021-12-23T23:45:31Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "a92cd7940c3996c18042cde84346454bee28e7f8",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "initial-table-size",
      "headRefOid": "f499930deab0300d7ca094a40f680c5fc4a154df",
      "closedAt": "2021-12-23T12:56:11Z",
      "mergedAt": "2021-12-23T12:56:11Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "7741c1eeab28226f0f121a578f9febc250fe67fb"
      },
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM, this is a nice clarification that removes the possibility of a different interpretation that's known to have caused interoperability issues (nghttp2 vs haproxy). Let's merge it!",
          "createdAt": "2021-12-23T06:34:49Z",
          "updatedAt": "2021-12-23T06:34:49Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "Oh I see this PR already being merged. Opened #1004.",
          "createdAt": "2021-12-23T23:45:31Z",
          "updatedAt": "2021-12-23T23:45:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84yBwK9",
          "commit": {
            "abbreviatedOid": "f499930"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I agree with Willy, this is a really good clarification.",
          "createdAt": "2021-12-23T12:56:07Z",
          "updatedAt": "2021-12-23T12:56:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOAHsHi84yDEIF",
          "commit": {
            "abbreviatedOid": "f499930"
          },
          "author": "kazuho",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "I think this PR is in the correct direction.\r\n\r\nEndpoints have to process instructions using dynamic table, even when they advertise SETTINGS_MAX_HEADER_LIST_SIZE of zero. That is because the default is 4096. We did fix this problem in QPACK, but HPACK had already shipped.\r\n\r\nOTOH, I have concerns regarding new text suggesting Dynamic Table Update Size be sent even when there is no change in the size.",
          "createdAt": "2021-12-23T23:31:18Z",
          "updatedAt": "2021-12-23T23:33:45Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Is this correct?\r\n\r\nQuoting from [RFC 7541 section 4.2](https://httpwg.org/specs/rfc7541.html#maximum.table.size): _A change in the maximum size of the dynamic table is signaled via a dynamic table size update (see Section 6.3). This dynamic table size update MUST occur at the beginning of the first header block following the change to the dynamic table size. In HTTP/2, this follows a settings acknowledgment (see Section 6.5.3 of [HTTP2])._\r\n\r\nThis paragraph of RFC 7541 starts \"a change,\" but if the an HTTP/2 using an HPACK encoder with a dynamic table of size 4,096 (the default) and receives SETTINGS_MAX_HEADER_LIST_SIZE of 4096, it is not changing the size of the dynamic table.\r\n\r\nInteroperability-wise, do existing servers respond with a Dynamic Table Update Size instruction when the client sends SETTINGS_MAX_HEADER_LIST_SIZE no less than 4096? It seems to me that this newly added text suggest such behavior is required, but I'm not sure if many servers behave as such. Unless we have such confirmation, it would be dangerous to indicate that clients might complain under such circumstance.",
              "createdAt": "2021-12-23T23:31:18Z",
              "updatedAt": "2021-12-23T23:35:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1005,
      "id": "PR_kwDOAHsHi84wP0eO",
      "title": "Stricter, clearer rules for Dynamic Table Size Update v2",
      "url": "https://github.com/httpwg/http2-spec/pull/1005",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This reverts commit 290e381719b2fefe4e6182d3be288c48e8f5fd7e.\r\nSee #1003 for most of the discussion.\r\n\r\nThe key change here is to address #1004 by only requiring that the change be signaled when the table size is reduced.  When I dug more into this, it's a more disruptive change, so I've made a bunch of additional changes in support of that.\r\n\r\n",
      "createdAt": "2021-12-24T00:06:18Z",
      "updatedAt": "2022-01-19T21:53:38Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "20f4b5128588270a1287ce2f7d76f22728a729fe",
      "headRepository": "httpwg/http2-spec",
      "headRefName": "initial-table-size",
      "headRefOid": "569ab221e1a0c6aa92d2edaad98f8a92e3185060",
      "closedAt": "2022-01-19T21:53:37Z",
      "mergedAt": "2022-01-19T21:53:36Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "07053327abf44928678ebfaa400638682158ec5f"
      },
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have one suggestion about a point that seems to be possible to infer from all this but is not explicitly written and may condition the sequencing of operations. Do we **want** to support multiple settings updates on this parameter, hence announce in the middle of a communication that we changed our local decoder size ? It seems to me that this is the case but it does not appear in the original text where it more likely sounds like **the** initial size.\r\n\r\nIf we want to support repeated size changes from the decoder, then I agree that it's better to consider that 4096 is initial and that the setting changes it and Kazuho's wording sounds fine. But then it possibly ought to be explicitly mentioned such as:\r\n```\r\n  The decoder table size is preset to 4096 bytes. A decoder may at any time decide\r\n  to change the size of its table. It must then announce the new size using the\r\n  SETTINGS_HEADER_TABLE_SIZE setting, knowing that it will only be effective once\r\n  the SETTINGS frame is acknowledged by its peer. An encoder which observes a table\r\n  size reduction compared to the previously used one MUST announce the new size it\r\n  intends to use via a HPACK Dynamic Table Size Update code carrying a size lower\r\n  than, or equal to the decoder's maximum table size. This also implies that any\r\n  SETTINGS_HEADER_TABLE_SIZE change lower than the last Dynamic Table Size\r\n  Update MUST result in a new valid Dynamic Table Size Update to be emitted by the\r\n  encoder after the setting is acknowledged.\r\n```\r\nThis makes sure that it's safe for an encoder to only process the settings frame once and to send a single DTSU instead of one per SETTINGS frame.\r\n",
          "createdAt": "2021-12-24T08:20:13Z",
          "updatedAt": "2021-12-24T08:20:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@wtarreau, I struggled a little with your text, because I think that is what this already says.\r\n\r\nHowever, to address your question about settings changes, I don't think that we do really want multiple settings changes, but that is the protocol we have.  So multiple settings changes are possible and implied by the design of SETTINGS.\r\n\r\nMultiple changes are possible within the same SETTINGS frame, in case you were interested.  The designers of this protocol seemed to love unnecessary complexity.  There are some good reasons, but it's not clear that those reasons are sufficiently strong to justify the headaches they cause.\r\n\r\nI would really like it if implementations could just signal once in the preface, handle the preface from their peer and be done with settings.  That's how HTTP/3 works and while we might have been forced into it there by the complexities of the QUIC integration, it turned out to be a good outcome in my view.  Here, however, we need to deal with the fact that the protocol permits changes.",
          "createdAt": "2021-12-29T00:46:54Z",
          "updatedAt": "2021-12-29T00:46:54Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @martinthomson \r\n\r\nI'll have to clone your repo and run the diff here by hand then because I can't figure in this horrible interface how to view the complete set of changes at once resulting from multiple subsequent changes. And it will be easier to reread Kazuho's proposal in context.\r\n\r\nRegarding \"do we want\" I didn't imply that we love this situation, just \"do we want in order to support this interpretation of the protocol\", given that the current text never explicitly states that (as Cory mentioned a while ago, the settings change is acked by a the settings ack) and that even the protocol's original co-author back then already stated that it wasn't meant to be interpreted that way ( https://lists.w3.org/Archives/Public/ietf-http-wg/2015OctDec/0102.html ). Sure, the result is that we have what we have and we have to deal with it in the best way possible. In that spirit I think that Kazuho's proposal tries to be as closed as possible to the current state of deployment by indicating how some implementations behave vs what others expect and suggesting not to play in the gray area there.",
          "createdAt": "2021-12-30T04:50:54Z",
          "updatedAt": "2021-12-30T04:50:54Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Herv\u00e9's post there is quite useful, yes.  That supports this overall view.  I've cleaned up the comments on the diff view; let me know if what you see works.  The diff overall is fairly clean (it's mostly additions).",
          "createdAt": "2021-12-30T10:10:22Z",
          "updatedAt": "2021-12-30T10:10:22Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm just a bit confused, where am I supposed to see the unified diff ? the only way I know is by clicking on each individual commit, which is the solution I find inconvenient :-/  Do I have to add a magic \".patch\" in the URL bar somewhere ?\r\n",
          "createdAt": "2021-12-30T10:16:49Z",
          "updatedAt": "2021-12-30T10:16:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There's a \"Files changed\" tab toward the top of the page:\r\n![image](https://user-images.githubusercontent.com/67641/147742912-d501c900-94cc-4c4f-b05d-ff16ab0c6e54.png)\r\n\r\nAdding \".patch\" to the URL is a neat hack for finding something you can download, but usually I find that pulling from the branch is nicer to work with.\r\n",
          "createdAt": "2021-12-30T10:19:40Z",
          "updatedAt": "2021-12-30T10:21:20Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for pointing that one, I always thought it only contained the original PR's changes, not the latest proposed ones :-)\r\n\r\nI'm seeing this part which remains confusing: \"Any change to the maximum value set by the decoder takes effect when...\" which I'm reading as \"the decode first sets a size, then any change to this size ...\", thus reinforces what most servers currently do. I think Kazuho's proposal to move the sentence about initial values solves this:\r\n\"The dynamic table has a maximum size that is set by a decoder using the SETTINGS_HEADER_TABLE_SIZE setting; see XXX. The encoder at both client and server is initialized with a dynamic table size of 4,096 bytes, the initial value of the SETTINGS_HEADER_TABLE_SIZE setting. Any change by the decoder to the maximum value takes effect...\".\r\n\r\nThis makes it clear that the initially advertised value **is** a change, which currently is the main point of disagreement.\r\n\r\nProabably that we should wait for the end of new year holiday before merging it, so that other implementers for whom this is a change of behavior can have a look.",
          "createdAt": "2021-12-30T10:33:19Z",
          "updatedAt": "2021-12-30T10:33:19Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@icing  @bsdphk it would be nice if you, as implementers, could have a look at the proposals here, given that your implementations will need to be updated as well. In haproxy this results in a little ugly trick where the H2 layer has to inject an HPACK opcode (0x20). That's trivial but ugly enough that it warrants a second thought before jumping on any final solution.",
          "createdAt": "2022-01-04T08:44:41Z",
          "updatedAt": "2022-01-04T08:44:41Z"
        },
        {
          "author": "icing",
          "authorAssociation": "NONE",
          "body": "@wtarreau Apache is lazy and uses libnghttp2 for h2 protocol handling. It does not change the dynamic table size and all its handling and ACKs are done by nghttp2 transparently. If any changes are necessary, I'd expect them to come with an updated version of libnghttp2 and, since that is linked dynamically, no need to us to release anything new.",
          "createdAt": "2022-01-04T10:51:37Z",
          "updatedAt": "2022-01-04T10:51:37Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "@martinthomson I actually wonder if you failed to push the branch here, I saw new commits being pushed to https://github.com/martinthomson/http2v2/tree/initial-table-size instead.",
          "createdAt": "2022-01-05T00:58:40Z",
          "updatedAt": "2022-01-05T00:58:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Ugh, my bad.  Having two remotes sometimes bites me.  Sorry about that Willy.  (And thanks for noticing Kazuho.)",
          "createdAt": "2022-01-05T01:11:14Z",
          "updatedAt": "2022-01-05T01:18:36Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No problem Martin, don't be sorry, you're the one doing the job :-)\r\n\r\nI'm almost fine, almost everything is OK but there remains one ambiguity in that sentence: \"A decoder MUST treat a field block without a sufficiently small Dynamic Table Size Update instruction that follows an acknowledgment of a reduction of SETTINGS_HEADER_TABLE_SIZE as ...\". It ought to be \"a reduction of SETTINGS_HEADER_TABLE_SIZE below the current size of the header table size etc\" (which is slightly different since we don't want to have to re-emit a DTSU if the previous value was already smaller). Given that this principle was explained in the previous sentence, I think we can  simply address this by adding the word \"such\" before \"a reduction\": \"... follows an acknowledgement of such a reduction of SETTINGS_HEADER_TABLE_SIZE\", or probably even simpler, write \"acknowledgement of such a change\".\r\n",
          "createdAt": "2022-01-05T04:19:33Z",
          "updatedAt": "2022-01-05T04:19:33Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Ahh, yeah, it's hard to balance correct and clear here.",
          "createdAt": "2022-01-05T04:35:04Z",
          "updatedAt": "2022-01-05T04:35:04Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it's OK now. @kazuho @Lukasa , care to recheck ?\r\n",
          "createdAt": "2022-01-05T04:52:41Z",
          "updatedAt": "2022-01-05T04:52:41Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good catch indeed!",
          "createdAt": "2022-01-05T05:15:48Z",
          "updatedAt": "2022-01-05T05:15:48Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK for me as well now. Let's hope it will not cause difficulties (e.g. for those who would pre-queue stream frames).",
          "createdAt": "2022-01-05T05:26:30Z",
          "updatedAt": "2022-01-05T05:26:30Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Enqueuing stream frames (or any frame) and then allowing a settings change to occur ahead of those frames is very risky.  Anything that you do in those frames might violate a changed constraint.  If you must, enqueue all frames, SETTINGS included.",
          "createdAt": "2022-01-05T05:46:30Z",
          "updatedAt": "2022-01-05T05:46:30Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I generally agree, but it's a matter of design choice (or constraints). Before this change nothing implied a possible change of headers frames representation after the requests started to flow, so that was technically possible. There are not *that* many H2 implementations anyway so we'll see. But I also agree that here at least we keep the option of postponing the SETTINGS ACK frame, which leaves some options open if this issue is raised.\r\nThanks!",
          "createdAt": "2022-01-05T07:19:21Z",
          "updatedAt": "2022-01-05T07:19:21Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Cory,\r\n\r\nI suspect, as you suggested in your last sentence, that writing \"HPACK encoder\" and \"HPACK decoder\" here would remove any ambiguity. Of course we know it's not the HPACK encoder in terms of code that acks for example, but it's the same endpoint and that is sufficient to declare who does what.\r\n",
          "createdAt": "2022-01-10T15:22:11Z",
          "updatedAt": "2022-01-10T15:22:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've taken Mike's suggestion and mixed in a few \"HPACK decoder\" and \"HPACK encoder\" statements, using \"endpoint\" for protocol actions (settings, connection errors).  Tell if this makes more sense to you @Lukasa, or if I've messed it up.",
          "createdAt": "2022-01-11T01:09:04Z",
          "updatedAt": "2022-01-11T01:09:04Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "aside the typo above, LGTM. Thanks Martin!",
          "createdAt": "2022-01-11T07:17:15Z",
          "updatedAt": "2022-01-11T07:17:15Z"
        },
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson I guess we've left it long enough for reviews, it's probably okay to merge it by now, what do you think ? As a bonus it would close the last issue.",
          "createdAt": "2022-01-19T19:03:26Z",
          "updatedAt": "2022-01-19T19:03:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84yDeA3",
          "commit": {
            "abbreviatedOid": "0c8ece6"
          },
          "author": "kazuho",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Thank you for the quick work. Description of the mechanism looks correct, my comments below are purely editorial.",
          "createdAt": "2021-12-24T06:52:32Z",
          "updatedAt": "2021-12-24T06:57:24Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\n            Once an endpoint acknowledges a change to SETTINGS_HEADER_TABLE_SIZE reducing the maximum below the current size of\r\n```\r\nI understand that the timing is clarified in the paragraph right above, but perhaps it might not hurt to clarify that here as well.",
              "createdAt": "2021-12-24T06:52:33Z",
              "updatedAt": "2021-12-24T06:57:24Z"
            },
            {
              "originalPosition": 39,
              "body": "Can we move this sentence to the top of the paragraph?\r\n\r\nIt might be a good idea to order the sentences in the order things change; i.e., start with 4096 (the initial value of SETTINGS), then state that it changes when SETTINGS is acked.",
              "createdAt": "2021-12-24T06:55:04Z",
              "updatedAt": "2021-12-24T06:57:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yD5Jv",
          "commit": {
            "abbreviatedOid": "0c8ece6"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm happy with these changes. In general I like @kazuho's suggestions as well, but I don't have a strong preference as to whether we use those or not.",
          "createdAt": "2021-12-24T11:20:22Z",
          "updatedAt": "2021-12-24T11:20:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOAHsHi84yFDar",
          "commit": {
            "abbreviatedOid": "0c8ece6"
          },
          "author": "kazuho",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-27T06:23:24Z",
          "updatedAt": "2021-12-27T06:23:25Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "~~Aside from my comments above, this is incorrect. SETTINGS_MAX_HEADER_LIST_SIZE is merely advisory. Encoders are allowed to ignore the SETTINGS value ([section 10.5.1](https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#name-limits-on-field-block-size)).~~ Please scratch this comment. It is incorrect as pointed out by @wtarreau (thank you!).",
              "createdAt": "2021-12-27T06:23:25Z",
              "updatedAt": "2021-12-27T06:49:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yFEiy",
          "commit": {
            "abbreviatedOid": "0c8ece6"
          },
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-27T06:38:57Z",
          "updatedAt": "2021-12-27T06:38:58Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Warning @kazuho, the part in section 10.5.1 is about uncompressed fields, it only says that it's possible to send fields that are larger than the table size, and that this settings may or may not be used as a hint for such a size limit. I personally don't establish any such relation between maximum field size and headers table size, since HPACK clearly states that trying to store a larger field simply flushes the table, and I think that most implementations will use small tables even is they support large headers. I think the text really focuses on a hint that if an implementation advertises a large table, it's likely that it will also support large fields.",
              "createdAt": "2021-12-27T06:38:57Z",
              "updatedAt": "2021-12-27T06:38:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yUbT5",
          "commit": {
            "abbreviatedOid": "30dcfa5"
          },
          "author": "kazuho",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Thank you for the changes. I think the text is very clear, modulo one nit below.",
          "createdAt": "2022-01-05T04:57:01Z",
          "updatedAt": "2022-01-05T04:57:21Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "```suggestion\r\n            section=\"4.2\"/>.  A decoder MUST treat a field block that follows an acknowledgment to the reduction of the\r\n```",
              "createdAt": "2022-01-05T04:57:01Z",
              "updatedAt": "2022-01-05T04:57:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yUdHc",
          "commit": {
            "abbreviatedOid": "3a5e221"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-05T05:17:28Z",
          "updatedAt": "2022-01-05T05:17:28Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Applied manually.  Thanks.",
              "createdAt": "2022-01-05T05:17:28Z",
              "updatedAt": "2022-01-05T05:17:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yUeXK",
          "commit": {
            "abbreviatedOid": "3a5e221"
          },
          "author": "kazuho",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-05T05:30:48Z",
          "updatedAt": "2022-01-05T05:30:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOAHsHi84yf4rJ",
          "commit": {
            "abbreviatedOid": "3a5e221"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This looks like a solid description of what was always intended; good clarification.",
          "createdAt": "2022-01-09T06:47:02Z",
          "updatedAt": "2022-01-09T06:47:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOAHsHi84yip9V",
          "commit": {
            "abbreviatedOid": "3a5e221"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Sorry for the delay here folks, and thanks for the great work. I think this generally looks really good, but I have a specific linguistic nitpick that I think it might be worth us tightening up while we're here.",
          "createdAt": "2022-01-10T15:11:39Z",
          "updatedAt": "2022-01-10T15:12:47Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "This is ludicrous nitpicking, but we're wordsmithing here so I want to bring it up.\r\n\r\nI think we're using the words \"encoder\" and \"decoder\" here to mean two different things. In the first paragraph of this subsection you said:\r\n\r\n> Field compression is stateful.  Each endpoint has an encoder context and a decoder context that are used for encoding and decoding all field blocks.\r\n\r\nOk, great. Two endpoints, each with an encoder context and a decoder context. This implies that \"encoder\" means \"HPACK encoder\" and \"decoder\" means \"HPACK decoder\".\r\n\r\nThen, this paragraph (and several following) say things like:\r\n\r\n> The dynamic table has a maximum size that is set by a decoder using the SETTINGS_HEADER_TABLE_SIZE setting\r\n\r\nand \r\n\r\n> Any change to the maximum value set by the decoder using SETTINGS_HEADER_TABLE_SIZE takes effect when the encoder acknowledges settings.\r\n\r\nTo read _this_ sentence correctly I think I have to understand \"encoder\" and \"decoder\" to refer to _endpoints_. That is, \"encoder\" refers to \"the endpoint encoding headers\" and \"decoder\" refers to \"the endpoint decoding headers\". After all, HPACK decoders don't know anything about SETTINGS_HEADER_TABLE_SIZE, and HPACK encoders don't acknowledge settings.\r\n\r\nThis introduces terminology that the section hasn't used before: the idea of an implicit \"encoder\" role, whose definition is (I think) \"the endpoint transforming headers from a semantic field block to an encoded HPACK block\". Awkwardly, of course, an encoder in this definition also has an encoder (and a decoder!) in the definition of the first paragraph of the section.\r\n\r\nWe then flip back and forth between these two uses of the word \"encoder\" in the same paragraph. For example, paragraph 3 uses both senses of the words (notes in braces and bolded added by me), occasionally even in the same sentence:\r\n\r\n> Any change to the maximum value set by the decoder **{decoder as endpoint}** using SETTINGS_HEADER_TABLE_SIZE takes effect when the encoder acknowledges settings. The encoder **{encoder as HPACK encoder}** can set the dynamic table to any size up to the maximum value set by the decoder **{decoder as endpoint}**.  The encoder **{encoder as HPACK encoder, but maybe also as endpoint?}** declares the size of the dynamic table with a Dynamic Table Size Update instruction.\r\n\r\nI don't think this flexibility with language is helping to clarify a very murky area. I think we need to purge these paragraphs of any use of the words \"encoder\" or \"decoder\" that cannot sensibly have the word \"HPACK\" written directly in front of them. Perhaps we should just always write \"HPACK encoder\" and \"HPACK decoder\" to avoid ambiguity?",
              "createdAt": "2022-01-10T15:11:39Z",
              "updatedAt": "2022-01-10T15:13:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yi-LK",
          "commit": {
            "abbreviatedOid": "3a5e221"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T16:13:52Z",
          "updatedAt": "2022-01-10T16:13:53Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I think the clearest way might be to mention the endpoints explicitly, something like \"The dynamic table has a maximum size that is set by the decoder.  An endpoint communicates the size chosen by its decoder context using the SETTINGS_HEADER_TABLE_SIZE setting....\"\r\n\r\nThat is, only endpoints send settings while HPACK encoders only produce header blocks.",
              "createdAt": "2022-01-10T16:13:52Z",
              "updatedAt": "2022-01-10T16:13:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yln-A",
          "commit": {
            "abbreviatedOid": "b896b90"
          },
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-11T07:15:59Z",
          "updatedAt": "2022-01-11T07:15:59Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "s/an conformant/a conformant/\r\n",
              "createdAt": "2022-01-11T07:15:59Z",
              "updatedAt": "2022-01-11T07:15:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yowYV",
          "commit": {
            "abbreviatedOid": "b896b90"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Yup, I think this works well. Nice work @martinthomson!",
          "createdAt": "2022-01-11T17:52:52Z",
          "updatedAt": "2022-01-11T17:52:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1006,
      "id": "PR_kwDOAHsHi84wfH1z",
      "title": "Cleanup as per Lars' mostly automated review",
      "url": "https://github.com/httpwg/http2-spec/pull/1006",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2022-01-03T23:12:39Z",
      "updatedAt": "2022-01-04T18:21:11Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8bc9af0c5ef2ecead439160fcdee85f4c94dcefb",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "lars-iesg",
      "headRefOid": "a694ea0de8173def4b3613a769eccccda209682d",
      "closedAt": "2022-01-04T18:21:11Z",
      "mergedAt": "2022-01-04T18:21:11Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "3ee4e76cfcb323fce23c64e0d25acf37f2cfbbb1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84yTHZ-",
          "commit": {
            "abbreviatedOid": "a694ea0"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": " LGTM, :shipit: ",
          "createdAt": "2022-01-04T18:21:06Z",
          "updatedAt": "2022-01-04T18:21:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1007,
      "id": "PR_kwDOAHsHi84wfKjO",
      "title": "Roman's review",
      "url": "https://github.com/httpwg/http2-spec/pull/1007",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add a definition for SETTING contents.\r\nAdd a forward reference to the changes section.",
      "createdAt": "2022-01-03T23:41:05Z",
      "updatedAt": "2022-01-04T18:38:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "8bc9af0c5ef2ecead439160fcdee85f4c94dcefb",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "roman-iesg",
      "headRefOid": "50138460612df38d68b29949739d5920be73a385",
      "closedAt": "2022-01-04T18:38:40Z",
      "mergedAt": "2022-01-04T18:38:40Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "cf7b37396ba999727ad5424f9db5dc5bea81ce2d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84yTKfT",
          "commit": {
            "abbreviatedOid": "5013846"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-04T18:35:57Z",
          "updatedAt": "2022-01-04T18:35:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1009,
      "id": "PR_kwDOAHsHi84wkpVW",
      "title": "Editorial suggestions from Benjamin Kaduk's IESG Evaluation",
      "url": "https://github.com/httpwg/http2-spec/pull/1009",
      "state": "MERGED",
      "author": "kaduk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "of http2bis.",
      "createdAt": "2022-01-05T17:37:38Z",
      "updatedAt": "2022-01-07T04:33:33Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "cf7b37396ba999727ad5424f9db5dc5bea81ce2d",
      "headRepository": "kaduk/http2-spec",
      "headRefName": "nits",
      "headRefOid": "44bc7b6a7c47e9948e862c159e0986fd5d1bd9d6",
      "closedAt": "2022-01-07T04:33:33Z",
      "mergedAt": "2022-01-07T04:33:33Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b599a2e030a6f9ff127b32ed3e28af34a8377993"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84yW-H_",
          "commit": {
            "abbreviatedOid": "d9f0278"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-05T17:38:21Z",
          "updatedAt": "2022-01-05T17:41:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Might need to change per #1008 ",
              "createdAt": "2022-01-05T17:38:21Z",
              "updatedAt": "2022-01-05T17:41:37Z"
            },
            {
              "originalPosition": 43,
              "body": "With only one byte for pad length, the length is in effect capped here.\r\nThis is a separate commit for ease of reverting, if needed.",
              "createdAt": "2022-01-05T17:39:38Z",
              "updatedAt": "2022-01-05T17:41:37Z"
            },
            {
              "originalPosition": 61,
              "body": "There were already a few places where we listed the hardcoded stream identifier in the presentation language, so I figured it was fair game for including statically known values in the presentation language, even when it's part of the generic frame header.  This is also a separate commit for ease of reverting, if needed.",
              "createdAt": "2022-01-05T17:40:34Z",
              "updatedAt": "2022-01-05T17:41:37Z"
            },
            {
              "originalPosition": 106,
              "body": "\"is set to\" could be misread as saying that it remains set to that fixed value even as data is sent/received, which would disable flow control until the first WINDOW_UPDATE.  That's clearly a wrong reading, but maybe this wording tweak helps.",
              "createdAt": "2022-01-05T17:41:30Z",
              "updatedAt": "2022-01-05T17:41:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yYFGc",
          "commit": {
            "abbreviatedOid": "d9f0278"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-06T00:05:22Z",
          "updatedAt": "2022-01-06T00:07:31Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "No, this is a good catch, thanks.",
              "createdAt": "2022-01-06T00:05:22Z",
              "updatedAt": "2022-01-06T00:07:31Z"
            },
            {
              "originalPosition": 5,
              "body": "I'll handle that, thanks.",
              "createdAt": "2022-01-06T00:07:26Z",
              "updatedAt": "2022-01-06T00:07:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84ycMgh",
          "commit": {
            "abbreviatedOid": "d9f0278"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-07T03:26:12Z",
          "updatedAt": "2022-01-07T03:26:13Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Mostly...\r\n\r\n```suggestion\r\n  Padding (..2040),\r\n```",
              "createdAt": "2022-01-07T03:26:12Z",
              "updatedAt": "2022-01-07T03:26:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84ycNup",
          "commit": {
            "abbreviatedOid": "44bc7b6"
          },
          "author": "kaduk",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-07T03:42:00Z",
          "updatedAt": "2022-01-07T03:42:00Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Oops, good catch.  I pushed a fixup for the other two instances.",
              "createdAt": "2022-01-07T03:42:00Z",
              "updatedAt": "2022-01-07T03:42:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1010,
      "id": "PR_kwDOAHsHi84wnGh0",
      "title": "\u00c9ric Vyncke's feedback.",
      "url": "https://github.com/httpwg/http2-spec/pull/1010",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Tweaked the mention of h2c to avoid describing it with much depth.\r\nClarified \"both types of flow control\".\r\nExpress that there's only one valid length for PING frames.\r\nAdd a reference to the TLS Ciphers section from Appendix A.",
      "createdAt": "2022-01-06T14:15:14Z",
      "updatedAt": "2022-01-07T04:30:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "cf7b37396ba999727ad5424f9db5dc5bea81ce2d",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-eric-vyncke-feedback",
      "headRefOid": "70e54dc263c372ccd4e59e05ff512648b6ff327c",
      "closedAt": "2022-01-07T04:30:39Z",
      "mergedAt": "2022-01-07T04:30:39Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "ecb552047f079a093f305967b828f83a962c5395"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84ycRVj",
          "commit": {
            "abbreviatedOid": "70e54dc"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-07T04:30:25Z",
          "updatedAt": "2022-01-07T04:30:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1011,
      "id": "PR_kwDOAHsHi84wpBIh",
      "title": "Restore change to Experimental Use policies",
      "url": "https://github.com/httpwg/http2-spec/pull/1011",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This change was lost in a major refactoring of the section accidentally.\r\nRestore that.",
      "createdAt": "2022-01-07T03:23:09Z",
      "updatedAt": "2022-01-19T22:44:31Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "cf7b37396ba999727ad5424f9db5dc5bea81ce2d",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "iana-experimental",
      "headRefOid": "a72e076f4aae77bc710de6a5d50bc4af413a2148",
      "closedAt": "2022-01-19T22:33:28Z",
      "mergedAt": "2022-01-19T22:33:27Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9a161acd5a4fffb00e8b2d8e2faafa0decc37cbc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1012,
      "id": "PR_kwDOAHsHi84wpFUZ",
      "title": "Kaduk IESG feedback",
      "url": "https://github.com/httpwg/http2-spec/pull/1012",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Lots of small changes here, though nothing of any real consequence, I believe.",
      "createdAt": "2022-01-07T04:12:51Z",
      "updatedAt": "2022-02-17T23:18:15Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "cf7b37396ba999727ad5424f9db5dc5bea81ce2d",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "kaduk-iesg",
      "headRefOid": "83557f04934b2b69f00db9473c63481be25ac6db",
      "closedAt": "2022-02-17T23:18:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged manually.",
          "createdAt": "2022-02-17T23:18:13Z",
          "updatedAt": "2022-02-17T23:18:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84ycQhT",
          "commit": {
            "abbreviatedOid": "296b593"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-07T04:19:30Z",
          "updatedAt": "2022-01-07T04:19:31Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n                The \"h2c\" string was previously used in the HTTP Upgrade\r\n```",
              "createdAt": "2022-01-07T04:19:30Z",
              "updatedAt": "2022-01-07T04:19:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yeqXb",
          "commit": {
            "abbreviatedOid": "83557f0"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-07T18:53:24Z",
          "updatedAt": "2022-01-07T18:58:08Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Hmm, this section reads strangely to me. Field sections are made up of field blocks which carry the compressed bytes of field sections? This feels a little recursive.\r\n\r\nDo we have a clearer way to express this idea?",
              "createdAt": "2022-01-07T18:53:24Z",
              "updatedAt": "2022-01-07T18:58:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84zXUcW",
          "commit": {
            "abbreviatedOid": "83557f0"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-25T03:37:15Z",
          "updatedAt": "2022-01-25T03:37:15Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I gave it a try.  I had to submit a version, so I went with this:\r\n\r\n>          Each field block carries all of the compressed field lines of a single field section.",
              "createdAt": "2022-01-25T03:37:15Z",
              "updatedAt": "2022-01-25T03:37:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84zYsug",
          "commit": {
            "abbreviatedOid": "83557f0"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-25T10:54:03Z",
          "updatedAt": "2022-01-25T10:54:03Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I think that would work much better.",
              "createdAt": "2022-01-25T10:54:03Z",
              "updatedAt": "2022-01-25T10:54:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1013,
      "id": "PR_kwDOAHsHi84wpFrg",
      "title": "RFC 7540 specifically",
      "url": "https://github.com/httpwg/http2-spec/pull/1013",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-07T04:15:13Z",
      "updatedAt": "2022-01-07T18:49:30Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "cf7b37396ba999727ad5424f9db5dc5bea81ce2d",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "rob-iesg",
      "headRefOid": "af6e1e6f95018cde72b5103e4da14c836527dc96",
      "closedAt": "2022-01-07T18:49:30Z",
      "mergedAt": "2022-01-07T18:49:30Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "1d3c1424281faa803b51fe09e0875a99678a3146"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84yepnB",
          "commit": {
            "abbreviatedOid": "af6e1e6"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-07T18:49:26Z",
          "updatedAt": "2022-01-07T18:49:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1014,
      "id": "PR_kwDOAHsHi84wpGQR",
      "title": "In units of octets",
      "url": "https://github.com/httpwg/http2-spec/pull/1014",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Consistency is the hobgoblin of small minds and all that.\r\n\r\nCloses #1008.",
      "createdAt": "2022-01-07T04:20:51Z",
      "updatedAt": "2022-01-07T18:50:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "cf7b37396ba999727ad5424f9db5dc5bea81ce2d",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "in-octets",
      "headRefOid": "e20b5284b0d2a82c7d181e27a43eb1fc3b4e1a60",
      "closedAt": "2022-01-07T18:50:06Z",
      "mergedAt": "2022-01-07T18:50:06Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "20f4b5128588270a1287ce2f7d76f22728a729fe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84yeprQ",
          "commit": {
            "abbreviatedOid": "e20b528"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-07T18:49:48Z",
          "updatedAt": "2022-01-07T18:49:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1016,
      "id": "PR_kwDOAHsHi84w5JPi",
      "title": "Shorter name",
      "url": "https://github.com/httpwg/http2-spec/pull/1016",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "draft-ietf-httpbis-messaging is now going to be known as \"HTTP/1.1\".\r\nFollow suit.",
      "createdAt": "2022-01-13T01:38:38Z",
      "updatedAt": "2022-01-13T09:08:25Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "20f4b5128588270a1287ce2f7d76f22728a729fe",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "short-title",
      "headRefOid": "1a998d986230fb6bc46cf21dc1e08803a870132f",
      "closedAt": "2022-01-13T09:08:25Z",
      "mergedAt": "2022-01-13T09:08:25Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "b5c8fb3c7c466a662cde7eea3b6d6b864533e16d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84yv86q",
          "commit": {
            "abbreviatedOid": "1a998d9"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-13T09:08:20Z",
          "updatedAt": "2022-01-13T09:08:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1017,
      "id": "PR_kwDOAHsHi84w5MQX",
      "title": "Add some warnings about concatenation of URI parts",
      "url": "https://github.com/httpwg/http2-spec/pull/1017",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "It's going to happen anyway, but we can at least warn people.\r\n\r\nThis doesn't specify what validation is necessary in any detail (that is\r\nsomewhat involved), it only notes that simple concatenation is almost\r\ncertainly not secure.\r\n\r\nCloses #1015.",
      "createdAt": "2022-01-13T01:52:04Z",
      "updatedAt": "2022-01-13T09:11:02Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "20f4b5128588270a1287ce2f7d76f22728a729fe",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "combine-at-own-risk",
      "headRefOid": "3ce74b0ad508e982793740815da468d32baf89eb",
      "closedAt": "2022-01-13T09:11:02Z",
      "mergedAt": "2022-01-13T09:11:01Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "4ba604693254d231c926c8d74b181064a0af9b31"
      },
      "comments": [
        {
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK that's fine by me. At least they're warned, and those who want to know more will easily find info on the subject, including these conversations. Thank you Martin!\r\n",
          "createdAt": "2022-01-13T05:04:43Z",
          "updatedAt": "2022-01-13T05:04:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84yvMq8",
          "commit": {
            "abbreviatedOid": "946b06b"
          },
          "author": "wtarreau",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-13T04:14:06Z",
          "updatedAt": "2022-01-13T04:14:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "maybe add \"and/or when combined with <tt>:method</tt>to rebuild a request line\" since all implementations were caught with a space in that one.\r\n",
              "createdAt": "2022-01-13T04:14:06Z",
              "updatedAt": "2022-01-13T04:14:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yvQCJ",
          "commit": {
            "abbreviatedOid": "3ce74b0"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-13T04:50:29Z",
          "updatedAt": "2022-01-13T04:50:29Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Thanks Willy, I've added a sentence.",
              "createdAt": "2022-01-13T04:50:29Z",
              "updatedAt": "2022-01-13T04:50:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84yv9nv",
          "commit": {
            "abbreviatedOid": "3ce74b0"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2022-01-13T09:10:57Z",
          "updatedAt": "2022-01-13T09:10:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1018,
      "id": "PR_kwDOAHsHi84xXIHn",
      "title": "'all field blocks' was a little too final",
      "url": "https://github.com/httpwg/http2-spec/pull/1018",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-21T03:50:12Z",
      "updatedAt": "2022-01-21T06:42:18Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "a8e681da529d6675af3a50643091480f66f47fda",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "hpack-for-connection",
      "headRefOid": "a56bab3fd5414ec6e7193863f5954f2410ef6d03",
      "closedAt": "2022-01-21T06:42:18Z",
      "mergedAt": "2022-01-21T06:42:18Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a0a5cf934eb63a15e995d62ea12e5e2271031b37"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84zNMlj",
          "commit": {
            "abbreviatedOid": "a56bab3"
          },
          "author": "mnot",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-21T04:24:31Z",
          "updatedAt": "2022-01-21T04:24:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1019,
      "id": "PR_kwDOAHsHi84xd1bJ",
      "title": "A few small edits",
      "url": "https://github.com/httpwg/http2-spec/pull/1019",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2022-01-24T01:42:55Z",
      "updatedAt": "2022-01-24T09:13:20Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "a0a5cf934eb63a15e995d62ea12e5e2271031b37",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "willy-editorial",
      "headRefOid": "f4fefeb28b06e77180dafc3c5f2d904aeab6a4e4",
      "closedAt": "2022-01-24T09:13:20Z",
      "mergedAt": "2022-01-24T09:13:20Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "b812e778e4b734459851b54c6bef1a05692bbcfd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi84zSORr",
          "commit": {
            "abbreviatedOid": "928eacc"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-24T01:44:02Z",
          "updatedAt": "2022-01-24T01:44:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I just realized that this isn't 100% correct.  If the endpoint sends trailers, END_STREAM needs to be attached to the HEADERS frame.",
              "createdAt": "2022-01-24T01:44:03Z",
              "updatedAt": "2022-01-24T01:44:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi84zTKS1",
          "commit": {
            "abbreviatedOid": "f4fefeb"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2022-01-24T09:13:16Z",
          "updatedAt": "2022-01-24T09:13:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1020,
      "id": "PR_kwDOAHsHi84yCbxa",
      "title": "Address IANA note",
      "url": "https://github.com/httpwg/http2-spec/pull/1020",
      "state": "CLOSED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Standard is not a status a header field can have, it turns out.\r\n\r\nThere isn't necessarily time in the process to make this change, but as a just-in-case measure I opened this. IANA has correctly updated the assignment anyway.",
      "createdAt": "2022-02-03T16:41:59Z",
      "updatedAt": "2022-02-04T20:39:17Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "46f416f5a4dafd77e6febabbe7b6b073ee8f01f4",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-iana-feedback",
      "headRefOid": "820a2dc10c50d9970234bb9e849cb99a46e1b25f",
      "closedAt": "2022-02-04T20:39:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "No longer necessary, favoured #1021.",
          "createdAt": "2022-02-04T20:39:17Z",
          "updatedAt": "2022-02-04T20:39:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi840AhSp",
          "commit": {
            "abbreviatedOid": "820a2dc"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-04T00:14:18Z",
          "updatedAt": "2022-02-04T00:14:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1021,
      "id": "PR_kwDOAHsHi84yDh_M",
      "title": "HTTP2-Settings status is obsoleted, not standard",
      "url": "https://github.com/httpwg/http2-spec/pull/1021",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on comments from IANA",
      "createdAt": "2022-02-03T23:14:50Z",
      "updatedAt": "2022-03-22T12:42:16Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "46f416f5a4dafd77e6febabbe7b6b073ee8f01f4",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "h2-settings-obsolete",
      "headRefOid": "22cdaf40774d3d7d89003bfff808c8830e3c4ffc",
      "closedAt": "2022-02-04T20:37:33Z",
      "mergedAt": "2022-02-04T20:37:33Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "bb0e5efbfa43955e038d62cf1041107e6b0951f6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi840EV-K",
          "commit": {
            "abbreviatedOid": "22cdaf4"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-04T20:37:27Z",
          "updatedAt": "2022-02-04T20:37:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1022,
      "id": "PR_kwDOAHsHi84y9StO",
      "title": "Pad hexadecimal literals to even digits",
      "url": "https://github.com/httpwg/http2-spec/pull/1022",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "We decided to do this for QUIC and it does improve readability and\r\nconsistency.\r\n\r\nI did this manually, rather than trying to be clever with regexs.  I'd\r\nappreciate a second pair of eyes.\r\n\r\nI searched for `0x[0-9a-f](?:[0-9a-f]{2})*[^0-9a-f]` and found nothing;\r\nsame for `0x[0-9a-f]*[A-F][0-9a-f]*` (in case we had stray uppercase\r\nstrings).",
      "createdAt": "2022-02-16T23:42:12Z",
      "updatedAt": "2022-02-17T23:16:54Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "bb0e5efbfa43955e038d62cf1041107e6b0951f6",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "0x0-pad",
      "headRefOid": "1a4b7281a0f8942cac7df8136c3cd9fe419d8570",
      "closedAt": "2022-02-17T23:16:51Z",
      "mergedAt": "2022-02-17T23:16:51Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "84d1e4caf885ddd3f980223e1b7b224ab43884f0"
      },
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I remember where I tripped up with the regex when we did it for QUIC, so I could reconstruct it pretty quickly. I think it was something along the lines of `0x[0-9a-fA-F]([0-9a-fA-F]{2})*[^0-9a-fA-F]`.\r\n\r\nIf that doesn't work, I'll try to reconstruct in the morning.",
          "createdAt": "2022-02-17T00:06:01Z",
          "updatedAt": "2022-02-17T00:06:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi840yJFR",
          "commit": {
            "abbreviatedOid": "1a4b728"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-02-17T07:59:04Z",
          "updatedAt": "2022-02-17T07:59:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOAHsHi8400WOM",
          "commit": {
            "abbreviatedOid": "1a4b728"
          },
          "author": "MikeBishop",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Double-checked with a regex, and I don't find any missing either.",
          "createdAt": "2022-02-17T15:28:24Z",
          "updatedAt": "2022-02-17T15:28:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1024,
      "id": "PR_kwDOAHsHi840FUcF",
      "title": "Get rid of XML line noise",
      "url": "https://github.com/httpwg/http2-spec/pull/1024",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "None of this stuff is used, but it causes some XML processors to go looking in places they shouldn't.",
      "createdAt": "2022-03-08T04:50:23Z",
      "updatedAt": "2022-03-08T12:09:12Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "84d1e4caf885ddd3f980223e1b7b224ab43884f0",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "xml-noise",
      "headRefOid": "0b1d485ef624c5cec8f9384bc9567a52b5f412dc",
      "closedAt": "2022-03-08T12:09:12Z",
      "mergedAt": "2022-03-08T12:09:12Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "dcf642d78e42a3d0087360bc875052a186c1b2b2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi8410Zxp",
          "commit": {
            "abbreviatedOid": "0b1d485"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-08T12:09:08Z",
          "updatedAt": "2022-03-08T12:09:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1025,
      "id": "PR_kwDOAHsHi840Gha_",
      "title": "Clean up minor typo",
      "url": "https://github.com/httpwg/http2-spec/pull/1025",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix up a typo reported by @Dev1an",
      "createdAt": "2022-03-08T12:13:24Z",
      "updatedAt": "2022-03-09T00:34:30Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "dcf642d78e42a3d0087360bc875052a186c1b2b2",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-fixup-typo",
      "headRefOid": "5d28857de5ceb7a3884c0b7478db1ec296a04f77",
      "closedAt": "2022-03-09T00:34:30Z",
      "mergedAt": "2022-03-09T00:34:30Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d1089dd3fb6592d6019979cd023384cc695f269f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 1026,
      "id": "PR_kwDOAHsHi840JHUj",
      "title": "Use displayreference for HTTP specs",
      "url": "https://github.com/httpwg/http2-spec/pull/1026",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2022-03-09T00:34:16Z",
      "updatedAt": "2022-03-09T07:34:29Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "dcf642d78e42a3d0087360bc875052a186c1b2b2",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "display-refs",
      "headRefOid": "031a76ee00560c83f59eef3973e306645bf0f088",
      "closedAt": "2022-03-09T07:34:29Z",
      "mergedAt": "2022-03-09T07:34:29Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "0054de14595adb394574a77684a2cd3db23ecd27"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi8414VWW",
          "commit": {
            "abbreviatedOid": "031a76e"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-09T07:34:25Z",
          "updatedAt": "2022-03-09T07:34:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1073,
      "id": "PR_kwDOAHsHi840zjxV",
      "title": "of HTTP",
      "url": "https://github.com/httpwg/http2-spec/pull/1073",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "auth48"
      ],
      "body": "Not \"of the HTTP protocol\".\r\n\r\nCloses #1028.",
      "createdAt": "2022-03-22T11:29:42Z",
      "updatedAt": "2022-03-22T12:46:58Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "http-protocol-protocol",
      "headRefOid": "3128afb91958715f934a4940c32c1cc1aa429bb5",
      "closedAt": "2022-03-22T12:46:57Z",
      "mergedAt": "2022-03-22T12:46:57Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "15cd0ca940b0669ed5672d8850aa80095c3947da"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qubS",
          "commit": {
            "abbreviatedOid": "3128afb"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T12:46:47Z",
          "updatedAt": "2022-03-22T12:46:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1074,
      "id": "PR_kwDOAHsHi840zlBa",
      "title": "Fix list construction for frame size error",
      "url": "https://github.com/httpwg/http2-spec/pull/1074",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1030.",
      "createdAt": "2022-03-22T11:34:58Z",
      "updatedAt": "2022-03-22T12:50:06Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "frame-size-error",
      "headRefOid": "72c549884a28ac15e76272561a4e9a363959b98b",
      "closedAt": "2022-03-22T12:50:06Z",
      "mergedAt": "2022-03-22T12:50:05Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "6200a1388465fe1f5fbdf07601407f38598ed047"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qvc1",
          "commit": {
            "abbreviatedOid": "72c5498"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2022-03-22T12:50:00Z",
          "updatedAt": "2022-03-22T12:50:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1075,
      "id": "PR_kwDOAHsHi840zll_",
      "title": "Accept rewording of sentence",
      "url": "https://github.com/httpwg/http2-spec/pull/1075",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1031.",
      "createdAt": "2022-03-22T11:37:32Z",
      "updatedAt": "2022-03-22T12:50:48Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "rfced-5",
      "headRefOid": "4bc9016fee6c7d4f37362f6850841d348ba3d7e8",
      "closedAt": "2022-03-22T12:50:48Z",
      "mergedAt": "2022-03-22T12:50:47Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "4cf6a139350e5c3990fd771fe07fb0f028fe71ca"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qvqK",
          "commit": {
            "abbreviatedOid": "4bc9016"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T12:50:40Z",
          "updatedAt": "2022-03-22T12:50:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1076,
      "id": "PR_kwDOAHsHi840zmW8",
      "title": "bandwidth * delay product",
      "url": "https://github.com/httpwg/http2-spec/pull/1076",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This looks terrible, but it's the form that the RFC we cite uses (also,\r\nRFC 1323).\r\n\r\nCloses #1032.",
      "createdAt": "2022-03-22T11:41:06Z",
      "updatedAt": "2022-03-22T12:53:12Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "bandwidth-delay",
      "headRefOid": "d61e3bbd59bf13e0e99682b026bfcbb3fdb857a9",
      "closedAt": "2022-03-22T12:53:12Z",
      "mergedAt": "2022-03-22T12:53:12Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "6281a676599c0f92a874b1a72cb15fcdbf6a6d61"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qv5I",
          "commit": {
            "abbreviatedOid": "d61e3bb"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, I hate it.",
          "createdAt": "2022-03-22T12:51:23Z",
          "updatedAt": "2022-03-22T12:51:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1077,
      "id": "PR_kwDOAHsHi840zmox",
      "title": "Flow-Control Performance",
      "url": "https://github.com/httpwg/http2-spec/pull/1077",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1033.",
      "createdAt": "2022-03-22T11:42:26Z",
      "updatedAt": "2022-03-22T12:54:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "fc-perf-title",
      "headRefOid": "90372b779cbafe9e01882525938a43a7a9876f60",
      "closedAt": "2022-03-22T12:54:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved by #1076.",
          "createdAt": "2022-03-22T12:54:38Z",
          "updatedAt": "2022-03-22T12:54:38Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qwwD",
          "commit": {
            "abbreviatedOid": "90372b7"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T12:53:28Z",
          "updatedAt": "2022-03-22T12:53:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1078,
      "id": "PR_kwDOAHsHi840zm_Y",
      "title": "\"as\" means \"because\"",
      "url": "https://github.com/httpwg/http2-spec/pull/1078",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1034.",
      "createdAt": "2022-03-22T11:44:07Z",
      "updatedAt": "2022-03-22T12:55:24Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "trailers-as",
      "headRefOid": "76ddbdd1351b2876561f7231e659e4186466a4c1",
      "closedAt": "2022-03-22T12:55:24Z",
      "mergedAt": "2022-03-22T12:55:23Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "d240ac718105ff6d4a1e4e1004e56de68abf65ea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qxYw",
          "commit": {
            "abbreviatedOid": "76ddbdd"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T12:55:19Z",
          "updatedAt": "2022-03-22T12:55:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1079,
      "id": "PR_kwDOAHsHi840znp7",
      "title": "Reword SETTINGS_ENABLE_PUSH",
      "url": "https://github.com/httpwg/http2-spec/pull/1079",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1035.",
      "createdAt": "2022-03-22T11:47:13Z",
      "updatedAt": "2022-03-22T12:55:59Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "settings-enable-push",
      "headRefOid": "2cb00ec9cd712cfddd5c5d7b38e8d9b4637a57de",
      "closedAt": "2022-03-22T12:55:58Z",
      "mergedAt": "2022-03-22T12:55:58Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "46a76e8d4871970723545534a3db2b06d94b3004"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qxme",
          "commit": {
            "abbreviatedOid": "2cb00ec"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T12:55:54Z",
          "updatedAt": "2022-03-22T12:55:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1080,
      "id": "PR_kwDOAHsHi840zoDR",
      "title": "Remove redundant Reserved field description from PUSH_PROMISE",
      "url": "https://github.com/httpwg/http2-spec/pull/1080",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1036.",
      "createdAt": "2022-03-22T11:49:06Z",
      "updatedAt": "2022-03-22T12:56:14Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "remove-redundant-reserved",
      "headRefOid": "808a93d54117387449688f5e3ee0eaf59a990501",
      "closedAt": "2022-03-22T12:56:14Z",
      "mergedAt": "2022-03-22T12:56:13Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "4cafaafc4546b1014d5a20f7d2b7be2384ddf42f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qxrs",
          "commit": {
            "abbreviatedOid": "808a93d"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T12:56:09Z",
          "updatedAt": "2022-03-22T12:56:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1081,
      "id": "PR_kwDOAHsHi840zonE",
      "title": "PUSH_PROMISE contains request control data and a header section",
      "url": "https://github.com/httpwg/http2-spec/pull/1081",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1037.",
      "createdAt": "2022-03-22T11:51:48Z",
      "updatedAt": "2022-03-22T13:06:33Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "containing-control-data",
      "headRefOid": "0dcec13e849232cbaa79b8888bb084a07219cbe3",
      "closedAt": "2022-03-22T13:06:30Z",
      "mergedAt": "2022-03-22T13:06:30Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "506530b65be13afb0ef7a4296f41b5217bc0a9cb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qyOE",
          "commit": {
            "abbreviatedOid": "cf86317"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T12:57:25Z",
          "updatedAt": "2022-03-22T12:57:28Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n            data and a header section.\r\n```\r\n\r\nPer your proposal in #1037.",
              "createdAt": "2022-03-22T12:57:25Z",
              "updatedAt": "2022-03-22T12:57:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1082,
      "id": "PR_kwDOAHsHi840zpE0",
      "title": "GOAWAY is what is sent here",
      "url": "https://github.com/httpwg/http2-spec/pull/1082",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1038.",
      "createdAt": "2022-03-22T11:53:59Z",
      "updatedAt": "2022-03-22T12:58:09Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "goaway-sent",
      "headRefOid": "743c4d6836b4c121667c80c9b3ece1b1f322bb56",
      "closedAt": "2022-03-22T12:58:09Z",
      "mergedAt": "2022-03-22T12:58:09Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "0a9e85fc670c4eb5453058a2707e36a5347cd026"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qydH",
          "commit": {
            "abbreviatedOid": "743c4d6"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T12:58:05Z",
          "updatedAt": "2022-03-22T12:58:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1083,
      "id": "PR_kwDOAHsHi840zpeT",
      "title": "cookies using ; prevents use of multiple field lines",
      "url": "https://github.com/httpwg/http2-spec/pull/1083",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1039.",
      "createdAt": "2022-03-22T11:55:43Z",
      "updatedAt": "2022-03-22T12:58:53Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "cookie-comma",
      "headRefOid": "19b15b77e3d78605af81c47276185f308948d9d5",
      "closedAt": "2022-03-22T12:58:53Z",
      "mergedAt": "2022-03-22T12:58:53Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "acb3a7d30b0310eb9dfd2fa1b74c5c6fd3d1ea13"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qytg",
          "commit": {
            "abbreviatedOid": "19b15b7"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T12:58:49Z",
          "updatedAt": "2022-03-22T12:58:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1084,
      "id": "PR_kwDOAHsHi840zqYr",
      "title": "Quote pseudo field names",
      "url": "https://github.com/httpwg/http2-spec/pull/1084",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I had to add `<tt>` to one use of :authority.\r\n\r\nCloses #1040.",
      "createdAt": "2022-03-22T11:59:41Z",
      "updatedAt": "2022-03-22T13:00:10Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "quote-pseudo",
      "headRefOid": "a1337a4549d28f9b1e3cc6f57856e6b2b5ef242b",
      "closedAt": "2022-03-22T13:00:10Z",
      "mergedAt": "2022-03-22T13:00:10Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "143388e7b76a0c2e08e43021d6878b648962db54"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qzYH",
          "commit": {
            "abbreviatedOid": "a1337a4"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:00:05Z",
          "updatedAt": "2022-03-22T13:00:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1085,
      "id": "PR_kwDOAHsHi840zsRZ",
      "title": "Use quotes for scheme names",
      "url": "https://github.com/httpwg/http2-spec/pull/1085",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Also, use `<tt>`.\r\n\r\nCloses #1041.",
      "createdAt": "2022-03-22T12:08:00Z",
      "updatedAt": "2022-03-22T13:06:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0f3ba259e81bc8bb915d0da5ec27dda5abd08c4d",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "quote-scheme",
      "headRefOid": "a51758eef5daa438f0477e7848862d30ee69b54b",
      "closedAt": "2022-03-22T13:06:38Z",
      "mergedAt": "2022-03-22T13:06:38Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "81898486468fa04ae4af7115147ddf0e8d7a5e6d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q01k",
          "commit": {
            "abbreviatedOid": "123727a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:04:23Z",
          "updatedAt": "2022-03-22T13:04:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1086,
      "id": "PR_kwDOAHsHi840zsp4",
      "title": "Let's cite both",
      "url": "https://github.com/httpwg/http2-spec/pull/1086",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1042.",
      "createdAt": "2022-03-22T12:09:46Z",
      "updatedAt": "2022-03-22T13:00:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "authority-citation",
      "headRefOid": "9d4a64bfb8a8bffbb1175881224ec0fd914d3710",
      "closedAt": "2022-03-22T13:00:39Z",
      "mergedAt": "2022-03-22T13:00:38Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "daabd112fe0e64927bbe0520a8bb3b05ada9af99"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qzi3",
          "commit": {
            "abbreviatedOid": "9d4a64b"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:00:35Z",
          "updatedAt": "2022-03-22T13:00:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1087,
      "id": "PR_kwDOAHsHi840zt6n",
      "title": "Rephrase Host/:authority difference requirement",
      "url": "https://github.com/httpwg/http2-spec/pull/1087",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Just an attempt at a better/clearer wording\r\n\r\nCloses #1043.",
      "createdAt": "2022-03-22T12:15:11Z",
      "updatedAt": "2022-03-22T13:02:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "daabd112fe0e64927bbe0520a8bb3b05ada9af99",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "different-entity",
      "headRefOid": "aa6062d3d618e7aef2fd364a6255f4ee634f8342",
      "closedAt": "2022-03-22T13:02:57Z",
      "mergedAt": "2022-03-22T13:02:57Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "143f7e4d8353b171501c4d671f94247211dcaf8d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842qz4S",
          "commit": {
            "abbreviatedOid": "243788a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:01:35Z",
          "updatedAt": "2022-03-22T13:01:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1088,
      "id": "PR_kwDOAHsHi840zufB",
      "title": "Add a missing \"that\"",
      "url": "https://github.com/httpwg/http2-spec/pull/1088",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "CLoses #1044.",
      "createdAt": "2022-03-22T12:17:37Z",
      "updatedAt": "2022-03-22T13:03:33Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "as-that-defined",
      "headRefOid": "817403a4b123c96b26db874ae610dddb6706316b",
      "closedAt": "2022-03-22T13:03:32Z",
      "mergedAt": "2022-03-22T13:03:32Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "0f3ba259e81bc8bb915d0da5ec27dda5abd08c4d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q0hp",
          "commit": {
            "abbreviatedOid": "817403a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:03:28Z",
          "updatedAt": "2022-03-22T13:03:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1089,
      "id": "PR_kwDOAHsHi840zvLl",
      "title": "\"as\" means \"because\" here too",
      "url": "https://github.com/httpwg/http2-spec/pull/1089",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1046.",
      "createdAt": "2022-03-22T12:20:34Z",
      "updatedAt": "2022-03-22T13:07:14Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "as-because",
      "headRefOid": "e76baaffed96f9d52200590d60805b4f899fc06a",
      "closedAt": "2022-03-22T13:07:14Z",
      "mergedAt": "2022-03-22T13:07:13Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "0577a017854b51686747899bf8e520a93419da0f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q12l",
          "commit": {
            "abbreviatedOid": "e76baaf"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:07:02Z",
          "updatedAt": "2022-03-22T13:07:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1090,
      "id": "PR_kwDOAHsHi840zv9T",
      "title": "and-and-and to and-and-with",
      "url": "https://github.com/httpwg/http2-spec/pull/1090",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is awkward, but this is better.\r\n\r\nCloses #1057.",
      "createdAt": "2022-03-22T12:23:50Z",
      "updatedAt": "2022-03-22T13:08:57Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "with-message-content",
      "headRefOid": "fc32aaeeaed853e45f95764dac3f67a416c68c38",
      "closedAt": "2022-03-22T13:08:57Z",
      "mergedAt": "2022-03-22T13:08:57Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "1d64fb5a8c41ad256594e7785c39fb6e5600e36c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q2f4",
          "commit": {
            "abbreviatedOid": "fc32aae"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:08:52Z",
          "updatedAt": "2022-03-22T13:08:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1091,
      "id": "PR_kwDOAHsHi840zwQU",
      "title": "Remove SNI abbreviation",
      "url": "https://github.com/httpwg/http2-spec/pull/1091",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1058.",
      "createdAt": "2022-03-22T12:25:06Z",
      "updatedAt": "2022-03-22T13:08:26Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "remove-sni-abbr",
      "headRefOid": "585172e1827b460856e04a82b04c012d187554c4",
      "closedAt": "2022-03-22T13:08:26Z",
      "mergedAt": "2022-03-22T13:08:26Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "e6aba4c06e0f053801483f3f13bc54f600b452ed"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q2L6",
          "commit": {
            "abbreviatedOid": "585172e"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:07:58Z",
          "updatedAt": "2022-03-22T13:07:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1092,
      "id": "PR_kwDOAHsHi840zwy1",
      "title": "Reword the reasoning in TLS requirements.",
      "url": "https://github.com/httpwg/http2-spec/pull/1092",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1059.",
      "createdAt": "2022-03-22T12:27:22Z",
      "updatedAt": "2022-03-22T13:09:40Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "tls-req-reword",
      "headRefOid": "c91be8ad3a3e4f5ec8ef9d4e82575a9eea9b6a28",
      "closedAt": "2022-03-22T13:09:39Z",
      "mergedAt": "2022-03-22T13:09:39Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "168234379dccc9895814e909787a333ef201f3ee"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q2vD",
          "commit": {
            "abbreviatedOid": "c91be8a"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:09:34Z",
          "updatedAt": "2022-03-22T13:09:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1093,
      "id": "PR_kwDOAHsHi840zxyB",
      "title": "Use `<tt>` for content-length",
      "url": "https://github.com/httpwg/http2-spec/pull/1093",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1060.",
      "createdAt": "2022-03-22T12:29:08Z",
      "updatedAt": "2022-03-22T13:14:54Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "content-length-tt",
      "headRefOid": "8ac6ee26c232a13aa7f31d6b3721e9e8819712ef",
      "closedAt": "2022-03-22T13:14:54Z",
      "mergedAt": "2022-03-22T13:14:53Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "abd12460c1e143c6d06335b9138c005da9447cf4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q40A",
          "commit": {
            "abbreviatedOid": "8ac6ee2"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:14:49Z",
          "updatedAt": "2022-03-22T13:14:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1094,
      "id": "PR_kwDOAHsHi840zygP",
      "title": "Simplify greater state commitment sentence",
      "url": "https://github.com/httpwg/http2-spec/pull/1094",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1061.",
      "createdAt": "2022-03-22T12:32:05Z",
      "updatedAt": "2022-03-22T13:15:32Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "using-depends",
      "headRefOid": "eb7992ccd92f91cd40022af917de9cd909119c0d",
      "closedAt": "2022-03-22T13:15:31Z",
      "mergedAt": "2022-03-22T13:15:31Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "d0ec89ac7820c4bdf0a6ebe3a8c077b1c4307a37"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q5Cl",
          "commit": {
            "abbreviatedOid": "eb7992c"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:15:27Z",
          "updatedAt": "2022-03-22T13:15:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1095,
      "id": "PR_kwDOAHsHi840zzYO",
      "title": "Reword waste statement",
      "url": "https://github.com/httpwg/http2-spec/pull/1095",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1062.",
      "createdAt": "2022-03-22T12:35:46Z",
      "updatedAt": "2022-03-22T13:16:00Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "offers-waste",
      "headRefOid": "cab3a90cc9b863b271735ef44ae6b195c3eddabc",
      "closedAt": "2022-03-22T13:16:00Z",
      "mergedAt": "2022-03-22T13:15:59Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "e389f837c8e68640acd33bc053c3018ef00913c2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q5P5",
          "commit": {
            "abbreviatedOid": "cab3a90"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:15:55Z",
          "updatedAt": "2022-03-22T13:15:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1096,
      "id": "PR_kwDOAHsHi840zz0V",
      "title": "Avoid \"in exemplar\" and use words",
      "url": "https://github.com/httpwg/http2-spec/pull/1096",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1063.",
      "createdAt": "2022-03-22T12:37:37Z",
      "updatedAt": "2022-03-22T13:17:25Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "eg-ie",
      "headRefOid": "51ebfe1b31fb0f971bdaedbd1e7e2bc754a53c1b",
      "closedAt": "2022-03-22T13:17:25Z",
      "mergedAt": "2022-03-22T13:17:24Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "ad720939329f497069c18a39b675cf5b8b1e6b77"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q55Y",
          "commit": {
            "abbreviatedOid": "51ebfe1"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:17:19Z",
          "updatedAt": "2022-03-22T13:17:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1097,
      "id": "PR_kwDOAHsHi840z0QX",
      "title": "Values in the first; a value in the second",
      "url": "https://github.com/httpwg/http2-spec/pull/1097",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Values is correct in the first case, but the second should be \"a value\"\r\nby which it means \"any value\".\r\n\r\nCloses #1064.",
      "createdAt": "2022-03-22T12:39:27Z",
      "updatedAt": "2022-03-22T13:19:56Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "value-values",
      "headRefOid": "d8379e7841125a0c4b9202e0c8c437d1eb810db5",
      "closedAt": "2022-03-22T13:19:56Z",
      "mergedAt": "2022-03-22T13:19:56Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "1adc8e42e2b844bf57fb07e7a8fc790dfdaa5220"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q63N",
          "commit": {
            "abbreviatedOid": "d8379e7"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:19:52Z",
          "updatedAt": "2022-03-22T13:19:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1098,
      "id": "PR_kwDOAHsHi840z2F5",
      "title": "Remap priority label",
      "url": "https://github.com/httpwg/http2-spec/pull/1098",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1067.",
      "createdAt": "2022-03-22T12:46:52Z",
      "updatedAt": "2022-03-22T13:22:55Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0054de14595adb394574a77684a2cd3db23ecd27",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "priority-label",
      "headRefOid": "c2e7e350d791cc9aa58eee0629fcf5290167fe94",
      "closedAt": "2022-03-22T13:22:55Z",
      "mergedAt": "2022-03-22T13:22:55Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "b27a4d2efc7a7a35266fd998ba9dff0af71a969c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q8H0",
          "commit": {
            "abbreviatedOid": "c2e7e35"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:22:51Z",
          "updatedAt": "2022-03-22T13:22:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1099,
      "id": "PR_kwDOAHsHi840z2vy",
      "title": "Simpler signaling",
      "url": "https://github.com/httpwg/http2-spec/pull/1099",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1069.",
      "createdAt": "2022-03-22T12:49:36Z",
      "updatedAt": "2022-03-22T13:24:27Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "15cd0ca940b0669ed5672d8850aa80095c3947da",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "successor",
      "headRefOid": "a3639186976d5ffe2ffa4186bb6c03e13ce54807",
      "closedAt": "2022-03-22T13:24:27Z",
      "mergedAt": "2022-03-22T13:24:27Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "cf6382d36cbd6d113926d98e9f919aaf3f601d35"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q8s4",
          "commit": {
            "abbreviatedOid": "a363918"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-22T13:24:20Z",
          "updatedAt": "2022-03-22T13:24:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1100,
      "id": "PR_kwDOAHsHi840z62v",
      "title": "A tranche of consistency fixes",
      "url": "https://github.com/httpwg/http2-spec/pull/1100",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1072.",
      "createdAt": "2022-03-22T13:04:40Z",
      "updatedAt": "2022-03-22T16:37:21Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "0f3ba259e81bc8bb915d0da5ec27dda5abd08c4d",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "consistency",
      "headRefOid": "a8e97411219ad6d39c52d971617fe830859dd8f3",
      "closedAt": "2022-03-22T16:37:21Z",
      "mergedAt": "2022-03-22T16:37:21Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "1084dcfb4c6f63ee2f410e33c4983260cc740ab2"
      },
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "On line 3370 we say: \r\n\r\n> because \"reserved\" streams do not count toward\r\n\r\nI think this quoting is inconsistent: we normally say either 'reserved streams' or 'streams in the \"reserved\" states'. ",
          "createdAt": "2022-03-22T14:04:39Z",
          "updatedAt": "2022-03-22T14:04:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Good, fixed both.",
          "createdAt": "2022-03-22T14:46:22Z",
          "updatedAt": "2022-03-22T14:46:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842q-o0",
          "commit": {
            "abbreviatedOid": "9c853ee"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-22T13:28:42Z",
          "updatedAt": "2022-03-22T14:05:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Nit: we may want to clarify this sentence by adding the word \"Receiving\" to the start and tweaking the grammar, so that it reads \"Receiving `PUSH_PROMISE` frames also causes the promised stream to become \"reserved (remote)\"",
              "createdAt": "2022-03-22T13:28:42Z",
              "updatedAt": "2022-03-22T14:05:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi842sJcI",
          "commit": {
            "abbreviatedOid": "a8e9741"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Excellent",
          "createdAt": "2022-03-22T16:37:14Z",
          "updatedAt": "2022-03-22T16:37:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 1101,
      "id": "PR_kwDOAHsHi8401EI4",
      "title": "Apply textual changes from RFC Editors",
      "url": "https://github.com/httpwg/http2-spec/pull/1101",
      "state": "MERGED",
      "author": "Lukasa",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR contains textual changes made by the RFC editors, along with a\r\ncouple of XML changes where they were uncontroversial or necessary for\r\nthe text. I left out any change the RFC editors made that conflicted\r\nsubstatially with changes we made in response to their comments.",
      "createdAt": "2022-03-22T17:38:34Z",
      "updatedAt": "2022-03-23T06:34:39Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "1084dcfb4c6f63ee2f410e33c4983260cc740ab2",
      "headRepository": "Lukasa/http2-spec",
      "headRefName": "cb-auth48",
      "headRefOid": "fe49105826fb53bf4779c51d1788ed662c4a69a1",
      "closedAt": "2022-03-23T06:34:30Z",
      "mergedAt": "2022-03-23T06:34:30Z",
      "mergedBy": "Lukasa",
      "mergeCommit": {
        "oid": "946c878c7cf7705f88e8504c527b0e985df70efb"
      },
      "comments": [
        {
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggestions applied",
          "createdAt": "2022-03-23T06:33:42Z",
          "updatedAt": "2022-03-23T06:33:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi842uEDE",
          "commit": {
            "abbreviatedOid": "d114d60"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Just three things (two to essentially revert).",
          "createdAt": "2022-03-23T00:39:52Z",
          "updatedAt": "2022-03-23T00:47:26Z",
          "comments": [
            {
              "originalPosition": 757,
              "body": "```suggestion\r\n          Use of TLS 1.3 was defined based on <xref target=\"RFC8740\"/>, which this document obsoletes.\r\n```",
              "createdAt": "2022-03-23T00:44:25Z",
              "updatedAt": "2022-03-23T00:47:26Z"
            },
            {
              "originalPosition": 399,
              "body": "I think that the original is more consistent with other text.  Though s/the/a/.\r\n\r\n```suggestion\r\n          This means that a receiver could receive a WINDOW_UPDATE frame on a stream in a \"half-closed (remote)\"\r\n          or \"closed\" state.  A receiver MUST NOT treat this as an error (see <xref target=\"StreamStates\"/>).\r\n```",
              "createdAt": "2022-03-23T00:46:13Z",
              "updatedAt": "2022-03-23T00:47:26Z"
            },
            {
              "originalPosition": 408,
              "body": "I think we should revert this too.  \"whose\" implies unnecessary anthropomorphism, which is worth avoiding.\r\n\r\n```suggestion\r\n          with a Stream Identifier field of 0x00, the recipient MUST respond with a <xref target=\"ConnectionErrorHandler\">connection error</xref> of type PROTOCOL_ERROR.\r\n```",
              "createdAt": "2022-03-23T00:47:02Z",
              "updatedAt": "2022-03-23T00:47:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1102,
      "id": "PR_kwDOAHsHi841IQ1U",
      "title": "Run the tool I used to clean RFC 9000 on this one",
      "url": "https://github.com/httpwg/http2-spec/pull/1102",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I had to remove the <bcp14> tags from the BCP 14 text, but the tool\r\nrestored them.\r\n\r\nOther than that, there is no difference in output in the text files that\r\nthis generates, so I'm going to say that this was successful.\r\n\r\nThe source has a ton of whitespace changes, but that seems to be all.",
      "createdAt": "2022-03-28T05:41:16Z",
      "updatedAt": "2022-03-29T05:32:14Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "946c878c7cf7705f88e8504c527b0e985df70efb",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "xml-clean",
      "headRefOid": "1e61c51700c02600b41dc1c9f65155ac4d918c96",
      "closedAt": "2022-03-29T05:32:14Z",
      "mergedAt": "2022-03-29T05:32:14Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "1e61c51700c02600b41dc1c9f65155ac4d918c96"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi843Eskq",
          "commit": {
            "abbreviatedOid": "1e61c51"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "One note about the CDATA, this is otherwise fine.",
          "createdAt": "2022-03-29T03:23:50Z",
          "updatedAt": "2022-03-29T03:50:28Z",
          "comments": [
            {
              "originalPosition": 846,
              "body": "These `CDATA` insertions (here and above) are a bit of a surprise. Why are they here?",
              "createdAt": "2022-03-29T03:23:50Z",
              "updatedAt": "2022-03-29T03:50:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOAHsHi843E9eP",
          "commit": {
            "abbreviatedOid": "1e61c51"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-29T05:31:24Z",
          "updatedAt": "2022-03-29T05:31:24Z",
          "comments": [
            {
              "originalPosition": 846,
              "body": "Oh, that's a bug in the script.  Well, not so much a bug as a limitation that comes as a result of `<artwork>` sometimes containing ASCII art and other times containing `<svg>`.  Thanks for catching that, I'll fix it.",
              "createdAt": "2022-03-29T05:31:24Z",
              "updatedAt": "2022-03-29T05:31:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 1103,
      "id": "PR_kwDOAHsHi841IYj_",
      "title": "XML changes",
      "url": "https://github.com/httpwg/http2-spec/pull/1103",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Mostly.\r\n\r\nI didn't remove the width and height attributes from the SVG.  Removing\r\nthese causes the diagram to be stretched to fit, which is not at all\r\ndesirable (especially in the default stylesheet).\r\n\r\nI restored Kazuho's name in the priority doc references and changed it\r\nto use the allocated number of RFC 9218 for that doc.\r\n\r\nI removed entities and used literals for the two &nbsp; instances in the\r\ndocument (these are now &#xa0;).\r\n\r\nI sorted the xi:include elements for references.\r\n\r\nThe file we got from the RFC editor included quoted values for URI\r\nschemes and pseudo-header field names in the form: `<tt>\":scheme\"</tt>`.\r\nThis was not consistently applied.  I've gone with what we had:\r\n`\"<tt>:scheme</tt>\"`.\r\n\r\nThis builds on top of the cleanup in #1102 as I have no interest in dealing with rebases over that change.",
      "createdAt": "2022-03-28T06:22:44Z",
      "updatedAt": "2022-03-30T04:30:26Z",
      "baseRepository": "httpwg/http2-spec",
      "baseRefName": "main",
      "baseRefOid": "946c878c7cf7705f88e8504c527b0e985df70efb",
      "headRepository": "martinthomson/http2v2",
      "headRefName": "xmldiff",
      "headRefOid": "1906b19e800f1e2daa32ef0eacaac35209db9cdf",
      "closedAt": "2022-03-29T05:32:11Z",
      "mergedAt": "2022-03-29T05:32:11Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "4949a0440c34d165406b3ff43cdb6fcaf09c6622"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll merge then fix to avoid problems.",
          "createdAt": "2022-03-29T05:32:08Z",
          "updatedAt": "2022-03-29T05:32:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOAHsHi843Eve7",
          "commit": {
            "abbreviatedOid": "1906b19"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "DISMISSED",
          "body": "One note about the CDATA, this is otherwise fine.",
          "createdAt": "2022-03-29T03:49:51Z",
          "updatedAt": "2022-03-29T03:50:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOAHsHi843EwGL",
          "commit": {
            "abbreviatedOid": "1906b19"
          },
          "author": "Lukasa",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-29T03:54:55Z",
          "updatedAt": "2022-03-29T03:54:55Z",
          "comments": []
        }
      ]
    }
  ]
}